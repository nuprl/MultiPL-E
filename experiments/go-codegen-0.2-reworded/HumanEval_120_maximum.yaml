name: HumanEval_120_maximum
language: go_test.go
prompt: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
  \ a list arr of integers and a positive integer k, return a sorted list \n// of\
  \ length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
  \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4, 4},\
  \ 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1, -2, 1},\
  \ 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the range of\
  \ [1, 1000].\n// 2. The elements in the list will be in the range of [-1000, 1000].\n\
  // 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n"
tests: "func TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
  \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n     {\
  \ actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n \
  \    { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
  \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
  \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8, 0},\
  \ 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
  \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
  \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4}, 2),\
  \ expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2), expected:\
  \ []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243, -400, 0},\
  \ 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    \n}\n", "    \n}\n\n// Given a list arr of integers and a positive\
    \ integer k, return a sorted list \n// of length k with the maximum k numbers\
    \ in arr.\n// Example 1:\n// >>> maximum([], 0)\n// []\n// Example 2:\n// >>>\
    \ maximum([1], 1)\n// []\n// Example 3:\n// >>> maximum([1, 2, 3, 4, 5], 2)\n\
    // [1, 2]\n// Example 4:\n// >>> maximum([1, 2, 3, 4, 5], 3)\n// [1, 2, 3]\n//\
    \ Example 5:\n// >>> maximum([1, 2, 3, 4, 5], 4)\n// [1, 2, 3, 4]\n// Example\
    \ 6:\n// >>> maximum([1, 2, 3, 4, 5], 5)\n// [1, 2, 3, 4, 5]\n// Note:\n// 1.\
    \ The length of the list will be in the range of [1, 1000].\n// 2. The elements\
    \ in the list will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)",
  "    // write your code here\n    if len(arr) == 0 {\n        return arr\n    }\n\
    \    \n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i]\
    \ > max {\n            max = arr[i]\n        }\n    }\n    \n    if k == 1 {\n\
    \        return []int{max}\n    }\n    \n    result := make([]int, k)\n    result[0]\
    \ = max\n    for i := 1; i < k; i++ {\n        if arr[i] > max {\n           \
    \ max = arr[i]\n        }\n        result[i] = max\n    }\n    \n    return result\n\
    }\n", "    \n}\n\n// func maximum(arr []int, k int) []int {\n//     if len(arr)\
    \ == 0 {\n//         return []int{}\n//     }\n//     \n//     if len(arr) ==\
    \ 1 {\n//         return arr\n//     }\n//     \n//     if k == 1 {\n//      \
    \   return arr[0:1]\n//     }\n//     \n//     if k == 2 {\n//         return\
    \ arr[0:2]\n//     }\n//     \n//     if k == 3 {\n//         return arr[0:3]\n\
    //     }\n//     \n//     if k == 4 {\n//         return arr[0:4]\n//     }\n\
    //     \n//     if k == 5 {\n//         return arr[0:5]\n//     }\n//     \n//\
    \     if k == 6 {\n//         return arr[0:6]\n//     }\n//     \n//     if k\
    \ == 7 {\n//         return arr[0:7]\n//     }\n//     \n//     if k == 8 {\n\
    //         return arr[0:8]\n//     }\n//     \n//     if k == 9 {\n//        \
    \ return arr[0:9]\n//     }\n//     \n//     if k == 10 {\n//         return arr[0:10]\n\
    //     }\n//     \n//     if k == 11 {\n//         return arr[0:11]\n//     }\n\
    //     \n//     if k == 12 {\n//         return arr[0:12]\n//     }\n//     \n\
    //     if k == 13 {\n//         return arr[0:13]\n//     }\n//     \n//     if\
    \ k == 14 {\n//         return arr[0:14]\n//     }\n//     \n//     if k == 15\
    \ {\n//         return arr[0:15]\n//     }\n//     \n//     if k == 16 {\n// \
    \        return arr[0:16]\n//     }\n//     \n//     if k == 17 {\n//        \
    \ return arr[0:17]\n//     }\n//     \n//     if k == 18 {\n//         return\
    \ arr[0:18]\n", "    \n}\n", "    \n}\n\n// func maximum(arr []int, k int) []int\
    \ {\n//     if len(arr) == 0 {\n//         return []int{}\n//     }\n//     \n\
    //     if len(arr) == 1 {\n//         return []int{arr[0]}\n//     }\n//     \n\
    //     if k == 1 {\n//         return []int{arr[0]}\n//     }\n//     \n//   \
    \  if k == 2 {\n//         return []int{arr[0], arr[1]}\n//     }\n//     \n//\
    \     if k == 3 {\n//         return []int{arr[0], arr[1], arr[2]}\n//     }\n\
    //     \n//     if k == 4 {\n//         return []int{arr[0], arr[1], arr[2], arr[3]}\n\
    //     }\n//     \n//     if k == 5 {\n//         return []int{arr[0], arr[1],\
    \ arr[2], arr[3], arr[4]}\n//     }\n//     \n//     if k == 6 {\n//         return\
    \ []int{arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]}\n//     }\n//     \n//\
    \     if k == 7 {\n//         return []int{arr[0], arr[1], arr[2], arr[3], arr[4],\
    \ arr[5], arr[6]}\n//     }\n//     \n//     if k == 8 {\n//         return []int{arr[0],\
    \ arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7]}\n//     }\n//     \n\
    //     if k == 9 {\n//         return []int{arr[0], arr[1], arr[2], arr[3], arr[4],\
    \ arr[5], arr[6], arr[7], arr[8]}\n//     }\n//     \n//     if k == 10 {\n//\
    \         return []int{arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6],\
    \ arr[7], arr[8], arr[9]}\n//     }\n", "    \n}\n", "    \n}\n\n// Given a list\
    \ arr of integers and a positive integer k, return a sorted list \n// of length\
    \ k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4,\
    \ 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4,\
    \ 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n\
    // 1. The length of the list will be in the range of [1, 1000].\n// 2. The elements\
    \ in the list will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)",
  "    \n}\n", "    // write your code here\n    if len(arr) == 0 {\n        return\
    \ arr\n    }\n    \n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n \
    \       if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    \n\
    \    if k == 1 {\n        return []int{max}\n    }\n    \n    result := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        result[i] = max\n        for j :=\
    \ 0; j < len(arr); j++ {\n            if arr[j] > max {\n                max =\
    \ arr[j]\n            }\n        }\n    }\n    \n    return result\n}\n", "  \
    \  // write your code here\n    if len(arr) == 0 {\n        return arr\n    }\n\
    \    \n    if k == 1 {\n        return arr\n    }\n    \n    max := arr[0]\n \
    \   maxIndex := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max\
    \ {\n            max = arr[i]\n            maxIndex = i\n        }\n    }\n  \
    \  \n    if k == maxIndex + 1 {\n        return arr\n    }\n    \n    return arr[maxIndex:k]\n\
    }\n", "    \n}\n\n// Given a list arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the list will be in the range of [1,\
    \ 1000].\n// 2. The elements in the list will be in the range of [-1000, 1000].\n\
    // 3. 0 <= k <= len(arr)", "    \n}\n\n// func maximum(arr []int, k int) []int\
    \ {\n//     if len(arr) == 0 {\n//         return []int{}\n//     }\n//     \n\
    //     if k == 1 {\n//         return arr\n//     }\n//     \n//     if arr[0]\
    \ > arr[1] {\n//         arr[0], arr[1] = arr[1], arr[0]\n//     }\n//     \n\
    //     if arr[0] > arr[2] {\n//         arr[0], arr[2] = arr[2], arr[0]\n//  \
    \   }\n//     \n//     if arr[1] > arr[2] {\n//         arr[1], arr[2] = arr[2],\
    \ arr[1]\n//     }\n//     \n//     if arr[0] > arr[1] {\n//         arr[0], arr[1]\
    \ = arr[1], arr[0]\n//     }\n//     \n//     if arr[1] > arr[2] {\n//       \
    \  arr[1], arr[2] = arr[2], arr[1]\n//     }\n//     \n//     if arr[0] > arr[1]\
    \ {\n//         arr[0], arr[1] = arr[1], arr[0]\n//     }\n//     \n//     if\
    \ arr[0] > arr[2] {\n//         arr[0], arr[2] = arr[2], arr[0]\n//     }\n//\
    \     \n//     if arr[1] > arr[2] {\n//         arr[1], arr[2] = arr[2], arr[1]\n\
    //     }\n//     \n//     if arr[0] > arr[1] {\n//         arr[0], arr[1] = arr[1],\
    \ arr[0]\n//     }\n//     \n//     if arr[1] > arr[2] {\n//         arr[1], arr[2]\
    \ = arr[2], arr[1]\n//     }\n//     \n//     if arr[0] > arr[1] {\n//       \
    \  arr[0], arr[1] = arr[1], arr[0]\n//     ", "    \n}\n\n// func maximum(arr\
    \ []int, k int) []int {\n//     if len(arr) == 0 {\n//         return arr\n//\
    \     }\n//     \n//     if k == 1 {\n//         return arr\n//     }\n//    \
    \ \n//     if len(arr) == 1 {\n//         return arr\n//     }\n//     \n//  \
    \   if arr[0] > arr[1] {\n//         arr[0], arr[1] = arr[1], arr[0]\n//     }\n\
    //     \n//     if arr[0] > arr[1] {\n//         arr[0], arr[1] = arr[1], arr[0]\n\
    //     }\n//     \n//     if arr[0] > arr[1] {\n//         arr[0], arr[1] = arr[1],\
    \ arr[0]\n//     }\n//     \n//     if arr[0] > arr[1] {\n//         arr[0], arr[1]\
    \ = arr[1], arr[0]\n//     }\n//     \n//     if arr[0] > arr[1] {\n//       \
    \  arr[0], arr[1] = arr[1], arr[0]\n//     }\n//     \n//     if arr[0] > arr[1]\
    \ {\n//         arr[0], arr[1] = arr[1], arr[0]\n//     }\n//     \n//     if\
    \ arr[0] > arr[1] {\n//         arr[0], arr[1] = arr[1], arr[0]\n//     }\n//\
    \     \n//     if arr[0] > arr[1] {\n//         arr[0], arr[1] = arr[1], arr[0]\n\
    //     }\n//     \n//     if arr[0] > arr[1] {\n//         arr[0], arr[1] = arr[1],\
    \ arr[0]\n//     }\n//     \n//     if arr[0] > arr[1] {\n//         arr[0], arr[1]\
    \ = arr[1], arr[0]\n//     }\n//     \n//     if arr[0] > arr[1] {\n//       \
    \  ", "    \n}\n", "    \n}\n\n// Given a list arr of integers and a positive\
    \ integer k, return a sorted list \n// of length k with the maximum k numbers\
    \ in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example\
    \ 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the list will\
    \ be in the range of [1, 1000].\n// 2. The elements in the list will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)", "    \n}\n", "    // write\
    \ your code here\n    if len(arr) == 0 {\n        return arr\n    }\n    \n  \
    \  if k == 1 {\n        return arr\n    }\n    \n    if k > len(arr) {\n     \
    \   return arr\n    }\n    \n    max := arr[0]\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\
    \    \n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = max\n        max = max - arr[i]\n    }\n    \n    return result\n}\n", " \
    \   \n}\n", "    // write your code here\n    if len(arr) == 0 {\n        return\
    \ arr\n    }\n    \n    if k == 1 {\n        return arr\n    }\n    \n    if k\
    \ > len(arr) {\n        return arr\n    }\n    \n    max := arr[0]\n    for i\
    \ := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n    }\n    \n    result := make([]int, k)\n    for i := 0; i < k;\
    \ i++ {\n        result[i] = max\n        max = max - arr[i]\n    }\n    \n  \
    \  return result\n}\n", "    \n}\n", "    \n}\n", "    \n}\n", "    \n}\n\n//\
    \ Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3,\
    \ -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n//\
    \ [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n\
    // Note:\n// 1. The length of the list will be in the range of [1, 1000].\n//\
    \ 2. The elements in the list will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)", "    \n}\n\n// Given a list arr of integers and a positive\
    \ integer k, return a sorted list \n// of length k with the maximum k numbers\
    \ in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example\
    \ 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the list will\
    \ be in the range of [1, 1000].\n// 2. The elements in the list will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)", "    \n}\n\n// Given a list\
    \ arr of integers and a positive integer k, return a sorted list \n// of length\
    \ k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4,\
    \ 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4,\
    \ 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n\
    // 1. The length of the list will be in the range of [1, 1000].\n// 2. The elements\
    \ in the list will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)",
  "    \n}\n", "    n := len(arr)\n    if k > n {\n        return arr\n    }\n   \
    \ if k == n {\n        return arr\n    }\n    if k == 1 {\n        return arr\n\
    \    }\n    if k == 2 {\n        return arr\n    }\n    if k == 3 {\n        return\
    \ arr\n    }\n    if k == 4 {\n        return arr\n    }\n    if k == 5 {\n  \
    \      return arr\n    }\n    if k == 6 {\n        return arr\n    }\n    if k\
    \ == 7 {\n        return arr\n    }\n    if k == 8 {\n        return arr\n   \
    \ }\n    if k == 9 {\n        return arr\n    }\n    if k == 10 {\n        return\
    \ arr\n    }\n    if k == 11 {\n        return arr\n    }\n    if k == 12 {\n\
    \        return arr\n    }\n    if k == 13 {\n        return arr\n    }\n    if\
    \ k == 14 {\n        return arr\n    }\n    if k == 15 {\n        return arr\n\
    \    }\n    if k == 16 {\n        return arr\n    }\n    if k == 17 {\n      \
    \  return arr\n    }\n    if k == 18 {\n        return arr\n    }\n    if k ==\
    \ 19 {\n        return arr\n    }\n    if k == 20 {\n        return arr\n    }\n\
    \    if k == 21 {\n        return arr\n    }\n    if k == 22 {\n        return\
    \ arr\n    }\n    if k == 23 {\n        return arr\n    }\n    if k == 24 {\n\
    \        return arr\n    }\n    if k == 25 {\n        return arr\n    }\n    if\
    \ k == 26 {\n        return arr\n    }\n    if k == 27 {\n        return arr\n\
    \    }\n    if k == 28 {\n        return arr\n    }\n    if k == 29 {\n      \
    \  return arr\n    }\n    if k == 30 {\n        return arr\n    }\n    if k ==\
    \ 31 {\n        return arr\n    }\n    if k == 32 {\n        return arr\n    }\n\
    \    if k == 33 {\n        return arr\n    }\n    if k == 34 {\n        return\
    \ arr\n    }\n", "    // write your code here\n    if len(arr) == 0 {\n      \
    \  return arr\n    }\n    \n    max := arr[0]\n    for i := 1; i < len(arr); i++\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n \
    \   \n    if k == 1 {\n        return []int{max}\n    }\n    \n    max_index :=\
    \ 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] == max {\n       \
    \     max_index++\n            if max_index == k {\n                return arr[i:i+k]\n\
    \            }\n        }\n    }\n    \n    return arr\n}\n", "    \n}\n", " \
    \   \n}\n", "    \n}\n\n// Given a list arr of integers and a positive integer\
    \ k, return a sorted list \n// of length k with the maximum k numbers in arr.\n\
    // Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n\
    // >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the list will be\
    \ in the range of [1, 1000].\n// 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)", "    \n}\n\n// func maximum(arr\
    \ []int, k int) []int {\n//     if len(arr) == 0 {\n//         return []int{}\n\
    //     }\n//     \n//     if k == 1 {\n//         return arr\n//     }\n//   \
    \  \n//     if k > len(arr) {\n//         return arr\n//     }\n//     \n//  \
    \   var max = arr[0]\n//     var max_index = 0\n//     \n//     for i := 1; i\
    \ < len(arr); i++ {\n//         if arr[i] > max {\n//             max = arr[i]\n\
    //             max_index = i\n//         }\n//     }\n//     \n//     var result\
    \ = make([]int, k)\n//     \n//     for i := 0; i < k; i++ {\n//         result[i]\
    \ = arr[max_index]\n//         max_index = (max_index + 1) % len(arr)\n//    \
    \ }\n//     \n//     return result\n// }\n", "    \n}\n\n// Given a list arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n\
    // [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example\
    \ 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The\
    \ length of the list will be in the range of [1, 1000].\n// 2. The elements in\
    \ the list will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)",
  "    // write your code here\n    if len(arr) == 0 {\n        return arr\n    }\n\
    \    \n    if k == 1 {\n        return arr\n    }\n    \n    if k > len(arr) {\n\
    \        return arr\n    }\n    \n    max := arr[0]\n    \n    for i := 1; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    \n    if k == 2 {\n        return []int{max, max}\n    }\n \
    \   \n    if k == len(arr) {\n        return arr\n    }\n    \n    return []int{max}\n\
    }\n", "    \n}\n\n// Given a list arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the list will be in the range of [1,\
    \ 1000].\n// 2. The elements in the list will be in the range of [-1000, 1000].\n\
    // 3. 0 <= k <= len(arr)", "    \n}\n", "    // write your code here\n    if len(arr)\
    \ == 0 {\n        return arr\n    }\n    \n    max := arr[0]\n    max_index :=\
    \ 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n        \
    \    max = arr[i]\n            max_index = i\n        }\n    }\n    \n    if k\
    \ == 1 {\n        return []int{max}\n    }\n    \n    if max_index == 0 {\n  \
    \      return []int{arr[max_index]}\n    }\n    \n    return []int{arr[max_index],\
    \ arr[0]}\n}\n", "    \n}\n\n// Given a list arr of integers and a positive integer\
    \ k, return a sorted list \n// of length k with the maximum k numbers in arr.\n\
    // Example 1:\n// >>> maximum([], 0)\n// []\n// Example 2:\n// >>> maximum([1,\
    \ 2, 3, 4, 5], 0)\n// []\n// Example 3:\n// >>> maximum([1, 2, 3, 4, 5], 1)\n\
    // [1]\n// Example 4:\n// >>> maximum([1, 2, 3, 4, 5], 2)\n// [1, 2]\n// Example\
    \ 5:\n// >>> maximum([1, 2, 3, 4, 5], 3)\n// [1, 2, 3]\n// Example 6:\n// >>>\
    \ maximum([1, 2, 3, 4, 5], 4)\n// [1, 2, 3, 4]\n// Example 7:\n// >>> maximum([1,\
    \ 2, 3, 4, 5], 5)\n// [1, 2, 3, 4, 5]\n// Note:\n// 1. The length of the list\
    \ will be in the range of [1, 1000].\n// 2. The elements in the list will be in\
    \ the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)", "    \n}\n\n// func\
    \ maximum(arr []int, k int) []int {\n//     if len(arr) == 0 {\n//         return\
    \ []int{}\n//     }\n//     \n//     if len(arr) == 1 {\n//         return arr\n\
    //     }\n//     \n//     if k == 1 {\n//         return arr[0:1]\n//     }\n\
    //     \n//     if k == 2 {\n//         return arr[0:2]\n//     }\n//     \n//\
    \     if k == 3 {\n//         return arr[0:3]\n//     }\n//     \n//     if k\
    \ == 4 {\n//         return arr[0:4]\n//     }\n//     \n//     if k == 5 {\n\
    //         return arr[0:5]\n//     }\n//     \n//     if k == 6 {\n//        \
    \ return arr[0:6]\n//     }\n//     \n//     if k == 7 {\n//         return arr[0:7]\n\
    //     }\n//     \n//     if k == 8 {\n//         return arr[0:8]\n//     }\n\
    //     \n//     if k == 9 {\n//         return arr[0:9]\n//     }\n//     \n//\
    \     if k == 10 {\n//         return arr[0:10]\n//     }\n//     \n//     if\
    \ k == 11 {\n//         return arr[0:11]\n//     }\n//     \n//     if k == 12\
    \ {\n//         return arr[0:12]\n//     }\n//     \n//     if k == 13 {\n// \
    \        return arr[0:13]\n//     }\n//     \n//     if k == 14 {\n//        \
    \ return arr[0:14]\n//     }\n//     \n//     if k == 15 {\n//         return\
    \ arr[0:15]\n//     }\n//     \n//     if k == 16 {\n//         return arr[0:16]\n\
    //     }\n//     \n//     if k == 17 {\n//         return arr[0:17]\n//     }\n\
    //     \n//     if k == 18 {\n//         return arr[0:18]\n", "    \n}\n\n// Given\
    \ a list arr of integers and a positive integer k, return a sorted list \n// of\
    \ length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3,\
    \ -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n//\
    \ [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n\
    // Note:\n// 1. The length of the list will be in the range of [1, 1000].\n//\
    \ 2. The elements in the list will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)", "    \n}\n\n// Given a list arr of integers and a positive\
    \ integer k, return a sorted list \n// of length k with the maximum k numbers\
    \ in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example\
    \ 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the list will\
    \ be in the range of [1, 1000].\n// 2. The elements in the list will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)", "    \n}\n\n// Given a list\
    \ arr of integers and a positive integer k, return a sorted list \n// of length\
    \ k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([], 0)\n\
    // []\n// Example 2:\n// >>> maximum([1, 2, 3], 0)\n// []\n// Example 3:\n// >>>\
    \ maximum([1, 2, 3], 1)\n// [1]\n// Example 4:\n// >>> maximum([1, 2, 3], 2)\n\
    // [1, 2]\n// Example 5:\n// >>> maximum([1, 2, 3], 3)\n// [1, 2, 3]\n// Note:\n\
    // 1. The length of the list will be in the range of [1, 1000].\n// 2. The elements\
    \ in the list will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)",
  "    // write your code here\n    if len(arr) == 0 {\n        return arr\n    }\n\
    \    \n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i]\
    \ > max {\n            max = arr[i]\n        }\n    }\n    \n    if k > len(arr)\
    \ {\n        return arr\n    }\n    \n    result := make([]int, k)\n    for i\
    \ := 0; i < k; i++ {\n        result[i] = max\n        for j := 0; j < len(arr);\
    \ j++ {\n            if arr[j] > max {\n                max = arr[j]\n       \
    \     }\n        }\n    }\n    \n    return result\n}\n", "    // write your code\
    \ here\n    if len(arr) == 0 {\n        return arr\n    }\n    \n    max := arr[0]\n\
    \    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max\
    \ = arr[i]\n        }\n    }\n    \n    if k == 1 {\n        return []int{max}\n\
    \    }\n    \n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n   \
    \     result[i] = max\n        for j := 0; j < len(arr); j++ {\n            if\
    \ arr[j] > max {\n                max = arr[j]\n            }\n        }\n   \
    \ }\n    return result\n}\n", "    \n}\n\n// func maximum(arr []int, k int) []int\
    \ {\n//     if len(arr) == 0 {\n//         return []int{}\n//     }\n//     \n\
    //     if k == 1 {\n//         return arr\n//     }\n//     \n//     if arr[0]\
    \ > arr[1] {\n//         arr[0], arr[1] = arr[1], arr[0]\n//     }\n//     \n\
    //     if arr[0] > arr[2] {\n//         arr[0], arr[2] = arr[2], arr[0]\n//  \
    \   }\n//     \n//     if arr[1] > arr[2] {\n//         arr[1], arr[2] = arr[2],\
    \ arr[1]\n//     }\n//     \n//     if arr[0] > arr[1] {\n//         arr[0], arr[1]\
    \ = arr[1], arr[0]\n//     }\n//     \n//     if arr[1] > arr[2] {\n//       \
    \  arr[1], arr[2] = arr[2], arr[1]\n//     }\n//     \n//     if arr[0] > arr[1]\
    \ {\n//         arr[0], arr[1] = arr[1], arr[0]\n//     }\n//     \n//     if\
    \ arr[1] > arr[2] {\n//         arr[1], arr[2] = arr[2], arr[1]\n//     }\n//\
    \     \n//     if arr[0] > arr[1] {\n//         arr[0], arr[1] = arr[1], arr[0]\n\
    //     }\n//     \n//     if arr[1] > arr[2] {\n//         arr[1], arr[2] = arr[2],\
    \ arr[1]\n//     }\n//     \n//     if arr[0] > arr[1] {\n//         arr[0], arr[1]\
    \ = arr[1], arr[0]\n//     }\n//     \n//     if arr[1] > arr[2] {\n//       \
    \  arr[1], arr[2] = arr[2], arr[1]\n//     ", "    // write your code here\n \
    \   if len(arr) == 0 {\n        return arr\n    }\n    if k == 0 {\n        return\
    \ arr\n    }\n    if k == 1 {\n        return arr\n    }\n    \n    max := arr[0]\n\
    \    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max\
    \ = arr[i]\n        }\n    }\n    \n    if k == 2 {\n        return []int{max,\
    \ max}\n    }\n    \n    max_index := 0\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] == max {\n            max_index = i\n            break\n  \
    \      }\n    }\n    \n    if k == max_index + 1 {\n        return []int{max,\
    \ max}\n    }\n    \n    return []int{arr[max_index], max}\n}\n", "    // write\
    \ your code here\n    if len(arr) == 0 {\n        return arr\n    }\n    \n  \
    \  max_index := len(arr) - k\n    max_arr := arr[max_index:]\n    for i := max_index\
    \ - 1; i >= 0; i-- {\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i]\n            max_arr[1] = i\n        }\n    }\n    \n    return max_arr\n\
    }\n", "    \n}\n", "    \n}\n\n// Given a list arr of integers and a positive\
    \ integer k, return a sorted list \n// of length k with the maximum k numbers\
    \ in arr.\n// Example 1:\n// >>> maximum([]int{-3, -4, 5}, 3)\n// []int{-4, -3,\
    \ 5}\n// Example 2:\n// >>> maximum([]int{4, -4, 4}, 2)\n// []int{4, 4}\n// Example\
    \ 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1, -2, 1}, 1)\n// []int{2}\n// Note:\n\
    // 1. The length of the list will be in the range of [1, 1000].\n// 2. The elements\
    \ in the list will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)",
  "    \n}\n\n// Given a list arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the list will be in the range of [1,\
    \ 1000].\n// 2. The elements in the list will be in the range of [-1000, 1000].\n\
    // 3. 0 <= k <= len(arr)", "    \n}\n\n// Given a list arr of integers and a positive\
    \ integer k, return a sorted list \n// of length k with the maximum k numbers\
    \ in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example\
    \ 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the list will\
    \ be in the range of [1, 1000].\n// 2. The elements in the list will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)", "    // write your code\
    \ here\n    if len(arr) == 0 {\n        return arr\n    }\n    \n    max := arr[0]\n\
    \    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max\
    \ = arr[i]\n        }\n    }\n    \n    if k == 1 {\n        return []int{max}\n\
    \    }\n    \n    if max < 0 {\n        return []int{}\n    }\n    \n    max_index\
    \ := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] == max {\n    \
    \        max_index = i\n            break\n        }\n    }\n    \n    if max_index\
    \ == 0 {\n        return []int{max}\n    }\n    \n    if max_index == len(arr)\
    \ - 1 {\n        return []int{max}\n    }\n    \n    if k == 2 {\n        return\
    \ []int{max, arr[max_index + 1]}\n    }\n    \n    if max_index > 0 {\n      \
    \  return []int{max, arr[max_index - 1]}\n    }\n    \n    if max_index < len(arr)\
    \ - 1 {\n        return []int{arr[max_index + 1], max}\n    }\n    \n    return\
    \ []int{arr[max_index + 1]}\n}\n", "    \n}\n", "    \n}\n\n// func maximum(arr\
    \ []int, k int) []int {\n//     if len(arr) == 0 {\n//         return []int{}\n\
    //     }\n//     if k == 0 {\n//         return []int{arr[0]}\n//     }\n//  \
    \   if k == 1 {\n//         return []int{max(arr[0], arr[1])}\n//     }\n//  \
    \   if k == 2 {\n//         return []int{max(arr[0], max(arr[1], arr[2]))}\n//\
    \     }\n//     if k == 3 {\n//         return []int{max(arr[0], max(arr[1], max(arr[2],\
    \ arr[3])))}\n//     }\n//     if k == 4 {\n//         return []int{max(arr[0],\
    \ max(arr[1], max(arr[2], max(arr[3], arr[4]))))}\n//     }\n//     if k == 5\
    \ {\n//         return []int{max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4],\
    \ arr[5]))))))}\n//     }\n//     if k == 6 {\n//         return []int{max(arr[0],\
    \ max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], arr[6]))))))}\n\
    //     }\n//     if k == 7 {\n//         return []int{max(arr[0], max(arr[1],\
    \ max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], arr[7]))))))))}\n\
    //     }\n//     if k == 8 {\n//         return []int{max(arr[0], max(arr[1],\
    \ max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], max(arr[7], arr[8]))))))))}\n\
    //     }\n//     if k == 9 {\n//         return []int{max(arr[0], max(arr[1],\
    \ max", "    // write your code here\n    if len(arr) == 0 {\n        return arr\n\
    \    }\n    if k == 1 {\n        return arr\n    }\n    if k > len(arr) {\n  \
    \      return arr\n    }\n    \n    max := arr[0]\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\
    \    \n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = max\n        max = max - arr[i]\n    }\n    \n    return result\n}\n", " \
    \   \n}\n", "    // write your code here\n    if len(arr) == 0 {\n        return\
    \ arr\n    }\n    \n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n \
    \       if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    \n\
    \    if k == 1 {\n        return []int{max}\n    }\n    \n    max_arr := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        max_arr[i] = max\n    }\n    \n  \
    \  for i := 0; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n       \
    \     if arr[i] > max_arr[j] {\n                max_arr[j] = arr[i]\n        \
    \    }\n        }\n    }\n    \n    return max_arr\n}\n", "    \n}\n", "    //\
    \ write your code here\n    if len(arr) == 0 {\n        return arr\n    }\n  \
    \  \n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i]\
    \ > max {\n            max = arr[i]\n        }\n    }\n    \n    if k == 1 {\n\
    \        return []int{max}\n    }\n    \n    if max < 0 {\n        return []int{}\n\
    \    }\n    \n    max_index := 0\n    for i := 0; i < len(arr); i++ {\n      \
    \  if arr[i] == max {\n            max_index = i\n            break\n        }\n\
    \    }\n    \n    if max_index == 0 {\n        return []int{max}\n    }\n    \n\
    \    if max_index == len(arr) - 1 {\n        return []int{max}\n    }\n    \n\
    \    left := []int{}\n    right := []int{}\n    \n    for i := 0; i < max_index;\
    \ i++ {\n        left = append(left, arr[i])\n    }\n    \n    for i := max_index\
    \ + 1; i < len(arr); i++ {\n        right = append(right, arr[i])\n    }\n   \
    \ \n    return maximum(append(left, max), k - len(left))\n}\n", "    // write\
    \ your code here\n    if len(arr) == 0 {\n        return arr\n    }\n    if k\
    \ == 1 {\n        return arr\n    }\n    if k > len(arr) {\n        return arr\n\
    \    }\n    \n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n       \
    \ if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    \n    result\
    \ := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i] = max\n \
    \       max = max - arr[i]\n    }\n    \n    return result\n}\n", "    \n}\n\n\
    // func maximum(arr []int, k int) []int {\n//     if len(arr) == 0 {\n//     \
    \    return []int{}\n//     }\n//     if len(arr) == 1 {\n//         return arr\n\
    //     }\n//     if k == 1 {\n//         return arr\n//     }\n//     if k ==\
    \ 2 {\n//         return arr[0], arr[1]\n//     }\n//     if k == 3 {\n//    \
    \     return arr[0], arr[1], arr[2]\n//     }\n//     if k == 4 {\n//        \
    \ return arr[0], arr[1], arr[2], arr[3]\n//     }\n//     if k == 5 {\n//    \
    \     return arr[0], arr[1], arr[2], arr[3], arr[4]\n//     }\n//     if k ==\
    \ 6 {\n//         return arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]\n//  \
    \   }\n//     if k == 7 {\n//         return arr[0], arr[1], arr[2], arr[3], arr[4],\
    \ arr[5], arr[6]\n//     }\n//     if k == 8 {\n//         return arr[0], arr[1],\
    \ arr[2], arr[3], arr[4], arr[5], arr[6], arr[7]\n//     }\n//     if k == 9 {\n\
    //         return arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7],\
    \ arr[8]\n//     }\n//     if k == 10 {\n//         return arr[0], arr[1], arr[2],\
    \ arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9]\n//     }\n//     if\
    \ k == 11 {\n//         return arr[0], arr[1], arr[2], arr[3], arr[4], arr[5],\
    \ arr[6], arr[7], arr[8], arr[9], arr[10]\n//     }\n//     if k == 12 {\n// \
    \        return arr", "    \n}\n\n// func maximum(arr []int, k int) []int {\n\
    //     if len(arr) == 0 {\n//         return []int{}\n//     }\n//     \n//  \
    \   if k == 1 {\n//         return arr\n//     }\n//     \n//     max := arr[0]\n\
    //     for i := 1; i < len(arr); i++ {\n//         if arr[i] > max {\n//     \
    \        max = arr[i]\n//         }\n//     }\n//     \n//     if k == 2 {\n//\
    \         return []int{max, max}\n//     }\n//     \n//     result := make([]int,\
    \ k)\n//     for i := 0; i < k; i++ {\n//         result[i] = max\n//        \
    \ max = arr[i]\n//     }\n//     \n//     return result\n// }\n", "    // write\
    \ your code here\n    if len(arr) == 0 {\n        return arr\n    }\n    if k\
    \ == 1 {\n        return arr\n    }\n    if k > len(arr) {\n        return arr\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    \n    max := arr[0]\n\
    \    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max\
    \ = arr[i]\n        }\n    }\n    \n    if k == 2 {\n        return []int{max,\
    \ max}\n    }\n    \n    result := make([]int, k)\n    result[0] = max\n    for\
    \ i := 1; i < k; i++ {\n        result[i] = arr[i]\n    }\n    \n    return result\n\
    }\n", "    \n}\n", "    \n}\n", "    \n}\n\n// func maximum(arr []int, k int)\
    \ []int {\n//     if len(arr) == 0 {\n//         return []int{}\n//     }\n//\
    \     \n//     if len(arr) == 1 {\n//         return arr\n//     }\n//     \n\
    //     if k == 1 {\n//         return arr[0:1]\n//     }\n//     \n//     if k\
    \ == 2 {\n//         return arr[0:2]\n//     }\n//     \n//     if k == 3 {\n\
    //         return arr[0:3]\n//     }\n//     \n//     if k == 4 {\n//        \
    \ return arr[0:4]\n//     }\n//     \n//     if k == 5 {\n//         return arr[0:5]\n\
    //     }\n//     \n//     if k == 6 {\n//         return arr[0:6]\n//     }\n\
    //     \n//     if k == 7 {\n//         return arr[0:7]\n//     }\n//     \n//\
    \     if k == 8 {\n//         return arr[0:8]\n//     }\n//     \n//     if k\
    \ == 9 {\n//         return arr[0:9]\n//     }\n//     \n//     if k == 10 {\n\
    //         return arr[0:10]\n//     }\n//     \n//     if k == 11 {\n//      \
    \   return arr[0:11]\n//     }\n//     \n//     if k == 12 {\n//         return\
    \ arr[0:12]\n//     }\n//     \n//     if k == 13 {\n//         return arr[0:13]\n\
    //     }\n//     \n//     if k == 14 {\n//         return arr[0:14]\n//     }\n\
    //     \n//     if k == 15 {\n//         return arr[0:15]\n//     }\n//     \n\
    //     if k == 16 {\n//         return arr[0:16]\n//     }\n//     \n//     if\
    \ k == 17 {\n//         return arr[0:17]\n//     }\n//     \n//     if k == 18\
    \ {\n//         return arr[0:18]\n", "    \n}\n", "    \n}\n\n// Given a list\
    \ arr of integers and a positive integer k, return a sorted list \n// of length\
    \ k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4,\
    \ 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4,\
    \ 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n\
    // 1. The length of the list will be in the range of [1, 1000].\n// 2. The elements\
    \ in the list will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)",
  "    \n}\n", "    // write your code here\n    if len(arr) == 0 {\n        return\
    \ arr\n    }\n    \n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n \
    \       if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    \n\
    \    if k == 1 {\n        return []int{max}\n    }\n    \n    max_index := 0\n\
    \    for i := 0; i < len(arr); i++ {\n        if arr[i] == max {\n           \
    \ max_index = i\n            break\n        }\n    }\n    \n    if max_index ==\
    \ 0 {\n        return []int{max}\n    }\n    \n    if max_index == len(arr) -\
    \ 1 {\n        return []int{arr[max_index]}\n    }\n    \n    left_max := max\n\
    \    right_max := max\n    \n    for i := 0; i < len(arr); i++ {\n        if arr[i]\
    \ == max {\n            if i == 0 {\n                left_max = arr[i]\n     \
    \       } else if i == len(arr) - 1 {\n                right_max = arr[i]\n  \
    \          }\n        }\n    }\n    \n    if left_max > right_max {\n        return\
    \ []int{left_max}\n    } else {\n        return []int{right_max}\n    }\n}\n",
  "    \n}\n", "    n := len(arr)\n    if k > n {\n        k = n\n    }\n    if k\
    \ == 0 {\n        return []int{}\n    }\n    if k == 1 {\n        return arr\n\
    \    }\n    \n    max := arr[0]\n    for i := 1; i < k; i++ {\n        if arr[i]\
    \ > max {\n            max = arr[i]\n        }\n    }\n    \n    result := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n        if arr[i]\
    \ == max {\n            for j := i + 1; j < k; j++ {\n                if arr[j]\
    \ > arr[i] {\n                    result[i] = arr[j]\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    \n}\n", "    // write your code here\n    if len(arr) == 0 {\n        return\
    \ arr\n    }\n    \n    max_index := 0\n    max_value := arr[0]\n    for i :=\
    \ 1; i < len(arr); i++ {\n        if arr[i] > max_value {\n            max_value\
    \ = arr[i]\n            max_index = i\n        }\n    }\n    \n    if k == 1 {\n\
    \        return []int{max_value}\n    }\n    \n    max_k_index := max_index\n\
    \    for i := 0; i < max_index; i++ {\n        if arr[i] == max_value {\n    \
    \        max_k_index += 1\n        }\n    }\n    \n    if max_k_index == k {\n\
    \        return arr[max_index:max_index+k]\n    }\n    \n    if max_k_index >\
    \ k {\n        return arr[max_index:max_index+k]\n    }\n    \n    return arr[max_index:max_index+k]\n\
    }\n", "    \n}\n", "    \n}\n\n// Given a list arr of integers and a positive\
    \ integer k, return a sorted list \n// of length k with the maximum k numbers\
    \ in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example\
    \ 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the list will\
    \ be in the range of [1, 1000].\n// 2. The elements in the list will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)", "    // write your code\
    \ here\n    if len(arr) == 0 {\n        return arr\n    }\n    \n    if k == 1\
    \ {\n        return arr\n    }\n    \n    if k > len(arr) {\n        return arr\n\
    \    }\n    \n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n       \
    \ if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    \n    if\
    \ k == 2 {\n        return []int{max, arr[0]}\n    }\n    \n    result := make([]int,\
    \ k)\n    result[0] = max\n    for i := 1; i < k; i++ {\n        result[i] = arr[i]\n\
    \    }\n    \n    return result\n}\n", "    \n}\n\n// Given a list arr of integers\
    \ and a positive integer k, return a sorted list \n// of length k with the maximum\
    \ k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3,\
    \ 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n\
    // >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length\
    \ of the list will be in the range of [1, 1000].\n// 2. The elements in the list\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)", "    // write\
    \ your code here\n    if len(arr) == 0 {\n        return arr\n    }\n    \n  \
    \  if k == 1 {\n        return arr\n    }\n    \n    if k > len(arr) {\n     \
    \   return arr\n    }\n    \n    max := arr[0]\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\
    \    \n    if k == len(arr) {\n        return arr\n    }\n    \n    result :=\
    \ make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i] = max\n    \
    \    max = max - arr[i]\n    }\n    \n    return result\n}\n", "    \n}\n", " \
    \   \n}\n\n// Given a list arr of integers and a positive integer k, return a\
    \ sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the list will be in the range of [1,\
    \ 1000].\n// 2. The elements in the list will be in the range of [-1000, 1000].\n\
    // 3. 0 <= k <= len(arr)", "    \n}\n\n// Given a list arr of integers and a positive\
    \ integer k, return a sorted list \n// of length k with the maximum k numbers\
    \ in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example\
    \ 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the list will\
    \ be in the range of [1, 1000].\n// 2. The elements in the list will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)", "    // write your code\
    \ here\n    if len(arr) == 0 {\n        return arr\n    }\n    \n    if k == 1\
    \ {\n        return arr\n    }\n    \n    max := arr[0]\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\
    \    \n    if max == arr[0] {\n        return arr\n    }\n    \n    arr = arr[1:]\n\
    \    \n    for i := 0; i < len(arr); i++ {\n        if arr[i] == max {\n     \
    \       arr = append(arr[:i], arr[i+1:]...)\n            break\n        }\n  \
    \  }\n    \n    if len(arr) < k {\n        return arr\n    }\n    \n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] == max {\n            arr = append(arr[:i],\
    \ arr[i+1:]...)\n            break\n        }\n    }\n    \n    return arr\n}\n",
  "    \n}\n\n// func maximum(arr []int, k int) []int {\n//     if len(arr) == 0 {\n\
    //         return []int{}\n//     }\n//     \n//     if len(arr) == 1 {\n//  \
    \       return arr\n//     }\n//     \n//     if k == 1 {\n//         return arr[0]\n\
    //     }\n//     \n//     if k == 2 {\n//         return arr[0], arr[1]\n//  \
    \   }\n//     \n//     if k == 3 {\n//         return arr[0], arr[1], arr[2]\n\
    //     }\n//     \n//     if k == 4 {\n//         return arr[0], arr[1], arr[2],\
    \ arr[3]\n//     }\n//     \n//     if k == 5 {\n//         return arr[0], arr[1],\
    \ arr[2], arr[3], arr[4]\n//     }\n//     \n//     if k == 6 {\n//         return\
    \ arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]\n//     }\n//     \n//     if\
    \ k == 7 {\n//         return arr[0], arr[1], arr[2], arr[3], arr[4], arr[5],\
    \ arr[6]\n//     }\n//     \n//     if k == 8 {\n//         return arr[0], arr[1],\
    \ arr[2], arr[3], arr[4], arr[5], arr[6], arr[7]\n//     }\n//     \n//     if\
    \ k == 9 {\n//         return arr[0], arr[1], arr[2], arr[3], arr[4], arr[5],\
    \ arr[6], arr[7], arr[8]\n//     }\n//     \n//     if k == 10 {\n//         return\
    \ arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9]\n\
    //     }\n//     \n//     if k == 11 {\n//         return arr[0], arr[1], arr[2],\
    \ arr[3], arr[4], arr[", "    // write your code here\n    if len(arr) == 0 {\n\
    \        return arr\n    }\n    \n    max := arr[0]\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\
    \    \n    if k == 1 {\n        return []int{max}\n    }\n    \n    result :=\
    \ make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i] = max\n    \
    \    max = max - arr[i] + arr[i+1]\n    }\n    \n    return result\n}\n", "  \
    \  \n}\n\n// Given a list arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([], 0)\n// []\n// Example 2:\n// >>> maximum([1, 2, 3, 4, 5], 0)\n\
    // []\n// Example 3:\n// >>> maximum([1, 2, 3, 4, 5], 1)\n// [1]\n// Example 4:\n\
    // >>> maximum([1, 2, 3, 4, 5], 2)\n// [1, 2]\n// Example 5:\n// >>> maximum([1,\
    \ 2, 3, 4, 5], 3)\n// [1, 2, 3]\n// Example 6:\n// >>> maximum([1, 2, 3, 4, 5],\
    \ 4)\n// [1, 2, 3, 4]\n// Example 7:\n// >>> maximum([1, 2, 3, 4, 5], 5)\n// [1,\
    \ 2, 3, 4, 5]\n// Note:\n// 1. The length of the list will be in the range of\
    \ [1, 1000].\n// 2. The elements in the list will be in the range of [-1000, 1000].\n\
    // 3. 0 <= k <= len(arr)", "    // write your code here\n    if len(arr) == 0\
    \ {\n        return arr\n    }\n    \n    if k == 1 {\n        return arr\n  \
    \  }\n    \n    if k > len(arr) {\n        return arr\n    }\n    \n    max :=\
    \ arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n   \
    \         max = arr[i]\n        }\n    }\n    \n    if k == 2 {\n        return\
    \ []int{max, max}\n    }\n    \n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = max\n    }\n    \n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] == max {\n            continue\n        }\n       \
    \ \n        for j := 0; j < k; j++ {\n            if result[j] == max {\n    \
    \            result[j] = arr[i]\n                break\n            }\n      \
    \  }\n    }\n    \n    return result\n}\n", "    // write your code here\n   \
    \ if len(arr) == 0 || k == 0 {\n        return arr\n    }\n    \n    max := arr[0]\n\
    \    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max\
    \ = arr[i]\n        }\n    }\n    \n    if k == 1 {\n        return []int{max}\n\
    \    }\n    \n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n   \
    \     result[i] = max\n        max = max - arr[i]\n    }\n    \n    return result\n\
    }\n", "    \n}\n\n// func maximum(arr []int, k int) []int {\n//     if len(arr)\
    \ == 0 {\n//         return []int{}\n//     }\n//     \n//     if k == 1 {\n//\
    \         return arr\n//     }\n//     \n//     max := arr[0]\n//     for i :=\
    \ 1; i < len(arr); i++ {\n//         if arr[i] > max {\n//             max = arr[i]\n\
    //         }\n//     }\n//     \n//     if k == 2 {\n//         return []int{max,\
    \ arr[0]}\n//     }\n//     \n//     return []int{max}\n// }\n", "    \n}\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([],\
    \ 3)\n// []\n// Example 2:\n// >>> maximum([1, 2, 3], 2)\n// [1, 2]\n// Example\
    \ 3:\n// >>> maximum([1, 2, 3], 3)\n// [1, 2, 3]\n// Note:\n// 1. The length of\
    \ the list will be in the range of [1, 1000].\n// 2. The elements in the list\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)", "    \n}\n\
    \n// Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3,\
    \ -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n//\
    \ [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n\
    // Note:\n// 1. The length of the list will be in the range of [1, 1000].\n//\
    \ 2. The elements in the list will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)", "    \n}\n", "    \n}\n\n// Given a list arr of integers\
    \ and a positive integer k, return a sorted list \n// of length k with the maximum\
    \ k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3,\
    \ 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n\
    // >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length\
    \ of the list will be in the range of [1, 1000].\n// 2. The elements in the list\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)", "    \n}\n\
    \n// Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([],\
    \ 0)\n// []\n// Example 2:\n// >>> maximum([1, 2, 3, 4, 5], 0)\n// []\n// Example\
    \ 3:\n// >>> maximum([1, 2, 3, 4, 5], 1)\n// [1]\n// Example 4:\n// >>> maximum([1,\
    \ 2, 3, 4, 5], 2)\n// [1, 2]\n// Example 5:\n// >>> maximum([1, 2, 3, 4, 5], 3)\n\
    // [1, 2, 3]\n// Example 6:\n// >>> maximum([1, 2, 3, 4, 5], 4)\n// [1, 2, 3,\
    \ 4]\n// Example 7:\n// >>> maximum([1, 2, 3, 4, 5], 5)\n// [1, 2, 3, 4, 5]\n\
    // Note:\n// 1. The length of the list will be in the range of [1, 1000].\n//\
    \ 2. The elements in the list will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)", "    \n}\n", "    \n}\n", "    // write your code here\n\
    \    if len(arr) == 0 {\n        return arr\n    }\n    \n    max_index := len(arr)\
    \ - k\n    max_arr := make([]int, k)\n    for i := 0; i < k; i++ {\n        max_arr[i]\
    \ = arr[max_index]\n        max_index--\n    }\n    \n    return max_arr\n}\n",
  "    \n}\n", "    \n}\n\n// Given a list arr of integers and a positive integer\
    \ k, return a sorted list \n// of length k with the maximum k numbers in arr.\n\
    // Example 1:\n// >>> maximum([], 0)\n// []\n// Example 2:\n// >>> maximum([1,\
    \ 2, 3], 0)\n// []\n// Example 3:\n// >>> maximum([1, 2, 3], 1)\n// [1]\n// Example\
    \ 4:\n// >>> maximum([1, 2, 3], 2)\n// [1, 2]\n// Example 5:\n// >>> maximum([1,\
    \ 2, 3], 3)\n// [1, 2, 3]\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)", "    \n}\n\n// Given a list arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n\
    // [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example\
    \ 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The\
    \ length of the list will be in the range of [1, 1000].\n// 2. The elements in\
    \ the list will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)",
  "    \n}\n\n// Given a list arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the list will be in the range of [1,\
    \ 1000].\n// 2. The elements in the list will be in the range of [-1000, 1000].\n\
    // 3. 0 <= k <= len(arr)", "    // write your code here\n    if len(arr) == 0\
    \ {\n        return arr\n    }\n    if k == 1 {\n        return arr\n    }\n \
    \   \n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i]\
    \ > max {\n            max = arr[i]\n        }\n    }\n    \n    if k > len(arr)\
    \ {\n        return arr\n    }\n    \n    result := make([]int, k)\n    for i\
    \ := 0; i < k; i++ {\n        result[i] = max\n        max = max - arr[i]\n  \
    \  }\n    \n    return result\n}\n", "    \n}\n\n// Given a list arr of integers\
    \ and a positive integer k, return a sorted list \n// of length k with the maximum\
    \ k numbers in arr.\n// Example 1:\n// >>> maximum([], 3)\n// []\n// Example 2:\n\
    // >>> maximum([1, 2, 3], 2)\n// [1, 2]\n// Example 3:\n// >>> maximum([1, 2,\
    \ 3], 3)\n// [1, 2, 3]\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)", "    \n}\n", "    // write your code\
    \ here\n    if len(arr) == 0 {\n        return arr\n    }\n    \n    max := arr[0]\n\
    \    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max\
    \ = arr[i]\n        }\n    }\n    \n    if k == 1 {\n        return []int{max}\n\
    \    }\n    \n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n   \
    \     result[i] = max\n        max = max - arr[i]\n    }\n    \n    return result\n\
    }\n", "    // write your code here\n    if len(arr) == 0 {\n        return arr\n\
    \    }\n    \n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n       \
    \ if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    \n    if\
    \ k == 1 {\n        return []int{max}\n    }\n    \n    result := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        result[i] = max\n        max = max\
    \ - arr[i]\n    }\n    \n    return result\n}\n", "    \n}\n\n// Given a list\
    \ arr of integers and a positive integer k, return a sorted list \n// of length\
    \ k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([], 3)\n\
    // []\n// Example 2:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example\
    \ 3:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 4:\n// >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the list will\
    \ be in the range of [1, 1000].\n// 2. The elements in the list will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)", "    // write your code\
    \ here\n    if len(arr) == 0 {\n        return arr\n    }\n    \n    if k == 1\
    \ {\n        return arr\n    }\n    \n    if k > len(arr) {\n        return arr\n\
    \    }\n    \n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n       \
    \ if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    \n    if\
    \ k == len(arr) {\n        return arr\n    }\n    \n    return arr[0:k]\n}\n",
  "    // write your code here\n    if len(arr) == 0 {\n        return arr\n    }\n\
    \    \n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i]\
    \ > max {\n            max = arr[i]\n        }\n    }\n    \n    if k == 1 {\n\
    \        return []int{max}\n    }\n    \n    result := make([]int, k)\n    for\
    \ i := 0; i < k; i++ {\n        result[i] = max\n        for j := 0; j < len(arr);\
    \ j++ {\n            if arr[j] > max {\n                max = arr[j]\n       \
    \     }\n        }\n    }\n    \n    return result\n}\n", "    \n}\n\n// Given\
    \ a list arr of integers and a positive integer k, return a sorted list \n// of\
    \ length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3,\
    \ -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n//\
    \ [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n\
    // Note:\n// 1. The length of the list will be in the range of [1, 1000].\n//\
    \ 2. The elements in the list will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)", "    \n}\n\n// Given a list arr of integers and a positive\
    \ integer k, return a sorted list \n// of length k with the maximum k numbers\
    \ in arr.\n// Example 1:\n// >>> maximum([], 0)\n// []\n// Example 2:\n// >>>\
    \ maximum([1, 2, 3, 4, 5], 0)\n// []\n// Example 3:\n// >>> maximum([1, 2, 3,\
    \ 4, 5], 1)\n// [1]\n// Example 4:\n// >>> maximum([1, 2, 3, 4, 5], 2)\n// [1,\
    \ 2]\n// Example 5:\n// >>> maximum([1, 2, 3, 4, 5], 3)\n// [1, 2, 3]\n// Example\
    \ 6:\n// >>> maximum([1, 2, 3, 4, 5], 4)\n// [1, 2, 3, 4]\n// Example 7:\n// >>>\
    \ maximum([1, 2, 3, 4, 5], 5)\n// [1, 2, 3, 4, 5]\n// Example 8:\n// >>> maximum([1,\
    \ 2, 3, 4, 5], 6)\n// [1, 2, 3, 4, 5]\n// Note:\n// 1. The length of the list\
    \ will be in the range of [1, 1000].\n// 2. The elements in the list will be in\
    \ the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)", "    // write your code\
    \ here\n    if len(arr) == 0 {\n        return arr\n    }\n    if k == 1 {\n \
    \       return arr\n    }\n    if k > len(arr) {\n        return arr\n    }\n\
    \    \n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i]\
    \ > max {\n            max = arr[i]\n        }\n    }\n    \n    result := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        result[i] = max\n        max = max\
    \ - arr[i]\n    }\n    \n    return result\n}\n", "    \n}\n\n// Given a list\
    \ arr of integers and a positive integer k, return a sorted list \n// of length\
    \ k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([], 0)\n\
    // []\n// Example 2:\n// >>> maximum([1, 2, 3], 0)\n// []\n// Example 3:\n// >>>\
    \ maximum([1, 2, 3], 1)\n// [1]\n// Example 4:\n// >>> maximum([1, 2, 3], 2)\n\
    // [1, 2]\n// Example 5:\n// >>> maximum([1, 2, 3], 3)\n// [1, 2, 3]\n// Note:\n\
    // 1. The length of the list will be in the range of [1, 1000].\n// 2. The elements\
    \ in the list will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)",
  "    \n}\n\n// func maximum(arr []int, k int) []int {\n//     if len(arr) == 0 {\n\
    //         return []int{}\n//     }\n//     \n//     if len(arr) == 1 {\n//  \
    \       return arr\n//     }\n//     \n//     if k == 1 {\n//         return arr[0]\n\
    //     }\n//     \n//     if k == 2 {\n//         return arr[0], arr[1]\n//  \
    \   }\n//     \n//     if k == 3 {\n//         return arr[0], arr[1], arr[2]\n\
    //     }\n//     \n//     if k == 4 {\n//         return arr[0], arr[1], arr[2],\
    \ arr[3]\n//     }\n//     \n//     if k == 5 {\n//         return arr[0], arr[1],\
    \ arr[2], arr[3], arr[4]\n//     }\n//     \n//     if k == 6 {\n//         return\
    \ arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]\n//     }\n//     \n//     if\
    \ k == 7 {\n//         return arr[0], arr[1], arr[2], arr[3], arr[4], arr[5],\
    \ arr[6]\n//     }\n//     \n//     if k == 8 {\n//         return arr[0], arr[1],\
    \ arr[2], arr[3], arr[4], arr[5], arr[6], arr[7]\n//     }\n//     \n//     if\
    \ k == 9 {\n//         return arr[0], arr[1], arr[2], arr[3], arr[4], arr[5],\
    \ arr[6], arr[7], arr[8]\n//     }\n//     \n//     if k == 10 {\n//         return\
    \ arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9]\n\
    //     }\n//     \n//     if k == 11 {\n//         return arr[0], arr[1], arr[2],\
    \ arr[3], arr[4], arr[", "    \n}\n\n// func maximum(arr []int, k int) []int {\n\
    //     if len(arr) == 0 {\n//         return []int{}\n//     }\n//     \n//  \
    \   if k == 1 {\n//         return arr\n//     }\n//     \n//     if len(arr)\
    \ == 1 {\n//         return arr\n//     }\n//     \n//     if arr[0] > arr[1]\
    \ {\n//         arr[0], arr[1] = arr[1], arr[0]\n//     }\n//     \n//     if\
    \ arr[0] > arr[2] {\n//         arr[0], arr[2] = arr[2], arr[0]\n//     }\n//\
    \     \n//     if arr[1] > arr[2] {\n//         arr[1], arr[2] = arr[2], arr[1]\n\
    //     }\n//     \n//     if arr[0] > arr[1] {\n//         arr[0], arr[1] = arr[1],\
    \ arr[0]\n//     }\n//     \n//     if arr[0] > arr[2] {\n//         arr[0], arr[2]\
    \ = arr[2], arr[0]\n//     }\n//     \n//     if arr[1] > arr[2] {\n//       \
    \  arr[1], arr[2] = arr[2], arr[1]\n//     }\n//     \n//     if arr[0] > arr[1]\
    \ {\n//         arr[0], arr[1] = arr[1], arr[0]\n//     }\n//     \n//     if\
    \ arr[0] > arr[2] {\n//         arr[0], arr[2] = arr[2], arr[0]\n//     }\n//\
    \     \n//     if arr[1] > arr[2] {\n//         arr[1], arr[2] = arr[2], arr[1]\n\
    //     }\n//     \n//     if arr[0] > arr[1] {\n//         arr[0], arr[1] = arr[1],\
    \ arr[0]\n//     }\n//     \n//     if arr[0] > arr[2] {", "    \n}\n\n// Given\
    \ a list arr of integers and a positive integer k, return a sorted list \n// of\
    \ length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)", "    // write your code here\n  \
    \  if len(arr) == 0 {\n        return arr\n    }\n    \n    max := arr[0]\n  \
    \  for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max\
    \ = arr[i]\n        }\n    }\n    \n    if k == 1 {\n        return []int{max}\n\
    \    }\n    \n    result := make([]int, k)\n    result[0] = max\n    \n    for\
    \ i := 1; i < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        result[i] = max\n    }\n    \n    return result\n}\n", " \
    \   // write your code here\n    if len(arr) == 0 {\n        return arr\n    }\n\
    \    \n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i]\
    \ > max {\n            max = arr[i]\n        }\n    }\n    \n    if k == 1 {\n\
    \        return []int{max}\n    }\n    \n    max_index := 0\n    for i := 0; i\
    \ < len(arr); i++ {\n        if arr[i] == max {\n            max_index++\n   \
    \         if max_index == k {\n                return arr[i:i+k]\n           \
    \ }\n        }\n    }\n    \n    return arr\n}\n", "    \n}\n", "    \n}\n\n//\
    \ Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3,\
    \ -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n//\
    \ [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n\
    // Note:\n// 1. The length of the list will be in the range of [1, 1000].\n//\
    \ 2. The elements in the list will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)", "    \n}\n", "    \n}\n\n// Given a list arr of integers\
    \ and a positive integer k, return a sorted list \n// of length k with the maximum\
    \ k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3,\
    \ 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n\
    // >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length\
    \ of the list will be in the range of [1, 1000].\n// 2. The elements in the list\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)", "    \n}\n\
    \n// func maximum(arr []int, k int) []int {\n//     if len(arr) == 0 {\n//   \
    \      return []int{}\n//     }\n//     \n//     max := arr[0]\n//     for i :=\
    \ 1; i < len(arr); i++ {\n//         if arr[i] > max {\n//             max = arr[i]\n\
    //         }\n//     }\n//     \n//     if k == 1 {\n//         return []int{max}\n\
    //     }\n//     \n//     if max < k {\n//         return []int{}\n//     }\n\
    //     \n//     return arr[:k]\n// }\n", "    // write your code here\n    if\
    \ len(arr) == 0 {\n        return arr\n    }\n    \n    max := arr[0]\n    for\
    \ i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n    }\n    \n    if k == 1 {\n        return []int{max}\n    }\n \
    \   \n    max_arr := make([]int, k)\n    max_arr[0] = max\n    for i := 1; i <\
    \ k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n \
    \       max_arr[i] = max\n    }\n    \n    return max_arr\n}\n", "    // write\
    \ your code here\n    if len(arr) == 0 {\n        return arr\n    }\n    \n  \
    \  max_arr := make([]int, k)\n    for i := 0; i < k; i++ {\n        max_arr[i]\
    \ = arr[0]\n    }\n    \n    for i := 1; i < len(arr); i++ {\n        for j :=\
    \ 0; j < k; j++ {\n            if arr[i] > max_arr[j] {\n                max_arr[j]\
    \ = arr[i]\n            }\n        }\n    }\n    \n    return max_arr\n}\n", " \
    \   // write your code here\n    if len(arr) == 0 {\n        return arr\n    }\n\
    \    \n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i]\
    \ > max {\n            max = arr[i]\n        }\n    }\n    \n    if k == 1 {\n\
    \        return []int{max}\n    }\n    \n    result := make([]int, k)\n    for\
    \ i := 0; i < k; i++ {\n        result[i] = max\n        for j := 0; j < len(arr);\
    \ j++ {\n            if arr[j] > max {\n                max = arr[j]\n       \
    \     }\n        }\n    }\n    \n    return result\n}\n", "    \n}\n\n// Given\
    \ a list arr of integers and a positive integer k, return a sorted list \n// of\
    \ length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([],\
    \ 0)\n// []\n// Example 2:\n// >>> maximum([1, 2, 3, 4, 5], 2)\n// [5, 4, 3, 2]\n\
    // Example 3:\n// >>> maximum([1, 2, 3, 4, 5], 3)\n// [5, 4, 3, 2]\n// Note:\n\
    // 1. The length of the list will be in the range of [1, 1000].\n// 2. The elements\
    \ in the list will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)",
  "    \n}\n", "    \n}\n", "    \n}\n\n// func maximum(arr []int, k int) []int {\n\
    //     if len(arr) == 0 {\n//         return []int{}\n//     }\n//     if k ==\
    \ 1 {\n//         return arr\n//     }\n//     \n//     max := arr[0]\n//    \
    \ for i := 1; i < len(arr); i++ {\n//         if arr[i] > max {\n//          \
    \   max = arr[i]\n//         }\n//     }\n//     \n//     if k == 2 {\n//    \
    \     return []int{max, arr[len(arr) - 1]}\n//     }\n//     \n//     return []int{max}\n\
    // }\n", "    \n}\n", "    \n}\n\n// Given a list arr of integers and a positive\
    \ integer k, return a sorted list \n// of length k with the maximum k numbers\
    \ in arr.\n// Example 1:\n// >>> maximum([], 0)\n// []\n// Example 2:\n// >>>\
    \ maximum([1, 2, 3], 0)\n// []\n// Example 3:\n// >>> maximum([1, 2, 3], 1)\n\
    // [1]\n// Example 4:\n// >>> maximum([1, 2, 3], 2)\n// [1, 2]\n// Example 5:\n\
    // >>> maximum([1, 2, 3], 3)\n// [1, 2, 3]\n// Note:\n// 1. The length of the\
    \ list will be in the range of [1, 1000].\n// 2. The elements in the list will\
    \ be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)", "    \n}\n\n//\
    \ Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3,\
    \ -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n//\
    \ [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n\
    // Note:\n// 1. The length of the list will be in the range of [1, 1000].\n//\
    \ 2. The elements in the list will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)", "    // write your code here\n    if len(arr) == 0 {\n  \
    \      return arr\n    }\n    \n    if k == 1 {\n        return arr\n    }\n \
    \   \n    if k > len(arr) {\n        return arr\n    }\n    \n    max := arr[0]\n\
    \    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max\
    \ = arr[i]\n        }\n    }\n    \n    result := make([]int, k)\n    for i :=\
    \ 0; i < k; i++ {\n        result[i] = max\n        max = max - arr[i]\n    }\n\
    \    \n    return result\n}\n", "    \n}\n\n// Given a list arr of integers and\
    \ a positive integer k, return a sorted list \n// of length k with the maximum\
    \ k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3,\
    \ 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n\
    // >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length\
    \ of the list will be in the range of [1, 1000].\n// 2. The elements in the list\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)", "    \n}\n\
    \n// func maximum(arr []int, k int) []int {\n//     if len(arr) == 0 {\n//   \
    \      return []int{}\n//     }\n//     if k == 0 {\n//         return []int{arr[0]}\n\
    //     }\n//     if k == 1 {\n//         return []int{max(arr[0], arr[1])}\n//\
    \     }\n//     if k == 2 {\n//         return []int{max(arr[0], max(arr[1], arr[2]))}\n\
    //     }\n//     if k == 3 {\n//         return []int{max(max(arr[0], arr[1]),\
    \ max(arr[2], arr[3]))}\n//     }\n//     if k == 4 {\n//         return []int{max(max(max(arr[0],\
    \ arr[1]), arr[2]), max(arr[3], arr[4]))}\n//     }\n//     if k == 5 {\n//  \
    \       return []int{max(max(max(arr[0], arr[1]), max(arr[2], arr[3])), max(arr[4],\
    \ arr[5]))}\n//     }\n//     if k == 6 {\n//         return []int{max(max(max(arr[0],\
    \ arr[1]), max(arr[2], arr[3])), max(max(arr[4], arr[5]), max(arr[6], arr[7])))}\n\
    //     }\n//     if k == 7 {\n//         return []int{max(max(max(arr[0], arr[1]),\
    \ max(arr[2], arr[3])), max(max(arr[4], arr[5]), max(arr[6], arr[7])))}\n//  \
    \   }\n//     if k == 8 {\n//         return []int{max(max(max(arr[0], arr[1]),\
    \ max(arr[2], arr[3])), max(max(arr[4], arr[5]), max(arr[6], arr[7])))}\n//  \
    \   }\n//     if k == 9 {\n//         return []int{max(max(max(arr[0], arr[1",
  "    // write your code here\n    if len(arr) == 0 {\n        return arr\n    }\n\
    \    \n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i]\
    \ > max {\n            max = arr[i]\n        }\n    }\n    \n    if k == 1 {\n\
    \        return []int{max}\n    }\n    \n    if max < 0 {\n        return []int{}\n\
    \    }\n    \n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n   \
    \     result[i] = max\n        max = max - arr[i]\n    }\n    \n    return result\n\
    }\n", "    \n}\n\n// Given a list arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the list will be in the range of [1,\
    \ 1000].\n// 2. The elements in the list will be in the range of [-1000, 1000].\n\
    // 3. 0 <= k <= len(arr)", "    // write your code here\n    if len(arr) == 0\
    \ {\n        return arr\n    }\n    \n    max := arr[0]\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\
    \    \n    if k == 1 {\n        return []int{max}\n    }\n    \n    result :=\
    \ make([]int, k)\n    result[0] = max\n    for i := 1; i < k; i++ {\n        result[i]\
    \ = arr[i]\n    }\n    \n    return result\n}\n", "    \n}\n\n// func maximum(arr\
    \ []int, k int) []int {\n//     if len(arr) == 0 {\n//         return []int{}\n\
    //     }\n//     \n//     if len(arr) == 1 {\n//         return arr\n//     }\n\
    //     \n//     if k == 1 {\n//         return arr[0:1]\n//     }\n//     \n//\
    \     max := arr[0]\n//     for i := 1; i < len(arr); i++ {\n//         if arr[i]\
    \ > max {\n//             max = arr[i]\n//         }\n//     }\n//     \n//  \
    \   if k == 2 {\n//         return []int{max, arr[len(arr) - 1]}\n//     }\n//\
    \     \n//     return []int{max}\n// }\n", "    \n}\n", "    \n}\n\n// Given a\
    \ list arr of integers and a positive integer k, return a sorted list \n// of\
    \ length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3,\
    \ -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n//\
    \ [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n\
    // Note:\n// 1. The length of the list will be in the range of [1, 1000].\n//\
    \ 2. The elements in the list will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)", "    // write your code here\n    if len(arr) == 0 {\n  \
    \      return arr\n    }\n    \n    max := arr[0]\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\
    \    \n    if k == 1 {\n        return []int{max}\n    }\n    \n    result :=\
    \ make([]int, k)\n    result[0] = max\n    \n    for i := 1; i < k; i++ {\n  \
    \      if arr[i] > max {\n            max = arr[i]\n        }\n        result[i]\
    \ = max\n    }\n    \n    return result\n}\n", "    // write your code here\n\
    \    if len(arr) == 0 {\n        return arr\n    }\n    \n    max := arr[0]\n\
    \    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max\
    \ = arr[i]\n        }\n    }\n    \n    if k == 1 {\n        return []int{max}\n\
    \    }\n    \n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n   \
    \     result[i] = max\n        for j := 0; j < len(arr); j++ {\n            if\
    \ arr[j] > max {\n                max = arr[j]\n            }\n        }\n   \
    \ }\n    return result\n}\n", "    \n}\n\n// Given a list arr of integers and\
    \ a positive integer k, return a sorted list \n// of length k with the maximum\
    \ k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3,\
    \ 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n\
    // >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length\
    \ of the list will be in the range of [1, 1000].\n// 2. The elements in the list\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)", "    // write\
    \ your code here\n    if len(arr) == 0 {\n        return arr\n    }\n    if k\
    \ == 1 {\n        return arr\n    }\n    if k > len(arr) {\n        return arr\n\
    \    }\n    \n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n       \
    \ if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    \n    if\
    \ k == 2 {\n        return []int{max, max}\n    }\n    \n    result := make([]int,\
    \ k)\n    result[0] = max\n    for i := 1; i < k; i++ {\n        result[i] = arr[i]\n\
    \    }\n    \n    return result\n}\n", "    \n}\n\n// Given a list arr of integers\
    \ and a positive integer k, return a sorted list \n// of length k with the maximum\
    \ k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3,\
    \ 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n\
    // >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length\
    \ of the list will be in the range of [1, 1000].\n// 2. The elements in the list\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)", "    // write\
    \ your code here\n    if len(arr) == 0 {\n        return arr\n    }\n    \n  \
    \  if k == 1 {\n        return arr\n    }\n    \n    if k > len(arr) {\n     \
    \   return arr\n    }\n    \n    max := arr[0]\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\
    \    \n    if k == len(arr) {\n        return arr\n    }\n    \n    result :=\
    \ make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i] = max\n    \
    \    max = max - arr[i]\n    }\n    \n    return result\n}\n", "    n := len(arr)\n\
    \    if k > n {\n        return arr\n    }\n    if k == 1 {\n        return arr\n\
    \    }\n    if k == 2 {\n        return arr[:2]\n    }\n    \n    // dp[i][j]\
    \ means the maximum k numbers in arr[0...i]\n    dp := make([][]int, n+1)\n  \
    \  for i := 0; i <= n; i++ {\n        dp[i] = make([]int, k+1)\n    }\n    \n\
    \    for i := 0; i <= n; i++ {\n        for j := 0; j <= k; j++ {\n          \
    \  if i == 0 {\n                dp[i][j] = arr[0]\n            } else if j ==\
    \ 0 {\n                dp[i][j] = arr[i]\n            } else {\n             \
    \   if arr[i-1] > arr[i] {\n                    dp[i][j] = arr[i-1]\n        \
    \        } else {\n                    dp[i][j] = arr[i]\n                }\n\
    \            }\n        }\n    }\n    \n    for i := 0; i <= n; i++ {\n      \
    \  for j := 0; j <= k; j++ {\n            if j == 0 {\n                dp[i][j]\
    \ = arr[i]\n            } else {\n                if arr[i] > dp[i][j-1] {\n \
    \                   dp[i][j] = arr[i]\n                } else {\n            \
    \        dp[i][j] = dp[i][j-1]\n                }\n            }\n        }\n\
    \    }\n    \n    return dp[n][k]\n}\n", "    \n}\n", "    \n}\n\n// Given a list\
    \ arr of integers and a positive integer k, return a sorted list \n// of length\
    \ k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4,\
    \ 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4,\
    \ 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n\
    // 1. The length of the list will be in the range of [1, 1000].\n// 2. The elements\
    \ in the list will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)",
  "    \n}\n\n// func maximum(arr []int, k int) []int {\n//     if len(arr) == 0 {\n\
    //         return []int{}\n//     }\n//     \n//     if k == 1 {\n//         return\
    \ arr\n//     }\n//     \n//     if arr[0] > arr[1] {\n//         arr[0], arr[1]\
    \ = arr[1], arr[0]\n//     }\n//     \n//     if arr[0] > arr[1] {\n//       \
    \  arr[0], arr[1] = arr[1], arr[0]\n//     }\n//     \n//     if arr[0] > arr[1]\
    \ {\n//         arr[0], arr[1] = arr[1], arr[0]\n//     }\n//     \n//     if\
    \ arr[0] > arr[1] {\n//         arr[0], arr[1] = arr[1], arr[0]\n//     }\n//\
    \     \n//     if arr[0] > arr[1] {\n//         arr[0], arr[1] = arr[1], arr[0]\n\
    //     }\n//     \n//     if arr[0] > arr[1] {\n//         arr[0], arr[1] = arr[1],\
    \ arr[0]\n//     }\n//     \n//     if arr[0] > arr[1] {\n//         arr[0], arr[1]\
    \ = arr[1], arr[0]\n//     }\n//     \n//     if arr[0] > arr[1] {\n//       \
    \  arr[0], arr[1] = arr[1], arr[0]\n//     }\n//     \n//     if arr[0] > arr[1]\
    \ {\n//         arr[0], arr[1] = arr[1], arr[0]\n//     }\n//     \n//     if\
    \ arr[0] > arr[1] {\n//         arr[0], arr[1] = arr[1], arr[0]\n//     }\n//\
    \     \n//     if arr[0] > arr[1] {\n//         arr[0], arr[1] = arr[1], arr[0]\n\
    //     ", "    // write your code here\n    if len(arr) == 0 {\n        return\
    \ arr\n    }\n    if k == 1 {\n        return arr\n    }\n    if k > len(arr)\
    \ {\n        return arr\n    }\n    \n    max := arr[0]\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\
    \    \n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = max\n        max = max - arr[i]\n        if max < 0 {\n            max = 0\n\
    \        }\n    }\n    return result\n}\n", "    \n}\n\n// Given a list arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n\
    // [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example\
    \ 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The\
    \ length of the list will be in the range of [1, 1000].\n// 2. The elements in\
    \ the list will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)",
  "    \n}\n\n// Given a list arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([], 0)\n// []\n// Example 2:\n// >>> maximum([1, 2, 3], 0)\n// []\n\
    // Example 3:\n// >>> maximum([1, 2, 3], 1)\n// [1]\n// Example 4:\n// >>> maximum([1,\
    \ 2, 3], 2)\n// [1, 2]\n// Example 5:\n// >>> maximum([1, 2, 3], 3)\n// [1, 2,\
    \ 3]\n// Note:\n// 1. The length of the list will be in the range of [1, 1000].\n\
    // 2. The elements in the list will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)", "    \n}\n\n// Given a list arr of integers and a positive\
    \ integer k, return a sorted list \n// of length k with the maximum k numbers\
    \ in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example\
    \ 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the list will\
    \ be in the range of [1, 1000].\n// 2. The elements in the list will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)", "    \n}\n\n// func maximum(arr\
    \ []int, k int) []int {\n//     if len(arr) == 0 {\n//         return []int{}\n\
    //     }\n//     \n//     if k == 0 {\n//         return []int{arr[0]}\n//   \
    \  }\n//     \n//     if k == 1 {\n//         return arr\n//     }\n//     \n\
    //     if arr[0] > arr[1] {\n//         arr[0], arr[1] = arr[1], arr[0]\n//  \
    \   }\n//     \n//     if arr[0] > arr[2] {\n//         arr[0], arr[2] = arr[2],\
    \ arr[0]\n//     }\n//     \n//     if arr[1] > arr[2] {\n//         arr[1], arr[2]\
    \ = arr[2], arr[1]\n//     }\n//     \n//     if arr[0] > arr[1] {\n//       \
    \  arr[0], arr[1] = arr[1], arr[0]\n//     }\n//     \n//     if arr[1] > arr[2]\
    \ {\n//         arr[1], arr[2] = arr[2], arr[1]\n//     }\n//     \n//     if\
    \ arr[0] > arr[1] {\n//         arr[0], arr[1] = arr[1], arr[0]\n//     }\n//\
    \     \n//     if arr[0] > arr[2] {\n//         arr[0], arr[2] = arr[2], arr[0]\n\
    //     }\n//     \n//     if arr[1] > arr[2] {\n//         arr[1], arr[2] = arr[2],\
    \ arr[1]\n//     }\n//     \n//     if arr[0] > arr[1] {\n//         arr[0], arr[1]\
    \ = arr[1], arr[0]\n//     }\n//     \n//     if arr[1] > arr[2] {\n//       \
    \  arr[1], arr[2] = arr[2], arr[1]\n//     }\n//     \n//     if arr[0] > arr[",
  "    \n}\n", "    // write your code here\n    if len(arr) == 0 {\n        return\
    \ arr\n    }\n    \n    if k == 1 {\n        return arr\n    }\n    \n    if k\
    \ > len(arr) {\n        return arr\n    }\n    \n    max := arr[0]\n    for i\
    \ := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n    }\n    \n    if k == len(arr) {\n        return arr\n    }\n \
    \   \n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = max\n        max = max - arr[i]\n    }\n    \n    return result\n}\n", " \
    \   \n}\n", "    \n}\n", "    \n}\n", "    \n}\n\n// Given a list arr of integers\
    \ and a positive integer k, return a sorted list \n// of length k with the maximum\
    \ k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3,\
    \ 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n\
    // >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length\
    \ of the list will be in the range of [1, 1000].\n// 2. The elements in the list\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)", "    \n}\n\
    \n// Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3,\
    \ -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n//\
    \ [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n\
    // Note:\n// 1. The length of the list will be in the range of [1, 1000].\n//\
    \ 2. The elements in the list will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)", "    \n}\n\n// func maximum(arr []int, k int) []int {\n//\
    \     if len(arr) == 0 {\n//         return arr\n//     }\n//     \n//     if\
    \ k == 1 {\n//         return arr\n//     }\n//     \n//     if k > len(arr) {\n\
    //         return arr\n//     }\n//     \n//     if k == len(arr) {\n//      \
    \   return arr\n//     }\n//     \n//     if arr[k-1] > arr[k] {\n//         arr[k-1],\
    \ arr[k] = arr[k], arr[k-1]\n//     }\n//     \n//     for i := k-1; i > 0; i--\
    \ {\n//         if arr[i] > arr[i-1] {\n//             arr[i-1], arr[i] = arr[i],\
    \ arr[i-1]\n//         }\n//     }\n//     \n//     return arr\n// }\n", "   \
    \ \n}\n\n// Given a list arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the list will be in the range of [1,\
    \ 1000].\n// 2. The elements in the list will be in the range of [-1000, 1000].\n\
    // 3. 0 <= k <= len(arr)", "    n := len(arr)\n    if k > n {\n        return\
    \ arr\n    }\n    if k == 1 {\n        return arr\n    }\n    if k == 2 {\n  \
    \      return arr[0:2]\n    }\n    \n    max := arr[0]\n    for i := 1; i < n;\
    \ i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\
    \    \n    max_index := 0\n    for i := 0; i < n; i++ {\n        if arr[i] ==\
    \ max {\n            max_index = i\n        }\n    }\n    \n    if max_index ==\
    \ 0 {\n        return arr[0:k]\n    }\n    \n    if max_index == n-1 {\n     \
    \   return arr[n-k:n]\n    }\n    \n    return arr[max_index:max_index+k]\n}\n",
  "    \n}\n\n// Given a list arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the list will be in the range of [1,\
    \ 1000].\n// 2. The elements in the list will be in the range of [-1000, 1000].\n\
    // 3. 0 <= k <= len(arr)", "    // write your code here\n    if len(arr) == 0\
    \ {\n        return arr\n    }\n    \n    max_arr := make([]int, k)\n    for i\
    \ := 0; i < k; i++ {\n        max_arr[i] = arr[0]\n    }\n    \n    for i := 1;\
    \ i < len(arr); i++ {\n        if arr[i] > max_arr[k-1] {\n            max_arr[k-1]\
    \ = arr[i]\n        } else {\n            for j := 0; j < k-1; j++ {\n       \
    \         if arr[i] > max_arr[j] {\n                    max_arr[j] = arr[i]\n\
    \                }\n            }\n        }\n    }\n    \n    return max_arr\n\
    }\n", "    \n}\n\n// Given a list arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the list will be in the range of [1,\
    \ 1000].\n// 2. The elements in the list will be in the range of [-1000, 1000].\n\
    // 3. 0 <= k <= len(arr)", "    \n}\n\n// Given a list arr of integers and a positive\
    \ integer k, return a sorted list \n// of length k with the maximum k numbers\
    \ in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example\
    \ 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the list will\
    \ be in the range of [1, 1000].\n// 2. The elements in the list will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)", "    \n}\n\n// func maximum(arr\
    \ []int, k int) []int {\n//     if len(arr) == 0 {\n//         return []int{}\n\
    //     }\n//     \n//     if k == 0 {\n//         return []int{arr[0]}\n//   \
    \  }\n//     \n//     if k == 1 {\n//         return arr\n//     }\n//     \n\
    //     if arr[0] > arr[1] {\n//         arr[0], arr[1] = arr[1], arr[0]\n//  \
    \   }\n//     \n//     if arr[0] > arr[2] {\n//         arr[0], arr[2] = arr[2],\
    \ arr[0]\n//     }\n//     \n//     if arr[1] > arr[2] {\n//         arr[1], arr[2]\
    \ = arr[2], arr[1]\n//     }\n//     \n//     if arr[0] > arr[1] {\n//       \
    \  arr[0], arr[1] = arr[1], arr[0]\n//     }\n//     \n//     if arr[0] > arr[2]\
    \ {\n//         arr[0], arr[2] = arr[2], arr[0]\n//     }\n//     \n//     if\
    \ arr[1] > arr[2] {\n//         arr[1], arr[2] = arr[2], arr[1]\n//     }\n//\
    \     \n//     if arr[0] > arr[1] {\n//         arr[0], arr[1] = arr[1], arr[0]\n\
    //     }\n//     \n//     if arr[0] > arr[2] {\n//         arr[0], arr[2] = arr[2],\
    \ arr[0]\n//     }\n//     \n//     if arr[1] > arr[2] {\n//         arr[1], arr[2]\
    \ = arr[2], arr[1]\n//     }\n//     \n//     if arr[0] > arr[1] {\n//       \
    \  arr[0], arr[1] = arr[1], arr[0]\n//     }\n//     \n//     if arr[0] > arr[",
  "    \n}\n\n// Given a list arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the list will be in the range of [1,\
    \ 1000].\n// 2. The elements in the list will be in the range of [-1000, 1000].\n\
    // 3. 0 <= k <= len(arr)", "    \n}\n", "    \n}\n\n// Given a list arr of integers\
    \ and a positive integer k, return a sorted list \n// of length k with the maximum\
    \ k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3,\
    \ 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n\
    // >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length\
    \ of the list will be in the range of [1, 1000].\n// 2. The elements in the list\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)", "    \n}\n\
    \n// func maximum(arr []int, k int) []int {\n//     if len(arr) == 0 {\n//   \
    \      return []int{}\n//     }\n//     \n//     if len(arr) == 1 {\n//      \
    \   return arr\n//     }\n//     \n//     if k == 1 {\n//         return arr[0:1]\n\
    //     }\n//     \n//     max := arr[0]\n//     \n//     for i := 1; i < len(arr);\
    \ i++ {\n//         if arr[i] > max {\n//             max = arr[i]\n//       \
    \  }\n//     }\n//     \n//     if k == 2 {\n//         return []int{max, arr[0]}\n\
    //     }\n//     \n//     return []int{max}\n// }\n", "    // write your code\
    \ here\n    if len(arr) == 0 {\n        return arr\n    }\n    \n    if k == 1\
    \ {\n        return arr\n    }\n    \n    max := arr[0]\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\
    \    \n    if k > len(arr) {\n        return arr\n    }\n    \n    result := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        result[i] = max\n        for j :=\
    \ 0; j < len(arr); j++ {\n            if arr[j] < max {\n                max =\
    \ arr[j]\n            }\n        }\n    }\n    \n    return result\n}\n", "  \
    \  \n}\n\n// Given a list arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the list will be in the range of [1,\
    \ 1000].\n// 2. The elements in the list will be in the range of [-1000, 1000].\n\
    // 3. 0 <= k <= len(arr)", "    \n}\n\n// Given a list arr of integers and a positive\
    \ integer k, return a sorted list \n// of length k with the maximum k numbers\
    \ in arr.\n// Example 1:\n// >>> maximum([], 0)\n// []\n// Example 2:\n// >>>\
    \ maximum([1, 2, 3, 4, 5], 0)\n// []\n// Example 3:\n// >>> maximum([1, 2, 3,\
    \ 4, 5], 1)\n// [1]\n// Example 4:\n// >>> maximum([1, 2, 3, 4, 5], 2)\n// [1,\
    \ 2]\n// Example 5:\n// >>> maximum([1, 2, 3, 4, 5], 3)\n// [1, 2, 3]\n// Example\
    \ 6:\n// >>> maximum([1, 2, 3, 4, 5], 4)\n// [1, 2, 3, 4]\n// Example 7:\n// >>>\
    \ maximum([1, 2, 3, 4, 5], 5)\n// [1, 2, 3, 4, 5]\n// Note:\n// 1. The length\
    \ of the list will be in the range of [1, 1000].\n// 2. The elements in the list\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)", "    // write\
    \ your code here\n    if len(arr) == 0 {\n        return arr\n    }\n    \n  \
    \  if k == 1 {\n        return arr\n    }\n    \n    if k > len(arr) {\n     \
    \   return arr\n    }\n    \n    if k == len(arr) {\n        return arr\n    }\n\
    \    \n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i]\
    \ > max {\n            max = arr[i]\n        }\n    }\n    \n    if k == 2 {\n\
    \        return []int{max, max}\n    }\n    \n    if k == 3 {\n        return\
    \ []int{max, max, max}\n    }\n    \n    if k == 4 {\n        return []int{max,\
    \ max, max, max}\n    }\n    \n    if k == 5 {\n        return []int{max, max,\
    \ max, max, max}\n    }\n    \n    if k == 6 {\n        return []int{max, max,\
    \ max, max, max, max}\n    }\n    \n    if k == 7 {\n        return []int{max,\
    \ max, max, max, max, max, max}\n    }\n    \n    if k == 8 {\n        return\
    \ []int{max, max, max, max, max, max, max, max}\n    }\n    \n    if k == 9 {\n\
    \        return []int{max, max, max, max, max, max, max, max, max}\n    }\n  \
    \  \n    if k == 10 {\n        return []int{max, max, max, max, max, max, max,\
    \ max, max, max}\n    }\n    \n    if k == 11 {\n        return []int{max, max,\
    \ max, max, max, max, max, max, max, max, max}\n    }\n    \n    if k == 12 {\n\
    \        return []int{max, max, max, max, max, max, max, max, max, max, max, max}\n\
    \    }\n    \n    if k == 13 {\n        return []int{max, max, max, max, max,\
    \ max, max, max, max,", "    n := len(arr)\n    if k > n {\n        return arr\n\
    \    }\n    \n    max := arr[0]\n    for i := 1; i < n; i++ {\n        if arr[i]\
    \ > max {\n            max = arr[i]\n        }\n    }\n    \n    result := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        result[i] = max\n        max = max\
    \ - arr[i]\n    }\n    \n    return result\n}\n", "    \n}\n\n// func maximum(arr\
    \ []int, k int) []int {\n//     if len(arr) == 0 {\n//         return []int{}\n\
    //     }\n//     \n//     if k == 1 {\n//         return arr\n//     }\n//   \
    \  \n//     if k > len(arr) {\n//         return arr\n//     }\n//     \n//  \
    \   if k == len(arr) {\n//         return arr\n//     }\n//     \n//     if arr[k-1]\
    \ > arr[k] {\n//         return arr\n//     }\n//     \n//     if arr[k-1] < arr[k]\
    \ {\n//         return arr\n//     }\n//     \n//     return arr[k-1:k]\n// }\n",
  "    // write your code here\n    if len(arr) == 0 {\n        return arr\n    }\n\
    \    \n    max := arr[0]\n    max_index := 0\n    for i := 1; i < len(arr); i++\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            max_index\
    \ = i\n        }\n    }\n    \n    if k == 1 {\n        return []int{max}\n  \
    \  }\n    \n    result := make([]int, k)\n    result[0] = max\n    for i := 1;\
    \ i < k; i++ {\n        if arr[max_index] < arr[i] {\n            max_index =\
    \ i\n        }\n        result[i] = arr[max_index]\n    }\n    return result\n\
    }\n", "    \n}\n", "    \n}\n\n// Given a list arr of integers and a positive\
    \ integer k, return a sorted list \n// of length k with the maximum k numbers\
    \ in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example\
    \ 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the list will\
    \ be in the range of [1, 1000].\n// 2. The elements in the list will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)", "    \n}\n", "    \n}\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3,\
    \ -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n//\
    \ [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n\
    // Note:\n// 1. The length of the list will be in the range of [1, 1000].\n//\
    \ 2. The elements in the list will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)", "    \n}\n\n// Given a list arr of integers and a positive\
    \ integer k, return a sorted list \n// of length k with the maximum k numbers\
    \ in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example\
    \ 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the list will\
    \ be in the range of [1, 1000].\n// 2. The elements in the list will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)", "    \n}\n\n// func maximum(arr\
    \ []int, k int) []int {\n//     \n// }\n", "    // write your code here\n    if\
    \ len(arr) == 0 {\n        return arr\n    }\n    \n    max := arr[0]\n    for\
    \ i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n    }\n    \n    if k == 1 {\n        return []int{max}\n    }\n \
    \   \n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = max\n        for j := 0; j < len(arr); j++ {\n            if arr[j] > max\
    \ {\n                max = arr[j]\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    \n}\n\n// Given a list arr of integers and a positive integer\
    \ k, return a sorted list \n// of length k with the maximum k numbers in arr.\n\
    // Example 1:\n// >>> maximum([], 0)\n// []int{}\n// Example 2:\n// >>> maximum([1,\
    \ 2, 3], 0)\n// []int{}\n// Example 3:\n// >>> maximum([1, 2, 3], 1)\n// []int{1}\n\
    // Example 4:\n// >>> maximum([1, 2, 3], 2)\n// []int{1, 2}\n// Example 5:\n//\
    \ >>> maximum([1, 2, 3], 3)\n// []int{1, 2, 3}\n// Note:\n// 1. The length of\
    \ the list will be in the range of [1, 1000].\n// 2. The elements in the list\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)", "    \n}\n",
  "    // write your code here\n    if len(arr) == 0 {\n        return arr\n    }\n\
    \    \n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i]\
    \ > max {\n            max = arr[i]\n        }\n    }\n    \n    if k == 1 {\n\
    \        return []int{max}\n    }\n    \n    result := make([]int, k)\n    for\
    \ i := 0; i < k; i++ {\n        result[i] = max\n        max = max - arr[i]\n\
    \    }\n    \n    return result\n}\n", "    \n}\n\n// Given a list arr of integers\
    \ and a positive integer k, return a sorted list \n// of length k with the maximum\
    \ k numbers in arr.\n// Example 1:\n// >>> maximum([], 3)\n// []\n// Example 2:\n\
    // >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 3:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 4:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the list will be in the range of [1,\
    \ 1000].\n// 2. The elements in the list will be in the range of [-1000, 1000].\n\
    // 3. 0 <= k <= len(arr)", "    \n}\n", "    \n}\n", "    \n}\n", "    n := len(arr)\n\
    \    if k > n {\n        k = n\n    }\n    if k == 0 {\n        return arr\n \
    \   }\n    \n    max := arr[0]\n    for i := 1; i < k; i++ {\n        if arr[i]\
    \ > max {\n            max = arr[i]\n        }\n    }\n    \n    for i := 0; i\
    \ < k; i++ {\n        arr[i] = max\n        max = max - arr[i]\n    }\n    \n\
    \    return arr\n}\n", "    \n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
