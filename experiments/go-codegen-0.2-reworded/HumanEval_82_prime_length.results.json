{
  "name": "HumanEval_82_prime_length",
  "language": "go_test.go",
  "prompt": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n",
  "tests": "func TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    if len(myString) < 2 {\n        return false\n    }\n    for i := 2; i < len(myString); i++ {\n        if myString[i] == myString[0] {\n            return false\n        }\n        if myString[i] == myString[len(myString) - 1] {\n            return false\n        }\n        if myString[i] == myString[len(myString) - i] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    if len(myString) < 2 {\n        return false\n    }\n    for i := 2; i < len(myString); i++ {\n        if myString[i] == myString[0] {\n            return false\n        }\n        if myString[i] == myString[len(myString) - 1] {\n            return false\n        }\n        if myString[i] == myString[len(myString) - i] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    if len(myString) < 2 {\n        return false\n    }\n    for i := 2; i < len(myString); i++ {\n        if myString[i] == myString[0] {\n            return false\n        }\n        if myString[i] == myString[len(myString)-1] {\n            return false\n        }\n        if myString[i] == myString[len(myString)-i] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp80rql5f9_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp80rql5f9_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp80rql5f9_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp80rql5f9_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmp80rql5f9_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp80rql5f9_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmp80rql5f9_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp80rql5f9_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' || myString[i] == 'y' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpkk90esqj_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpkk90esqj_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpkk90esqj_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmpkk90esqj_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpkk90esqj_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpkk90esqj_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpkk90esqj_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpkk90esqj_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpkk90esqj_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpkk90esqj_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    if len(myString) < 2 {\n        return false\n    }\n    for i := 2; i < len(myString); i++ {\n        if myString[i] == myString[0] {\n            return false\n        }\n        if myString[i] == myString[len(myString) - 1] {\n            return false\n        }\n        if myString[i] == myString[len(myString) - i] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' || myString[i] == 'y' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' || myString[i] == 'y' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpkk90esqj_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpkk90esqj_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpkk90esqj_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmpkk90esqj_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpkk90esqj_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpkk90esqj_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpkk90esqj_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpkk90esqj_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpkk90esqj_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpkk90esqj_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    if len(myString) < 2 {\n        return false\n    }\n    for i := 2; i < len(myString); i++ {\n        if myString[i] == myString[0] {\n            return false\n        }\n        if myString[i] == myString[len(myString)-1] {\n            return false\n        }\n        if myString[i] == myString[len(myString)-i] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp80rql5f9_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp80rql5f9_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp80rql5f9_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp80rql5f9_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmp80rql5f9_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp80rql5f9_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmp80rql5f9_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp80rql5f9_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' || myString[i] == 'y' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpkk90esqj_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpkk90esqj_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpkk90esqj_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmpkk90esqj_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpkk90esqj_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpkk90esqj_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpkk90esqj_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpkk90esqj_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpkk90esqj_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpkk90esqj_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' || myString[i] == 'y' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' || myString[i] == 'y' {\n            continue\n        }\n        for j := 0; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                continue\n            }\n            if i + j == len(myString) - 1 {\n                return true\n            }\n            if myString[i] + myString[j] == myString[i + j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of range [7] with length 7 [recovered]\n\tpanic: runtime error: index out of range [7] with length 7\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.prime_length(0x545a58, 0x7, 0x58a501)\n\t/tmp/tmpd3b2me_o_test.go:31 +0xbd\ncommand-line-arguments_test.TestPrime_Length(0xc000102600)\n\t/tmp/tmpd3b2me_o_test.go:47 +0x87\ntesting.tRunner(0xc000102600, 0x54f228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    if len(myString) < 2 {\n        return false\n    }\n    for i := 2; i < len(myString); i++ {\n        if myString[i] == myString[0] {\n            return false\n        }\n        if myString[i] == myString[len(myString) - 1] {\n            return false\n        }\n        if myString[i] == myString[len(myString) - i] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    if len(myString) == 1 {\n        return true\n    }\n    for i := 2; i < len(myString); i++ {\n        if myString[i] == myString[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp5_8ue_xc_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp5_8ue_xc_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp5_8ue_xc_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp5_8ue_xc_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp5_8ue_xc_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp5_8ue_xc_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp5_8ue_xc_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    // your code here\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpi_0b8xro_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpi_0b8xro_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpi_0b8xro_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmpi_0b8xro_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpi_0b8xro_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpi_0b8xro_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpi_0b8xro_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpi_0b8xro_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpi_0b8xro_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpi_0b8xro_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    if len(myString) < 2 {\n        return false\n    }\n    for i := 2; i < len(myString); i++ {\n        if myString[i] == myString[0] {\n            return false\n        }\n        if myString[i] == myString[len(myString)-1] {\n            return false\n        }\n        if myString[i] == myString[len(myString)/2] {\n            return false\n        }\n        if myString[i] == myString[len(myString)/3] {\n            return false\n        }\n        if myString[i] == myString[len(myString)/4] {\n            return false\n        }\n        if myString[i] == myString[len(myString)/5] {\n            return false\n        }\n        if myString[i] == myString[len(myString)/6] {\n            return false\n        }\n        if myString[i] == myString[len(myString)/7] {\n            return false\n        }\n        if myString[i] == myString[len(myString)/8] {\n            return false\n        }\n        if myString[i] == myString[len(myString)/9] {\n            return false\n        }\n        if myString[i] == myString[len(myString)/10] {\n            return false\n        }\n        if myString[i] == myString[len(myString)/11] {\n            return false\n        }\n        if myString[i] == myString[len(myString)/12] {\n            return false\n        }\n        if myString[i] == myString[len(myString)/13] {\n            return false\n        }\n        if myString[i] == myString[len(myString)/14] {\n            return false\n        }\n        if myString[i] == myString[len(myString)/15] {\n            return false\n        }\n        if myString[i] == myString[len(myString)/16] {\n            return false\n        }\n        if myString[i] == myString[len(myString)/17] {\n            return false\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374866,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpd__0ar0f_test.go:77:6: expected '(', found TestPrime_Length\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' {\n            continue\n        }\n        for j := 0; j < len(myString); j++ {\n            if myString[j] == myString[i] {\n                continue\n            }\n            if myString[i] - myString[j] == 2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp3qvmd37w_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp3qvmd37w_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp3qvmd37w_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmp3qvmd37w_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp3qvmd37w_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmp3qvmd37w_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp3qvmd37w_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmp3qvmd37w_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp3qvmd37w_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    // your code here\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp48x9qv1b_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp48x9qv1b_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp48x9qv1b_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp48x9qv1b_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmp48x9qv1b_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp48x9qv1b_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmp48x9qv1b_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp48x9qv1b_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmp48x9qv1b_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp48x9qv1b_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    if len(myString) < 2 {\n        return false\n    }\n    for i := 2; i < len(myString); i++ {\n        if myString[i] == myString[0] {\n            return false\n        }\n        if myString[i] == myString[len(myString) - 1] {\n            return false\n        }\n        if myString[i] == myString[len(myString) - i] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        if myString[i] == ',' {\n            continue\n        }\n        if myString[i] == '.' {\n            continue\n        }\n        if myString[i] == '!' {\n            continue\n        }\n        if myString[i] == '?' {\n            continue\n        }\n        if myString[i] == ';' {\n            continue\n        }\n        if myString[i] == ':' {\n            continue\n        }\n        if myString[i] == '\"' {\n            continue\n        }\n        if myString[i] == '\\'' {\n            continue\n        }\n        if myString[i] == '(' {\n            continue\n        }\n        if myString[i] == ')' {\n            continue\n        }\n        if myString[i] == '{' {\n            continue\n        }\n        if myString[i] == '}' {\n            continue\n        }\n        if myString[i] == '[' {\n            continue\n        }\n        if myString[i] == ']' {\n            continue\n        }\n        if myString[i] == '+' {\n            continue\n        }\n        if myString[i] == '-' {\n            continue\n        }\n        if myString[i] == '*' {\n            continue\n        }\n        if myString[i] == '/' {\n            continue\n        }\n        if myString[i] == '%' {\n            continue\n        }\n        if myString[i] == '&' {\n            continue\n        }\n        if myString[i] == '|' {\n            continue\n        }\n        if myString[i] == '^' {\n            continue\n        }\n        if myString[i] == '=' {\n            continue\n        }\n        if myString[i] == '<' {\n            continue\n        }\n        if myString[i] == '>' {\n            continue\n        }\n        if myString[i] == '@' {\n            continue\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374866,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpmibsskdn_test.go:101:6: expected '(', found TestPrime_Length\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpbryoflqr_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpbryoflqr_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpbryoflqr_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpbryoflqr_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpbryoflqr_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpbryoflqr_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpbryoflqr_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpbryoflqr_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpbryoflqr_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpbryoflqr_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    if len(myString) == 0 {\n        return false\n    }\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        if myString[i] == ',' {\n            continue\n        }\n        if myString[i] == '.' {\n            continue\n        }\n        if myString[i] == '!' {\n            continue\n        }\n        if myString[i] == '?' {\n            continue\n        }\n        if myString[i] == ';' {\n            continue\n        }\n        if myString[i] == ':' {\n            continue\n        }\n        if myString[i] == '\"' {\n            continue\n        }\n        if myString[i] == '\\'' {\n            continue\n        }\n        if myString[i] == '(' {\n            continue\n        }\n        if myString[i] == ')' {\n            continue\n        }\n        if myString[i] == '{' {\n            continue\n        }\n        if myString[i] == '}' {\n            continue\n        }\n        if myString[i] == '[' {\n            continue\n        }\n        if myString[i] == ']' {\n            continue\n        }\n        if myString[i] == '<' {\n            continue\n        }\n        if myString[i] == '>' {\n            continue\n        }\n        if myString[i] == '+' {\n            continue\n        }\n        if myString[i] == '-' {\n            continue\n        }\n        if myString[i] == '*' {\n            continue\n        }\n        if myString[i] == '/' {\n            continue\n        }\n        if myString[i] == '%' {\n            continue\n        }\n        if myString[i] == '&' {\n            continue\n        }\n        if myString[i] == '|' {\n            continue\n        }\n        if myString[i] == '^' {\n            continue\n        }\n        if myString[i] == '=' {\n            continue\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374866,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp7_53v4x3_test.go:102:6: expected '(', found TestPrime_Length\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' || myString[i] == 'y' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' || myString[i] == 'y' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    if len(myString) == 1 {\n        return false\n    }\n    for i := 2; i < len(myString); i++ {\n        if myString[i] == myString[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpb6si4osp_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmpb6si4osp_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpb6si4osp_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpb6si4osp_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpb6si4osp_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    if len(myString) == 1 {\n        return true\n    }\n    for i := 2; i < len(myString); i++ {\n        if myString[i] == myString[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp5_8ue_xc_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp5_8ue_xc_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp5_8ue_xc_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp5_8ue_xc_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp5_8ue_xc_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp5_8ue_xc_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp5_8ue_xc_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' || myString[i] == 'y' {\n            continue\n        }\n        if myString[i] == 'A' || myString[i] == 'E' || myString[i] == 'I' || myString[i] == 'O' || myString[i] == 'U' || myString[i] == 'Y' {\n            continue\n        }\n        if myString[i] == '1' || myString[i] == '2' || myString[i] == '3' || myString[i] == '4' || myString[i] == '5' || myString[i] == '6' || myString[i] == '7' || myString[i] == '8' || myString[i] == '9' {\n            continue\n        }\n        if myString[i] == '0' {\n            continue\n        }\n        if myString[i] == '.' {\n            continue\n        }\n        if myString[i] == ',' {\n            continue\n        }\n        if myString[i] == '!' {\n            continue\n        }\n        if myString[i] == '?' {\n            continue\n        }\n        if myString[i] == '\"' {\n            continue\n        }\n        if myString[i] == '\\'' {\n            continue\n        }\n        if myString[i] == '(' {\n            continue\n        }\n        if myString[i] == ')' {\n            continue\n        }\n        if myString[i] == '{' {\n            continue\n        }\n        if myString[i] == '}' {\n            continue\n        }\n        if myString[i] == '[' {\n            continue\n        }\n        if myString[i] == ']' {\n            continue\n        }\n        if\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374866,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpintm6lal_test.go:73:6: expected '(', found TestPrime_Length\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' || myString[i] == 'y' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    if len(myString) == 1 {\n        return true\n    }\n    for i := 2; i < len(myString); i++ {\n        if myString[i] == myString[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp5_8ue_xc_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp5_8ue_xc_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp5_8ue_xc_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp5_8ue_xc_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp5_8ue_xc_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp5_8ue_xc_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp5_8ue_xc_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' || myString[i] == 'y' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' || myString[i] == 'y' {\n            continue\n        }\n        for j := 0; j < len(myString); j++ {\n            if myString[j] == myString[i] {\n                continue\n            }\n            if myString[i] == '1' && myString[j] == '9' {\n                continue\n            }\n            if myString[i] == '2' && myString[j] == '4' {\n                continue\n            }\n            if myString[i] == '3' && myString[j] == '6' {\n                continue\n            }\n            if myString[i] == '5' && myString[j] == '5' {\n                continue\n            }\n            if myString[i] == '7' && myString[j] == '7' {\n                continue\n            }\n            if myString[i] == '8' && myString[j] == '8' {\n                continue\n            }\n            if myString[i] == '9' && myString[j] == '9' {\n                continue\n            }\n            if myString[i] == '0' && myString[j] == '0' {\n                continue\n            }\n            if myString[i] == '1' && myString[j] == '2' {\n                continue\n            }\n            if myString[i] == '3' && myString[j] == '4' {\n                continue\n            }\n            if myString[i] == '5' && myString[j] == '6' {\n                continue\n            }\n            if myString[i] == '7' && myString[j] == '8' {\n                continue\n            }\n            if myString[i] == '9' && myString[j] == '0' {\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374866,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpv4tfy7v7_test.go:68:6: expected '(', found TestPrime_Length\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' {\n            continue\n        }\n        for j := 0; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                continue\n            }\n            if i + j == len(myString) - 1 {\n                return true\n            }\n            if myString[i] + myString[j] == myString[i + j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of range [7] with length 7 [recovered]\n\tpanic: runtime error: index out of range [7] with length 7\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.prime_length(0x545a58, 0x7, 0x58a501)\n\t/tmp/tmpdvr27ska_test.go:31 +0xbd\ncommand-line-arguments_test.TestPrime_Length(0xc000102600)\n\t/tmp/tmpdvr27ska_test.go:47 +0x87\ntesting.tRunner(0xc000102600, 0x54f228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    if len(myString) == 0 {\n        return false\n    }\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpul4hsx1m_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpul4hsx1m_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpul4hsx1m_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmpul4hsx1m_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpul4hsx1m_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpul4hsx1m_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpul4hsx1m_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpul4hsx1m_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpul4hsx1m_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    if len(myString) < 2 {\n        return false\n    }\n    for i := 2; i < len(myString); i++ {\n        if myString[i] == myString[0] {\n            return false\n        }\n        if myString[i] == myString[len(myString) - 1] {\n            return false\n        }\n        if myString[i] == myString[len(myString) - i] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    if len(myString) == 1 {\n        return false\n    }\n    for i := 2; i < len(myString); i++ {\n        if myString[i] == myString[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpb6si4osp_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmpb6si4osp_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpb6si4osp_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpb6si4osp_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpb6si4osp_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' || myString[i] == 'y' {\n            continue\n        }\n        if myString[i] == 'A' || myString[i] == 'E' || myString[i] == 'I' || myString[i] == 'O' || myString[i] == 'U' || myString[i] == 'Y' {\n            continue\n        }\n        if myString[i] == '1' || myString[i] == '2' || myString[i] == '3' || myString[i] == '4' || myString[i] == '5' || myString[i] == '6' || myString[i] == '7' || myString[i] == '8' || myString[i] == '9' {\n            continue\n        }\n        if myString[i] == '0' {\n            continue\n        }\n        if myString[i] == '.' {\n            continue\n        }\n        if myString[i] == ',' {\n            continue\n        }\n        if myString[i] == '!' {\n            continue\n        }\n        if myString[i] == '?' {\n            continue\n        }\n        if myString[i] == '\"' {\n            continue\n        }\n        if myString[i] == '\\'' {\n            continue\n        }\n        if myString[i] == '(' {\n            continue\n        }\n        if myString[i] == ')' {\n            continue\n        }\n        if myString[i] == '{' {\n            continue\n        }\n        if myString[i] == '}' {\n            continue\n        }\n        if myString[i] == '[' {\n            continue\n        }\n        if myString[i] == ']' {\n            continue\n        }\n        if\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374866,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpintm6lal_test.go:73:6: expected '(', found TestPrime_Length\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' || myString[i] == 'y' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' {\n            continue\n        }\n        if myString[i] == 'l' {\n            continue\n        }\n        if myString[i] == 's' {\n            continue\n        }\n        if myString[i] == 't' {\n            continue\n        }\n        if myString[i] == 'n' {\n            continue\n        }\n        if myString[i] == 'r' {\n            continue\n        }\n        if myString[i] == 'd' {\n            continue\n        }\n        if myString[i] == 'g' {\n            continue\n        }\n        if myString[i] == 'b' {\n            continue\n        }\n        if myString[i] == 'p' {\n            continue\n        }\n        if myString[i] == 'v' {\n            continue\n        }\n        if myString[i] == 'c' {\n            continue\n        }\n        if myString[i] == 'x' {\n            continue\n        }\n        if myString[i] == 'm' {\n            continue\n        }\n        if myString[i] == 'y' {\n            continue\n        }\n        if myString[i] == 'z' {\n            continue\n        }\n        if myString[i] == '0' {\n            continue\n        }\n        if myString[i] == '1' {\n            continue\n        }\n        if myString[i] == '8' {\n            continue\n        }\n        if myString[i] == '9' {\n            continue\n        }\n        if myString[i] == '7' {\n            continue\n        }\n        if myString[i] == '6' {\n            continue\n        }\n        if myString[i] == '5' {\n            continue\n        }\n        if myString[i] == '4' {\n            continue\n        }\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374866,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpep5ubh1d_test.go:93:6: expected '(', found TestPrime_Length\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    if len(myString) < 2 {\n        return false\n    }\n    for i := 2; i < len(myString); i++ {\n        if myString[i] == myString[0] {\n            return false\n        }\n        if myString[i] == myString[len(myString) - 1] {\n            return false\n        }\n        if myString[i] - myString[0] == i {\n            return false\n        }\n        if myString[len(myString) - 1] - myString[0] == i {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa8fitq3w_test.go:30:38: invalid operation: myString[i] - myString[0] == i (mismatched types byte and int)\n/tmp/tmpa8fitq3w_test.go:33:54: invalid operation: myString[len(myString) - 1] - myString[0] == i (mismatched types byte and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' || myString[i] == 'y' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' || myString[i] == 'y' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                continue\n            }\n            if myString[i] + myString[j] == myString[i] * myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp4x17ywas_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp4x17ywas_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmp4x17ywas_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp4x17ywas_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp4x17ywas_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp4x17ywas_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' {\n            continue\n        }\n        for j := 0; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                continue\n            }\n            if i + j == len(myString) - 1 {\n                return true\n            }\n            if myString[i] + myString[j] == myString[i + j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of range [7] with length 7 [recovered]\n\tpanic: runtime error: index out of range [7] with length 7\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.prime_length(0x545a58, 0x7, 0x58a501)\n\t/tmp/tmpdvr27ska_test.go:31 +0xbd\ncommand-line-arguments_test.TestPrime_Length(0xc000102600)\n\t/tmp/tmpdvr27ska_test.go:47 +0x87\ntesting.tRunner(0xc000102600, 0x54f228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' || myString[i] == 'y' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    if len(myString) < 2 {\n        return false\n    }\n    for i := 2; i < len(myString); i++ {\n        if myString[i] == myString[0] {\n            return false\n        }\n        if myString[i] == myString[len(myString) - 1] {\n            return false\n        }\n        if myString[i] == myString[len(myString) - i] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    if len(myString) == 1 {\n        return true\n    }\n    for i := 2; i < len(myString); i++ {\n        if myString[i] == myString[0] {\n            return false\n        }\n        if myString[i] == myString[len(myString) - i] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpf_cyq8ep_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpf_cyq8ep_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpf_cyq8ep_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpf_cyq8ep_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpf_cyq8ep_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpf_cyq8ep_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpf_cyq8ep_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    if len(myString) < 2 {\n        return false\n    }\n    for i := 2; i < len(myString); i++ {\n        if myString[i] == myString[0] {\n            return false\n        }\n        if myString[i] == myString[len(myString) - 1] {\n            return false\n        }\n        if myString[i] - myString[0] == myString[len(myString) - 1] - myString[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpm60bce7s_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpm60bce7s_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpm60bce7s_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpm60bce7s_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpm60bce7s_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpm60bce7s_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpm60bce7s_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpm60bce7s_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' {\n            continue\n        }\n        for j := 0; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                continue\n            }\n            if myString[i] - myString[j] == 2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpl9c4efgd_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmpl9c4efgd_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpl9c4efgd_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpl9c4efgd_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpl9c4efgd_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpl9c4efgd_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpl9c4efgd_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpl9c4efgd_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpl9c4efgd_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpq5jxbjhv_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' || myString[i] == 'y' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    if len(myString) < 2 {\n        return false\n    }\n    for i := 2; i < len(myString); i++ {\n        if myString[i] == myString[0] {\n            return false\n        }\n        if myString[i] == myString[len(myString) - 1] {\n            return false\n        }\n        if myString[i] == myString[len(myString) - i] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    if len(myString) < 2 {\n        return false\n    }\n    for i := 2; i < len(myString); i++ {\n        if myString[i] == myString[0] {\n            return false\n        }\n        if myString[i] == myString[len(myString) - 1] {\n            return false\n        }\n        if myString[i] == myString[len(myString) - i] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' || myString[i] == 'y' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpbhuza9h8_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[j] == ' ' {\n                continue\n            }\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpii8oyto4_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpii8oyto4_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpii8oyto4_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmpii8oyto4_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpii8oyto4_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpii8oyto4_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpii8oyto4_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpii8oyto4_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpii8oyto4_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpii8oyto4_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' || myString[i] == 'y' {\n            continue\n        }\n        for j := 0; j < len(myString); j++ {\n            if myString[j] == myString[i] {\n                continue\n            }\n            if myString[i] - myString[j] == 2 {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpnezm_wdl_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpnezm_wdl_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpnezm_wdl_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmpnezm_wdl_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpnezm_wdl_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpnezm_wdl_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpnezm_wdl_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    if len(myString) < 2 {\n        return false\n    }\n    for i := 2; i < len(myString); i++ {\n        if myString[i] == myString[0] {\n            return false\n        }\n        if myString[i] == myString[len(myString)-1] {\n            return false\n        }\n        if myString[i] == myString[len(myString)-i] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp80rql5f9_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp80rql5f9_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp80rql5f9_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp80rql5f9_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmp80rql5f9_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp80rql5f9_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmp80rql5f9_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp80rql5f9_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    if len(myString) < 2 {\n        return false\n    }\n    for i := 2; i < len(myString); i++ {\n        if myString[i] == myString[0] {\n            return false\n        }\n        if myString[i] == myString[len(myString) - 1] {\n            return false\n        }\n        if myString[i] == myString[len(myString) - i] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        if myString[i] == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' {\n            continue\n        }\n        if myString[i] == 'y' {\n            myString = myString[0:i] + \"ies\" + myString[i+1:]\n            continue\n        }\n        if myString[i] == 's' {\n            myString = myString[0:i] + \"es\" + myString[i+1:]\n            continue\n        }\n        if myString[i] == 'n' {\n            myString = myString[0:i] + \"ns\" + myString[i+1:]\n            continue\n        }\n        if myString[i] == 't' {\n            myString = myString[0:i] + \"ts\" + myString[i+1:]\n            continue\n        }\n        if myString[i] == 'l' {\n            myString = myString[0:i] + \"ls\" + myString[i+1:]\n            continue\n        }\n        if myString[i] == 'g' {\n            myString = myString[0:i] + \"gs\" + myString[i+1:]\n            continue\n        }\n        if myString[i] == 'z' {\n            myString = myString[0:i] + \"zs\" + myString[i+1:]\n            continue\n        }\n        if myString[i] == 'x' {\n            myString = myString[0:i] + \"xs\" + myString[i+1:]\n            continue\n        }\n        if myString[i] == 'c' {\n            myString = myString[0:i] + \"cs\" + myString[i+1:]\n            continue\n        }\n        if myString[i] == 'v' {\n            myString = myString[0:i] + \"vs\" + my\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmptzlews4j_test.go:65:6: expected '(', found TestPrime_Length\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    if len(myString) < 2 {\n        return false\n    }\n    for i := 2; i < len(myString); i++ {\n        if myString[i] == myString[0] {\n            return false\n        }\n        if myString[i] == myString[len(myString) - 1] {\n            return false\n        }\n        if myString[i] == myString[len(myString) - i] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpkvan6ath_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    if len(myString) == 1 {\n        return true\n    }\n    for i := 2; i < len(myString); i++ {\n        if myString[i] == myString[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp5_8ue_xc_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp5_8ue_xc_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp5_8ue_xc_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp5_8ue_xc_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp5_8ue_xc_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp5_8ue_xc_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp5_8ue_xc_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__3 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp92kdp9jj_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}