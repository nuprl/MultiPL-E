{
  "name": "HumanEval_113_odd_count",
  "language": "go_test.go",
  "prompt": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n",
  "tests": "func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // Write your code here\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dput.\", len(lst[i])%2, len(lst[i])%2, len(lst[i]), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpdponlrw__test.go:40: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 1put.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpdponlrw__test.go:40: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 2put. the number of odd elements 0 the str0ng 8 of the 2put.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpdponlrw__test.go:40: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3put. the number of odd elements 1 the str1ng 3 of the 3put. the number of odd elements 1 the str1ng 3 of the 3put.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i])%2, len(lst[i])%2, len(lst[i]), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 2input. the number of odd elements 0 the str0ng 8 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3input. the number of odd elements 1 the str1ng 3 of the 3input. the number of odd elements 1 the str1ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // Your code here\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmphempurub_test.go:40: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmphempurub_test.go:40: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 2input. the number of odd elements 7 the str1ng 1 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmphempurub_test.go:40: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 3input. the number of odd elements 2 the str1ng 1 of the 3input. the number of odd elements 2 the str2ng 2 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%sng %d of the %dnput.\", len(s)%2, s, len(s), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmplj2dc094_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1234567ng 7 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmplj2dc094_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str3ng 1 of the 2nput. the number of odd elements 0 the str11111111ng 8 of the 2nput.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmplj2dc094_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str271ng 3 of the 3nput. the number of odd elements 1 the str137ng 3 of the 3nput. the number of odd elements 1 the str314ng 3 of the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dnput.\", len(s) - len(s)%2, len(s), len(s), len(s)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpo2csus46_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str7ng 7 of the 7nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpo2csus46_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str1ng 1 of the 1nput. the number of odd elements 8 the str8ng 8 of the 8nput.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpo2csus46_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str3ng 3 of the 3nput. the number of odd elements 2 the str3ng 3 of the 3nput. the number of odd elements 2 the str3ng 3 of the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, str := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(str)%2, len(str)%2, len(str), len(str)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpvwpazrz5_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 7input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpvwpazrz5_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 1input. the number of odd elements 0 the str0ng 8 of the 8input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpvwpazrz5_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3input. the number of odd elements 1 the str1ng 3 of the 3input. the number of odd elements 1 the str1ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i])%2, len(lst[i])%2, len(lst[i]), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 2input. the number of odd elements 0 the str0ng 8 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3input. the number of odd elements 1 the str1ng 3 of the 3input. the number of odd elements 1 the str1ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i])%2, len(lst[i])%2, len(lst[i]), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 2input. the number of odd elements 0 the str0ng 8 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3input. the number of odd elements 1 the str1ng 3 of the 3input. the number of odd elements 1 the str1ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // Write your code here\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmp3s4horkv_test.go:40: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmp3s4horkv_test.go:40: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmp3s4horkv_test.go:40: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dnput.\", len(s)%2, len(s)%2, len(s), len(s)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmplpmb55m5_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 7nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmplpmb55m5_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 1nput. the number of odd elements 0 the str0ng 8 of the 8nput.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmplpmb55m5_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3nput. the number of odd elements 1 the str1ng 3 of the 3nput. the number of odd elements 1 the str1ng 3 of the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    result := make([]string, len(lst))\n    for i, v := range lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(v) - len(odd_count_helper(v)), i, i, i)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw3qgqi5p_test.go:19:110: undefined: odd_count_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // Your code here\n    return nil\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpsn9ga1j6_test.go:36: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpsn9ga1j6_test.go:36: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpsn9ga1j6_test.go:36: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var out []string\n    for _, s := range lst {\n        out = append(out, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(s)%2, len(s), len(s), len(lst)))\n    }\n    return out\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpgenrv3ls_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str7ng 7 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpgenrv3ls_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 2input. the number of odd elements 0 the str8ng 8 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpgenrv3ls_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str3ng 3 of the 3input. the number of odd elements 1 the str3ng 3 of the 3input. the number of odd elements 1 the str3ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var out []string\n    for i := 0; i < len(lst); i++ {\n        out = append(out, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return out\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmp3kf4q867_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmp3kf4q867_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmp3kf4q867_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, str := range lst {\n        count := 0\n        for _, c := range str {\n            if c % 2 != 0 {\n                count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", count, len(str), len(str), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmp39fmbenw_test.go:45: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4 the str7ng 7 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmp39fmbenw_test.go:45: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 2input. the number of odd elements 8 the str8ng 8 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmp39fmbenw_test.go:45: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str3ng 3 of the 3input. the number of odd elements 3 the str3ng 3 of the 3input. the number of odd elements 2 the str3ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var odd_count []string\n    for i := 0; i < len(lst); i++ {\n        odd_count = append(odd_count, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return odd_count\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmp84__1rxq_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmp84__1rxq_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmp84__1rxq_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 2input. the number of odd elements 7 the str1ng 1 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 3input. the number of odd elements 2 the str1ng 1 of the 3input. the number of odd elements 2 the str2ng 2 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        count := 0\n        for _, c := range s {\n            if c % 2 == 1 {\n                count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", count, len(s), len(s), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpglvrroe0_test.go:45: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4 the str7ng 7 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpglvrroe0_test.go:45: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 2input. the number of odd elements 8 the str8ng 8 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpglvrroe0_test.go:45: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str3ng 3 of the 3input. the number of odd elements 3 the str3ng 3 of the 3input. the number of odd elements 2 the str3ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var odd_count []string\n    for i := 0; i < len(lst); i++ {\n        odd_count = append(odd_count, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, len(lst)))\n    }\n    return odd_count\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmp6j8ohwf8_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmp6j8ohwf8_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 2input. the number of odd elements 7 the str1ng 1 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmp6j8ohwf8_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 3input. the number of odd elements 2 the str1ng 1 of the 3input. the number of odd elements 2 the str2ng 2 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // write your code here\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dput.\", len(lst[i])%2, len(lst[i])%2, len(lst[i]), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpybiwgag7_test.go:40: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 1put.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpybiwgag7_test.go:40: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 2put. the number of odd elements 0 the str0ng 8 of the 2put.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpybiwgag7_test.go:40: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3put. the number of odd elements 1 the str1ng 3 of the 3put. the number of odd elements 1 the str1ng 3 of the 3put.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // Create a map of strings to their number of odd digits\n    m := make(map[string]int)\n    for _, s := range lst {\n        for _, c := range s {\n            if c == '1' {\n                m[s]++\n            }\n        }\n    }\n    // Create a list of strings to their number of odd digits\n    out := make([]string, len(lst))\n    for i, s := range lst {\n        out[i] = fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dput.\", m[s], i, i, i)\n    }\n    return out\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmp92217jhq_test.go:49: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str0ng 0 of the 0put.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmp92217jhq_test.go:49: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0put. the number of odd elements 8 the str1ng 1 of the 1put.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmp92217jhq_test.go:49: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str0ng 0 of the 0put. the number of odd elements 1 the str1ng 1 of the 1put. the number of odd elements 1 the str2ng 2 of the 2put.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        count := 0\n        for _, c := range s {\n            if c % 2 != 0 {\n                count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", count, len(s), len(s), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmp8j0z2_gc_test.go:45: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4 the str7ng 7 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmp8j0z2_gc_test.go:45: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 2input. the number of odd elements 8 the str8ng 8 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmp8j0z2_gc_test.go:45: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str3ng 3 of the 3input. the number of odd elements 3 the str3ng 3 of the 3input. the number of odd elements 2 the str3ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        count := 0\n        for _, c := range s {\n            if c % 2 == 1 {\n                count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", count, len(s), len(s), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpglvrroe0_test.go:45: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4 the str7ng 7 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpglvrroe0_test.go:45: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 2input. the number of odd elements 8 the str8ng 8 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpglvrroe0_test.go:45: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str3ng 3 of the 3input. the number of odd elements 3 the str3ng 3 of the 3input. the number of odd elements 2 the str3ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dnput.\", len(s)%2, len(s)%2, len(s), len(s)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmplpmb55m5_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 7nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmplpmb55m5_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 1nput. the number of odd elements 0 the str0ng 8 of the 8nput.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmplpmb55m5_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3nput. the number of odd elements 1 the str1ng 3 of the 3nput. the number of odd elements 1 the str1ng 3 of the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var odd_count_lst []string\n    for i := 0; i < len(lst); i++ {\n        odd_count_lst = append(odd_count_lst, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dnput.\", len(lst[i]) - 1, len(lst[i]) - 1, i, len(lst)))\n    }\n    return odd_count_lst\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpfu0bfaej_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str6ng 0 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpfu0bfaej_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 2nput. the number of odd elements 7 the str7ng 1 of the 2nput.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpfu0bfaej_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str2ng 0 of the 3nput. the number of odd elements 2 the str2ng 1 of the 3nput. the number of odd elements 2 the str2ng 2 of the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var odd_count []string\n    for i := 0; i < len(lst); i++ {\n        odd_count = append(odd_count, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, len(lst)))\n    }\n    return odd_count\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmp6j8ohwf8_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmp6j8ohwf8_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 2input. the number of odd elements 7 the str1ng 1 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmp6j8ohwf8_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 3input. the number of odd elements 2 the str1ng 1 of the 3input. the number of odd elements 2 the str2ng 2 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        count := 0\n        for _, c := range s {\n            if c % 2 == 1 {\n                count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", count, len(s), len(s), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpglvrroe0_test.go:45: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4 the str7ng 7 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpglvrroe0_test.go:45: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 2input. the number of odd elements 8 the str8ng 8 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpglvrroe0_test.go:45: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str3ng 3 of the 3input. the number of odd elements 3 the str3ng 3 of the 3input. the number of odd elements 2 the str3ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // Write your code here\n    result := make([]string, len(lst))\n    for i, v := range lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dput.\", len(v)%2, len(v)%2, len(v), len(v))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmp0s6ii6ia_test.go:40: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 7put.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmp0s6ii6ia_test.go:40: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 1put. the number of odd elements 0 the str0ng 8 of the 8put.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmp0s6ii6ia_test.go:40: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3put. the number of odd elements 1 the str1ng 3 of the 3put. the number of odd elements 1 the str1ng 3 of the 3put.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // Write your code here\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpqchx2mja_test.go:40: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0put.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpqchx2mja_test.go:40: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0put. the number of odd elements 7 the str1ng 1 of the 1put.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpqchx2mja_test.go:40: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0put. the number of odd elements 2 the str1ng 1 of the 1put. the number of odd elements 2 the str2ng 2 of the 2put.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dnput.\", len(s) - len(s)%2, len(s), len(s), len(s)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpo2csus46_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str7ng 7 of the 7nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpo2csus46_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str1ng 1 of the 1nput. the number of odd elements 8 the str8ng 8 of the 8nput.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpo2csus46_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str3ng 3 of the 3nput. the number of odd elements 2 the str3ng 3 of the 3nput. the number of odd elements 2 the str3ng 3 of the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        count := 0\n        for _, c := range s {\n            if c % 2 == 1 {\n                count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", count, len(s), len(s), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpglvrroe0_test.go:45: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4 the str7ng 7 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpglvrroe0_test.go:45: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 2input. the number of odd elements 8 the str8ng 8 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpglvrroe0_test.go:45: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str3ng 3 of the 3input. the number of odd elements 3 the str3ng 3 of the 3input. the number of odd elements 2 the str3ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var odd_count_list []string\n    for i := 0; i < len(lst); i++ {\n        odd_count_list = append(odd_count_list, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, len(lst)))\n    }\n    return odd_count_list\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpli9rbqpw_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpli9rbqpw_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 2input. the number of odd elements 7 the str1ng 1 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpli9rbqpw_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 3input. the number of odd elements 2 the str1ng 1 of the 3input. the number of odd elements 2 the str2ng 2 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i])%2, len(lst[i])%2, len(lst[i]), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 2input. the number of odd elements 0 the str0ng 8 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3input. the number of odd elements 1 the str1ng 3 of the 3input. the number of odd elements 1 the str1ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 2input. the number of odd elements 7 the str1ng 1 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 3input. the number of odd elements 2 the str1ng 1 of the 3input. the number of odd elements 2 the str2ng 2 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var odd_count_list []string\n    for i := 0; i < len(lst); i++ {\n        odd_count_list = append(odd_count_list, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, len(lst)))\n    }\n    return odd_count_list\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpli9rbqpw_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpli9rbqpw_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 2input. the number of odd elements 7 the str1ng 1 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpli9rbqpw_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 3input. the number of odd elements 2 the str1ng 1 of the 3input. the number of odd elements 2 the str2ng 2 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%sng %d of the %dnput.\", len(s) - len(s)%2, s, len(s), len(s)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmp1mgqa829_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str1234567ng 7 of the 7nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmp1mgqa829_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str3ng 1 of the 1nput. the number of odd elements 8 the str11111111ng 8 of the 8nput.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmp1mgqa829_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str271ng 3 of the 3nput. the number of odd elements 2 the str137ng 3 of the 3nput. the number of odd elements 2 the str314ng 3 of the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dnput.\", len(s) - len(s)%2, len(s), len(s), len(s)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpo2csus46_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str7ng 7 of the 7nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpo2csus46_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str1ng 1 of the 1nput. the number of odd elements 8 the str8ng 8 of the 8nput.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpo2csus46_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str3ng 3 of the 3nput. the number of odd elements 2 the str3ng 3 of the 3nput. the number of odd elements 2 the str3ng 3 of the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, str := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dnput.\", len(str)%2, len(str), len(str), len(str)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmp2o4y4vg7_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str7ng 7 of the 7nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmp2o4y4vg7_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 1nput. the number of odd elements 0 the str8ng 8 of the 8nput.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmp2o4y4vg7_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str3ng 3 of the 3nput. the number of odd elements 1 the str3ng 3 of the 3nput. the number of odd elements 1 the str3ng 3 of the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    result := make([]string, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dput.\", len(lst[i])%2, len(lst[i])%2, len(lst[i]), len(lst[i]))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpbguss1z4_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 7put.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpbguss1z4_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 1put. the number of odd elements 0 the str0ng 8 of the 8put.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpbguss1z4_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3put. the number of odd elements 1 the str1ng 3 of the 3put. the number of odd elements 1 the str1ng 3 of the 3put.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%sng %d of the %dinput.\", len(s) - len(s)%2, s, len(s), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpoc60eemq_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str1234567ng 7 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpoc60eemq_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str3ng 1 of the 2input. the number of odd elements 8 the str11111111ng 8 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpoc60eemq_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str271ng 3 of the 3input. the number of odd elements 2 the str137ng 3 of the 3input. the number of odd elements 2 the str314ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dnput.\", len(s)%2, len(s)%2, len(s), len(s)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmplpmb55m5_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 7nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmplpmb55m5_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 1nput. the number of odd elements 0 the str0ng 8 of the 8nput.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmplpmb55m5_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3nput. the number of odd elements 1 the str1ng 3 of the 3nput. the number of odd elements 1 the str1ng 3 of the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        count := 0\n        for _, c := range s {\n            if c % 2 == 1 {\n                count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", count, len(s), len(s), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpglvrroe0_test.go:45: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4 the str7ng 7 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpglvrroe0_test.go:45: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 2input. the number of odd elements 8 the str8ng 8 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpglvrroe0_test.go:45: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str3ng 3 of the 3input. the number of odd elements 3 the str3ng 3 of the 3input. the number of odd elements 2 the str3ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dnput.\", len(s)%2, len(s)%2, len(s), len(s)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmplpmb55m5_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 7nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmplpmb55m5_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 1nput. the number of odd elements 0 the str0ng 8 of the 8nput.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmplpmb55m5_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3nput. the number of odd elements 1 the str1ng 3 of the 3nput. the number of odd elements 1 the str1ng 3 of the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i])%2, len(lst[i])%2, len(lst[i]), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 2input. the number of odd elements 0 the str0ng 8 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3input. the number of odd elements 1 the str1ng 3 of the 3input. the number of odd elements 1 the str1ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dnput.\", len(s) - len(s)%2, len(s), len(s), len(s)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpo2csus46_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str7ng 7 of the 7nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpo2csus46_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str1ng 1 of the 1nput. the number of odd elements 8 the str8ng 8 of the 8nput.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpo2csus46_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str3ng 3 of the 3nput. the number of odd elements 2 the str3ng 3 of the 3nput. the number of odd elements 2 the str3ng 3 of the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 2input. the number of odd elements 7 the str1ng 1 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 3input. the number of odd elements 2 the str1ng 1 of the 3input. the number of odd elements 2 the str2ng 2 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 2input. the number of odd elements 7 the str1ng 1 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 3input. the number of odd elements 2 the str1ng 1 of the 3input. the number of odd elements 2 the str2ng 2 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(s) - len(s) % 2, len(s), len(s) % 2, len(s)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmp8sqgaivz_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str7ng 1 of the 7input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmp8sqgaivz_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str1ng 1 of the 1input. the number of odd elements 8 the str8ng 0 of the 8input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmp8sqgaivz_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str3ng 1 of the 3input. the number of odd elements 2 the str3ng 1 of the 3input. the number of odd elements 2 the str3ng 1 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // TODO: Implement this function\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpbg5_u2ia_test.go:40: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0put.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpbg5_u2ia_test.go:40: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0put. the number of odd elements 7 the str1ng 1 of the 1put.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpbg5_u2ia_test.go:40: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0put. the number of odd elements 2 the str1ng 1 of the 1put. the number of odd elements 2 the str2ng 2 of the 2put.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // Your code here\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmp63ajtr5j_test.go:40: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmp63ajtr5j_test.go:40: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmp63ajtr5j_test.go:40: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 2input. the number of odd elements 7 the str1ng 1 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 3input. the number of odd elements 2 the str1ng 1 of the 3input. the number of odd elements 2 the str2ng 2 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i])%2, len(lst[i])%2, len(lst[i]), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 2input. the number of odd elements 0 the str0ng 8 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3input. the number of odd elements 1 the str1ng 3 of the 3input. the number of odd elements 1 the str1ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 2input. the number of odd elements 7 the str1ng 1 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 3input. the number of odd elements 2 the str1ng 1 of the 3input. the number of odd elements 2 the str2ng 2 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    result := make([]string, len(lst))\n    for i, s := range lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(s)%2, len(s)%2, len(s)%2, len(s))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmppinrydxt_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 1 of the 7input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmppinrydxt_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 1input. the number of odd elements 0 the str0ng 0 of the 8input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmppinrydxt_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 1 of the 3input. the number of odd elements 1 the str1ng 1 of the 3input. the number of odd elements 1 the str1ng 1 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, str := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dnput.\", len(str)%2, len(str)%2, len(str), len(str)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpj5w77y90_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 7nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpj5w77y90_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 1nput. the number of odd elements 0 the str0ng 8 of the 8nput.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpj5w77y90_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3nput. the number of odd elements 1 the str1ng 3 of the 3nput. the number of odd elements 1 the str1ng 3 of the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(s) - len(s)%2, len(s), len(s)%2, len(s)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpy6r94019_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str7ng 1 of the 7input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpy6r94019_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str1ng 1 of the 1input. the number of odd elements 8 the str8ng 0 of the 8input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpy6r94019_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str3ng 1 of the 3input. the number of odd elements 2 the str3ng 1 of the 3input. the number of odd elements 2 the str3ng 1 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i])%2, len(lst[i])%2, len(lst[i]), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 2input. the number of odd elements 0 the str0ng 8 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3input. the number of odd elements 1 the str1ng 3 of the 3input. the number of odd elements 1 the str1ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    result := make([]string, len(lst))\n    for i, v := range lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(v) - len(odd_count_helper(v)), i, i, i)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw3qgqi5p_test.go:19:110: undefined: odd_count_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        count := 0\n        for _, c := range s {\n            if c % 2 == 1 {\n                count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", count, len(s), len(s), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpglvrroe0_test.go:45: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4 the str7ng 7 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpglvrroe0_test.go:45: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 2input. the number of odd elements 8 the str8ng 8 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpglvrroe0_test.go:45: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str3ng 3 of the 3input. the number of odd elements 3 the str3ng 3 of the 3input. the number of odd elements 2 the str3ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // fmt.Println(\"lst:\", lst)\n    // fmt.Println(\"len(lst):\", len(lst))\n    // fmt.Println(\"len(lst[0]):\", len(lst[0]))\n    // fmt.Println(\"len(lst[1]):\", len(lst[1]))\n    // fmt.Println(\"len(lst[2]):\", len(lst[2]))\n    // fmt.Println(\"len(lst[3]):\", len(lst[3]))\n    // fmt.Println(\"len(lst[4]):\", len(lst[4]))\n    // fmt.Println(\"len(lst[5]):\", len(lst[5]))\n    // fmt.Println(\"len(lst[6]):\", len(lst[6]))\n    // fmt.Println(\"len(lst[7]):\", len(lst[7]))\n    // fmt.Println(\"len(lst[8]):\", len(lst[8]))\n    // fmt.Println(\"len(lst[9]):\", len(lst[9]))\n    // fmt.Println(\"len(lst[10]):\", len(lst[10]))\n    // fmt.Println(\"len(lst[11]):\", len(lst[11]))\n    // fmt.Println(\"len(lst[12]):\", len(lst[12]))\n    // fmt.Println(\"len(lst[13]):\", len(lst[13]))\n    // fmt.Println(\"len(lst[14]):\", len(lst[14]))\n    // fmt.Println(\"len(lst[15]):\", len(lst[15]))\n    // fmt.Println(\"len(lst[16]):\", len(lst[16]))\n    // fmt.Println(\"len(lst[17]):\", len(lst[17]))\n    // fmt.Println(\"len(lst[18]):\", len(lst[18]))\n    // fmt\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpx0uk4tog_test.go:39:6: expected '(', found TestOdd_Count\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // Write your code here\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpqchx2mja_test.go:40: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0put.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpqchx2mja_test.go:40: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0put. the number of odd elements 7 the str1ng 1 of the 1put.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpqchx2mja_test.go:40: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0put. the number of odd elements 2 the str1ng 1 of the 1put. the number of odd elements 2 the str2ng 2 of the 2put.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(s)%2, len(s), len(s), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpdht0ks6o_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str7ng 7 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpdht0ks6o_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 2input. the number of odd elements 0 the str8ng 8 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpdht0ks6o_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str3ng 3 of the 3input. the number of odd elements 1 the str3ng 3 of the 3input. the number of odd elements 1 the str3ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 2input. the number of odd elements 7 the str1ng 1 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 3input. the number of odd elements 2 the str1ng 1 of the 3input. the number of odd elements 2 the str2ng 2 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var odd_count []string\n    for i := 0; i < len(lst); i++ {\n        odd_count = append(odd_count, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, len(lst)))\n    }\n    return odd_count\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmp6j8ohwf8_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmp6j8ohwf8_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 2input. the number of odd elements 7 the str1ng 1 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmp6j8ohwf8_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 3input. the number of odd elements 2 the str1ng 1 of the 3input. the number of odd elements 2 the str2ng 2 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var out []string\n    for _, s := range lst {\n        out = append(out, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(s)%2, len(s), len(s), len(lst)))\n    }\n    return out\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpgenrv3ls_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str7ng 7 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpgenrv3ls_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 2input. the number of odd elements 0 the str8ng 8 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpgenrv3ls_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str3ng 3 of the 3input. the number of odd elements 1 the str3ng 3 of the 3input. the number of odd elements 1 the str3ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var odd_count []string\n    for i := 0; i < len(lst); i++ {\n        odd_count = append(odd_count, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, len(lst)))\n    }\n    return odd_count\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmp6j8ohwf8_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmp6j8ohwf8_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 2input. the number of odd elements 7 the str1ng 1 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmp6j8ohwf8_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 3input. the number of odd elements 2 the str1ng 1 of the 3input. the number of odd elements 2 the str2ng 2 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i])%2, len(lst[i])%2, len(lst[i]), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 2input. the number of odd elements 0 the str0ng 8 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3input. the number of odd elements 1 the str1ng 3 of the 3input. the number of odd elements 1 the str1ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(s)%2, len(s)%2, len(s), len(s)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpoz80eubl_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 7input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpoz80eubl_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 1input. the number of odd elements 0 the str0ng 8 of the 8input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpoz80eubl_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3input. the number of odd elements 1 the str1ng 3 of the 3input. the number of odd elements 1 the str1ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var odd_count_list []string\n    for i := 0; i < len(lst); i++ {\n        odd_count_list = append(odd_count_list, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, len(lst)))\n    }\n    return odd_count_list\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpli9rbqpw_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpli9rbqpw_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 2input. the number of odd elements 7 the str1ng 1 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpli9rbqpw_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 3input. the number of odd elements 2 the str1ng 1 of the 3input. the number of odd elements 2 the str2ng 2 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i])%2, len(lst[i])%2, len(lst[i]), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 2input. the number of odd elements 0 the str0ng 8 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3input. the number of odd elements 1 the str1ng 3 of the 3input. the number of odd elements 1 the str1ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // Your code here\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmp63ajtr5j_test.go:40: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmp63ajtr5j_test.go:40: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmp63ajtr5j_test.go:40: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var odd_count []string\n    for _, str := range lst {\n        odd_count = append(odd_count, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(str)%2, len(str)%2, len(str), len(str)))\n    }\n    return odd_count\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmp7rkwkvom_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 7input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmp7rkwkvom_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 1input. the number of odd elements 0 the str0ng 8 of the 8input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmp7rkwkvom_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3input. the number of odd elements 1 the str1ng 3 of the 3input. the number of odd elements 1 the str1ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i])%2, len(lst[i])%2, len(lst[i]), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 2input. the number of odd elements 0 the str0ng 8 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3input. the number of odd elements 1 the str1ng 3 of the 3input. the number of odd elements 1 the str1ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%sng %d of the %dnput.\", len(s)%2, s, len(s), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmplj2dc094_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1234567ng 7 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmplj2dc094_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str3ng 1 of the 2nput. the number of odd elements 0 the str11111111ng 8 of the 2nput.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmplj2dc094_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str271ng 3 of the 3nput. the number of odd elements 1 the str137ng 3 of the 3nput. the number of odd elements 1 the str314ng 3 of the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    result := make([]string, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dput.\", len(lst[i])%2, len(lst[i])%2, len(lst[i]), len(lst[i]))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpbguss1z4_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 7put.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpbguss1z4_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 1put. the number of odd elements 0 the str0ng 8 of the 8put.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpbguss1z4_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3put. the number of odd elements 1 the str1ng 3 of the 3put. the number of odd elements 1 the str1ng 3 of the 3put.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dnput.\", len(s)%2, len(s)%2, len(s), len(s)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmplpmb55m5_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 7nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmplpmb55m5_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 1nput. the number of odd elements 0 the str0ng 8 of the 8nput.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmplpmb55m5_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3nput. the number of odd elements 1 the str1ng 3 of the 3nput. the number of odd elements 1 the str1ng 3 of the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // Your code here\n    result := make([]string, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dnput.\", len(lst[i])%2, len(lst[i])%2, len(lst[i]), len(lst))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmp6z4r1hvj_test.go:40: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmp6z4r1hvj_test.go:40: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 2nput. the number of odd elements 0 the str0ng 8 of the 2nput.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmp6z4r1hvj_test.go:40: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3nput. the number of odd elements 1 the str1ng 3 of the 3nput. the number of odd elements 1 the str1ng 3 of the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 2input. the number of odd elements 7 the str1ng 1 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 3input. the number of odd elements 2 the str1ng 1 of the 3input. the number of odd elements 2 the str2ng 2 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dnput.\", len(s) - len(s)%2, len(s), len(s), len(s)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpo2csus46_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str7ng 7 of the 7nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpo2csus46_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str1ng 1 of the 1nput. the number of odd elements 8 the str8ng 8 of the 8nput.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpo2csus46_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str3ng 3 of the 3nput. the number of odd elements 2 the str3ng 3 of the 3nput. the number of odd elements 2 the str3ng 3 of the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 2input. the number of odd elements 7 the str1ng 1 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 3input. the number of odd elements 2 the str1ng 1 of the 3input. the number of odd elements 2 the str2ng 2 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dnput.\", len(lst[i]) - 1, i, i, len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmp01s_boi__test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmp01s_boi__test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 2nput. the number of odd elements 7 the str1ng 1 of the 2nput.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmp01s_boi__test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 3nput. the number of odd elements 2 the str1ng 1 of the 3nput. the number of odd elements 2 the str2ng 2 of the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var odd_count []string\n    for i := 0; i < len(lst); i++ {\n        odd_count = append(odd_count, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return odd_count\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmp84__1rxq_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmp84__1rxq_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmp84__1rxq_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // Create a map of string to digit count\n    m := make(map[string]int)\n    for _, s := range lst {\n        for _, c := range s {\n            m[string(c)]++\n        }\n    }\n    // Create a map of digit count to string\n    m2 := make(map[int]string)\n    for k, v := range m {\n        m2[v] = k\n    }\n    // Create a map of digit count to string\n    m3 := make(map[int]string)\n    for k, v := range m {\n        m3[v] = k\n    }\n    // Create a map of digit count to string\n    m4 := make(map[int]string)\n    for k, v := range m {\n        m4[v] = k\n    }\n    // Create a map of digit count to string\n    m5 := make(map[int]string)\n    for k, v := range m {\n        m5[v] = k\n    }\n    // Create a map of digit count to string\n    m6 := make(map[int]string)\n    for k, v := range m {\n        m6[v] = k\n    }\n    // Create a map of digit count to string\n    m7 := make(map[int]string)\n    for k, v := range m {\n        m7[v] = k\n    }\n    // Create a map of digit count to string\n    m8 := make(map[int]string)\n    for k, v := range m {\n        m8[v] = k\n    }\n    // Create a map of digit count to string\n    m9 := make(map[int]string)\n    for k, v := range m {\n        m9[v] = k\n    }\n    // Create a map of digit count to string\n    m10 := make(map[int]string)\n    for k, v := range m {\n        m10[v] = k\n    }\n    // Create a map of digit count to string\n    m11 := make(map[int]string)\n    for k, v := range m {\n        m11[v\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpxrijwuu9_test.go:72:14: expected ']', found newline\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%sng %d of the %dinput.\", len(s)%2, s, len(s), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmprsibicdd_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1234567ng 7 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmprsibicdd_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str3ng 1 of the 2input. the number of odd elements 0 the str11111111ng 8 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmprsibicdd_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str271ng 3 of the 3input. the number of odd elements 1 the str137ng 3 of the 3input. the number of odd elements 1 the str314ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // Your code here\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpi2b_xvku_test.go:40: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0put.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpi2b_xvku_test.go:40: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0put. the number of odd elements 7 the str1ng 1 of the 1put.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpi2b_xvku_test.go:40: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0put. the number of odd elements 2 the str1ng 1 of the 1put. the number of odd elements 2 the str2ng 2 of the 2put.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var out []string\n    for _, s := range lst {\n        out = append(out, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(s) - len(s)%2, len(s), len(s), len(s)))\n    }\n    return out\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmp84hhujwg_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str7ng 7 of the 7input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmp84hhujwg_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str1ng 1 of the 1input. the number of odd elements 8 the str8ng 8 of the 8input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmp84hhujwg_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str3ng 3 of the 3input. the number of odd elements 2 the str3ng 3 of the 3input. the number of odd elements 2 the str3ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // Your code here\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i])%2, len(lst[i])/2, i, len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmp58x_soru_test.go:40: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str3ng 0 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmp58x_soru_test.go:40: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str0ng 0 of the 2input. the number of odd elements 0 the str4ng 1 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmp58x_soru_test.go:40: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 0 of the 3input. the number of odd elements 1 the str1ng 1 of the 3input. the number of odd elements 1 the str1ng 2 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // Create a map to store the number of odd digits in each string\n    odd_count_map := make(map[string]int)\n    for _, str := range lst {\n        for _, digit := range str {\n            if digit == '1' {\n                odd_count_map[str] += 1\n            }\n        }\n    }\n    // Create a new list to store the result\n    result := make([]string, len(lst))\n    for i, str := range lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dput.\", odd_count_map[str], i, i, i)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpsdlsn_81_test.go:49: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str0ng 0 of the 0put.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpsdlsn_81_test.go:49: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0put. the number of odd elements 8 the str1ng 1 of the 1put.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpsdlsn_81_test.go:49: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str0ng 0 of the 0put. the number of odd elements 1 the str1ng 1 of the 1put. the number of odd elements 1 the str2ng 2 of the 2put.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(s)%2, len(s), len(s), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpdht0ks6o_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str7ng 7 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpdht0ks6o_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 2input. the number of odd elements 0 the str8ng 8 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpdht0ks6o_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str3ng 3 of the 3input. the number of odd elements 1 the str3ng 3 of the 3input. the number of odd elements 1 the str3ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // Your code here\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpi2b_xvku_test.go:40: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0put.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpi2b_xvku_test.go:40: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0put. the number of odd elements 7 the str1ng 1 of the 1put.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpi2b_xvku_test.go:40: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0put. the number of odd elements 2 the str1ng 1 of the 1put. the number of odd elements 2 the str2ng 2 of the 2put.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%sng %d of the %dinput.\", len(s)%2, s, len(s), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmprsibicdd_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1234567ng 7 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmprsibicdd_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str3ng 1 of the 2input. the number of odd elements 0 the str11111111ng 8 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmprsibicdd_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str271ng 3 of the 3input. the number of odd elements 1 the str137ng 3 of the 3input. the number of odd elements 1 the str314ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dnput.\", len(s)%2, len(s), len(s), len(s)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpndijw8so_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str7ng 7 of the 7nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpndijw8so_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 1nput. the number of odd elements 0 the str8ng 8 of the 8nput.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpndijw8so_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str3ng 3 of the 3nput. the number of odd elements 1 the str3ng 3 of the 3nput. the number of odd elements 1 the str3ng 3 of the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 2input. the number of odd elements 7 the str1ng 1 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 3input. the number of odd elements 2 the str1ng 1 of the 3input. the number of odd elements 2 the str2ng 2 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var odd_count_list []string\n    for i := 0; i < len(lst); i++ {\n        odd_count_list = append(odd_count_list, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, len(lst)))\n    }\n    return odd_count_list\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpli9rbqpw_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpli9rbqpw_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 2input. the number of odd elements 7 the str1ng 1 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpli9rbqpw_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 3input. the number of odd elements 2 the str1ng 1 of the 3input. the number of odd elements 2 the str2ng 2 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    result := make([]string, len(lst))\n    for i, s := range lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dput.\", len(s)%2, len(s)%2, len(s)%2, len(s))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpoi3erkrb_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 1 of the 7put.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpoi3erkrb_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 1put. the number of odd elements 0 the str0ng 0 of the 8put.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpoi3erkrb_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 1 of the 3put. the number of odd elements 1 the str1ng 1 of the 3put. the number of odd elements 1 the str1ng 1 of the 3put.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dnput.\", len(s)%2, len(s)%2, len(s), len(s)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmplpmb55m5_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 7nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmplpmb55m5_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 1nput. the number of odd elements 0 the str0ng 8 of the 8nput.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmplpmb55m5_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3nput. the number of odd elements 1 the str1ng 3 of the 3nput. the number of odd elements 1 the str1ng 3 of the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // Write your code here\n    result := make([]string, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dnput.\", len(lst[i])%2, len(lst[i])%2, len(lst[i]), len(lst))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpwn81uklr_test.go:40: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpwn81uklr_test.go:40: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 2nput. the number of odd elements 0 the str0ng 8 of the 2nput.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpwn81uklr_test.go:40: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3nput. the number of odd elements 1 the str1ng 3 of the 3nput. the number of odd elements 1 the str1ng 3 of the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(s) - len(s) % 2, len(s), len(s) % 2, len(s)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmp8sqgaivz_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str7ng 1 of the 7input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmp8sqgaivz_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str1ng 1 of the 1input. the number of odd elements 8 the str8ng 0 of the 8input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmp8sqgaivz_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str3ng 1 of the 3input. the number of odd elements 2 the str3ng 1 of the 3input. the number of odd elements 2 the str3ng 1 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dnput.\", len(lst[i]) - 1, i, i, len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmp01s_boi__test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmp01s_boi__test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 2nput. the number of odd elements 7 the str1ng 1 of the 2nput.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmp01s_boi__test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 3nput. the number of odd elements 2 the str1ng 1 of the 3nput. the number of odd elements 2 the str2ng 2 of the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // TODO: Implement this function\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpbg5_u2ia_test.go:40: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0put.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpbg5_u2ia_test.go:40: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0put. the number of odd elements 7 the str1ng 1 of the 1put.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpbg5_u2ia_test.go:40: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0put. the number of odd elements 2 the str1ng 1 of the 1put. the number of odd elements 2 the str2ng 2 of the 2put.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 2input. the number of odd elements 7 the str1ng 1 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 3input. the number of odd elements 2 the str1ng 1 of the 3input. the number of odd elements 2 the str2ng 2 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        count := 0\n        for _, c := range s {\n            if c % 2 == 1 {\n                count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", count, len(s), len(s), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpglvrroe0_test.go:45: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4 the str7ng 7 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpglvrroe0_test.go:45: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 2input. the number of odd elements 8 the str8ng 8 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpglvrroe0_test.go:45: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str3ng 3 of the 3input. the number of odd elements 3 the str3ng 3 of the 3input. the number of odd elements 2 the str3ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // Your code here\n    return nil\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpsn9ga1j6_test.go:36: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpsn9ga1j6_test.go:36: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpsn9ga1j6_test.go:36: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dnput.\", len(s)%2, len(s), len(s), len(s)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpndijw8so_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str7ng 7 of the 7nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpndijw8so_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 1nput. the number of odd elements 0 the str8ng 8 of the 8nput.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpndijw8so_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str3ng 3 of the 3nput. the number of odd elements 1 the str3ng 3 of the 3nput. the number of odd elements 1 the str3ng 3 of the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // Create a map of strings to their number of odd digits\n    m := make(map[string]int)\n    for _, s := range lst {\n        for _, c := range s {\n            if c % 2 == 1 {\n                m[s]++\n            }\n        }\n    }\n    // Create a list of strings to their number of odd digits\n    l := make([]string, len(lst))\n    for i, s := range lst {\n        l[i] = fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dput.\", m[s], i, i, i)\n    }\n    return l\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpxa62q2y0_test.go:49: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4 the str0ng 0 of the 0put.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpxa62q2y0_test.go:49: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str0ng 0 of the 0put. the number of odd elements 8 the str1ng 1 of the 1put.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpxa62q2y0_test.go:49: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0put. the number of odd elements 3 the str1ng 1 of the 1put. the number of odd elements 2 the str2ng 2 of the 2put.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // Your code here\n    return nil\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpsn9ga1j6_test.go:36: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpsn9ga1j6_test.go:36: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpsn9ga1j6_test.go:36: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // Write your code here\n    var result []string\n    for _, str := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(str)%2, len(str)/2, len(str)/2, len(str)/2))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpglk126ff_test.go:40: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str3ng 3 of the 3input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpglk126ff_test.go:40: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str0ng 0 of the 0input. the number of odd elements 0 the str4ng 4 of the 4input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpglk126ff_test.go:40: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 1 of the 1input. the number of odd elements 1 the str1ng 1 of the 1input. the number of odd elements 1 the str1ng 1 of the 1input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        count := 0\n        for _, c := range s {\n            if c % 2 == 1 {\n                count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", count, len(s), len(s), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpglvrroe0_test.go:45: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4 the str7ng 7 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpglvrroe0_test.go:45: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 2input. the number of odd elements 8 the str8ng 8 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpglvrroe0_test.go:45: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str3ng 3 of the 3input. the number of odd elements 3 the str3ng 3 of the 3input. the number of odd elements 2 the str3ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // Create a map to store the count of each digit\n    digit_count := make(map[int]int)\n    // Iterate through each string in the list\n    for _, s := range lst {\n        // Iterate through each digit in the string\n        for _, d := range s {\n            // Increment the count of the digit\n            digit_count[int(d)]++\n        }\n    }\n    // Create a new list to store the result\n    result := make([]string, len(lst))\n    // Iterate through each string in the list\n    for i, s := range lst {\n        // Iterate through each digit in the string\n        for _, d := range s {\n            // Increment the count of the digit\n            result[i] += fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dnput.\", digit_count[int(d)], d, d, i)\n        }\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmp5l3gcc_h_test.go:55: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str49ng 49 of the 0nput.the number of odd elements 1 the str50ng 50 of the 0nput.the number of odd elements 1 the str51ng 51 of the 0nput.the number of odd elements 1 the str52ng 52 of the 0nput.the number of odd elements 1 the str53ng 53 of the 0nput.the number of odd elements 1 the str54ng 54 of the 0nput.the number of odd elements 1 the str55ng 55 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmp5l3gcc_h_test.go:55: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str51ng 51 of the 0nput. the number of odd elements 8 the str49ng 49 of the 1nput.the number of odd elements 8 the str49ng 49 of the 1nput.the number of odd elements 8 the str49ng 49 of the 1nput.the number of odd elements 8 the str49ng 49 of the 1nput.the number of odd elements 8 the str49ng 49 of the 1nput.the number of odd elements 8 the str49ng 49 of the 1nput.the number of odd elements 8 the str49ng 49 of the 1nput.the number of odd elements 8 the str49ng 49 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmp5l3gcc_h_test.go:55: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str50ng 50 of the 0nput.the number of odd elements 2 the str55ng 55 of the 0nput.the number of odd elements 3 the str49ng 49 of the 0nput. the number of odd elements 3 the str49ng 49 of the 1nput.the number of odd elements 2 the str51ng 51 of the 1nput.the number of odd elements 2 the str55ng 55 of the 1nput. the number of odd elements 2 the str51ng 51 of the 2nput.the number of odd elements 3 the str49ng 49 of the 2np",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // Create a map of the string to the number of odd digits in that string\n    m := make(map[string]int)\n    for _, s := range lst {\n        for _, c := range s {\n            if c % 2 == 1 {\n                m[s]++\n            }\n        }\n    }\n    // Create a new list of strings with the number of odd digits in each string\n    // replaced by the number of odd digits in the string\n    var l []string\n    for _, s := range lst {\n        l = append(l, fmt.Sprintf(\"the number of odd elements %d the str%sng %d of the %dput.\", m[s], s, s, s))\n    }\n    return l\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp6vqi7a2i_test.go:30:23: Sprintf format %d has arg s of wrong type string\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var odd_count_list []string\n    for i := 0; i < len(lst); i++ {\n        odd_count_list = append(odd_count_list, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, len(lst)))\n    }\n    return odd_count_list\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpli9rbqpw_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpli9rbqpw_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 2input. the number of odd elements 7 the str1ng 1 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpli9rbqpw_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 3input. the number of odd elements 2 the str1ng 1 of the 3input. the number of odd elements 2 the str2ng 2 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i])%2, len(lst[i])/2, i, len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmp1b2cgn9w_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str3ng 0 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmp1b2cgn9w_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str0ng 0 of the 2input. the number of odd elements 0 the str4ng 1 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmp1b2cgn9w_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 0 of the 3input. the number of odd elements 1 the str1ng 1 of the 3input. the number of odd elements 1 the str1ng 2 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // Your code here\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dnput.\", len(lst[i]) - 1, i, i, len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpatcmgio0_test.go:40: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpatcmgio0_test.go:40: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 2nput. the number of odd elements 7 the str1ng 1 of the 2nput.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpatcmgio0_test.go:40: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 3nput. the number of odd elements 2 the str1ng 1 of the 3nput. the number of odd elements 2 the str2ng 2 of the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // Your code here\n    \n    return nil\n}\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmplim5153e_test.go:45: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmplim5153e_test.go:45: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmplim5153e_test.go:45: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // Write your code here\n    var result []string\n    for _, str := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dnput.\", len(str)%2, len(str), len(str), len(str)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpftuv5u4r_test.go:40: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str7ng 7 of the 7nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpftuv5u4r_test.go:40: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 1nput. the number of odd elements 0 the str8ng 8 of the 8nput.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpftuv5u4r_test.go:40: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str3ng 3 of the 3nput. the number of odd elements 1 the str3ng 3 of the 3nput. the number of odd elements 1 the str3ng 3 of the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // Your code here\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dnput.\", len(lst[i]) - 1, i, i, len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpatcmgio0_test.go:40: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpatcmgio0_test.go:40: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 2nput. the number of odd elements 7 the str1ng 1 of the 2nput.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpatcmgio0_test.go:40: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 3nput. the number of odd elements 2 the str1ng 1 of the 3nput. the number of odd elements 2 the str2ng 2 of the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 2input. the number of odd elements 7 the str1ng 1 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 3input. the number of odd elements 2 the str1ng 1 of the 3input. the number of odd elements 2 the str2ng 2 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        count := 0\n        for _, c := range s {\n            if c % 2 == 1 {\n                count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", count, len(s), len(s), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpglvrroe0_test.go:45: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4 the str7ng 7 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpglvrroe0_test.go:45: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 2input. the number of odd elements 8 the str8ng 8 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpglvrroe0_test.go:45: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str3ng 3 of the 3input. the number of odd elements 3 the str3ng 3 of the 3input. the number of odd elements 2 the str3ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 2input. the number of odd elements 7 the str1ng 1 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 3input. the number of odd elements 2 the str1ng 1 of the 3input. the number of odd elements 2 the str2ng 2 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i])%2, len(lst[i])%2, len(lst[i]), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 2input. the number of odd elements 0 the str0ng 8 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3input. the number of odd elements 1 the str1ng 3 of the 3input. the number of odd elements 1 the str1ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // TODO: Implement this function\n    var result []string\n    for _, str := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(str)%2, len(str), len(str), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpbsob6no3_test.go:40: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str7ng 7 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpbsob6no3_test.go:40: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 2input. the number of odd elements 0 the str8ng 8 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpbsob6no3_test.go:40: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str3ng 3 of the 3input. the number of odd elements 1 the str3ng 3 of the 3input. the number of odd elements 1 the str3ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%sng %d of the %dinput.\", len(s) - len(s)%2, s, len(s), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpoc60eemq_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str1234567ng 7 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpoc60eemq_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str3ng 1 of the 2input. the number of odd elements 8 the str11111111ng 8 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpoc60eemq_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str271ng 3 of the 3input. the number of odd elements 2 the str137ng 3 of the 3input. the number of odd elements 2 the str314ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(s)%2, len(s)%2, len(s), len(s)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpoz80eubl_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 7input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpoz80eubl_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 1input. the number of odd elements 0 the str0ng 8 of the 8input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpoz80eubl_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3input. the number of odd elements 1 the str1ng 3 of the 3input. the number of odd elements 1 the str1ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    result := make([]string, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dput.\", len(lst[i])%2, len(lst[i])%2, len(lst[i]), len(lst[i]))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpbguss1z4_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 7put.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpbguss1z4_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 1put. the number of odd elements 0 the str0ng 8 of the 8put.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpbguss1z4_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3put. the number of odd elements 1 the str1ng 3 of the 3put. the number of odd elements 1 the str1ng 3 of the 3put.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dnput.\", len(s)%2, len(s)%2, len(s), len(s)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmplpmb55m5_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 7nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmplpmb55m5_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 1nput. the number of odd elements 0 the str0ng 8 of the 8nput.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmplpmb55m5_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3nput. the number of odd elements 1 the str1ng 3 of the 3nput. the number of odd elements 1 the str1ng 3 of the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i])%2, len(lst[i])%2, len(lst[i]), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 2input. the number of odd elements 0 the str0ng 8 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3input. the number of odd elements 1 the str1ng 3 of the 3input. the number of odd elements 1 the str1ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 2input. the number of odd elements 7 the str1ng 1 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpporficv__test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 3input. the number of odd elements 2 the str1ng 1 of the 3input. the number of odd elements 2 the str2ng 2 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // write your code here\n    result := make([]string, len(lst))\n    for i, s := range lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dput.\", len(s)%2, len(s)%2, len(s)%2, len(s))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpcor5ts10_test.go:40: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 1 of the 7put.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpcor5ts10_test.go:40: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 1put. the number of odd elements 0 the str0ng 0 of the 8put.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpcor5ts10_test.go:40: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 1 of the 3put. the number of odd elements 1 the str1ng 1 of the 3put. the number of odd elements 1 the str1ng 1 of the 3put.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // Write your code here\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmp3s4horkv_test.go:40: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmp3s4horkv_test.go:40: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmp3s4horkv_test.go:40: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // Write your code here\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpqchx2mja_test.go:40: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0put.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpqchx2mja_test.go:40: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0put. the number of odd elements 7 the str1ng 1 of the 1put.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpqchx2mja_test.go:40: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0put. the number of odd elements 2 the str1ng 1 of the 1put. the number of odd elements 2 the str2ng 2 of the 2put.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // Write your code here\n    result := make([]string, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dnput.\", len(lst[i]) - 1, len(lst[i]), i, len(lst))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmptfbmw5un_test.go:40: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str7ng 0 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmptfbmw5un_test.go:40: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str1ng 0 of the 2nput. the number of odd elements 7 the str8ng 1 of the 2nput.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmptfbmw5un_test.go:40: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str3ng 0 of the 3nput. the number of odd elements 2 the str3ng 1 of the 3nput. the number of odd elements 2 the str3ng 2 of the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dnput.\", len(s)%2, len(s)%2, len(s), len(s)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmplpmb55m5_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 7nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmplpmb55m5_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 1nput. the number of odd elements 0 the str0ng 8 of the 8nput.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmplpmb55m5_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3nput. the number of odd elements 1 the str1ng 3 of the 3nput. the number of odd elements 1 the str1ng 3 of the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // Your code here\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmp63ajtr5j_test.go:40: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmp63ajtr5j_test.go:40: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmp63ajtr5j_test.go:40: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i])%2, len(lst[i])%2, len(lst[i]), len(lst)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 2input. the number of odd elements 0 the str0ng 8 of the 2input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpy0ki3b30_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3input. the number of odd elements 1 the str1ng 3 of the 3input. the number of odd elements 1 the str1ng 3 of the 3input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, str := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dnput.\", len(str)%2, len(str)%2, len(str), len(str)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpj5w77y90_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 7nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpj5w77y90_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 1nput. the number of odd elements 0 the str0ng 8 of the 8nput.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpj5w77y90_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3nput. the number of odd elements 1 the str1ng 3 of the 3nput. the number of odd elements 1 the str1ng 3 of the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    result := make([]string, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dput.\", len(lst[i])%2, len(lst[i])%2, len(lst[i]), len(lst[i]))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpbguss1z4_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 7put.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpbguss1z4_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 1put. the number of odd elements 0 the str0ng 8 of the 8put.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpbguss1z4_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3put. the number of odd elements 1 the str1ng 3 of the 3put. the number of odd elements 1 the str1ng 3 of the 3put.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    // Write your code here\n    result := make([]string, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dnput.\", len(lst[i])%2, len(lst[i])%2, len(lst[i]), len(lst))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpwn81uklr_test.go:40: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 1 the str1ng 7 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpwn81uklr_test.go:40: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 1 the str1ng 1 of the 2nput. the number of odd elements 0 the str0ng 8 of the 2nput.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpwn81uklr_test.go:40: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 1 the str1ng 3 of the 3nput. the number of odd elements 1 the str1ng 3 of the 3nput. the number of odd elements 1 the str1ng 3 of the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, str := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dnput.\", len(str) - len(str) % 2, len(str), len(str) % 2, len(str)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmptt91kt1a_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str7ng 1 of the 7nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmptt91kt1a_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str1ng 1 of the 1nput. the number of odd elements 8 the str8ng 0 of the 8nput.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmptt91kt1a_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str3ng 1 of the 3nput. the number of odd elements 2 the str3ng 1 of the 3nput. the number of odd elements 2 the str3ng 1 of the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dnput.\", len(s) - len(s)%2, len(s), len(s), len(s)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpo2csus46_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str7ng 7 of the 7nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpo2csus46_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str1ng 1 of the 1nput. the number of odd elements 8 the str8ng 8 of the 8nput.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpo2csus46_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str3ng 3 of the 3nput. the number of odd elements 2 the str3ng 3 of the 3nput. the number of odd elements 2 the str3ng 3 of the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d the str%dng %d of the %dinput.\", len(lst[i]) - 1, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 6 the str0ng 0 of the 0input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements 0 the str0ng 0 of the 0input. the number of odd elements 7 the str1ng 1 of the 1input.]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpnvt75o1e_test.go:39: expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the number of odd elements 2 the str0ng 0 of the 0input. the number of odd elements 2 the str1ng 1 of the 1input. the number of odd elements 2 the str2ng 2 of the 2input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}