name: HumanEval_160_do_algebra
language: go_test.go
prompt: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Given two lists operator, and operand. The first list has basic algebra operations,\
  \ and \n// the second list is a list of integers. Use the two given lists to build\
  \ the algebric \n// expression and return the evaluation of this expression.\n//\
  \ The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
  \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
  \ operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n//\
  \ => result = 9\n// Note:\n// The length of operator list is equal to the length\
  \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
  // Operator list has at least one operator, and operand list has at least two operands.\n\
  func do_algebra(operator []string, operand []int) int {\n"
tests: "func TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3,\
  \ 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"\
  }, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\"\
  , \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\
  \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var result int\n    for i := 0; i < len(operand) - 1; i++ {\n \
    \       if operator[i] == \"+\" {\n            result += operand[i]\n        }\
    \ else if operator[i] == \"-\" {\n            result -= operand[i]\n        }\
    \ else if operator[i] == \"*\" {\n            result *= operand[i]\n        }\
    \ else if operator[i] == \"//\" {\n            result /= operand[i]\n        }\
    \ else if operator[i] == \"**\" {\n            result = operand[i] * result\n\
    \        }\n    }\n    return result\n}\n", "    // Your code here\n    if len(operator)\
    \ == 0 {\n        return 0\n    }\n    if len(operand) == 1 {\n        return\
    \ operand[0]\n    }\n    if len(operand) == 2 {\n        return operand[0] + operator[0]\
    \ * operand[1]\n    }\n    if len(operand) == 3 {\n        return operand[0] +\
    \ operator[0] * operand[1] + operator[1] * operand[2]\n    }\n    if len(operand)\
    \ == 4 {\n        return operand[0] + operator[0] * operand[1] + operator[1] *\
    \ operand[2] + operator[2] * operand[3]\n    }\n    if len(operand) == 5 {\n \
    \       return operand[0] + operator[0] * operand[1] + operator[1] * operand[2]\
    \ + operator[2] * operand[3] + operator[3] * operand[4]\n    }\n    if len(operand)\
    \ == 6 {\n        return operand[0] + operator[0] * operand[1] + operator[1] *\
    \ operand[2] + operator[2] * operand[3] + operator[3] * operand[4] + operator[4]\
    \ * operand[5]\n    }\n    if len(operand) == 7 {\n        return operand[0] +\
    \ operator[0] * operand[1] + operator[1] * operand[2] + operator[2] * operand[3]\
    \ + operator[3] * operand[4] + operator[4] * operand[5] + operator[5] * operand[6]\n\
    \    }\n    if len(operand) == 8 {\n        return operand[0] + operator[0] *\
    \ operand[1] + operator[1] * operand[2] + operator[2] * operand[3] + operator[3]\
    \ * operand[4] + operator[4] * operand[5] + operator[5] * operand[6] + operator[6]\
    \ * operand[7]\n    }\n    if len(oper", "    // Your code here\n    return 0\n\
    }\n", "    // Your code here\n    if len(operator) == 0 {\n        return 0\n\
    \    }\n    if len(operand) == 1 {\n        return operand[0]\n    }\n    if len(operand)\
    \ == 2 {\n        return operand[0] + operand[1] * operator[0]\n    }\n    if\
    \ len(operand) > 2 {\n        return operand[0] + operand[1] * operator[0] + operand[2]\
    \ * operator[1]\n    }\n    return 0\n}\n", "    // Your code here\n    return\
    \ 0\n}\n", "    var result int\n    for i := 0; i < len(operand) - 1; i++ {\n\
    \        switch operator[i] {\n            case \"+\":\n                result\
    \ += operand[i]\n            case \"-\":\n                result -= operand[i]\n\
    \            case \"*\":\n                result *= operand[i]\n            case\
    \ \"//\":\n                result /= operand[i]\n            case \"**\":\n  \
    \              result = operand[i] * result\n        }\n    }\n    result += operand[len(operand)\
    \ - 1]\n    return result\n}\n", "    // Your code here\n    return 0\n}\n\n//\
    \ Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.", "    // Your code here\n    return 0\n}\n\n\
    // Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.", "    // Your code here\n    return 0\n}\n",
  "    // Your code here\n    return 0\n}\n\n// Given two lists operator, and operand.\
    \ The first list has basic algebra operations, and \n// the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n// expression and\
    \ return the evaluation of this expression.\n// The basic algebra operations:\n\
    // Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor\
    \ division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*',\
    \ '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n\
    // Note:\n// The length of operator list is equal to the length of operand list\
    \ minus one.\n// Operand is a list of of non-negative integers.\n// Operator list\
    \ has at least one operator, and operand list has at least two operands.", " \
    \   // Your code here\n    if len(operator) == 0 {\n        return 0\n    }\n\
    \    if len(operand) == 1 {\n        return operand[0]\n    }\n    if len(operand)\
    \ == 2 {\n        return operand[0] + operator[0] * operand[1]\n    }\n    if\
    \ len(operand) == 3 {\n        return operand[0] + operator[0] * operand[1] +\
    \ operator[1] * operand[2]\n    }\n    if len(operand) == 4 {\n        return\
    \ operand[0] + operator[0] * operand[1] + operator[1] * operand[2] + operator[2]\
    \ * operand[3]\n    }\n    return 0\n}\n", "    // Your code here\n    return\
    \ 0\n}\n\n// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n//\
    \ result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.", "    // Your code here\n    return\
    \ 0\n}\n\n// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n//\
    \ result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.", "    // Your code here\n    if len(operator)\
    \ == 0 {\n        return 0\n    }\n    if len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    \n    var result int\n    for i := 0; i < len(operand); i++ {\n     \
    \   if operator[i] == \"+\" {\n            result += operand[i]\n        } else\
    \ if operator[i] == \"-\" {\n            result -= operand[i]\n        } else\
    \ if operator[i] == \"*\" {\n            result *= operand[i]\n        } else\
    \ if operator[i] == \"//\" {\n            result /= operand[i]\n        } else\
    \ if operator[i] == \"**\" {\n            result = operand[i] * result\n     \
    \   }\n    }\n    return result\n}\n", "    // Your code here\n    return 0\n\
    }\n\n// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n//\
    \ result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.", "    // Your code here\n    if len(operator)\
    \ == 0 {\n        return 0\n    }\n    if len(operand) == 1 {\n        return\
    \ operand[0]\n    }\n    if len(operand) == 2 {\n        return operand[0] + operator[0]\
    \ * operand[1]\n    }\n    if len(operand) == 3 {\n        return operand[0] +\
    \ operator[0] * operand[1] + operator[1] * operand[2]\n    }\n    if len(operand)\
    \ == 4 {\n        return operand[0] + operator[0] * operand[1] + operator[1] *\
    \ operand[2] + operator[2] * operand[3]\n    }\n    if len(operand) == 5 {\n \
    \       return operand[0] + operator[0] * operand[1] + operator[1] * operand[2]\
    \ + operator[2] * operand[3] + operator[3] * operand[4]\n    }\n    return 0\n\
    }\n", "    // Your code here\n    return 0\n}\n", "    // Your code here\n   \
    \ return 0\n}\n", "    // Your code here\n    return 0\n}\n\n// Given two lists\
    \ operator, and operand. The first list has basic algebra operations, and \n//\
    \ the second list is a list of integers. Use the two given lists to build the\
    \ algebric \n// expression and return the evaluation of this expression.\n// The\
    \ basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.", "    // Your code here\n    var result int\n    for i := 0; i <\
    \ len(operand) - 1; i++ {\n        result = operand[i] + operator[i] * operand[i\
    \ + 1]\n    }\n    result = operand[len(operand) - 1] - result\n    return result\n\
    }\n", "    // Your code here\n    return 0\n}\n\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.", "    // Your code here\n    return 0\n}\n\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.", "    // Your code here\n    return 0\n}\n", "    // Your code here\n\
    \    return 0\n}\n\n// Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n// the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// list = [2,\
    \ 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length\
    \ of operator list is equal to the length of operand list minus one.\n// Operand\
    \ is a list of of non-negative integers.\n// Operator list has at least one operator,\
    \ and operand list has at least two operands.", "    // Your code here\n    return\
    \ 0\n}\n", "    // Your code here\n    return 0\n}\n", "    // Your code here\n\
    \    return 0\n}\n\n// Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n// the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// list = [2,\
    \ 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length\
    \ of operator list is equal to the length of operand list minus one.\n// Operand\
    \ is a list of of non-negative integers.\n// Operator list has at least one operator,\
    \ and operand list has at least two operands.", "    // Your code here\n    return\
    \ 0\n}\n\n// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n//\
    \ result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.", "    // Your code here\n    return\
    \ 0\n}\n", "    // Your code here\n    return 0\n}\n\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.", "    // Your code here\n    return 0\n}\n", "    // Your code here\n\
    \    result := 0\n    for i := 0; i < len(operand) - 1; i++ {\n        result\
    \ += operand[i] * operator[i]\n    }\n    result += operand[len(operand) - 1]\
    \ * operator[len(operand) - 1]\n    return result\n}\n", "    var result int\n\
    \    for i := 0; i < len(operand) - 1; i++ {\n        switch operator[i] {\n \
    \           case \"+\":\n                result += operand[i]\n            case\
    \ \"-\":\n                result -= operand[i]\n            case \"*\":\n    \
    \            result *= operand[i]\n            case \"//\":\n                result\
    \ /= operand[i]\n            case \"**\":\n                result = int(result)\
    \ ** int(operand[i])\n        }\n    }\n    return result\n}\n", "    // Your\
    \ code here\n    return 0\n}\n", "    // Your code here\n    result := 0\n   \
    \ for i := 0; i < len(operand) - 1; i++ {\n        result += operand[i] * operator[i]\n\
    \    }\n    result += operand[len(operand) - 1] * operator[len(operand) - 1]\n\
    \    return result\n}\n", "    var result int\n    for i := 0; i < len(operand)\
    \ - 1; i++ {\n        result = result + operand[i] * operator[i]\n    }\n    result\
    \ = result + operand[len(operand) - 1] * operator[len(operand) - 1]\n    return\
    \ result\n}\n", "    // Your code here\n    result := 0\n    for i := 0; i < len(operand)\
    \ - 1; i++ {\n        result += operand[i] * operator[i]\n    }\n    result +=\
    \ operand[len(operand) - 1] * operator[len(operand) - 1]\n    return result\n\
    }\n", "    // Your code here\n    return 0\n}\n", "    // Your code here\n   \
    \ return 0\n}\n", "    // Your code here\n    return 0\n}\n\n// Given two lists\
    \ operator, and operand. The first list has basic algebra operations, and \n//\
    \ the second list is a list of integers. Use the two given lists to build the\
    \ algebric \n// expression and return the evaluation of this expression.\n// The\
    \ basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.", "    // Your code here\n    if len(operator) == 0 {\n        return\
    \ 0\n    }\n    if len(operand) == 1 {\n        return operand[0]\n    }\n   \
    \ if len(operand) == 2 {\n        return operand[0] + operand[1] * operator[0]\n\
    \    }\n    if len(operand) == 3 {\n        return operand[0] + operand[1] * operator[0]\
    \ + operand[2] * operator[1]\n    }\n    if len(operand) == 4 {\n        return\
    \ operand[0] + operand[1] * operator[0] + operand[2] * operator[1] + operand[3]\
    \ * operator[2]\n    }\n    if len(operand) == 5 {\n        return operand[0]\
    \ + operand[1] * operator[0] + operand[2] * operator[1] + operand[3] * operator[2]\
    \ + operand[4] * operator[3]\n    }\n    if len(operand) == 6 {\n        return\
    \ operand[0] + operand[1] * operator[0] + operand[2] * operator[1] + operand[3]\
    \ * operator[2] + operand[4] * operator[3] + operand[5] * operator[4]\n    }\n\
    \    if len(operand) == 7 {\n        return operand[0] + operand[1] * operator[0]\
    \ + operand[2] * operator[1] + operand[3] * operator[2] + operand[4] * operator[3]\
    \ + operand[5] * operator[4] + operand[6] * operator[5]\n    }\n    if len(operand)\
    \ == 8 {\n        return operand[0] + operand[1] * operator[0] + operand[2] *\
    \ operator[1] + operand[3] * operator[2] + operand[4] * operator[3] + operand[5]\
    \ * operator[4] + operand[6] * operator[5] + operand[7] * operator[6]\n    }\n\
    \    if len(oper", "    // Your code here\n    var result int\n    for i := 0;\
    \ i < len(operand) - 1; i++ {\n        result += operand[i] * operator[i]\n  \
    \  }\n    result += operand[len(operand) - 1] * operator[len(operand) - 1]\n \
    \   return result\n}\n", "    // Your code here\n    if len(operator) == 0 {\n\
    \        return 0\n    }\n    if len(operand) == 1 {\n        return operand[0]\n\
    \    }\n    if len(operator) == 1 {\n        return operand[0]\n    }\n    if\
    \ len(operator) == 2 {\n        if operator[0] == \"+\" {\n            return\
    \ operand[0] + operand[1]\n        } else if operator[0] == \"-\" {\n        \
    \    return operand[0] - operand[1]\n        } else if operator[0] == \"*\" {\n\
    \            return operand[0] * operand[1]\n        } else if operator[0] ==\
    \ \"//\" {\n            return operand[0] / operand[1]\n        } else if operator[0]\
    \ == \"**\" {\n            return operand[0] ** operand[1]\n        }\n    }\n\
    \    if len(operator) == 3 {\n        if operator[0] == \"+\" {\n            return\
    \ operand[0] + operand[1] + operand[2]\n        } else if operator[0] == \"-\"\
    \ {\n            return operand[0] - operand[1] - operand[2]\n        } else if\
    \ operator[0] == \"*\" {\n            return operand[0] * operand[1] * operand[2]\n\
    \        } else if operator[0] == \"//\" {\n            return operand[0] / operand[1]\
    \ / operand[2]\n        } else if operator[0] == \"**\" {\n            return\
    \ operand[0] ** operand[1] ** operand[2]\n        }\n    }\n    return 0\n}\n",
  "    // Your code here\n    return 0\n}\n", "    // Your code here\n    result :=\
    \ 0\n    for i := 0; i < len(operand) - 1; i++ {\n        result += operand[i]\
    \ * operator[i]\n    }\n    result += operand[len(operand) - 1] * operator[len(operand)\
    \ - 1]\n    return result\n}\n", "    var result int\n    for i := 0; i < len(operand)\
    \ - 1; i++ {\n        result = operand[i] + operator[i] * operand[i+1]\n    }\n\
    \    result = operand[len(operand) - 1] - result\n    return result\n}\n", " \
    \   // Your code here\n    return 0\n}\n\n// Given two lists operator, and operand.\
    \ The first list has basic algebra operations, and \n// the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n// expression and\
    \ return the evaluation of this expression.\n// The basic algebra operations:\n\
    // Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor\
    \ division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*',\
    \ '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n\
    // Note:\n// The length of operator list is equal to the length of operand list\
    \ minus one.\n// Operand is a list of of non-negative integers.\n// Operator list\
    \ has at least one operator, and operand list has at least two operands.", " \
    \   // Your code here\n    if len(operator) == 0 {\n        return 0\n    }\n\
    \    if len(operand) == 1 {\n        return operand[0]\n    }\n    if len(operand)\
    \ == 2 {\n        return operand[0] + operator[0] * operand[1]\n    }\n    if\
    \ len(operand) == 3 {\n        return operand[0] + operator[0] * operand[1] +\
    \ operator[1] * operand[2]\n    }\n    if len(operand) == 4 {\n        return\
    \ operand[0] + operator[0] * operand[1] + operator[1] * operand[2] + operator[2]\
    \ * operand[3]\n    }\n    if len(operand) == 5 {\n        return operand[0] +\
    \ operator[0] * operand[1] + operator[1] * operand[2] + operator[2] * operand[3]\
    \ + operator[3] * operand[4]\n    }\n    return 0\n}\n", "    var result int\n\
    \    for i := 0; i < len(operand) - 1; i++ {\n        if operator[i] == \"*\"\
    \ {\n            result += operand[i] * operand[i + 1]\n        } else if operator[i]\
    \ == \"-\" {\n            result -= operand[i] * operand[i + 1]\n        } else\
    \ if operator[i] == \"+\" {\n            result += operand[i] + operand[i + 1]\n\
    \        } else if operator[i] == \"//\" {\n            result += operand[i] /\
    \ operand[i + 1]\n        } else if operator[i] == \"**\" {\n            result\
    \ += operand[i] ** operand[i + 1]\n        }\n    }\n    return result\n}\n",
  "    // Your code here\n    var result int\n    for i := 0; i < len(operand) - 1;\
    \ i++ {\n        if operator[i] == \"+\" {\n            result += operand[i]\n\
    \        } else if operator[i] == \"-\" {\n            result -= operand[i]\n\
    \        } else if operator[i] == \"*\" {\n            result *= operand[i]\n\
    \        } else if operator[i] == \"//\" {\n            result /= operand[i]\n\
    \        } else if operator[i] == \"**\" {\n            result = result * operand[i]\n\
    \        }\n    }\n    result += operand[len(operand) - 1]\n    return result\n\
    }\n", "    // Your code here\n    if len(operator) == 0 {\n        return 0\n\
    \    }\n    if len(operand) == 1 {\n        return operand[0]\n    }\n    if len(operand)\
    \ == 0 {\n        return 0\n    }\n    if len(operator) == 1 {\n        return\
    \ operand[0]\n    }\n    if len(operator) == 2 {\n        return operand[0] +\
    \ operand[1] * operator[0] - operand[1]\n    }\n    if len(operator) == 3 {\n\
    \        return operand[0] + operand[1] * operator[0] - operand[1] + operand[2]\
    \ * operator[1] - operand[2]\n    }\n    if len(operator) == 4 {\n        return\
    \ operand[0] + operand[1] * operator[0] - operand[1] + operand[2] * operator[1]\
    \ - operand[2] + operand[3] * operator[2] - operand[3]\n    }\n    if len(operator)\
    \ == 5 {\n        return operand[0] + operand[1] * operator[0] - operand[1] +\
    \ operand[2] * operator[1] - operand[2] + operand[3] * operator[2] - operand[3]\
    \ + operand[4] * operator[3] - operand[4]\n    }\n    if len(operator) == 6 {\n\
    \        return operand[0] + operand[1] * operator[0] - operand[1] + operand[2]\
    \ * operator[1] - operand[2] + operand[3] * operator[2] - operand[3] + operand[4]\
    \ * operator[3] - operand[4] + operand[5] * operator[4] - operand[5]\n    }\n\
    \    if len(operator) == 7 {\n        return operand[0] + operand[1] * operator[0]\
    \ - operand[1] + operand[2] * operator[1] - operand[2] + operand[3] * operator[2]\
    \ - operand[3]", "    // Your code here\n    return 0\n}\n\n// Given two lists\
    \ operator, and operand. The first list has basic algebra operations, and \n//\
    \ the second list is a list of integers. Use the two given lists to build the\
    \ algebric \n// expression and return the evaluation of this expression.\n// The\
    \ basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.", "    var result int\n    for i := 0; i < len(operand) - 1; i++ {\n\
    \        result = operand[i]\n        for j := 0; j < len(operator) - 1; j++ {\n\
    \            switch operator[j] {\n                case \"+\":\n             \
    \       result += operand[i + 1]\n                case \"-\":\n              \
    \      result -= operand[i + 1]\n                case \"*\":\n               \
    \     result *= operand[i + 1]\n                case \"//\":\n               \
    \     result /= operand[i + 1]\n                case \"**\":\n               \
    \     result = int(math.Pow(float64(result), float64(operand[i + 1])))\n     \
    \       }\n        }\n        operand = append(operand[:i], operand[i + 1:]...)\n\
    \    }\n    return result\n}\n", "    // Your code here\n    return 0\n}\n\n//\
    \ Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.", "    // Your code here\n    return 0\n}\n\n\
    // Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.", "    // Your code here\n    if len(operator)\
    \ == 0 {\n        return 0\n    }\n    if len(operand) == 1 {\n        return\
    \ operand[0]\n    }\n    if len(operator) == 1 {\n        return operand[0]\n\
    \    }\n    if len(operator) == 2 {\n        return operand[0] + operand[1] *\
    \ operator[0] - operand[1] * operator[1]\n    }\n    if len(operator) == 3 {\n\
    \        return operand[0] + operand[1] * operator[0] - operand[1] * operator[1]\
    \ + operand[2] * operator[0] * operator[1] - operand[2] * operator[1] * operator[1]\n\
    \    }\n    return operand[0] + operand[1] * operator[0] - operand[1] * operator[1]\
    \ + operand[2] * operator[0] * operator[1] - operand[2] * operator[1] * operator[1]\
    \ + operand[3] * operator[0] * operator[1] * operator[2] - operand[3] * operator[1]\
    \ * operator[1] * operator[2]\n}\n", "    // Your code here\n    return 0\n}\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.", "    // Your code here\n    if len(operator)\
    \ == 0 {\n        return 0\n    }\n    if len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) == 1 {\n        return operand[0]\n    }\n  \
    \  if len(operand) == 1 {\n        return operator[0]\n    }\n    if len(operator)\
    \ == 2 {\n        if operator[0] == \"+\" {\n            return operand[0] + operand[1]\n\
    \        } else if operator[0] == \"-\" {\n            return operand[0] - operand[1]\n\
    \        } else if operator[0] == \"*\" {\n            return operand[0] * operand[1]\n\
    \        } else if operator[0] == \"//\" {\n            return operand[0] // operand[1]\n\
    \        } else if operator[0] == \"**\" {\n            return operand[0] ** operand[1]\n\
    \        }\n    }\n    if len(operand) == 2 {\n        if operator[0] == \"+\"\
    \ {\n            return operand[0] + operand[1]\n        } else if operator[0]\
    \ == \"-\" {\n            return operand[0] - operand[1]\n        } else if operator[0]\
    \ == \"*\" {\n            return operand[0] * operand[1]\n        } else if operator[0]\
    \ == \"//\" {\n            return operand[0] // operand[1]\n        } else if\
    \ operator[0] == \"**\" {\n            return operand[0] ** operand[1]\n     \
    \   }\n    }\n    if len(operand) == 3 {\n        if operator[0] == \"+\" {\n\
    \            return operand[0] + operand[1] + operand[2]\n        } else if operator[0]\
    \ == \"-\" {\n            return operand[0] - operand[1] - operand[2]\n      \
    \  } else if operator[0] == \"*\" {\n            return operand[0] * operand[1]\
    \ * operand[2]\n        } else if operator[0] == \"//\" {\n            ", "  \
    \  // Your code here\n    if len(operator) == 0 {\n        return 0\n    }\n \
    \   if len(operand) == 1 {\n        return operand[0]\n    }\n    if len(operand)\
    \ == 0 {\n        return 0\n    }\n    if len(operator) == 1 {\n        return\
    \ operand[0]\n    }\n    if len(operator) == 2 {\n        if operator[0] == \"\
    +\" {\n            return operand[0] + operand[1]\n        } else if operator[0]\
    \ == \"-\" {\n            return operand[0] - operand[1]\n        } else if operator[0]\
    \ == \"*\" {\n            return operand[0] * operand[1]\n        } else if operator[0]\
    \ == \"//\" {\n            return operand[0] / operand[1]\n        } else if operator[0]\
    \ == \"**\" {\n            return operand[0] ** operand[1]\n        }\n    }\n\
    \    if len(operator) == 3 {\n        if operator[0] == \"+\" {\n            return\
    \ operand[0] + operand[1] + operand[2]\n        } else if operator[0] == \"-\"\
    \ {\n            return operand[0] - operand[1] - operand[2]\n        } else if\
    \ operator[0] == \"*\" {\n            return operand[0] * operand[1] * operand[2]\n\
    \        } else if operator[0] == \"//\" {\n            return operand[0] / operand[1]\
    \ / operand[2]\n        } else if operator[0] == \"**\" {\n            return\
    \ operand[0] ** operand[1] ** operand[2]\n        }\n    }\n    return 0\n}\n",
  "    // Your code here\n    if len(operator) == 0 {\n        return 0\n    }\n \
    \   if len(operand) == 1 {\n        return operand[0]\n    }\n    if len(operand)\
    \ == 2 {\n        return operand[0] + operator[0] * operand[1]\n    }\n    if\
    \ len(operand) == 3 {\n        return operand[0] + operator[0] * operand[1] +\
    \ operator[1] * operand[2]\n    }\n    if len(operand) == 4 {\n        return\
    \ operand[0] + operator[0] * operand[1] + operator[1] * operand[2] + operator[2]\
    \ * operand[3]\n    }\n    if len(operand) == 5 {\n        return operand[0] +\
    \ operator[0] * operand[1] + operator[1] * operand[2] + operator[2] * operand[3]\
    \ + operator[3] * operand[4]\n    }\n    if len(operand) == 6 {\n        return\
    \ operand[0] + operator[0] * operand[1] + operator[1] * operand[2] + operator[2]\
    \ * operand[3] + operator[3] * operand[4] + operator[4] * operand[5]\n    }\n\
    \    if len(operand) == 7 {\n        return operand[0] + operator[0] * operand[1]\
    \ + operator[1] * operand[2] + operator[2] * operand[3] + operator[3] * operand[4]\
    \ + operator[4] * operand[5] + operator[5] * operand[6]\n    }\n    if len(operand)\
    \ == 8 {\n        return operand[0] + operator[0] * operand[1] + operator[1] *\
    \ operand[2] + operator[2] * operand[3] + operator[3] * operand[4] + operator[4]\
    \ * operand[5] + operator[5] * operand[6] + operator[6] * operand[7]\n    }\n\
    \    if len(oper", "    // Your code here\n    return 0\n}\n", "    var result\
    \ int\n    for i := 0; i < len(operand) - 1; i++ {\n        switch operator[i]\
    \ {\n            case \"+\":\n                result += operand[i]\n         \
    \   case \"-\":\n                result -= operand[i]\n            case \"*\"\
    :\n                result *= operand[i]\n            case \"//\":\n          \
    \      result /= operand[i]\n            case \"**\":\n                result\
    \ = int(math.Pow(float64(result), float64(operand[i])))\n        }\n    }\n  \
    \  return result\n}\n", "    // Your code here\n    return 0\n}\n", "    // Your\
    \ code here\n    return 0\n}\n", "    // Your code here\n    return 0\n}\n\n//\
    \ Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.", "    // Your code here\n    return 0\n}\n",
  "    // Your code here\n    return 0\n}\n", "    // Your code here\n    return 0\n\
    }\n\n// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n//\
    \ result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.", "    // Your code here\n    if len(operator)\
    \ == 0 {\n        return 0\n    }\n    if len(operand) == 1 {\n        return\
    \ operand[0]\n    }\n    if len(operand) == 2 {\n        return operand[0] + operator[0]\
    \ * operand[1]\n    }\n    if len(operand) == 3 {\n        return operand[0] +\
    \ operator[0] * operand[1] + operator[1] * operand[2]\n    }\n    if len(operand)\
    \ == 4 {\n        return operand[0] + operator[0] * operand[1] + operator[1] *\
    \ operand[2] + operator[2] * operand[3]\n    }\n    if len(operand) == 5 {\n \
    \       return operand[0] + operator[0] * operand[1] + operator[1] * operand[2]\
    \ + operator[2] * operand[3] + operator[3] * operand[4]\n    }\n    if len(operand)\
    \ == 6 {\n        return operand[0] + operator[0] * operand[1] + operator[1] *\
    \ operand[2] + operator[2] * operand[3] + operator[3] * operand[4] + operator[4]\
    \ * operand[5]\n    }\n    if len(operand) == 7 {\n        return operand[0] +\
    \ operator[0] * operand[1] + operator[1] * operand[2] + operator[2] * operand[3]\
    \ + operator[3] * operand[4] + operator[4] * operand[5] + operator[5] * operand[6]\n\
    \    }\n    if len(operand) == 8 {\n        return operand[0] + operator[0] *\
    \ operand[1] + operator[1] * operand[2] + operator[2] * operand[3] + operator[3]\
    \ * operand[4] + operator[4] * operand[5] + operator[5] * operand[6] + operator[6]\
    \ * operand[7]\n    }\n    if len(oper", "    var result int\n    for i := 0;\
    \ i < len(operand) - 1; i++ {\n        result = operand[i] + operator[i] * operand[i\
    \ + 1]\n    }\n    result = result - operand[len(operand) - 1]\n    return result\n\
    }\n", "    // Your code here\n    return 0\n}\n\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.", "    // Your code here\n    return 0\n}\n\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.", "    // Your code here\n    result := 0\n    for i := 0; i < len(operand)\
    \ - 1; i++ {\n        result += operand[i] * operator[i]\n    }\n    result +=\
    \ operand[len(operand) - 1] * operator[len(operand) - 1]\n    return result\n\
    }\n", "    // Your code here\n    result := 0\n    for i := 0; i < len(operand)\
    \ - 1; i++ {\n        result += operand[i] * operator[i]\n    }\n    result +=\
    \ operand[len(operand) - 1] * operator[len(operand) - 1]\n    return result\n\
    }\n", "    // Your code here\n    return 0\n}\n\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.", "    // Your code here\n    return 0\n}\n\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.", "    // Your code here\n    if len(operator) == 0 {\n        return\
    \ 0\n    }\n    if len(operand) == 1 {\n        return operand[0]\n    }\n   \
    \ if len(operand) == 2 {\n        return operand[0] + operator[0] * operand[1]\n\
    \    }\n    if len(operand) == 3 {\n        return operand[0] + operator[0] *\
    \ operand[1] + operator[1] * operand[2]\n    }\n    if len(operand) == 4 {\n \
    \       return operand[0] + operator[0] * operand[1] + operator[1] * operand[2]\
    \ + operator[2] * operand[3]\n    }\n    if len(operand) == 5 {\n        return\
    \ operand[0] + operator[0] * operand[1] + operator[1] * operand[2] + operator[2]\
    \ * operand[3] + operator[3] * operand[4]\n    }\n    return 0\n}\n", "    //\
    \ Your code here\n    return 0\n}\n", "    // Your code here\n    return 0\n}\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.", "    var result int\n    for i := 0; i < len(operand)\
    \ - 1; i++ {\n        result = operand[i]\n        for j := 0; j < len(operator)\
    \ - 1; j++ {\n            switch operator[j] {\n                case \"+\":\n\
    \                    result += operand[i + 1]\n                case \"-\":\n \
    \                   result -= operand[i + 1]\n                case \"*\":\n  \
    \                  result *= operand[i + 1]\n                case \"//\":\n  \
    \                  result /= operand[i + 1]\n                case \"**\":\n  \
    \                  result = operand[i + 1] ** result\n            }\n        }\n\
    \        operand[i] = result\n    }\n    return result\n}\n", "    // Your code\
    \ here\n    if len(operator) == 0 {\n        return 0\n    }\n    if len(operand)\
    \ == 1 {\n        return operand[0]\n    }\n    if len(operand) == 2 {\n     \
    \   return operand[0] + operand[1] * operator[0]\n    }\n    if len(operand) ==\
    \ 3 {\n        return operand[0] + operand[1] * operator[0] + operand[2] * operator[1]\n\
    \    }\n    if len(operand) == 4 {\n        return operand[0] + operand[1] * operator[0]\
    \ + operand[2] * operator[1] + operand[3] * operator[2]\n    }\n    if len(operand)\
    \ == 5 {\n        return operand[0] + operand[1] * operator[0] + operand[2] *\
    \ operator[1] + operand[3] * operator[2] + operand[4] * operator[3]\n    }\n \
    \   if len(operand) == 6 {\n        return operand[0] + operand[1] * operator[0]\
    \ + operand[2] * operator[1] + operand[3] * operator[2] + operand[4] * operator[3]\
    \ + operand[5] * operator[4]\n    }\n    if len(operand) == 7 {\n        return\
    \ operand[0] + operand[1] * operator[0] + operand[2] * operator[1] + operand[3]\
    \ * operator[2] + operand[4] * operator[3] + operand[5] * operator[4] + operand[6]\
    \ * operator[5]\n    }\n    if len(operand) == 8 {\n        return operand[0]\
    \ + operand[1] * operator[0] + operand[2] * operator[1] + operand[3] * operator[2]\
    \ + operand[4] * operator[3] + operand[5] * operator[4] + operand[6] * operator[5]\
    \ + operand[7] * operator[6]\n    }\n    if len(oper", "    var result int\n \
    \   for i := 0; i < len(operand) - 1; i++ {\n        switch operator[i] {\n  \
    \          case \"+\":\n                result += operand[i]\n            case\
    \ \"-\":\n                result -= operand[i]\n            case \"*\":\n    \
    \            result *= operand[i]\n            case \"//\":\n                result\
    \ /= operand[i]\n            case \"**\":\n                result = int(math.Pow(float64(operand[i]),\
    \ float64(operand[i+1])))\n            default:\n                fmt.Println(\"\
    Error: unknown operator\")\n                return -1\n        }\n    }\n    return\
    \ result\n}\n", "    // Your code here\n    if len(operator) == 0 {\n        return\
    \ 0\n    }\n    if len(operand) == 1 {\n        return operand[0]\n    }\n   \
    \ if len(operand) == 2 {\n        return operand[0] + operand[1] * operator[0]\n\
    \    }\n    if len(operand) == 3 {\n        return operand[0] + operand[1] * operator[0]\
    \ + operand[2] * operator[1]\n    }\n    if len(operand) == 4 {\n        return\
    \ operand[0] + operand[1] * operator[0] + operand[2] * operator[1] + operand[3]\
    \ * operator[2]\n    }\n    if len(operand) == 5 {\n        return operand[0]\
    \ + operand[1] * operator[0] + operand[2] * operator[1] + operand[3] * operator[2]\
    \ + operand[4] * operator[3]\n    }\n    if len(operand) == 6 {\n        return\
    \ operand[0] + operand[1] * operator[0] + operand[2] * operator[1] + operand[3]\
    \ * operator[2] + operand[4] * operator[3] + operand[5] * operator[4]\n    }\n\
    \    if len(operand) == 7 {\n        return operand[0] + operand[1] * operator[0]\
    \ + operand[2] * operator[1] + operand[3] * operator[2] + operand[4] * operator[3]\
    \ + operand[5] * operator[4] + operand[6] * operator[5]\n    }\n    if len(operand)\
    \ == 8 {\n        return operand[0] + operand[1] * operator[0] + operand[2] *\
    \ operator[1] + operand[3] * operator[2] + operand[4] * operator[3] + operand[5]\
    \ * operator[4] + operand[6] * operator[5] + operand[7] * operator[6]\n    }\n\
    \    if len(oper", "    // Your code here\n    return 0\n}\n\n// Given two lists\
    \ operator, and operand. The first list has basic algebra operations, and \n//\
    \ the second list is a list of integers. Use the two given lists to build the\
    \ algebric \n// expression and return the evaluation of this expression.\n// The\
    \ basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.", "    // Your code here\n    return 0\n}\n\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.", "    var result int\n    for i := 0; i < len(operand) - 1; i++ {\n\
    \        if operator[i] == \"+\" {\n            result += operand[i]\n       \
    \ } else if operator[i] == \"-\" {\n            result -= operand[i]\n       \
    \ } else if operator[i] == \"*\" {\n            result *= operand[i]\n       \
    \ } else if operator[i] == \"//\" {\n            result /= operand[i]\n      \
    \  } else if operator[i] == \"**\" {\n            result = operand[i] * result\n\
    \        }\n    }\n    return result\n}\n", "    // Your code here\n    return\
    \ 0\n}\n\n// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n//\
    \ result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.", "    // Your code here\n    if len(operator)\
    \ == 0 {\n        return 0\n    }\n    if len(operand) == 1 {\n        return\
    \ operand[0]\n    }\n    if len(operator) == 1 {\n        return operand[0]\n\
    \    }\n    if len(operator) == 2 {\n        return operand[0] + operand[1] *\
    \ operator[0] - operand[1]\n    }\n    if len(operator) == 3 {\n        return\
    \ operand[0] + operand[1] * operator[0] - operand[1] + operand[2] * operator[1]\
    \ - operand[2]\n    }\n    if len(operator) == 4 {\n        return operand[0]\
    \ + operand[1] * operator[0] - operand[1] + operand[2] * operator[1] - operand[2]\
    \ + operand[3] * operator[2] - operand[3]\n    }\n    if len(operator) == 5 {\n\
    \        return operand[0] + operand[1] * operator[0] - operand[1] + operand[2]\
    \ * operator[1] - operand[2] + operand[3] * operator[2] - operand[3] + operand[4]\
    \ * operator[3] - operand[4]\n    }\n    if len(operator) == 6 {\n        return\
    \ operand[0] + operand[1] * operator[0] - operand[1] + operand[2] * operator[1]\
    \ - operand[2] + operand[3] * operator[2] - operand[3] + operand[4] * operator[3]\
    \ - operand[4] + operand[5] * operator[4] - operand[5]\n    }\n    if len(operator)\
    \ == 7 {\n        return operand[0] + operand[1] * operator[0] - operand[1] +\
    \ operand[2] * operator[1] - operand[2] + operand[3] * operator[2] - operand[3]\
    \ + operand[4] * operator[3] - operand[4] +", "    // Your code here\n    return\
    \ 0\n}\n\n// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n//\
    \ result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.", "    // Your code here\n    if len(operator)\
    \ == 0 {\n        return 0\n    }\n    if len(operand) == 1 {\n        return\
    \ operand[0]\n    }\n    if len(operand) == 2 {\n        return operand[0] + operator[0]\
    \ * operand[1]\n    }\n    if len(operand) == 3 {\n        return operand[0] +\
    \ operator[0] * operand[1] + operator[1] * operand[2]\n    }\n    if len(operand)\
    \ == 4 {\n        return operand[0] + operator[0] * operand[1] + operator[1] *\
    \ operand[2] + operator[2] * operand[3]\n    }\n    return 0\n}\n", "    // Your\
    \ code here\n    if len(operator) == 0 {\n        return 0\n    }\n    if len(operand)\
    \ == 0 {\n        return 0\n    }\n    if len(operator) == 1 {\n        return\
    \ operand[0]\n    }\n    if len(operand) == 1 {\n        return 0\n    }\n   \
    \ if len(operator) == 2 {\n        return operand[0] + operand[1] * operator[0]\
    \ - operand[1]\n    }\n    if len(operator) == 3 {\n        return operand[0]\
    \ + operand[1] * operator[0] - operand[1] + operand[2] * operator[1] - operand[2]\n\
    \    }\n    if len(operator) == 4 {\n        return operand[0] + operand[1] *\
    \ operator[0] - operand[1] + operand[2] * operator[1] - operand[2] + operand[3]\
    \ * operator[2] - operand[3]\n    }\n    if len(operator) == 5 {\n        return\
    \ operand[0] + operand[1] * operator[0] - operand[1] + operand[2] * operator[1]\
    \ - operand[2] + operand[3] * operator[2] - operand[3] + operand[4] * operator[3]\
    \ - operand[4]\n    }\n    if len(operator) == 6 {\n        return operand[0]\
    \ + operand[1] * operator[0] - operand[1] + operand[2] * operator[1] - operand[2]\
    \ + operand[3] * operator[2] - operand[3] + operand[4] * operator[3] - operand[4]\
    \ + operand[5] * operator[4] - operand[5]\n    }\n    if len(operator) == 7 {\n\
    \        return operand[0] + operand[1] * operator[0] - operand[1] + operand[2]\
    \ * operator[1] - operand[2] + operand[3] * operator[2] - operand[3] + operand[",
  "    // Your code here\n    return 0\n}\n", "    // Your code here\n    return 0\n\
    }\n", "    // Your code here\n    return 0\n}\n\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.", "    // Your code here\n    return 0\n}\n", "    var result int\n\
    \    for i := 0; i < len(operand) - 1; i++ {\n        if operator[i] == \"+\"\
    \ {\n            result += operand[i] + operand[i+1]\n        } else if operator[i]\
    \ == \"-\" {\n            result -= operand[i] + operand[i+1]\n        } else\
    \ if operator[i] == \"*\" {\n            result *= operand[i] + operand[i+1]\n\
    \        } else if operator[i] == \"//\" {\n            result /= operand[i] +\
    \ operand[i+1]\n        } else if operator[i] == \"**\" {\n            result\
    \ = operand[i] + operand[i+1]\n        }\n    }\n    return result\n}\n", "  \
    \  // Your code here\n    if len(operator) == 0 {\n        return 0\n    }\n \
    \   if len(operand) == 1 {\n        return operand[0]\n    }\n    if len(operand)\
    \ == 2 {\n        return operand[0] + operand[1] * operator[0]\n    }\n    if\
    \ len(operand) == 3 {\n        return operand[0] + operand[1] * operator[0] +\
    \ operand[2] * operator[1]\n    }\n    if len(operand) == 4 {\n        return\
    \ operand[0] + operand[1] * operator[0] + operand[2] * operator[1] + operand[3]\
    \ * operator[2]\n    }\n    if len(operand) == 5 {\n        return operand[0]\
    \ + operand[1] * operator[0] + operand[2] * operator[1] + operand[3] * operator[2]\
    \ + operand[4] * operator[3]\n    }\n    if len(operand) == 6 {\n        return\
    \ operand[0] + operand[1] * operator[0] + operand[2] * operator[1] + operand[3]\
    \ * operator[2] + operand[4] * operator[3] + operand[5] * operator[4]\n    }\n\
    \    if len(operand) == 7 {\n        return operand[0] + operand[1] * operator[0]\
    \ + operand[2] * operator[1] + operand[3] * operator[2] + operand[4] * operator[3]\
    \ + operand[5] * operator[4] + operand[6] * operator[5]\n    }\n    if len(operand)\
    \ == 8 {\n        return operand[0] + operand[1] * operator[0] + operand[2] *\
    \ operator[1] + operand[3] * operator[2] + operand[4] * operator[3] + operand[5]\
    \ * operator[4] + operand[6] * operator[5] + operand[7] * operator[6]\n    }\n\
    \    if len(oper", "    // Your code here\n    return 0\n}\n\n// Given two lists\
    \ operator, and operand. The first list has basic algebra operations, and \n//\
    \ the second list is a list of integers. Use the two given lists to build the\
    \ algebric \n// expression and return the evaluation of this expression.\n// The\
    \ basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.", "    // Your code here\n    return 0\n}\n\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.", "    // Your code here\n    return 0\n}\n\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.", "    // Your code here\n    return 0\n}\n", "    // Your code here\n\
    \    return 0\n}\n\n// Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n// the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// list = [2,\
    \ 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length\
    \ of operator list is equal to the length of operand list minus one.\n// Operand\
    \ is a list of of non-negative integers.\n// Operator list has at least one operator,\
    \ and operand list has at least two operands.", "    // Your code here\n    if\
    \ len(operator) == 0 {\n        return 0\n    }\n    if len(operand) == 1 {\n\
    \        return operand[0]\n    }\n    if len(operator) == 1 {\n        return\
    \ operand[0]\n    }\n    if len(operator) == 2 {\n        if operator[0] == \"\
    +\" {\n            return operand[0] + operand[1]\n        } else if operator[0]\
    \ == \"-\" {\n            return operand[0] - operand[1]\n        } else if operator[0]\
    \ == \"*\" {\n            return operand[0] * operand[1]\n        } else if operator[0]\
    \ == \"//\" {\n            return operand[0] / operand[1]\n        } else if operator[0]\
    \ == \"**\" {\n            return operand[0] ** operand[1]\n        }\n    }\n\
    \    if len(operator) == 3 {\n        if operator[0] == \"+\" {\n            return\
    \ operand[0] + operand[1] + operand[2]\n        } else if operator[0] == \"-\"\
    \ {\n            return operand[0] - operand[1] - operand[2]\n        } else if\
    \ operator[0] == \"*\" {\n            return operand[0] * operand[1] * operand[2]\n\
    \        } else if operator[0] == \"//\" {\n            return operand[0] / operand[1]\
    \ / operand[2]\n        } else if operator[0] == \"**\" {\n            return\
    \ operand[0] ** operand[1] ** operand[2]\n        }\n    }\n    return 0\n}\n",
  "    // Your code here\n    if len(operator) == 0 {\n        return 0\n    }\n \
    \   if len(operand) == 1 {\n        return operand[0]\n    }\n    if len(operator)\
    \ == 1 {\n        return operand[0]\n    }\n    if len(operator) == 2 {\n    \
    \    if operator[0] == \"+\" {\n            return operand[0] + operand[1]\n \
    \       } else if operator[0] == \"-\" {\n            return operand[0] - operand[1]\n\
    \        } else if operator[0] == \"*\" {\n            return operand[0] * operand[1]\n\
    \        } else if operator[0] == \"//\" {\n            return operand[0] / operand[1]\n\
    \        } else if operator[0] == \"**\" {\n            return operand[0] ** operand[1]\n\
    \        }\n    }\n    if len(operator) == 3 {\n        if operator[0] == \"+\"\
    \ {\n            return operand[0] + operand[1] + operand[2]\n        } else if\
    \ operator[0] == \"-\" {\n            return operand[0] - operand[1] - operand[2]\n\
    \        } else if operator[0] == \"*\" {\n            return operand[0] * operand[1]\
    \ * operand[2]\n        } else if operator[0] == \"//\" {\n            return\
    \ operand[0] / operand[1] / operand[2]\n        } else if operator[0] == \"**\"\
    \ {\n            return operand[0] ** operand[1] ** operand[2]\n        }\n  \
    \  }\n    return 0\n}\n", "    // Your code here\n    return 0\n}\n\n// Given\
    \ two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.", "    // Your code here\n    return 0\n}\n\n\
    // Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.", "    // Your code here\n    if len(operator)\
    \ == 0 {\n        return 0\n    }\n    if len(operand) == 1 {\n        return\
    \ operand[0]\n    }\n    if len(operand) == 2 {\n        return operand[0] + operator[0]\
    \ * operand[1]\n    }\n    if len(operand) == 3 {\n        return operand[0] +\
    \ operator[0] * operand[1] + operator[1] * operand[2]\n    }\n    if len(operand)\
    \ == 4 {\n        return operand[0] + operator[0] * operand[1] + operator[1] *\
    \ operand[2] + operator[2] * operand[3]\n    }\n    return 0\n}\n", "    var result\
    \ int\n    for i := 0; i < len(operand) - 1; i++ {\n        switch operator[i]\
    \ {\n            case \"+\":\n                result += operand[i]\n         \
    \   case \"-\":\n                result -= operand[i]\n            case \"*\"\
    :\n                result *= operand[i]\n            case \"//\":\n          \
    \      result /= operand[i]\n            case \"**\":\n                result\
    \ = int(math.Pow(float64(operand[i]), float64(operand[i+1])))\n        }\n   \
    \ }\n    return result\n}\n", "    // Your code here\n    return 0\n}\n", "  \
    \  // Your code here\n    return 0\n}\n", "    // Your code here\n    if len(operator)\
    \ == 0 {\n        return 0\n    }\n    if len(operand) == 1 {\n        return\
    \ operand[0]\n    }\n    if len(operand) == 2 {\n        return operand[0] + operand[1]\
    \ * operator[0]\n    }\n    if len(operand) == 3 {\n        return operand[0]\
    \ + operand[1] * operator[0] + operand[2] * operator[1]\n    }\n    if len(operand)\
    \ == 4 {\n        return operand[0] + operand[1] * operator[0] + operand[2] *\
    \ operator[1] + operand[3] * operator[2]\n    }\n    if len(operand) == 5 {\n\
    \        return operand[0] + operand[1] * operator[0] + operand[2] * operator[1]\
    \ + operand[3] * operator[2] + operand[4] * operator[3]\n    }\n    if len(operand)\
    \ == 6 {\n        return operand[0] + operand[1] * operator[0] + operand[2] *\
    \ operator[1] + operand[3] * operator[2] + operand[4] * operator[3] + operand[5]\
    \ * operator[4]\n    }\n    if len(operand) == 7 {\n        return operand[0]\
    \ + operand[1] * operator[0] + operand[2] * operator[1] + operand[3] * operator[2]\
    \ + operand[4] * operator[3] + operand[5] * operator[4] + operand[6] * operator[5]\n\
    \    }\n    if len(operand) == 8 {\n        return operand[0] + operand[1] * operator[0]\
    \ + operand[2] * operator[1] + operand[3] * operator[2] + operand[4] * operator[3]\
    \ + operand[5] * operator[4] + operand[6] * operator[5] + operand[7] * operator[6]\n\
    \    }\n    if len(oper", "    // Your code here\n    if len(operator) == 0 {\n\
    \        return 0\n    }\n    if len(operand) == 0 {\n        return 0\n    }\n\
    \    if len(operator) == 1 {\n        return operand[0]\n    }\n    if len(operand)\
    \ == 1 {\n        return operator[0]\n    }\n    if len(operator) == 2 {\n   \
    \     return operand[0] + operand[1] * operator[0]\n    }\n    if len(operand)\
    \ == 2 {\n        return operand[0] + operand[1] * operator[0]\n    }\n    if\
    \ len(operator) == 3 {\n        return operand[0] + operand[1] * operator[0] +\
    \ operand[2] * operator[1]\n    }\n    if len(operand) == 3 {\n        return\
    \ operand[0] + operand[1] * operator[0] + operand[2] * operator[1]\n    }\n  \
    \  if len(operator) == 4 {\n        return operand[0] + operand[1] * operator[0]\
    \ + operand[2] * operator[1] + operand[3] * operator[2]\n    }\n    if len(operand)\
    \ == 4 {\n        return operand[0] + operand[1] * operator[0] + operand[2] *\
    \ operator[1] + operand[3] * operator[2]\n    }\n    if len(operator) == 5 {\n\
    \        return operand[0] + operand[1] * operator[0] + operand[2] * operator[1]\
    \ + operand[3] * operator[2] + operand[4] * operator[3]\n    }\n    if len(operand)\
    \ == 5 {\n        return operand[0] + operand[1] * operator[0] + operand[2] *\
    \ operator[1] + operand[3] * operator[2] + operand[4] * operator[3]\n    }\n \
    \   if len(operator) == 6 {\n        return operand[0] + operand[1] * operator[0]\
    \ + operand[2] * operator[", "    // Your code here\n    if len(operator) == 0\
    \ {\n        return 0\n    }\n    if len(operand) == 1 {\n        return operand[0]\n\
    \    }\n    if len(operand) == 2 {\n        return operand[0] + operand[1] * operator[0]\n\
    \    }\n    if len(operand) == 3 {\n        return operand[0] + operand[1] * operator[0]\
    \ + operand[2] * operator[1]\n    }\n    if len(operand) == 4 {\n        return\
    \ operand[0] + operand[1] * operator[0] + operand[2] * operator[1] + operand[3]\
    \ * operator[2]\n    }\n    if len(operand) == 5 {\n        return operand[0]\
    \ + operand[1] * operator[0] + operand[2] * operator[1] + operand[3] * operator[2]\
    \ + operand[4] * operator[3]\n    }\n    if len(operand) == 6 {\n        return\
    \ operand[0] + operand[1] * operator[0] + operand[2] * operator[1] + operand[3]\
    \ * operator[2] + operand[4] * operator[3] + operand[5] * operator[4]\n    }\n\
    \    if len(operand) == 7 {\n        return operand[0] + operand[1] * operator[0]\
    \ + operand[2] * operator[1] + operand[3] * operator[2] + operand[4] * operator[3]\
    \ + operand[5] * operator[4] + operand[6] * operator[5]\n    }\n    if len(operand)\
    \ == 8 {\n        return operand[0] + operand[1] * operator[0] + operand[2] *\
    \ operator[1] + operand[3] * operator[2] + operand[4] * operator[3] + operand[5]\
    \ * operator[4] + operand[6] * operator[5] + operand[7] * operator[6]\n    }\n\
    \    if len(oper", "    // Your code here\n    return 0\n}\n", "    // Your code\
    \ here\n    if len(operator) == 0 {\n        return 0\n    }\n    if len(operand)\
    \ == 0 {\n        return 0\n    }\n    if len(operator) == 1 {\n        return\
    \ operand[0]\n    }\n    if len(operand) == 1 {\n        return operator[0]\n\
    \    }\n    if len(operator) == 2 {\n        return operand[0] + operator[0] *\
    \ operand[1]\n    }\n    if len(operand) == 2 {\n        return operator[0] +\
    \ operand[0] * operator[1]\n    }\n    if len(operator) == 3 {\n        return\
    \ operand[0] + operator[0] * operand[1] - operator[2]\n    }\n    if len(operand)\
    \ == 3 {\n        return operator[0] + operand[0] * operator[1] - operand[2]\n\
    \    }\n    if len(operator) == 4 {\n        return operand[0] + operator[0] *\
    \ operand[1] - operator[2] + operator[3]\n    }\n    if len(operand) == 4 {\n\
    \        return operator[0] + operand[0] * operator[1] - operand[2] + operand[3]\n\
    \    }\n    return 0\n}\n", "    // Your code here\n    return 0\n}\n\n// Given\
    \ two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.", "    // Your code here\n    return 0\n}\n\n\
    // Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.", "    // Your code here\n    return 0\n}\n\n\
    // Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.", "    // Your code here\n    return 0\n}\n\n\
    // Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.", "    // Your code here\n    return 0\n}\n\n\
    // Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.", "    // Your code here\n    if len(operator)\
    \ == 0 {\n        return 0\n    }\n    if len(operand) == 1 {\n        return\
    \ operand[0]\n    }\n    if len(operator) == 1 {\n        return operand[0]\n\
    \    }\n    if len(operand) == 2 {\n        return operand[0] + operand[1] * operator[0]\n\
    \    }\n    if len(operand) == 3 {\n        return operand[0] + operand[1] * operator[0]\
    \ + operand[2] * operator[1]\n    }\n    if len(operand) == 4 {\n        return\
    \ operand[0] + operand[1] * operator[0] + operand[2] * operator[1] + operand[3]\
    \ * operator[2]\n    }\n    if len(operand) == 5 {\n        return operand[0]\
    \ + operand[1] * operator[0] + operand[2] * operator[1] + operand[3] * operator[2]\
    \ + operand[4] * operator[3]\n    }\n    if len(operand) == 6 {\n        return\
    \ operand[0] + operand[1] * operator[0] + operand[2] * operator[1] + operand[3]\
    \ * operator[2] + operand[4] * operator[3] + operand[5] * operator[4]\n    }\n\
    \    if len(operand) == 7 {\n        return operand[0] + operand[1] * operator[0]\
    \ + operand[2] * operator[1] + operand[3] * operator[2] + operand[4] * operator[3]\
    \ + operand[5] * operator[4] + operand[6] * operator[5]\n    }\n    if len(operand)\
    \ == 8 {\n        return operand[0] + operand[1] * operator[0] + operand[2] *\
    \ operator[1] + operand[3] * operator[2] + operand[4] * operator[3] + operand[5]\
    \ * operator[4] + operand[6] * operator[5", "    // Your code here\n    result\
    \ := 0\n    for i := 0; i < len(operand); i++ {\n        for j := 0; j < len(operator);\
    \ j++ {\n            if operator[j] == \"+\" {\n                result += operand[i]\n\
    \            } else if operator[j] == \"-\" {\n                result -= operand[i]\n\
    \            } else if operator[j] == \"*\" {\n                result *= operand[i]\n\
    \            } else if operator[j] == \"//\" {\n                result /= operand[i]\n\
    \            } else if operator[j] == \"**\" {\n                result = operand[i]\
    \ * result\n            }\n        }\n    }\n    return result\n}\n", "    //\
    \ Your code here\n    result := 0\n    for i := 0; i < len(operand) - 1; i++ {\n\
    \        result += operand[i] * operator[i]\n    }\n    result += operand[len(operand)\
    \ - 1] * operator[len(operand) - 1]\n    return result\n}\n", "    // Your code\
    \ here\n    return 0\n}\n\n// Given two lists operator, and operand. The first\
    \ list has basic algebra operations, and \n// the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.", "    // Your code\
    \ here\n    if len(operator) == 0 {\n        return 0\n    }\n    if len(operand)\
    \ == 1 {\n        return operand[0]\n    }\n    if len(operand) == 2 {\n     \
    \   return operand[0] + operator[0] * operand[1]\n    }\n    if len(operand) ==\
    \ 3 {\n        return operand[0] + operator[0] * operand[1] + operator[1] * operand[2]\n\
    \    }\n    if len(operand) == 4 {\n        return operand[0] + operator[0] *\
    \ operand[1] + operator[1] * operand[2] + operator[2] * operand[3]\n    }\n  \
    \  if len(operand) == 5 {\n        return operand[0] + operator[0] * operand[1]\
    \ + operator[1] * operand[2] + operator[2] * operand[3] + operator[3] * operand[4]\n\
    \    }\n    return 0\n}\n", "    var result int\n    for i := 0; i < len(operand)\
    \ - 1; i++ {\n        if operator[i] == \"+\" {\n            result += operand[i]\n\
    \        } else if operator[i] == \"-\" {\n            result -= operand[i]\n\
    \        } else if operator[i] == \"*\" {\n            result *= operand[i]\n\
    \        } else if operator[i] == \"//\" {\n            result /= operand[i]\n\
    \        } else if operator[i] == \"**\" {\n            result = operand[i] *\
    \ result\n        }\n    }\n    return result\n}\n", "    // Your code here\n\
    \    if len(operator) == 0 {\n        return 0\n    }\n    if len(operand) ==\
    \ 1 {\n        return operand[0]\n    }\n    if len(operand) == 2 {\n        return\
    \ operand[0] + operator[0] * operand[1]\n    }\n    if len(operand) == 3 {\n \
    \       return operand[0] + operator[0] * operand[1] + operator[1] * operand[2]\n\
    \    }\n    if len(operand) == 4 {\n        return operand[0] + operator[0] *\
    \ operand[1] + operator[1] * operand[2] + operator[2] * operand[3]\n    }\n  \
    \  if len(operand) == 5 {\n        return operand[0] + operator[0] * operand[1]\
    \ + operator[1] * operand[2] + operator[2] * operand[3] + operator[3] * operand[4]\n\
    \    }\n    return 0\n}\n", "    // Your code here\n    return 0\n}\n\n// Given\
    \ two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.", "    // Your code here\n    return 0\n}\n\n\
    // Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.", "    // Your code here\n    return 0\n}\n",
  "    // Your code here\n    if len(operator) == 0 {\n        return 0\n    }\n \
    \   if len(operand) == 1 {\n        return operand[0]\n    }\n    if len(operator)\
    \ == 1 {\n        return operand[0]\n    }\n    if len(operand) == 2 {\n     \
    \   return operand[0] + operator[0] * operand[1]\n    }\n    if len(operand) ==\
    \ 3 {\n        return operand[0] + operator[0] * operand[1] + operator[1] * operand[2]\n\
    \    }\n    if len(operand) == 4 {\n        return operand[0] + operator[0] *\
    \ operand[1] + operator[1] * operand[2] + operator[2] * operand[3]\n    }\n  \
    \  if len(operand) == 5 {\n        return operand[0] + operator[0] * operand[1]\
    \ + operator[1] * operand[2] + operator[2] * operand[3] + operator[3] * operand[4]\n\
    \    }\n    if len(operand) == 6 {\n        return operand[0] + operator[0] *\
    \ operand[1] + operator[1] * operand[2] + operator[2] * operand[3] + operator[3]\
    \ * operand[4] + operator[4] * operand[5]\n    }\n    if len(operand) == 7 {\n\
    \        return operand[0] + operator[0] * operand[1] + operator[1] * operand[2]\
    \ + operator[2] * operand[3] + operator[3] * operand[4] + operator[4] * operand[5]\
    \ + operator[5] * operand[6]\n    }\n    if len(operand) == 8 {\n        return\
    \ operand[0] + operator[0] * operand[1] + operator[1] * operand[2] + operator[2]\
    \ * operand[3] + operator[3] * operand[4] + operator[4] * operand[5] + operator[5]\
    \ * operand[6", "    // Your code here\n    return 0\n}\n", "    // Your code\
    \ here\n    return 0\n}\n\n// Given two lists operator, and operand. The first\
    \ list has basic algebra operations, and \n// the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.", "    // Your code\
    \ here\n    return 0\n}\n", "    // Your code here\n    if len(operator) < len(operand)\
    \ - 1 {\n        return 0\n    }\n    \n    var result int\n    for i := 0; i\
    \ < len(operand); i++ {\n        if i == 0 {\n            result = operand[i]\n\
    \        } else {\n            result = result + operand[i] * operator[i]\n  \
    \      }\n    }\n    \n    return result\n}\n", "    // Your code here\n    if\
    \ len(operator) == 0 {\n        return 0\n    }\n    if len(operand) == 1 {\n\
    \        return operand[0]\n    }\n    if len(operand) == 2 {\n        return\
    \ operand[0] + operand[1] * operator[0]\n    }\n    if len(operand) == 3 {\n \
    \       return operand[0] + operand[1] * operator[0] + operand[2] * operator[1]\n\
    \    }\n    if len(operand) == 4 {\n        return operand[0] + operand[1] * operator[0]\
    \ + operand[2] * operator[1] + operand[3] * operator[2]\n    }\n    if len(operand)\
    \ == 5 {\n        return operand[0] + operand[1] * operator[0] + operand[2] *\
    \ operator[1] + operand[3] * operator[2] + operand[4] * operator[3]\n    }\n \
    \   if len(operand) == 6 {\n        return operand[0] + operand[1] * operator[0]\
    \ + operand[2] * operator[1] + operand[3] * operator[2] + operand[4] * operator[3]\
    \ + operand[5] * operator[4]\n    }\n    if len(operand) == 7 {\n        return\
    \ operand[0] + operand[1] * operator[0] + operand[2] * operator[1] + operand[3]\
    \ * operator[2] + operand[4] * operator[3] + operand[5] * operator[4] + operand[6]\
    \ * operator[5]\n    }\n    if len(operand) == 8 {\n        return operand[0]\
    \ + operand[1] * operator[0] + operand[2] * operator[1] + operand[3] * operator[2]\
    \ + operand[4] * operator[3] + operand[5] * operator[4] + operand[6] * operator[5]\
    \ + operand[7] * operator[6]\n    }\n    if len(oper", "    // Your code here\n\
    \    if len(operator) == 0 {\n        return 0\n    }\n    if len(operand) ==\
    \ 0 {\n        return 0\n    }\n    if len(operator) != len(operand) - 1 {\n \
    \       return 0\n    }\n    \n    result := 0\n    for i := 0; i < len(operand);\
    \ i++ {\n        if operator[i] == \"+\" {\n            result += operand[i]\n\
    \        } else if operator[i] == \"-\" {\n            result -= operand[i]\n\
    \        } else if operator[i] == \"*\" {\n            result *= operand[i]\n\
    \        } else if operator[i] == \"/\" {\n            result /= operand[i]\n\
    \        } else if operator[i] == \"**\" {\n            result = operand[i] *\
    \ result\n        }\n    }\n    return result\n}\n", "    var result int\n   \
    \ for i := 0; i < len(operand) - 1; i++ {\n        result = operand[i] + operator[i]\
    \ * operand[i + 1]\n    }\n    result = operand[len(operand) - 1] - result\n \
    \   return result\n}\n", "    // Your code here\n    return 0\n}\n\n// Given two\
    \ lists operator, and operand. The first list has basic algebra operations, and\
    \ \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.", "    // Your code here\n    return 0\n}\n\n\
    // Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.", "    // Your code here\n    return 0\n}\n",
  "    // Your code here\n    return 0\n}\n", "    // Your code here\n    return 0\n\
    }\n", "    // Your code here\n    return 0\n}\n\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.", "    // Your code here\n    return 0\n}\n\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.", "    // Your code here\n    return 0\n}\n\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.", "    // Your code here\n    return 0\n}\n\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.", "    var result int\n    for i := 0; i < len(operand) - 1; i++ {\n\
    \        if operator[i] == \"*\" {\n            result = result * operand[i]\n\
    \        } else if operator[i] == \"/\" {\n            result = result / operand[i]\n\
    \        } else if operator[i] == \"**\" {\n            result = result ** operand[i]\n\
    \        } else if operator[i] == \"+\" {\n            result = result + operand[i]\n\
    \        } else if operator[i] == \"-\" {\n            result = result - operand[i]\n\
    \        }\n    }\n    return result\n}\n", "    // Your code here\n    if len(operator)\
    \ == 0 {\n        return 0\n    }\n    if len(operand) == 1 {\n        return\
    \ operand[0]\n    }\n    if len(operand) == 2 {\n        return operand[0] + operand[1]\
    \ * operator[0]\n    }\n    if len(operand) == 3 {\n        return operand[0]\
    \ + operand[1] * operator[0] + operand[2] * operator[1]\n    }\n    if len(operand)\
    \ == 4 {\n        return operand[0] + operand[1] * operator[0] + operand[2] *\
    \ operator[1] + operand[3] * operator[2]\n    }\n    if len(operand) == 5 {\n\
    \        return operand[0] + operand[1] * operator[0] + operand[2] * operator[1]\
    \ + operand[3] * operator[2] + operand[4] * operator[3]\n    }\n    if len(operand)\
    \ == 6 {\n        return operand[0] + operand[1] * operator[0] + operand[2] *\
    \ operator[1] + operand[3] * operator[2] + operand[4] * operator[3] + operand[5]\
    \ * operator[4]\n    }\n    if len(operand) == 7 {\n        return operand[0]\
    \ + operand[1] * operator[0] + operand[2] * operator[1] + operand[3] * operator[2]\
    \ + operand[4] * operator[3] + operand[5] * operator[4] + operand[6] * operator[5]\n\
    \    }\n    if len(operand) == 8 {\n        return operand[0] + operand[1] * operator[0]\
    \ + operand[2] * operator[1] + operand[3] * operator[2] + operand[4] * operator[3]\
    \ + operand[5] * operator[4] + operand[6] * operator[5] + operand[7] * operator[6]\n\
    \    }\n    if len(oper", "    var result int\n    for i := 0; i < len(operand)\
    \ - 1; i++ {\n        if operator[i] == \"+\" {\n            result += operand[i]\n\
    \        } else if operator[i] == \"-\" {\n            result -= operand[i]\n\
    \        } else if operator[i] == \"*\" {\n            result *= operand[i]\n\
    \        } else if operator[i] == \"/\" {\n            result /= operand[i]\n\
    \        } else if operator[i] == \"**\" {\n            result = int(math.Pow(float64(operand[i]),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n", "    //\
    \ Your code here\n    return 0\n}\n", "    // Your code here\n    if len(operator)\
    \ == 0 {\n        return 0\n    }\n    if len(operand) == 1 {\n        return\
    \ operand[0]\n    }\n    if len(operand) == 2 {\n        return operand[0] + operator[0]\
    \ * operand[1]\n    }\n    if len(operand) == 3 {\n        return operand[0] +\
    \ operator[0] * operand[1] + operator[1] * operand[2]\n    }\n    if len(operand)\
    \ == 4 {\n        return operand[0] + operator[0] * operand[1] + operator[1] *\
    \ operand[2] + operator[2] * operand[3]\n    }\n    if len(operand) == 5 {\n \
    \       return operand[0] + operator[0] * operand[1] + operator[1] * operand[2]\
    \ + operator[2] * operand[3] + operator[3] * operand[4]\n    }\n    if len(operand)\
    \ == 6 {\n        return operand[0] + operator[0] * operand[1] + operator[1] *\
    \ operand[2] + operator[2] * operand[3] + operator[3] * operand[4] + operator[4]\
    \ * operand[5]\n    }\n    if len(operand) == 7 {\n        return operand[0] +\
    \ operator[0] * operand[1] + operator[1] * operand[2] + operator[2] * operand[3]\
    \ + operator[3] * operand[4] + operator[4] * operand[5] + operator[5] * operand[6]\n\
    \    }\n    if len(operand) == 8 {\n        return operand[0] + operator[0] *\
    \ operand[1] + operator[1] * operand[2] + operator[2] * operand[3] + operator[3]\
    \ * operand[4] + operator[4] * operand[5] + operator[5] * operand[6] + operator[6]\
    \ * operand[7]\n    }\n    if len(oper", "    // Your code here\n    return 0\n\
    }\n", "    // Your code here\n    return 0\n}\n\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.", "    // Your code here\n    result := 0\n    for i := 0; i < len(operand)\
    \ - 1; i++ {\n        result += operand[i] * operator[i]\n    }\n    result +=\
    \ operand[len(operand) - 1] * operator[len(operand) - 1]\n    return result\n\
    }\n", "    // Your code here\n    if len(operator) == 0 {\n        return 0\n\
    \    }\n    if len(operand) == 1 {\n        return operand[0]\n    }\n    if len(operator)\
    \ == 1 {\n        return operand[0]\n    }\n    if len(operator) == 2 {\n    \
    \    return operand[0] + operand[1] * operator[0] - operand[1] * operator[1]\n\
    \    }\n    if len(operator) == 3 {\n        return operand[0] + operand[1] *\
    \ operator[0] - operand[1] * operator[1] + operand[2] * operator[2]\n    }\n \
    \   if len(operator) == 4 {\n        return operand[0] + operand[1] * operator[0]\
    \ - operand[1] * operator[1] + operand[2] * operator[2] + operand[3] * operator[3]\n\
    \    }\n    return 0\n}\n", "    // Your code here\n    return 0\n}\n\n// Given\
    \ two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.", "    // Your code here\n    if len(operator)\
    \ == 0 {\n        return 0\n    }\n    if len(operand) == 1 {\n        return\
    \ operand[0]\n    }\n    if len(operand) == 2 {\n        return operand[0] + operator[0]\
    \ * operand[1]\n    }\n    if len(operand) == 3 {\n        return operand[0] +\
    \ operator[0] * operand[1] + operator[1] * operand[2]\n    }\n    if len(operand)\
    \ == 4 {\n        return operand[0] + operator[0] * operand[1] + operator[1] *\
    \ operand[2] + operator[2] * operand[3]\n    }\n    if len(operand) == 5 {\n \
    \       return operand[0] + operator[0] * operand[1] + operator[1] * operand[2]\
    \ + operator[2] * operand[3] + operator[3] * operand[4]\n    }\n    if len(operand)\
    \ == 6 {\n        return operand[0] + operator[0] * operand[1] + operator[1] *\
    \ operand[2] + operator[2] * operand[3] + operator[3] * operand[4] + operator[4]\
    \ * operand[5]\n    }\n    if len(operand) == 7 {\n        return operand[0] +\
    \ operator[0] * operand[1] + operator[1] * operand[2] + operator[2] * operand[3]\
    \ + operator[3] * operand[4] + operator[4] * operand[5] + operator[5] * operand[6]\n\
    \    }\n    if len(operand) == 8 {\n        return operand[0] + operator[0] *\
    \ operand[1] + operator[1] * operand[2] + operator[2] * operand[3] + operator[3]\
    \ * operand[4] + operator[4] * operand[5] + operator[5] * operand[6] + operator[6]\
    \ * operand[7]\n    }\n    if len(oper", "    // Your code here\n    return 0\n\
    }\n\n// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n//\
    \ result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.", "    // Your code here\n    result\
    \ := 0\n    for i := 0; i < len(operand) - 1; i++ {\n        result += operand[i]\
    \ * operator[i]\n    }\n    result += operand[len(operand) - 1] * operator[len(operand)\
    \ - 1]\n    return result\n}\n", "    // Your code here\n    result := 0\n   \
    \ for i := 0; i < len(operand) - 1; i++ {\n        result += operand[i] * operator[i]\n\
    \    }\n    result += operand[len(operand) - 1] * operator[len(operand) - 1]\n\
    \    return result\n}\n", "    // Your code here\n    result := 0\n    for i :=\
    \ 0; i < len(operand) - 1; i++ {\n        result = result + operand[i] * operator[i]\n\
    \    }\n    result = result + operand[len(operand) - 1] * operator[len(operand)\
    \ - 1]\n    return result\n}\n", "    // Your code here\n    return 0\n}\n\n//\
    \ Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.", "    // Your code here\n    if len(operator)\
    \ == 0 {\n        return 0\n    }\n    if len(operand) == 1 {\n        return\
    \ operand[0]\n    }\n    if len(operand) == 2 {\n        return operand[0] + operator[0]\
    \ * operand[1]\n    }\n    if len(operand) == 3 {\n        return operand[0] +\
    \ operator[0] * operand[1] + operator[1] * operand[2]\n    }\n    if len(operand)\
    \ == 4 {\n        return operand[0] + operator[0] * operand[1] + operator[1] *\
    \ operand[2] + operator[2] * operand[3]\n    }\n    return operand[0] + operator[0]\
    \ * operand[1] + operator[1] * operand[2] + operator[2] * operand[3] + operator[3]\
    \ * operand[4]\n}\n", "    // Your code here\n    return 0\n}\n\n// Given two\
    \ lists operator, and operand. The first list has basic algebra operations, and\
    \ \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.", "    // Your code here\n    return 0\n}\n\n\
    // Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.", "    // Your code here\n    return 0\n}\n\n\
    // Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.", "    // Your code here\n    if len(operator)\
    \ == 0 {\n        return 0\n    }\n    if len(operand) == 1 {\n        return\
    \ operand[0]\n    }\n    if len(operand) == 2 {\n        return operand[0] + operator[0]\
    \ * operand[1]\n    }\n    if len(operand) == 3 {\n        return operand[0] +\
    \ operator[0] * operand[1] + operator[1] * operand[2]\n    }\n    if len(operand)\
    \ == 4 {\n        return operand[0] + operator[0] * operand[1] + operator[1] *\
    \ operand[2] + operator[2] * operand[3]\n    }\n    if len(operand) == 5 {\n \
    \       return operand[0] + operator[0] * operand[1] + operator[1] * operand[2]\
    \ + operator[2] * operand[3] + operator[3] * operand[4]\n    }\n    return 0\n\
    }\n", "    // Your code here\n    return 0\n}\n", "    // Your code here\n   \
    \ if len(operator) == 0 {\n        return 0\n    }\n    if len(operand) == 0 {\n\
    \        return 0\n    }\n    if len(operator) == 1 {\n        return operand[0]\n\
    \    }\n    if len(operand) == 1 {\n        return 0\n    }\n    if len(operator)\
    \ == 2 {\n        return operand[0] + operand[1] * operator[0] - operand[1]\n\
    \    }\n    if len(operator) == 3 {\n        return operand[0] + operand[1] *\
    \ operator[0] - operand[1] + operand[2] * operator[1] - operand[2]\n    }\n  \
    \  if len(operator) == 4 {\n        return operand[0] + operand[1] * operator[0]\
    \ - operand[1] + operand[2] * operator[1] - operand[2] + operand[3] * operator[2]\
    \ - operand[3]\n    }\n    if len(operator) == 5 {\n        return operand[0]\
    \ + operand[1] * operator[0] - operand[1] + operand[2] * operator[1] - operand[2]\
    \ + operand[3] * operator[2] - operand[3] + operand[4] * operator[3] - operand[4]\n\
    \    }\n    if len(operator) == 6 {\n        return operand[0] + operand[1] *\
    \ operator[0] - operand[1] + operand[2] * operator[1] - operand[2] + operand[3]\
    \ * operator[2] - operand[3] + operand[4] * operator[3] - operand[4] + operand[5]\
    \ * operator[4] - operand[5]\n    }\n    if len(operator) == 7 {\n        return\
    \ operand[0] + operand[1] * operator[0] - operand[1] + operand[2] * operator[1]\
    \ - operand[2] + operand[3] * operator[2] - operand[3] + operand[", "    // Your\
    \ code here\n    return 0\n}\n\n// Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n// the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n// expression and\
    \ return the evaluation of this expression.\n// The basic algebra operations:\n\
    // Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor\
    \ division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*',\
    \ '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n\
    // Note:\n// The length of operator list is equal to the length of operand list\
    \ minus one.\n// Operand is a list of of non-negative integers.\n// Operator list\
    \ has at least one operator, and operand list has at least two operands.", " \
    \   // Your code here\n    result := 0\n    for i := 0; i < len(operand) - 1;\
    \ i++ {\n        result += operand[i] * operator[i]\n    }\n    result += operand[len(operand)\
    \ - 1] * operator[len(operand) - 1]\n    return result\n}\n", "    // Your code\
    \ here\n    return 0\n}\n\n// Given two lists operator, and operand. The first\
    \ list has basic algebra operations, and \n// the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.", "    // Your code\
    \ here\n    if len(operator) == 0 {\n        return 0\n    }\n    if len(operand)\
    \ == 1 {\n        return operand[0]\n    }\n    if len(operand) == 2 {\n     \
    \   return operand[0] + operator[0] * operand[1]\n    }\n    if len(operand) ==\
    \ 3 {\n        return operand[0] + operator[0] * operand[1] + operator[1] * operand[2]\n\
    \    }\n    if len(operand) == 4 {\n        return operand[0] + operator[0] *\
    \ operand[1] + operator[1] * operand[2] + operator[2] * operand[3]\n    }\n  \
    \  if len(operand) == 5 {\n        return operand[0] + operator[0] * operand[1]\
    \ + operator[1] * operand[2] + operator[2] * operand[3] + operator[3] * operand[4]\n\
    \    }\n    if len(operand) == 6 {\n        return operand[0] + operator[0] *\
    \ operand[1] + operator[1] * operand[2] + operator[2] * operand[3] + operator[3]\
    \ * operand[4] + operator[4] * operand[5]\n    }\n    if len(operand) == 7 {\n\
    \        return operand[0] + operator[0] * operand[1] + operator[1] * operand[2]\
    \ + operator[2] * operand[3] + operator[3] * operand[4] + operator[4] * operand[5]\
    \ + operator[5] * operand[6]\n    }\n    if len(operand) == 8 {\n        return\
    \ operand[0] + operator[0] * operand[1] + operator[1] * operand[2] + operator[2]\
    \ * operand[3] + operator[3] * operand[4] + operator[4] * operand[5] + operator[5]\
    \ * operand[6] + operator[6] * operand[7]\n    }\n    if len(oper", "    // Your\
    \ code here\n    result := 0\n    for i := 0; i < len(operand) - 1; i++ {\n  \
    \      if operator[i] == \"+\" {\n            result += operand[i] + operand[i+1]\n\
    \        } else if operator[i] == \"-\" {\n            result += operand[i] -\
    \ operand[i+1]\n        } else if operator[i] == \"*\" {\n            result +=\
    \ operand[i] * operand[i+1]\n        } else if operator[i] == \"//\" {\n     \
    \       result += operand[i] / operand[i+1]\n        } else if operator[i] ==\
    \ \"**\" {\n            result += operand[i] ** operand[i+1]\n        }\n    }\n\
    \    return result\n}\n", "    // Your code here\n    result := 0\n    for i :=\
    \ 0; i < len(operand) - 1; i++ {\n        result += operand[i] * operator[i]\n\
    \    }\n    result += operand[len(operand) - 1] * operator[len(operand) - 1]\n\
    \    return result\n}\n", "    // Your code here\n    return 0\n}\n", "    //\
    \ Your code here\n    result := 0\n    for i := 0; i < len(operand) - 1; i++ {\n\
    \        result += operand[i] * operator[i]\n    }\n    result += operand[len(operand)\
    \ - 1] * operator[len(operand) - 1]\n    return result\n}\n", "    // Your code\
    \ here\n    return 0\n}\n", "    // Your code here\n    if len(operator) == 0\
    \ {\n        return 0\n    }\n    if len(operand) == 1 {\n        return operand[0]\n\
    \    }\n    if len(operand) == 2 {\n        return operand[0] + operand[1] * operator[0]\n\
    \    }\n    if len(operand) == 3 {\n        return operand[0] + operand[1] * operator[0]\
    \ + operand[2] * operator[1]\n    }\n    if len(operand) == 4 {\n        return\
    \ operand[0] + operand[1] * operator[0] + operand[2] * operator[1] + operand[3]\
    \ * operator[2]\n    }\n    if len(operand) == 5 {\n        return operand[0]\
    \ + operand[1] * operator[0] + operand[2] * operator[1] + operand[3] * operator[2]\
    \ + operand[4] * operator[3]\n    }\n    if len(operand) == 6 {\n        return\
    \ operand[0] + operand[1] * operator[0] + operand[2] * operator[1] + operand[3]\
    \ * operator[2] + operand[4] * operator[3] + operand[5] * operator[4]\n    }\n\
    \    if len(operand) == 7 {\n        return operand[0] + operand[1] * operator[0]\
    \ + operand[2] * operator[1] + operand[3] * operator[2] + operand[4] * operator[3]\
    \ + operand[5] * operator[4] + operand[6] * operator[5]\n    }\n    if len(operand)\
    \ == 8 {\n        return operand[0] + operand[1] * operator[0] + operand[2] *\
    \ operator[1] + operand[3] * operator[2] + operand[4] * operator[3] + operand[5]\
    \ * operator[4] + operand[6] * operator[5] + operand[7] * operator[6]\n    }\n\
    \    if len(oper", "    // Your code here\n    return 0\n}\n\n// Given two lists\
    \ operator, and operand. The first list has basic algebra operations, and \n//\
    \ the second list is a list of integers. Use the two given lists to build the\
    \ algebric \n// expression and return the evaluation of this expression.\n// The\
    \ basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.", "    // Your code here\n    return 0\n}\n\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.", "    // Your code here\n    if len(operator) == 0 {\n        return\
    \ 0\n    }\n    if len(operand) == 1 {\n        return operand[0]\n    }\n   \
    \ if len(operand) == 2 {\n        return operand[0] + operator[0] * operand[1]\n\
    \    }\n    if len(operand) == 3 {\n        return operand[0] + operator[0] *\
    \ operand[1] + operator[1] * operand[2]\n    }\n    if len(operand) == 4 {\n \
    \       return operand[0] + operator[0] * operand[1] + operator[1] * operand[2]\
    \ + operator[2] * operand[3]\n    }\n    if len(operand) == 5 {\n        return\
    \ operand[0] + operator[0] * operand[1] + operator[1] * operand[2] + operator[2]\
    \ * operand[3] + operator[3] * operand[4]\n    }\n    if len(operand) == 6 {\n\
    \        return operand[0] + operator[0] * operand[1] + operator[1] * operand[2]\
    \ + operator[2] * operand[3] + operator[3] * operand[4] + operator[4] * operand[5]\n\
    \    }\n    if len(operand) == 7 {\n        return operand[0] + operator[0] *\
    \ operand[1] + operator[1] * operand[2] + operator[2] * operand[3] + operator[3]\
    \ * operand[4] + operator[4] * operand[5] + operator[5] * operand[6]\n    }\n\
    \    if len(operand) == 8 {\n        return operand[0] + operator[0] * operand[1]\
    \ + operator[1] * operand[2] + operator[2] * operand[3] + operator[3] * operand[4]\
    \ + operator[4] * operand[5] + operator[5] * operand[6] + operator[6] * operand[7]\n\
    \    }\n    if len(oper", "    // Your code here\n    return 0\n}\n\n// Given\
    \ two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.", "    // Your code here\n    return 0\n}\n",
  "    // Your code here\n    result := 0\n    for i := 0; i < len(operand) - 1; i++\
    \ {\n        result += operand[i] * operator[i]\n    }\n    result += operand[len(operand)\
    \ - 1] * operator[len(operand) - 1]\n    return result\n}\n", "    // Your code\
    \ here\n    result := 0\n    for i := 0; i < len(operand) - 1; i++ {\n       \
    \ result = result + operand[i] * operator[i]\n    }\n    result = result + operand[len(operand)\
    \ - 1] * operator[len(operand) - 1]\n    return result\n}\n", "    // Your code\
    \ here\n    return 0\n}\n\n// Given two lists operator, and operand. The first\
    \ list has basic algebra operations, and \n// the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.", "    // Your code\
    \ here\n    return 0\n}\n", "    var result int\n    for i := 0; i < len(operand)\
    \ - 1; i++ {\n        result = operand[i] + result * operator[i]\n    }\n    result\
    \ = result + operand[len(operand) - 1]\n    return result\n}\n", "    // Your\
    \ code here\n    result := 0\n    for i := 0; i < len(operand) - 1; i++ {\n  \
    \      result += operand[i] * operator[i]\n    }\n    result += operand[len(operand)\
    \ - 1] * operator[len(operand) - 1]\n    return result\n}\n", "    // Your code\
    \ here\n    if len(operator) == 0 {\n        return 0\n    }\n    if len(operand)\
    \ == 1 {\n        return operand[0]\n    }\n    if len(operand) == 2 {\n     \
    \   return operand[0] + operand[1] * operator[0]\n    }\n    if len(operand) ==\
    \ 3 {\n        return operand[0] + operand[1] * operator[0] + operand[2] * operator[1]\n\
    \    }\n    if len(operand) == 4 {\n        return operand[0] + operand[1] * operator[0]\
    \ + operand[2] * operator[1] + operand[3] * operator[2]\n    }\n    if len(operand)\
    \ == 5 {\n        return operand[0] + operand[1] * operator[0] + operand[2] *\
    \ operator[1] + operand[3] * operator[2] + operand[4] * operator[3]\n    }\n \
    \   if len(operand) == 6 {\n        return operand[0] + operand[1] * operator[0]\
    \ + operand[2] * operator[1] + operand[3] * operator[2] + operand[4] * operator[3]\
    \ + operand[5] * operator[4]\n    }\n    if len(operand) == 7 {\n        return\
    \ operand[0] + operand[1] * operator[0] + operand[2] * operator[1] + operand[3]\
    \ * operator[2] + operand[4] * operator[3] + operand[5] * operator[4] + operand[6]\
    \ * operator[5]\n    }\n    if len(operand) == 8 {\n        return operand[0]\
    \ + operand[1] * operator[0] + operand[2] * operator[1] + operand[3] * operator[2]\
    \ + operand[4] * operator[3] + operand[5] * operator[4] + operand[6] * operator[5]\
    \ + operand[7] * operator[6]\n    }\n    if len(oper", "    // Your code here\n\
    \    return 0\n}\n\n// Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n// the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// list = [2,\
    \ 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length\
    \ of operator list is equal to the length of operand list minus one.\n// Operand\
    \ is a list of of non-negative integers.\n// Operator list has at least one operator,\
    \ and operand list has at least two operands.", "    // Your code here\n    result\
    \ := 0\n    for i := 0; i < len(operand) - 1; i++ {\n        result = result +\
    \ operand[i] * operator[i]\n    }\n    result = result + operand[len(operand)\
    \ - 1] * operator[len(operand) - 1]\n    return result\n}\n", "    // Your code\
    \ here\n    return 0\n}\n\n// Given two lists operator, and operand. The first\
    \ list has basic algebra operations, and \n// the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.", "    // Your code\
    \ here\n    var result int\n    for i := 0; i < len(operand); i++ {\n        for\
    \ j := 0; j < len(operator); j++ {\n            if operator[j] == \"+\" {\n  \
    \              result += operand[i]\n            } else if operator[j] == \"-\"\
    \ {\n                result -= operand[i]\n            } else if operator[j] ==\
    \ \"*\" {\n                result *= operand[i]\n            } else if operator[j]\
    \ == \"//\" {\n                result /= operand[i]\n            } else if operator[j]\
    \ == \"**\" {\n                result = result * operand[i]\n            }\n \
    \       }\n    }\n    return result\n}\n", "    // Your code here\n    return\
    \ 0\n}\n", "    // Your code here\n    return 0\n}\n\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.", "    // Your code here\n    return 0\n}\n\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.", "    // Your code here\n    if len(operator) == 0 {\n        return\
    \ 0\n    }\n    if len(operand) == 1 {\n        return operand[0]\n    }\n   \
    \ if len(operand) == 2 {\n        return operand[0] + operand[1] * operator[0]\n\
    \    }\n    if len(operand) == 3 {\n        return operand[0] + operand[1] * operator[0]\
    \ + operand[2] * operator[1]\n    }\n    if len(operand) == 4 {\n        return\
    \ operand[0] + operand[1] * operator[0] + operand[2] * operator[1] + operand[3]\
    \ * operator[2]\n    }\n    if len(operand) == 5 {\n        return operand[0]\
    \ + operand[1] * operator[0] + operand[2] * operator[1] + operand[3] * operator[2]\
    \ + operand[4] * operator[3]\n    }\n    if len(operand) == 6 {\n        return\
    \ operand[0] + operand[1] * operator[0] + operand[2] * operator[1] + operand[3]\
    \ * operator[2] + operand[4] * operator[3] + operand[5] * operator[4]\n    }\n\
    \    if len(operand) == 7 {\n        return operand[0] + operand[1] * operator[0]\
    \ + operand[2] * operator[1] + operand[3] * operator[2] + operand[4] * operator[3]\
    \ + operand[5] * operator[4] + operand[6] * operator[5]\n    }\n    if len(operand)\
    \ == 8 {\n        return operand[0] + operand[1] * operator[0] + operand[2] *\
    \ operator[1] + operand[3] * operator[2] + operand[4] * operator[3] + operand[5]\
    \ * operator[4] + operand[6] * operator[5] + operand[7] * operator[6]\n    }\n\
    \    if len(oper"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
