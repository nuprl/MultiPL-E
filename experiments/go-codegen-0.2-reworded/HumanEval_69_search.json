{
  "name": "HumanEval_69_search",
  "language": "go_test.go",
  "prompt": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([]int{4, 1, 2, 2, 3, 1})\n// 2\n// >>> search([]int{1, 2, 2, 3, 3, 3, 4, 4, 4})\n// 3\n// >>> search([]int{5, 5, 4, 4, 4})\n// -1\nfunc search(lst []int) int {\n",
  "tests": "func TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "completions": [
    "    // if len(lst) == 0 {\n    //     return -1\n    // }\n    // if len(lst) == 1 {\n    //     return lst[0]\n    // }\n    // if lst[0] > 0 {\n    //     return lst[0]\n    // }\n    // if lst[len(lst)-1] > 0 {\n    //     return lst[len(lst)-1]\n    // }\n    // for i := 1; i < len(lst); i++ {\n    //     if lst[i] > 0 && lst[i] > lst[i-1] {\n    //         return lst[i]\n    //     }\n    // }\n    // return -1\n    \n    // if len(lst) == 0 {\n    //     return -1\n    // }\n    // if len(lst) == 1 {\n    //     return lst[0]\n    // }\n    // if lst[0] > 0 {\n    //     return lst[0]\n    // }\n    // if lst[len(lst)-1] > 0 {\n    //     return lst[len(lst)-1]\n    // }\n    // for i := 1; i < len(lst); i++ {\n    //     if lst[i] > 0 && lst[i] > lst[i-1] {\n    //         return lst[i]\n    //     }\n    // }\n    // return -1\n    \n    // if len(lst) == 0 {\n    //     return -1\n    // }\n    // if len(lst) == 1 {\n    //     return lst[0]\n    // }\n    // if lst[0] > 0 {\n    //     return lst[0]\n    // }\n    // if lst[len(lst)-1] > 0 {\n    //     return lst[len(lst)-1]\n    // }\n    // for i := 1; i < len(lst); i++ {\n    //     if lst[i] > 0 && lst[i]",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    counts := make(map[int]int)\n    for _, v := range lst {\n        counts[v]++\n    }\n    \n    for k, v := range counts {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    var max int\n    var maxFreq int\n    \n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n            maxFreq = 1\n        } else if lst[i] == max {\n            maxFreq++\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max && maxFreq > 1 {\n            return max\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    max := 0\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    \n    for _, v := range lst {\n        if v == max {\n            return max\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // map[int]int\n    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n    }\n    \n    for k, v := range m {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    // write your code here\n    if len(lst) == 0 {\n        return -1\n    }\n    \n    // sort the list\n    sort(lst)\n    \n    // check the first element\n    if lst[0] >= 0 {\n        return lst[0]\n    }\n    \n    // check the last element\n    if lst[len(lst)-1] >= 0 {\n        return lst[len(lst)-1]\n    }\n    \n    // check the middle element\n    if lst[len(lst)/2] >= 0 {\n        return lst[len(lst)/2]\n    }\n    \n    // check the middle element\n    if lst[len(lst)/2] >= 0 {\n        return lst[len(lst)/2]\n    }\n    \n    // check the middle element\n    if lst[len(lst)/2] >= 0 {\n        return lst[len(lst)/2]\n    }\n    \n    // check the middle element\n    if lst[len(lst)/2] >= 0 {\n        return lst[len(lst)/2]\n    }\n    \n    // check the middle element\n    if lst[len(lst)/2] >= 0 {\n        return lst[len(lst)/2]\n    }\n    \n    // check the middle element\n    if lst[len(lst)/2] >= 0 {\n        return lst[len(lst)/2]\n    }\n    \n    // check the middle element\n    if lst[len(lst)/2] >= 0 {\n        return lst[len(lst)/2]\n    }\n    \n    // check the middle element\n    if lst[len(lst)/2] >= 0 {\n        return lst[len(lst)/2]\n    }\n    \n    // check the middle element\n    if lst[len(lst)/2] >= 0 {\n        return lst[len(lst)/2]\n    }\n    \n    // check the middle element\n    if lst[len(lst)/2] >= 0 {\n        return lst[",
    "    // \u521d\u59cb\u5316\n    n := len(lst)\n    if n == 0 {\n        return -1\n    }\n    // \u521d\u59cb\u5316\n    f := make(map[int]int)\n    for _, v := range lst {\n        f[v]++\n    }\n    // \u67e5\u627e\n    for k, v := range f {\n        if v >= k {\n            return k\n        }\n    }\n    return -1\n}\n",
    "    // write your code here\n    if len(lst) == 0 {\n        return -1\n    }\n    \n    // sort the list\n    sort(lst)\n    \n    // find the max value\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    \n    // find the frequency\n    freq := 0\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            freq++\n        }\n    }\n    \n    // return the max value\n    if freq >= max {\n        return max\n    } else {\n        return -1\n    }\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // map[int]int\n    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n    }\n    \n    for k, v := range m {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    var max int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    \n    for _, v := range lst {\n        if v == max {\n            return max\n        }\n    }\n    \n    return max\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // Create a map of frequency of each element\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // Find the max frequency\n    maxFreq := 0\n    for k, v := range freq {\n        if v > maxFreq {\n            maxFreq = v\n        }\n    }\n    \n    // Find the max value\n    maxVal := 0\n    for k, v := range freq {\n        if v == maxFreq {\n            maxVal = k\n        }\n    }\n    \n    return maxVal\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // use a map to store the frequency of each integer\n    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n    }\n    \n    // find the max frequency\n    max := 0\n    for k, v := range m {\n        if v > max {\n            max = v\n        }\n    }\n    \n    // find the max value\n    for _, v := range lst {\n        if v == max {\n            return v\n        }\n    }\n    \n    return -1\n}\n",
    "    // return -1 if lst is empty\n    if len(lst) == 0 {\n        return -1\n    }\n    \n    // create a map to store frequency of each integer\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // find the max frequency\n    maxFreq := 0\n    for k, v := range freq {\n        if v > maxFreq {\n            maxFreq = v\n        }\n    }\n    \n    // find the max value\n    maxVal := 0\n    for k, v := range freq {\n        if v == maxFreq {\n            maxVal = k\n        }\n    }\n    \n    return maxVal\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    var max int\n    var maxFreq int\n    \n    for _, v := range lst {\n        if v > max {\n            max = v\n            maxFreq = 1\n        } else if v == max {\n            maxFreq++\n        }\n    }\n    \n    for _, v := range lst {\n        if v == max {\n            return max\n        }\n    }\n    \n    return max\n}\n",
    "    // return -1 if lst is empty\n    if len(lst) == 0 {\n        return -1\n    }\n    \n    // find the max frequency\n    maxFreq := 0\n    for _, v := range lst {\n        if v > 0 && v > maxFreq {\n            maxFreq = v\n        }\n    }\n    \n    // find the max value\n    maxVal := 0\n    for _, v := range lst {\n        if v > maxVal {\n            maxVal = v\n        }\n    }\n    \n    // find the max value that is greater than 0 and greater than maxFreq\n    for _, v := range lst {\n        if v > 0 && v > maxFreq && v > maxVal {\n            return v\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // frequency map\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // find the max frequency\n    maxFreq := 0\n    for k, v := range freq {\n        if v > maxFreq {\n            maxFreq = v\n            maxFreqKey := k\n        }\n    }\n    \n    // find the max value\n    maxVal := 0\n    for _, v := range lst {\n        if v == maxFreqKey {\n            maxVal = v\n            break\n        }\n    }\n    \n    return maxVal\n}\n",
    "    // \u521d\u59cb\u5316\n    n := len(lst)\n    if n == 0 {\n        return -1\n    }\n    // \u521d\u59cb\u5316\n    f := make(map[int]int)\n    for _, v := range lst {\n        f[v]++\n    }\n    // \u521d\u59cb\u5316\n    max := 0\n    for k, v := range f {\n        if v > max {\n            max = v\n        }\n        if v == k {\n            f[k] = 0\n        }\n    }\n    // \u521d\u59cb\u5316\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n        if v == max {\n            return max\n        }\n    }\n    return -1\n}\n\n// \u521d\u59cb\u5316",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // Create a map of frequency of each element\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // Find the max frequency\n    maxFreq := 0\n    for k, v := range freq {\n        if v > maxFreq {\n            maxFreq = v\n        }\n    }\n    \n    // Find the max element\n    max := -1\n    for k, v := range freq {\n        if v == maxFreq {\n            max = k\n        }\n    }\n    \n    return max\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // \u521d\u59cb\u5316\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // \u627e\u5230\u6700\u5927\u7684\n    max := 0\n    for k, v := range freq {\n        if v > max {\n            max = v\n            max_k := k\n        }\n    }\n    \n    // \u627e\u5230\u6700\u5927\u7684\n    if max == 0 {\n        return -1\n    }\n    \n    // \u627e\u5230\u6700\u5927\u7684\n    for k, v := range freq {\n        if v == max {\n            return k\n        }\n    }\n    \n    return max_k\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // Use a map to store the frequency of each integer\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // Find the max frequency\n    maxFreq := 0\n    for k, v := range freq {\n        if v > maxFreq {\n            maxFreq = v\n        }\n    }\n    \n    // Find the max integer that has frequency >= maxFreq\n    for k, v := range freq {\n        if v >= maxFreq {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    // \u521d\u59cb\u5316\n    frequencies := make(map[int]int)\n    for _, v := range lst {\n        frequencies[v]++\n    }\n    \n    // \u5148\u904d\u5386\u67e5\u627e\n    for k, v := range frequencies {\n        if v >= k {\n            return k\n        }\n    }\n    \n    // \u6700\u540e\u904d\u5386\u67e5\u627e\n    for k, v := range frequencies {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // map[int]int\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // max\n    max := 0\n    for k, v := range freq {\n        if v > max {\n            max = v\n        }\n        if v == k {\n            return k\n        }\n    }\n    \n    return max\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    max := 0\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    \n    for _, v := range lst {\n        if v == max {\n            return max\n        }\n    }\n    \n    return max\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    var max int\n    var count int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n            count = 1\n        } else if lst[i] == max {\n            count++\n        }\n    }\n    \n    if count >= len(lst) {\n        return max\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // find the max frequency\n    maxFreq := 0\n    for _, v := range lst {\n        if v > 0 && v >= maxFreq {\n            maxFreq = v\n        }\n    }\n    \n    // find the max value\n    maxVal := 0\n    for _, v := range lst {\n        if v > 0 && v >= maxVal {\n            maxVal = v\n        }\n    }\n    \n    // find the max value that is greater than maxFreq\n    for _, v := range lst {\n        if v > 0 && v >= maxFreq && v > maxVal {\n            maxVal = v\n        }\n    }\n    \n    return maxVal\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    count := make(map[int]int)\n    for _, v := range lst {\n        count[v]++\n    }\n    \n    for k, v := range count {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // count frequency\n    count := make(map[int]int)\n    for _, v := range lst {\n        count[v]++\n    }\n    \n    // find max frequency\n    max := 0\n    for k, v := range count {\n        if v > max {\n            max = v\n        }\n    }\n    \n    // find max value\n    for _, v := range lst {\n        if v > 0 && v >= max {\n            return v\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    var maxFreq int\n    var maxVal int\n    \n    for _, v := range lst {\n        if v > maxVal {\n            maxVal = v\n        }\n        \n        if v >= maxVal {\n            maxFreq = maxFreq + 1\n        }\n    }\n    \n    for _, v := range lst {\n        if v >= maxVal && v >= maxFreq {\n            return v\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // \u521d\u59cb\u5316\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // \u5faa\u73af\u904d\u5386\n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // map[int]int\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // max\n    max := 0\n    for k, v := range freq {\n        if v > max {\n            max = v\n        }\n    }\n    \n    // find\n    for _, v := range lst {\n        if v > max {\n            return v\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    // return -1 if lst is empty\n    if len(lst) == 0 {\n        return -1\n    }\n    \n    // return the first element if it is greater than zero\n    if lst[0] > 0 {\n        return lst[0]\n    }\n    \n    // return the first element if it is greater than zero\n    if lst[len(lst) - 1] > 0 {\n        return lst[len(lst) - 1]\n    }\n    \n    // return the first element if it is greater than zero\n    if lst[len(lst) / 2] > 0 {\n        return lst[len(lst) / 2]\n    }\n    \n    // return the first element if it is greater than zero\n    if lst[len(lst) / 2] > 0 {\n        return lst[len(lst) / 2]\n    }\n    \n    // return the first element if it is greater than zero\n    if lst[len(lst) / 2] > 0 {\n        return lst[len(lst) / 2]\n    }\n    \n    // return the first element if it is greater than zero\n    if lst[len(lst) / 2] > 0 {\n        return lst[len(lst) / 2]\n    }\n    \n    // return the first element if it is greater than zero\n    if lst[len(lst) / 2] > 0 {\n        return lst[len(lst) / 2]\n    }\n    \n    // return the first element if it is greater than zero\n    if lst[len(lst) / 2] > 0 {\n        return lst[len(lst) / 2]\n    }\n    \n    // return the first element if it is greater than zero\n    if lst[len(lst) / 2] > 0 {\n        return lst[len(lst) / 2]\n    }\n    \n    // return the first element if it is greater than zero\n    if lst[len(lst) / 2] > 0 {\n        return lst[len(lst) / 2]\n    }\n    \n    //",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // count the frequency of each number\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // find the max frequency\n    max := 0\n    for k, v := range freq {\n        if v > max {\n            max = v\n        }\n        if v == k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    // \u5148\u6392\u5e8f\n    sort(lst)\n    // \u5faa\u73af\u904d\u5386\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == lst[i+1] {\n            continue\n        }\n        if lst[i] == lst[i+1] - 1 {\n            return lst[i]\n        }\n    }\n    return -1\n}\n\n// \u5192\u6ce1\u6392\u5e8f",
    "    // \u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u6570\u7684\u9891\u7387\n    freq := make(map[int]int)\n    // \u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u6570\u7684\u9891\u7387\n    for _, v := range lst {\n        freq[v]++\n    }\n    // \u5faa\u73af\u904d\u5386\n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    return -1\n}\n\n// \u6d4b\u8bd5",
    "    // return -1\n    if len(lst) == 0 {\n        return -1\n    }\n    \n    // init\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v] += 1\n    }\n    \n    // find\n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    // write your code here\n    if len(lst) == 0 {\n        return -1\n    }\n    \n    if len(lst) == 1 {\n        return lst[0]\n    }\n    \n    if lst[0] == lst[1] {\n        return lst[0]\n    }\n    \n    if lst[0] > lst[1] {\n        return lst[0]\n    }\n    \n    if lst[0] < lst[1] {\n        return lst[1]\n    }\n    \n    for i := 2; i < len(lst); i++ {\n        if lst[i] > lst[i-1] {\n            return lst[i]\n        }\n    }\n    \n    return -1\n}\n",
    "    // \u5148\u6392\u5e8f\n    sort(lst)\n    \n    // \u5faa\u73af\u904d\u5386\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == lst[i+1] {\n            continue\n        }\n        \n        // \u5982\u679c\u5f53\u524d\u503c\u5927\u4e8e0\uff0c\u5e76\u4e14\u6b21\u6570\u5927\u4e8e\u5f53\u524d\u503c\uff0c\u5219\u8fd4\u56de\n        if lst[i] > 0 && lst[i] >= lst[i+1] {\n            return lst[i]\n        }\n    }\n    \n    // \u6ca1\u6709\u627e\u5230\n    return -1\n}\n\n// sort",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // find the max frequency\n    maxFreq := 0\n    for _, v := range lst {\n        if v > 0 && v > maxFreq {\n            maxFreq = v\n        }\n    }\n    \n    // find the max value\n    maxVal := 0\n    for _, v := range lst {\n        if v > 0 && v >= maxVal {\n            maxVal = v\n        }\n    }\n    \n    // find the max value that is greater than 0 and greater than maxFreq\n    for _, v := range lst {\n        if v > 0 && v > maxFreq && v > maxVal {\n            maxVal = v\n        }\n    }\n    \n    return maxVal\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // map[int]int\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // max\n    max := 0\n    for k, v := range freq {\n        if v > max {\n            max = v\n        }\n        if v == k {\n            return k\n        }\n    }\n    \n    return max\n}\n\n// \u5206\u6790\uff1a\n// 1. \u5982\u679c lst \u4e3a\u7a7a\uff0c\u8fd4\u56de -1\n// 2. \u5982\u679c lst \u4e0d\u4e3a\u7a7a\uff0c\u9996\u5148\u628a lst \u6392\u5e8f\uff0c\u7136\u540e\u904d\u5386 lst \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\n//    \u5982\u679c\u8be5\u5143\u7d20\u7684\u503c > 0\uff0c\u5e76\u4e14\u8be5\u5143\u7d20\u7684\u503c > max\uff0c\u5219 max = \u8be5\u5143\u7d20\u7684\u503c\n// 3. \u8fd4\u56de max",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    // if len(lst) == 0 {\n    //     return -1\n    // }\n    //\n    // if len(lst) == 1 {\n    //     return lst[0]\n    // }\n    //\n    // if lst[0] == 0 {\n    //     return -1\n    // }\n    //\n    // if lst[0] == 1 {\n    //     return lst[0]\n    // }\n    //\n    // if lst[0] == 2 {\n    //     return lst[0]\n    // }\n    //\n    // if lst[0] == 3 {\n    //     return lst[0]\n    // }\n    //\n    // if lst[0] == 4 {\n    //     return lst[0]\n    // }\n    //\n    // if lst[0] == 5 {\n    //     return lst[0]\n    // }\n    //\n    // if lst[0] == 6 {\n    //     return lst[0]\n    // }\n    //\n    // if lst[0] == 7 {\n    //     return lst[0]\n    // }\n    //\n    // if lst[0] == 8 {\n    //     return lst[0]\n    // }\n    //\n    // if lst[0] == 9 {\n    //     return lst[0]\n    // }\n    //\n    // if lst[0] == 10 {\n    //     return lst[0]\n    // }\n    //\n    // if lst[0] == 11 {\n    //     return lst[0]\n    // }\n    //\n    // if lst[0] == 12 {\n    //     return lst[0]\n    // }\n    //\n    // if lst[0] == 13 {\n    //     return lst[0]\n    // }\n    //\n    // if lst[0] == 14 {\n    //     return lst[0]\n    // }\n    //\n    // if lst[0] == 15 {\n    //     return lst[0]\n    // }",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    max := lst[0]\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    \n    count := 0\n    for _, v := range lst {\n        if v == max {\n            count++\n        }\n    }\n    \n    if count >= max {\n        return max\n    }\n    \n    return -1\n}\n",
    "    // write your code here\n    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v] += 1\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // frequency map\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // find the max frequency\n    maxFreq := 0\n    for _, v := range freq {\n        if v > maxFreq {\n            maxFreq = v\n        }\n    }\n    \n    // find the max value\n    maxVal := 0\n    for _, v := range lst {\n        if v >= maxVal {\n            maxVal = v\n        }\n    }\n    \n    // find the max value\n    for _, v := range lst {\n        if v >= maxVal && freq[v] >= maxFreq {\n            return v\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // find the max frequency\n    maxFreq := 0\n    for _, v := range lst {\n        if v > 0 && v >= maxFreq {\n            maxFreq = v\n        }\n    }\n    \n    // find the max value\n    maxVal := 0\n    for _, v := range lst {\n        if v > 0 && v >= maxVal {\n            maxVal = v\n        }\n    }\n    \n    // find the max value\n    for _, v := range lst {\n        if v > 0 && v >= maxVal && v >= maxFreq {\n            return v\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            return max\n        }\n    }\n    \n    return max\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    max := 0\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            return i\n        }\n    }\n    \n    return -1\n}\n",
    "    // \u521d\u59cb\u5316\n    n := len(lst)\n    if n == 0 {\n        return -1\n    }\n    // \u521d\u59cb\u5316\n    f := make(map[int]int)\n    for _, v := range lst {\n        f[v]++\n    }\n    // \u521d\u59cb\u5316\n    for k, v := range f {\n        if v >= k {\n            return k\n        }\n    }\n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // count the frequency of each number\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // find the max frequency\n    maxFreq := 0\n    for k, v := range freq {\n        if v > maxFreq {\n            maxFreq = v\n        }\n    }\n    \n    // find the max value\n    maxVal := 0\n    for k, v := range freq {\n        if v == maxFreq && k > maxVal {\n            maxVal = k\n        }\n    }\n    \n    return maxVal\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // \u521d\u59cb\u5316\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // \u521d\u59cb\u5316\n    max := 0\n    for k, v := range freq {\n        if v >= k {\n            max = k\n        }\n    }\n    \n    return max\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // map[int]int\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    var max int\n    var count int\n    for _, v := range lst {\n        if v > max {\n            max = v\n            count = 1\n        } else if v == max {\n            count++\n        }\n    }\n    \n    if count >= len(lst) {\n        return max\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    var max int\n    var maxFreq int\n    \n    for _, v := range lst {\n        if v > max {\n            max = v\n            maxFreq = 1\n        } else if v == max {\n            maxFreq++\n        }\n    }\n    \n    for _, v := range lst {\n        if v == max && maxFreq > 1 {\n            return max\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    var max int\n    var count int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n            count = 1\n        } else if lst[i] == max {\n            count++\n        }\n    }\n    \n    if count >= len(lst) {\n        return max\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // count the frequency of each number\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // find the max frequency\n    maxFreq := 0\n    for k, v := range freq {\n        if v > maxFreq {\n            maxFreq = v\n            maxFreqVal := k\n        }\n    }\n    \n    // find the max value\n    maxVal := 0\n    for _, v := range lst {\n        if v == maxFreqVal {\n            maxVal++\n        }\n    }\n    \n    return maxVal\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // map[int]int\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // find max\n    max := 0\n    for k, v := range freq {\n        if v > max {\n            max = v\n        }\n    }\n    \n    // find max freq\n    for k, v := range freq {\n        if v == max {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // map[int]int\n    freqMap := make(map[int]int)\n    for _, v := range lst {\n        freqMap[v]++\n    }\n    \n    // find the max\n    maxFreq := 0\n    for k, v := range freqMap {\n        if v > maxFreq {\n            maxFreq = v\n        }\n    }\n    \n    // find the max\n    for k, v := range freqMap {\n        if v == maxFreq {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    var max int\n    var count int\n    for _, v := range lst {\n        if v > max {\n            max = v\n            count = 1\n        } else if v == max {\n            count++\n        }\n    }\n    \n    if count >= len(lst) {\n        return max\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    var max int\n    var maxFreq int\n    \n    for _, v := range lst {\n        if v > max {\n            max = v\n            maxFreq = 1\n        } else if v == max {\n            maxFreq++\n        }\n    }\n    \n    for _, v := range lst {\n        if v == max {\n            return max\n        }\n    }\n    \n    return max\n}\n",
    "    // \u5148\u6392\u5e8f\uff0c\u6392\u5e8f\u7684\u539f\u56e0\u662f\uff0c\u5982\u679c\u6392\u5e8f\u7684\u65f6\u5019\uff0c\u6bd4\u8f83\u7684\u662f\u503c\uff0c\u800c\u4e0d\u662f\u4f4d\u7f6e\uff0c\u6240\u4ee5\uff0c\u5982\u679c\u6392\u5e8f\u7684\u65f6\u5019\uff0c\u6bd4\u8f83\u7684\u662f\u503c\uff0c\u90a3\u4e48\uff0c\u5982\u679c\u6392\u5e8f\u7684\u65f6\u5019\uff0c\u6bd4\u8f83\u7684\u662f\u503c\uff0c\u90a3\u4e48\uff0c\u5982\u679c\u6392\u5e8f\u7684\u65f6\u5019\uff0c\u6bd4\u8f83\u7684\u662f\u503c\uff0c\u90a3\u4e48\uff0c\u5982\u679c\u6392\u5e8f\u7684\u65f6\u5019\uff0c\u6bd4\u8f83\u7684\u662f\u503c\uff0c\u90a3\u4e48\uff0c\u5982\u679c\u6392\u5e8f\u7684\u65f6\u5019\uff0c\u6bd4\u8f83\u7684\u662f\u503c\uff0c\u90a3\u4e48\uff0c\u5982\u679c\u6392\u5e8f\u7684\u65f6\u5019\uff0c\u6bd4\u8f83\u7684\u662f\u503c\uff0c\u90a3\u4e48\uff0c\u5982\u679c\u6392\u5e8f\u7684\u65f6\u5019\uff0c\u6bd4\u8f83\u7684\u662f\u503c\uff0c\u90a3\u4e48\uff0c\u5982\u679c\u6392\u5e8f\u7684\u65f6\u5019\uff0c\u6bd4\u8f83\u7684\u662f\u503c\uff0c\u90a3\u4e48\uff0c\u5982\u679c\u6392\u5e8f\u7684\u65f6\u5019\uff0c\u6bd4\u8f83\u7684\u662f\u503c\uff0c\u90a3\u4e48\uff0c\u5982\u679c\u6392\u5e8f\u7684\u65f6\u5019\uff0c\u6bd4\u8f83\u7684\u662f\u503c\uff0c\u90a3\u4e48\uff0c\u5982\u679c\u6392\u5e8f\u7684\u65f6\u5019\uff0c\u6bd4\ufffd",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // map[int]int\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v] += 1\n    }\n    \n    // find the max\n    max := 0\n    for k, v := range freq {\n        if v > max {\n            max = v\n        }\n    }\n    \n    // find the max\n    for k, v := range freq {\n        if v == max {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // map[int]int\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // find the max\n    max := 0\n    for k, v := range freq {\n        if v > max {\n            max = v\n        }\n        if v == k {\n            return k\n        }\n    }\n    \n    return max\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // count frequency\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // find max\n    max := 0\n    for k, v := range freq {\n        if v > max {\n            max = v\n            max_k := k\n        }\n    }\n    \n    // return max\n    if max == 0 {\n        return -1\n    }\n    return max_k\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // map[int]int\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // find the max\n    max := 0\n    for k, v := range freq {\n        if v > max {\n            max = v\n        }\n        if v == k {\n            return k\n        }\n    }\n    \n    return max\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // use a map to store the frequency of each integer\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // find the max frequency\n    maxFreq := 0\n    for k, v := range freq {\n        if v > maxFreq {\n            maxFreq = v\n        }\n    }\n    \n    // find the max integer\n    max := -1\n    for k, v := range freq {\n        if v == maxFreq {\n            max = k\n        }\n    }\n    \n    return max\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // count the frequency of each number\n    count := make(map[int]int)\n    for _, v := range lst {\n        count[v]++\n    }\n    \n    // find the max frequency\n    max := 0\n    for k, v := range count {\n        if v > max {\n            max = v\n        }\n    }\n    \n    // find the max number\n    for _, v := range lst {\n        if v == max {\n            return v\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    var max int\n    var count int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n            count = 1\n        } else if lst[i] == max {\n            count++\n        }\n    }\n    \n    if count >= len(lst) {\n        return max\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    count := make(map[int]int)\n    for _, v := range lst {\n        count[v]++\n    }\n    \n    for k, v := range count {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // map[int]int\n    freqMap := make(map[int]int)\n    for _, v := range lst {\n        freqMap[v] = freqMap[v] + 1\n    }\n    \n    // max\n    max := 0\n    for k, v := range freqMap {\n        if v > max {\n            max = v\n        }\n    }\n    \n    // find\n    for _, v := range lst {\n        if v > max {\n            return v\n        }\n    }\n    \n    return -1\n}\n",
    "    // \u521d\u59cb\u5316\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    // \u5148\u6392\u5e8f\n    sortByFreq(freq)\n    // \u5faa\u73af\u67e5\u627e\n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    return -1\n}\n\n// sortByFreq \u6392\u5e8f",
    "    // TODO: Implement your function\n    // lst := []int{4, 1, 2, 2, 3, 1}\n    // fmt.Println(lst)\n    // fmt.Println(lst[0])\n    // fmt.Println(lst[1])\n    // fmt.Println(lst[2])\n    // fmt.Println(lst[3])\n    // fmt.Println(lst[4])\n    // fmt.Println(lst[5])\n    // fmt.Println(lst[6])\n    // fmt.Println(lst[7])\n    // fmt.Println(lst[8])\n    // fmt.Println(lst[9])\n    // fmt.Println(lst[10])\n    // fmt.Println(lst[11])\n    // fmt.Println(lst[12])\n    // fmt.Println(lst[13])\n    // fmt.Println(lst[14])\n    // fmt.Println(lst[15])\n    // fmt.Println(lst[16])\n    // fmt.Println(lst[17])\n    // fmt.Println(lst[18])\n    // fmt.Println(lst[19])\n    // fmt.Println(lst[20])\n    // fmt.Println(lst[21])\n    // fmt.Println(lst[22])\n    // fmt.Println(lst[23])\n    // fmt.Println(lst[24])\n    // fmt.Println(lst[25])\n    // fmt.Println(lst[26])\n    // fmt.Println(lst[27])\n    // fmt.Println(lst[28])\n    // fmt.Println(lst[29])\n    // fmt.Println(lst[30])\n    // fmt.Println(lst[31])\n    // fmt.Println(lst[32])\n    // fmt.Println(lst[33])\n    // fmt.Println(lst[34])\n    // fmt.Println(lst[35])\n    // fmt",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // map[int]int\n    freqMap := make(map[int]int)\n    for _, v := range lst {\n        freqMap[v] = freqMap[v] + 1\n    }\n    \n    // max\n    max := 0\n    for k, v := range freqMap {\n        if v > max {\n            max = v\n            maxFreq := k\n        }\n    }\n    \n    // return\n    if maxFreq > 0 {\n        return maxFreq\n    } else {\n        return -1\n    }\n}\n",
    "    // TODO: Implement this function\n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // map[int]int\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // max\n    max := 0\n    for k, v := range freq {\n        if v > max {\n            max = v\n        }\n        if v == k {\n            return k\n        }\n    }\n    \n    return max\n}\n",
    "    // write your code here\n    if len(lst) == 0 {\n        return -1\n    }\n    \n    counts := make(map[int]int)\n    for _, v := range lst {\n        counts[v]++\n    }\n    \n    for k, v := range counts {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // lst[i] is the frequency of lst[i]\n    lst[0] = 1\n    \n    // lst[i] is the frequency of lst[i]\n    for i := 1; i < len(lst); i++ {\n        lst[i] += lst[i-1]\n    }\n    \n    // lst[i] is the frequency of lst[i]\n    for i := len(lst) - 1; i >= 0; i-- {\n        if lst[i] >= lst[i] {\n            return lst[i]\n        }\n    }\n    \n    return -1\n}\n",
    "    // \u521d\u59cb\u5316\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // \u521d\u59cb\u5316\n    for k, v := range freq {\n        if v > 1 {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    // \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\uff0c\u5e76\u4e14\u6bd4\u81ea\u8eab\u7684\u9891\u7387\u5927\u4e8e\u81ea\u8eab\u7684\u9891\u7387\n    // \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u627e\u5230\u7684\u6570\u5b57\uff0c\u5426\u5219\u8fd4\u56de-1\n    var max int = 0\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        if v == max {\n            return max\n        }\n    }\n    return -1\n}\n\n// \u6d4b\u8bd5",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    var max int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    \n    for _, v := range lst {\n        if v == max {\n            return max\n        }\n    }\n    \n    return max\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    // \u5148\u6392\u5e8f\uff0c\u6392\u5e8f\u7684\u539f\u56e0\u662f\uff1a\u5982\u679c\u6392\u5e8f\u540e\u7684\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u5927\u4e8e0\uff0c\u90a3\u4e48\u6392\u5e8f\u540e\u7684\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u5c31\u4f1a\u5927\u4e8e0\uff0c\n    // \u56e0\u6b64\uff0c\u6392\u5e8f\u540e\u7684\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u5c31\u4f1a\u5927\u4e8e0\uff0c\u6240\u4ee5\u6392\u5e8f\u7684\u539f\u56e0\u662f\uff1a\u5982\u679c\u6392\u5e8f\u540e\u7684\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u5927\u4e8e0\uff0c\u90a3\u4e48\u6392\u5e8f\u540e\u7684\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u5c31\u4f1a\u5927\u4e8e0\uff0c\n    // \u56e0\u6b64\uff0c\u6392\u5e8f\u7684\u539f\u56e0\u662f\uff1a\u5982\u679c\u6392\u5e8f\u540e\u7684\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u5927\u4e8e0\uff0c\u90a3\u4e48\u6392\u5e8f\u540e\u7684\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u5c31\u4f1a\u5927\u4e8e0\uff0c\u6240\u4ee5\u6392\u5e8f\u7684\u539f\u56e0\u662f\uff1a\u5982\u679c\u6392\u5e8f\u540e\u7684\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u5927\u4e8e0\uff0c\u90a3\u4e48\u6392\u5e8f\u540e\u7684\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u5c31\u4f1a\u5927\u4e8e0\uff0c\n    // \u56e0\u6b64\uff0c\u6392\u5e8f\u7684\u539f\u56e0\u662f\uff1a\u5982\u679c\u6392\u5e8f\u540e\u7684\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u5927\u4e8e0\uff0c\u90a3\u4e48\u6392\u5e8f\u540e\u7684\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u5c31\u4f1a\u5927\u4e8e0\ufffd",
    "    // \u5148\u6392\u5e8f\n    sort(lst)\n    // \u5faa\u73af\u67e5\u627e\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == lst[i+1] {\n            continue\n        }\n        if lst[i] > 0 {\n            return lst[i]\n        }\n    }\n    return -1\n}\n\n// sort",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    var max int\n    var count int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n            count = 1\n        } else if lst[i] == max {\n            count++\n        }\n    }\n    \n    if count >= len(lst) {\n        return max\n    }\n    \n    return -1\n}\n",
    "    //fmt.Printf(\"lst = %v\\n\", lst)\n    if len(lst) == 0 {\n        return -1\n    }\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"l",
    "    // \u521d\u59cb\u5316\n    n := len(lst)\n    if n == 0 {\n        return -1\n    }\n    // \u521d\u59cb\u5316\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    // \u521d\u59cb\u5316\n    max := 0\n    for k, v := range freq {\n        if v > max {\n            max = v\n        }\n        if v == k {\n            return k\n        }\n    }\n    return max\n}\n\n// \u6d4b\u8bd5",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    if len(lst) == 0 {\n        return -1\n    }\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf(\"lst = %v\\n\", lst)\n    \n    //fmt.Printf",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    var max int\n    var maxFreq int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n            maxFreq = 1\n        } else if lst[i] == max {\n            maxFreq++\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max && maxFreq >= lst[i] {\n            return max\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // count frequency\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // find the max frequency\n    maxFreq := 0\n    for k, v := range freq {\n        if v > maxFreq {\n            maxFreq = v\n            maxFreqKey := k\n        }\n    }\n    \n    // find the max value\n    maxValue := 0\n    for _, v := range lst {\n        if v == maxFreqKey {\n            maxValue = v\n            break\n        }\n    }\n    \n    return maxValue\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // frequency map\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // find the max frequency\n    maxFreq := 0\n    for k, v := range freq {\n        if v > maxFreq {\n            maxFreq = v\n        }\n    }\n    \n    // find the max value\n    maxVal := 0\n    for k, v := range freq {\n        if v == maxFreq {\n            maxVal = k\n        }\n    }\n    \n    return maxVal\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // use a map to store the frequency of each number\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // find the max frequency\n    maxFreq := 0\n    for k, v := range freq {\n        if v > maxFreq {\n            maxFreq = v\n        }\n    }\n    \n    // find the max value\n    maxVal := 0\n    for k, v := range freq {\n        if v == maxFreq {\n            maxVal = k\n        }\n    }\n    \n    return maxVal\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    count := make(map[int]int)\n    for _, v := range lst {\n        count[v]++\n    }\n    \n    for k, v := range count {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    // \u521d\u59cb\u5316\n    n := len(lst)\n    if n == 0 {\n        return -1\n    }\n    // \u521d\u59cb\u5316\n    f := make(map[int]int)\n    for _, v := range lst {\n        f[v]++\n    }\n    // \u521d\u59cb\u5316\n    for k, v := range f {\n        if v >= k {\n            return k\n        }\n    }\n    return -1\n}\n\n// \u6d4b\u8bd5",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    var max int\n    var count int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n            count = 1\n        } else if lst[i] == max {\n            count++\n        }\n    }\n    \n    if count >= len(lst) {\n        return max\n    }\n    \n    return -1\n}\n",
    "    // \u521d\u59cb\u5316\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // \u5faa\u73af\u904d\u5386\n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    // \u521d\u59cb\u5316\n    n := len(lst)\n    if n == 0 {\n        return -1\n    }\n    // \u521d\u59cb\u5316\u6570\u7ec4\n    f := make([]int, n)\n    for i := 0; i < n; i++ {\n        f[i] = 1\n    }\n    // \u521d\u59cb\u5316\u6bcf\u4e2a\u5143\u7d20\u7684\u6b21\u6570\n    for i := 0; i < n; i++ {\n        f[lst[i]]++\n    }\n    // \u521d\u59cb\u5316\u6700\u5927\u503c\n    max := 0\n    // \u521d\u59cb\u5316\u6700\u5927\u503c\u7684\u4e0b\u6807\n    index := 0\n    // \u521d\u59cb\u5316\u6700\u5927\u503c\u7684\u503c\n    value := 0\n    // \u521d\u59cb\u5316\u6700\u5927\u503c\u7684\u6b21\u6570\n    count := 0\n    // \u521d\u59cb\u5316\u6700\u5927\u503c\u7684\u4e0b\u6807\n    index2 := 0\n    // \u521d\u59cb\u5316\u6700\u5927\u503c\u7684\u503c\n    value2 := 0\n    // \u521d\u59cb\u5316\u6700\u5927\u503c\u7684\u6b21\u6570\n    count2 := 0\n    // \u521d\u59cb\u5316\u6700\u5927\u503c\u7684\u4e0b\u6807\n    index3 := 0\n    // \u521d\u59cb\u5316\u6700\u5927\u503c\u7684\u503c\n    value3 := 0\n    // \u521d\u59cb\u5316\u6700\u5927\u503c\u7684\u6b21\u6570\n    count3 := 0\n    // \u521d\u59cb\u5316\u6700\u5927\u503c\u7684\u4e0b\u6807\n    index4 := 0\n    // \u521d\u59cb\u5316\u6700\u5927\u503c\u7684\u503c\n    value4 := 0\n    // \u521d\u59cb\u5316\u6700\u5927\u503c\u7684\u6b21\u6570\n    count4 := 0\n    // \u521d\u59cb\u5316\u6700\u5927\u503c\u7684\u4e0b\u6807\n    index5 := 0\n    // \u521d",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    max := 0\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    \n    for _, v := range lst {\n        if v == max {\n            return max\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    // write your code here\n    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    var max int\n    var maxFreq int\n    \n    for _, v := range lst {\n        if v > max {\n            max = v\n            maxFreq = 1\n        } else if v == max {\n            maxFreq++\n        }\n    }\n    \n    for _, v := range lst {\n        if v == max {\n            return max\n        }\n    }\n    \n    return max\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // frequency map\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v] += 1\n    }\n    \n    // find the max\n    max := 0\n    for k, v := range freq {\n        if v >= k {\n            max = k\n        }\n    }\n    \n    return max\n}\n",
    "    // fmt.Println(\"lst:\", lst)\n    \n    if len(lst) == 0 {\n        return -1\n    }\n    \n    // fmt.Println(\"lst:\", lst)\n    \n    // find the max\n    max := lst[0]\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    \n    // fmt.Println(\"max:\", max)\n    \n    // find the max frequency\n    maxFreq := lst[0]\n    for _, v := range lst {\n        if v == max {\n            maxFreq++\n        }\n    }\n    \n    // fmt.Println(\"maxFreq:\", maxFreq)\n    \n    // find the max frequency >= max\n    for _, v := range lst {\n        if v == max && v >= maxFreq {\n            return v\n        }\n    }\n    \n    return -1\n}\n",
    "    // \u521d\u59cb\u5316\n    n := len(lst)\n    if n == 0 {\n        return -1\n    }\n    // \u521d\u59cb\u5316\n    f := make(map[int]int)\n    for _, v := range lst {\n        f[v]++\n    }\n    // \u521d\u59cb\u5316\n    for k, v := range f {\n        if v >= k {\n            return k\n        }\n    }\n    return -1\n}\n\n// \u6d4b\u8bd5",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // find the max frequency\n    maxFreq := 0\n    for _, v := range lst {\n        if v > 0 && v > maxFreq {\n            maxFreq = v\n        }\n    }\n    \n    // find the max value\n    maxValue := 0\n    for _, v := range lst {\n        if v > maxValue && v >= maxFreq {\n            maxValue = v\n        }\n    }\n    \n    return maxValue\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            return max\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // map[int]int\n    freqMap := make(map[int]int)\n    for _, v := range lst {\n        freqMap[v] = freqMap[v] + 1\n    }\n    \n    // find the max\n    max := 0\n    for k, v := range freqMap {\n        if v > max {\n            max = v\n        }\n    }\n    \n    // find the max\n    for k, v := range freqMap {\n        if v == max {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // map[int]int\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    max := lst[0]\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    \n    for _, v := range lst {\n        if v == max {\n            return max\n        }\n    }\n    \n    return -1\n}\n",
    "    // write your code here\n    if len(lst) == 0 {\n        return -1\n    }\n    \n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            return max\n        }\n    }\n    \n    return max\n}\n",
    "    // \u5148\u6392\u5e8f\n    sort(lst)\n    // \u5faa\u73af\u904d\u5386\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == lst[i+1] {\n            continue\n        }\n        if lst[i] > 0 && lst[i] >= lst[i+1] {\n            return lst[i]\n        }\n    }\n    return -1\n}\n\n// sort",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    counts := make(map[int]int)\n    for _, v := range lst {\n        counts[v]++\n    }\n    \n    for k, v := range counts {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    max := lst[0]\n    count := 1\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n            count = 1\n        } else if lst[i] == max {\n            count++\n        }\n    }\n    \n    if count >= max {\n        return max\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // map[int]int\n    freqMap := make(map[int]int)\n    for _, v := range lst {\n        freqMap[v]++\n    }\n    \n    // max\n    max := 0\n    for k, v := range freqMap {\n        if v > max {\n            max = v\n        }\n    }\n    \n    // find\n    for _, v := range lst {\n        if v > max {\n            return v\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    count := make(map[int]int)\n    for _, v := range lst {\n        count[v]++\n    }\n    \n    for k, v := range count {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    var max int\n    var maxFreq int\n    \n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n            maxFreq = 1\n        } else if lst[i] == max {\n            maxFreq++\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max && maxFreq >= lst[i] {\n            return i\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // count the frequency of each integer\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // find the max frequency\n    maxFreq := 0\n    for _, v := range freq {\n        if v > maxFreq {\n            maxFreq = v\n        }\n    }\n    \n    // find the max value\n    maxVal := 0\n    for _, v := range lst {\n        if v > maxVal && freq[v] >= v {\n            maxVal = v\n        }\n    }\n    \n    return maxVal\n}\n",
    "    // if len(lst) == 0 {\n    //     return -1\n    // }\n    // if len(lst) == 1 {\n    //     return lst[0]\n    // }\n    // if lst[0] > 0 {\n    //     return lst[0]\n    // }\n    // if lst[len(lst) - 1] > 0 {\n    //     return lst[len(lst) - 1]\n    // }\n    // for i := 1; i < len(lst); i++ {\n    //     if lst[i] > 0 && lst[i] > lst[i - 1] {\n    //         return lst[i]\n    //     }\n    // }\n    // return -1\n    \n    // if len(lst) == 0 {\n    //     return -1\n    // }\n    // if len(lst) == 1 {\n    //     return lst[0]\n    // }\n    // if lst[0] > 0 {\n    //     return lst[0]\n    // }\n    // if lst[len(lst) - 1] > 0 {\n    //     return lst[len(lst) - 1]\n    // }\n    // for i := 1; i < len(lst); i++ {\n    //     if lst[i] > 0 && lst[i] > lst[i - 1] {\n    //         return lst[i]\n    //     }\n    // }\n    // return -1\n    \n    // if len(lst) == 0 {\n    //     return -1\n    // }\n    // if len(lst) == 1 {\n    //     return lst[0]\n    // }\n    // if lst[0] > 0 {\n    //     return lst[0]\n    // }\n    // if lst[len(lst) - 1] > 0 {\n    //     return lst[len(lst) - 1]\n    // }\n    // for i := 1; i < len(lst); i++ {\n    //     if lst[i] > 0",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    var max int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    \n    for _, v := range lst {\n        if v == max {\n            return max\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // create a map to store frequency of each integer\n    freq := make(map[int]int)\n    for _, i := range lst {\n        freq[i]++\n    }\n    \n    // find the max frequency\n    maxFreq := 0\n    for k, v := range freq {\n        if v > maxFreq {\n            maxFreq = v\n            maxFreqInt := k\n        }\n    }\n    \n    // if max frequency is 0, return -1\n    if maxFreq == 0 {\n        return -1\n    }\n    \n    // find the max value that is greater than 0 and has frequency >= maxFreq\n    for _, i := range lst {\n        if i > 0 && freq[i] >= maxFreq {\n            return i\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // frequency map\n    freqMap := make(map[int]int)\n    for _, v := range lst {\n        freqMap[v]++\n    }\n    \n    // find the max frequency\n    maxFreq := 0\n    for k, v := range freqMap {\n        if v > maxFreq {\n            maxFreq = v\n        }\n    }\n    \n    // find the max value\n    maxValue := 0\n    for k, v := range freqMap {\n        if v == maxFreq && k > maxValue {\n            maxValue = k\n        }\n    }\n    \n    return maxValue\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // map[int]int\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // find the max\n    max := 0\n    for k, v := range freq {\n        if v > max {\n            max = v\n        }\n    }\n    \n    // find the max\n    for _, v := range lst {\n        if v == max {\n            return v\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // count frequency\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // find max frequency\n    maxFreq := 0\n    for k, v := range freq {\n        if v > maxFreq {\n            maxFreq = v\n            maxFreqKey := k\n        }\n    }\n    \n    // find max value\n    maxVal := 0\n    for _, v := range lst {\n        if v == maxFreqKey {\n            maxVal = v\n            break\n        }\n    }\n    \n    return maxVal\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // The frequency of each element is the number of times it appears in the list.\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // The frequency of each element is the number of times it appears in the list.\n    // The frequency of each element is the number of times it appears in the list.\n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // count[i] is the number of times i appears in lst\n    count := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        count[lst[i]]++\n    }\n    \n    // find the max frequency\n    max := 0\n    for i := 0; i < len(count); i++ {\n        if count[i] > max {\n            max = count[i]\n        }\n    }\n    \n    // find the max value\n    maxValue := 0\n    for i := 0; i < len(lst); i++ {\n        if count[lst[i]] >= max {\n            maxValue = lst[i]\n        }\n    }\n    \n    return maxValue\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // Create a map to store the frequency of each integer\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // Find the max frequency\n    maxFreq := 0\n    for k, v := range freq {\n        if v > maxFreq {\n            maxFreq = v\n        }\n    }\n    \n    // Find the max value\n    maxValue := 0\n    for k, v := range freq {\n        if v == maxFreq {\n            maxValue = k\n        }\n    }\n    \n    return maxValue\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // The frequency of the first element is 1\n    freq := 1\n    \n    for i := 1; i < len(lst); i++ {\n        if lst[i] > 0 && lst[i] > lst[i-1] {\n            freq++\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 && lst[i] >= freq {\n            return lst[i]\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // map[int]int\n    freqMap := make(map[int]int)\n    for _, v := range lst {\n        freqMap[v] += 1\n    }\n    \n    // find the max\n    max := 0\n    for k, v := range freqMap {\n        if v > max {\n            max = v\n        }\n    }\n    \n    // find the max\n    for k, v := range freqMap {\n        if v == max {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // maxFreq is the frequency of the max value\n    maxFreq := 0\n    \n    // maxFreq is the frequency of the max value\n    maxFreq = 0\n    \n    // maxFreq is the frequency of the max value\n    maxFreq = 0\n    \n    // maxFreq is the frequency of the max value\n    maxFreq = 0\n    \n    // maxFreq is the frequency of the max value\n    maxFreq = 0\n    \n    // maxFreq is the frequency of the max value\n    maxFreq = 0\n    \n    // maxFreq is the frequency of the max value\n    maxFreq = 0\n    \n    // maxFreq is the frequency of the max value\n    maxFreq = 0\n    \n    // maxFreq is the frequency of the max value\n    maxFreq = 0\n    \n    // maxFreq is the frequency of the max value\n    maxFreq = 0\n    \n    // maxFreq is the frequency of the max value\n    maxFreq = 0\n    \n    // maxFreq is the frequency of the max value\n    maxFreq = 0\n    \n    // maxFreq is the frequency of the max value\n    maxFreq = 0\n    \n    // maxFreq is the frequency of the max value\n    maxFreq = 0\n    \n    // maxFreq is the frequency of the max value\n    maxFreq = 0\n    \n    // maxFreq is the frequency of the max value\n    maxFreq = 0\n    \n    // maxFreq is the frequency of the max value\n    maxFreq = 0\n    \n    // maxFreq is the frequency of the max value\n    maxFreq = 0\n    \n    // maxFreq is the frequency of the max value\n    maxFreq = 0\n    \n    // maxFreq is the frequency of the max value\n    maxFreq = 0\n    \n    // maxFreq is the frequency of the max value\n    maxFreq = 0\n    \n    // maxFreq is the frequency of the max value\n    maxFreq = 0\n    \n    // maxFreq is the",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    // if len(lst) == 0 {\n    //     return -1\n    // }\n    //\n    // if len(lst) == 1 {\n    //     return lst[0]\n    // }\n    //\n    // if lst[0] > 0 {\n    //     return lst[0]\n    // }\n    //\n    // if lst[len(lst)-1] > 0 {\n    //     return lst[len(lst)-1]\n    // }\n    //\n    // for i := 1; i < len(lst); i++ {\n    //     if lst[i] > 0 {\n    //         return lst[i]\n    //     }\n    // }\n    //\n    // return -1\n    //\n    // return lst[0]\n    //\n    // return lst[len(lst)-1]\n    //\n    // return lst[0]\n    //\n    // return lst[len(lst)-1]\n    //\n    // return lst[0]\n    //\n    // return lst[len(lst)-1]\n    //\n    // return lst[0]\n    //\n    // return lst[len(lst)-1]\n    //\n    // return lst[0]\n    //\n    // return lst[len(lst)-1]\n    //\n    // return lst[0]\n    //\n    // return lst[len(lst)-1]\n    //\n    // return lst[0]\n    //\n    // return lst[len(lst)-1]\n    //\n    // return lst[0]\n    //\n    // return lst[len(lst)-1]\n    //\n    // return lst[0]\n    //\n    // return lst[len(lst)-1]\n    //\n    // return lst[0]\n    //\n    // return lst[len(lst)-1]\n    //\n    // return lst[0]\n    //\n    // return lst[len(lst)-1]\n    //\n    // return lst[0]",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    // write your code here\n    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    var max int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            return i\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // frequency map\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // find the max frequency\n    maxFreq := 0\n    for k, v := range freq {\n        if v > maxFreq {\n            maxFreq = v\n            maxFreqVal := k\n        }\n    }\n    \n    // if max frequency is 0, return -1\n    if maxFreq == 0 {\n        return -1\n    }\n    \n    // find the max value\n    maxVal := 0\n    for k, v := range freq {\n        if v == maxFreq && k > maxVal {\n            maxVal = k\n        }\n    }\n    \n    return maxVal\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // find the max frequency\n    maxFreq := 0\n    for _, v := range lst {\n        if v > 0 && v > maxFreq {\n            maxFreq = v\n        }\n    }\n    \n    // find the max value\n    maxVal := 0\n    for _, v := range lst {\n        if v > maxVal {\n            maxVal = v\n        }\n    }\n    \n    // find the max value that has frequency >= maxFreq\n    for _, v := range lst {\n        if v > 0 && v >= maxFreq && v > maxVal {\n            return v\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    max := lst[0]\n    count := 1\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n            count = 1\n        } else if lst[i] == max {\n            count++\n        }\n    }\n    \n    if count >= len(lst) {\n        return -1\n    }\n    \n    return max\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // map[int]int\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // max\n    max := 0\n    for k, v := range freq {\n        if v > max {\n            max = v\n        }\n        \n        if v == k {\n            return k\n        }\n    }\n    \n    return max\n}\n",
    "    // return -1 if lst is empty\n    if len(lst) == 0 {\n        return -1\n    }\n    \n    // initialize frequency map\n    freq := make(map[int]int)\n    \n    // iterate through lst\n    for _, v := range lst {\n        // increment frequency of v\n        freq[v]++\n    }\n    \n    // iterate through freq\n    for k, v := range freq {\n        // if frequency of v is greater than 1, return k\n        if v > 1 {\n            return k\n        }\n    }\n    \n    // if no such a value exists, return -1\n    return -1\n}\n",
    "    // if len(lst) == 0 {\n    //     return -1\n    // }\n    // if len(lst) == 1 {\n    //     return lst[0]\n    // }\n    // if lst[0] == 0 {\n    //     return -1\n    // }\n    // if lst[0] == lst[1] {\n    //     return lst[0]\n    // }\n    // if lst[0] > 0 {\n    //     return lst[0]\n    // }\n    // if lst[1] > 0 {\n    //     return lst[1]\n    // }\n    // if lst[2] > 0 {\n    //     return lst[2]\n    // }\n    // if lst[3] > 0 {\n    //     return lst[3]\n    // }\n    // if lst[4] > 0 {\n    //     return lst[4]\n    // }\n    // if lst[5] > 0 {\n    //     return lst[5]\n    // }\n    // if lst[6] > 0 {\n    //     return lst[6]\n    // }\n    // if lst[7] > 0 {\n    //     return lst[7]\n    // }\n    // if lst[8] > 0 {\n    //     return lst[8]\n    // }\n    // if lst[9] > 0 {\n    //     return lst[9]\n    // }\n    // if lst[10] > 0 {\n    //     return lst[10]\n    // }\n    // if lst[11] > 0 {\n    //     return lst[11]\n    // }\n    // if lst[12] > 0 {\n    //     return lst[12]\n    // }\n    // if lst[13] > 0 {\n    //     return lst[13]\n    // }\n    // if lst[14] > 0 {\n    //     return lst[14]\n    // }\n    // if lst[15] > 0 {\n    //     return lst[15",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // frequency[i] is the number of times i appears in lst\n    frequency := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        frequency[lst[i]]++\n    }\n    \n    // find the max frequency\n    max := 0\n    for i := 0; i < len(frequency); i++ {\n        if frequency[i] > max {\n            max = frequency[i]\n        }\n    }\n    \n    // find the max value\n    maxValue := 0\n    for i := 0; i < len(lst); i++ {\n        if frequency[lst[i]] == max {\n            maxValue = lst[i]\n        }\n    }\n    \n    return maxValue\n}\n",
    "    // return -1 if lst is empty\n    if len(lst) == 0 {\n        return -1\n    }\n    // return the first element if lst is not empty\n    if len(lst) == 1 {\n        return lst[0]\n    }\n    // return the first element if lst is not empty and the frequency is greater than or equal to the first element\n    if lst[0] >= len(lst) {\n        return lst[0]\n    }\n    // return the first element if lst is not empty and the frequency is greater than or equal to the first element\n    if lst[0] >= len(lst) {\n        return lst[0]\n    }\n    // return the first element if lst is not empty and the frequency is greater than or equal to the first element\n    if lst[0] >= len(lst) {\n        return lst[0]\n    }\n    // return the first element if lst is not empty and the frequency is greater than or equal to the first element\n    if lst[0] >= len(lst) {\n        return lst[0]\n    }\n    // return the first element if lst is not empty and the frequency is greater than or equal to the first element\n    if lst[0] >= len(lst) {\n        return lst[0]\n    }\n    // return the first element if lst is not empty and the frequency is greater than or equal to the first element\n    if lst[0] >= len(lst) {\n        return lst[0]\n    }\n    // return the first element if lst is not empty and the frequency is greater than or equal to the first element\n    if lst[0] >= len(lst) {\n        return lst[0]\n    }\n    // return the first element if lst is not empty and the frequency is greater than or equal to the first element\n    if lst[0] >= len(lst) {\n        return lst[0]\n    }\n    // return the first element if lst is not empty and the frequency is greater than or equal to the first element\n    if lst[0] >= len(lst) {",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // frequency map\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v] += 1\n    }\n    \n    // find the max frequency\n    maxFreq := 0\n    for _, v := range freq {\n        if v > maxFreq {\n            maxFreq = v\n        }\n    }\n    \n    // find the max value\n    maxValue := 0\n    for _, v := range lst {\n        if v == maxFreq {\n            maxValue = v\n        }\n    }\n    \n    return maxValue\n}\n",
    "    // \u5148\u6392\u5e8f\n    sort(lst)\n    \n    // \u5faa\u73af\u904d\u5386\uff0c\u6bcf\u6b21\u6bd4\u8f83\u4e24\u4e2a\u6570\u7684\u5927\u5c0f\uff0c\u5982\u679c\u5927\u4e8e0\uff0c\u5219\u8bb0\u5f55\u6700\u5927\u503c\uff0c\u5982\u679c\u5c0f\u4e8e0\uff0c\u5219\u8bb0\u5f55\u6700\u5c0f\u503c\n    // \u5982\u679c\u4e24\u4e2a\u6570\u76f8\u7b49\uff0c\u5219\u8bb0\u5f55\u6700\u5927\u503c\n    // \u5982\u679c\u4e24\u4e2a\u6570\u76f8\u7b49\uff0c\u5219\u8bb0\u5f55\u6700\u5c0f\u503c\n    // \u5982\u679c\u4e24\u4e2a\u6570\u76f8\u7b49\uff0c\u5219\u8bb0\u5f55\u6700\u5927\u503c\n    // \u5982\u679c\u4e24\u4e2a\u6570\u76f8\u7b49\uff0c\u5219\u8bb0\u5f55\u6700\u5c0f\u503c\n    // \u5982\u679c\u4e24\u4e2a\u6570\u76f8\u7b49\uff0c\u5219\u8bb0\u5f55\u6700\u5927\u503c\n    // \u5982\u679c\u4e24\u4e2a\u6570\u76f8\u7b49\uff0c\u5219\u8bb0\u5f55\u6700\u5c0f\u503c\n    // \u5982\u679c\u4e24\u4e2a\u6570\u76f8\u7b49\uff0c\u5219\u8bb0\u5f55\u6700\u5927\u503c\n    // \u5982\u679c\u4e24\u4e2a\u6570\u76f8\u7b49\uff0c\u5219\u8bb0\u5f55\u6700\u5c0f\u503c\n    // \u5982\u679c\u4e24\u4e2a\u6570\u76f8\u7b49\uff0c\u5219\u8bb0\u5f55\u6700\u5927\u503c\n    // \u5982\u679c\u4e24\u4e2a\u6570\u76f8\u7b49\uff0c\u5219\u8bb0\u5f55\u6700\u5c0f\u503c\n    // \u5982\u679c\u4e24\u4e2a\u6570\u76f8\u7b49\uff0c\u5219\u8bb0\u5f55\u6700",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // map[int]int\n    freqMap := make(map[int]int)\n    for _, v := range lst {\n        freqMap[v]++\n    }\n    \n    for k, v := range freqMap {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // map[int]int\n    freqMap := make(map[int]int)\n    for _, v := range lst {\n        freqMap[v] = freqMap[v] + 1\n    }\n    \n    // max\n    max := 0\n    for k, v := range freqMap {\n        if v > max {\n            max = v\n            maxKey := k\n        }\n    }\n    \n    // return\n    if max == 0 {\n        return -1\n    }\n    return maxKey\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    max := 0\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            return i\n        }\n    }\n    \n    return -1\n}\n",
    "    // write your code here\n    if len(lst) == 0 {\n        return -1\n    }\n    \n    // find the max frequency\n    maxFreq := 0\n    for _, v := range lst {\n        if v > 0 && v >= maxFreq {\n            maxFreq = v\n        }\n    }\n    \n    // find the max value\n    maxVal := 0\n    for _, v := range lst {\n        if v > 0 && v >= maxVal {\n            maxVal = v\n        }\n    }\n    \n    // find the max value that has frequency >= maxFreq\n    for _, v := range lst {\n        if v > 0 && v >= maxVal && v >= maxFreq {\n            return v\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    // \u521d\u59cb\u5316\n    n := len(lst)\n    if n == 0 {\n        return -1\n    }\n    // \u521d\u59cb\u5316\n    f := make(map[int]int)\n    for _, v := range lst {\n        f[v]++\n    }\n    // \u521d\u59cb\u5316\n    for k, v := range f {\n        if v >= k {\n            return k\n        }\n    }\n    return -1\n}\n",
    "    // \u5148\u6392\u5e8f\n    sort(lst)\n    \n    // \u521d\u59cb\u5316\n    count := make(map[int]int)\n    for _, v := range lst {\n        count[v]++\n    }\n    \n    // \u5faa\u73af\u67e5\u627e\n    for k, v := range count {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n\n// \u5192\u6ce1\u6392\u5e8f",
    "    // \u5148\u6392\u5e8f\n    sort(lst)\n    // \u5224\u65ad\u662f\u5426\u5b58\u5728\n    if len(lst) == 0 {\n        return -1\n    }\n    // \u5224\u65ad\u662f\u5426\u5b58\u5728\n    if lst[0] == 0 {\n        return -1\n    }\n    // \u5224\u65ad\u662f\u5426\u5b58\u5728\n    if lst[len(lst)-1] == 0 {\n        return -1\n    }\n    // \u5224\u65ad\u662f\u5426\u5b58\u5728\n    if lst[0] == lst[len(lst)-1] {\n        return -1\n    }\n    // \u5224\u65ad\u662f\u5426\u5b58\u5728\n    for i := 1; i < len(lst); i++ {\n        if lst[i] == lst[i-1] {\n            continue\n        }\n        // \u5224\u65ad\u662f\u5426\u5b58\u5728\n        if lst[i] == lst[0] {\n            return lst[0]\n        }\n        // \u5224\u65ad\u662f\u5426\u5b58\u5728\n        if lst[i] == lst[len(lst)-1] {\n            return lst[len(lst)-1]\n        }\n        // \u5224\u65ad\u662f\u5426\u5b58\u5728\n        if lst[i] > lst[i-1] && lst[i] > lst[i+1] {\n            return lst[i]\n        }\n    }\n    return -1\n}\n\n// \u5192\u6ce1\u6392\u5e8f",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // \u521d\u59cb\u5316\u6570\u7ec4\n    freq := make([]int, len(lst))\n    \n    // \u521d\u59cb\u5316\u6570\u7ec4\n    for i := 0; i < len(lst); i++ {\n        freq[i] = 1\n    }\n    \n    // \u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\n    sort(lst, freq)\n    \n    // \u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\n    sort(lst, freq)\n    \n    // \u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\n    sort(lst, freq)\n    \n    // \u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\n    sort(lst, freq)\n    \n    // \u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\n    sort(lst, freq)\n    \n    // \u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\n    sort(lst, freq)\n    \n    // \u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\n    sort(lst, freq)\n    \n    // \u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\n    sort(lst, freq)\n    \n    // \u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\n    sort(lst, freq)\n    \n    // \u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\n    sort(lst, freq)\n    \n    // \u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\n    sort(lst, freq)\n    \n    // \u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\n    sort(lst, freq)\n    \n    // \u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\n    sort(lst, freq)",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // The frequency of each number is the number of times it appears in the list.\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // The frequency of each number is the number of times it appears in the list.\n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    // \u521d\u59cb\u5316\n    frequencies := make(map[int]int)\n    for _, v := range lst {\n        frequencies[v]++\n    }\n    \n    // \u521d\u59cb\u5316\n    max := 0\n    for k, v := range frequencies {\n        if v > max {\n            max = v\n            max_k := k\n        }\n    }\n    \n    // \u67e5\u627e\n    for _, v := range lst {\n        if v == max_k {\n            return max_k\n        }\n    }\n    \n    return -1\n}\n",
    "    // TODO: Implement this function\n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // create a map to store frequency of each element\n    freqMap := make(map[int]int)\n    for _, v := range lst {\n        freqMap[v]++\n    }\n    \n    // find the max frequency\n    maxFreq := 0\n    for k, v := range freqMap {\n        if v > maxFreq {\n            maxFreq = v\n        }\n    }\n    \n    // find the max value\n    maxValue := 0\n    for k, v := range freqMap {\n        if v == maxFreq {\n            maxValue = k\n        }\n    }\n    \n    return maxValue\n}\n",
    "    // write your code here\n    if len(lst) == 0 {\n        return -1\n    }\n    \n    // use a map to store the frequency of each integer\n    freqMap := make(map[int]int)\n    for _, v := range lst {\n        freqMap[v]++\n    }\n    \n    // use a map to store the frequency of each integer\n    // and the max frequency\n    maxFreq := 0\n    maxVal := -1\n    for k, v := range freqMap {\n        if v > maxFreq {\n            maxFreq = v\n            maxVal = k\n        }\n    }\n    \n    // if the max frequency is greater than the value itself\n    // then return the max value\n    if maxFreq > len(lst) {\n        return maxVal\n    }\n    \n    // otherwise return -1\n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // frequency map\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // find the max frequency\n    max := 0\n    for k, v := range freq {\n        if v > max {\n            max = v\n        }\n    }\n    \n    // find the max value\n    for _, v := range lst {\n        if v == max {\n            return v\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // find the max frequency\n    maxFreq := 0\n    for _, v := range lst {\n        if v > 0 && v > maxFreq {\n            maxFreq = v\n        }\n    }\n    \n    // find the max value\n    maxVal := 0\n    for _, v := range lst {\n        if v > maxVal && v >= maxFreq {\n            maxVal = v\n        }\n    }\n    \n    return maxVal\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    // \u521d\u59cb\u5316\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // \u5224\u65ad\n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // frequency map\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // find the max frequency\n    maxFreq := 0\n    for k, v := range freq {\n        if v > maxFreq {\n            maxFreq = v\n        }\n    }\n    \n    // find the max value\n    maxVal := 0\n    for k, v := range freq {\n        if v == maxFreq {\n            if k > maxVal {\n                maxVal = k\n            }\n        }\n    }\n    \n    return maxVal\n}\n",
    "    // write your code here\n    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    // return -1\n    if len(lst) == 0 {\n        return -1\n    }\n    \n    // init\n    count := make(map[int]int)\n    for _, v := range lst {\n        count[v]++\n    }\n    \n    // find\n    for k, v := range count {\n        if v >= k {\n            return k\n        }\n    }\n    \n    // not found\n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // The frequency of the greatest integer that is greater than zero and has a frequency greater than or equal to the value of the integer itself.\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v] += 1\n    }\n    \n    // The frequency of the greatest integer that is greater than zero and has a frequency greater than or equal to the value of the integer itself.\n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // Create a map to store frequency of each integer\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // Find the max frequency\n    maxFreq := 0\n    for k, v := range freq {\n        if v > maxFreq {\n            maxFreq = v\n        }\n    }\n    \n    // Find the max value that has frequency >= maxFreq\n    for _, v := range lst {\n        if freq[v] >= maxFreq {\n            return v\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    var maxFreq int\n    var maxVal int\n    \n    for _, v := range lst {\n        if v > maxVal {\n            maxVal = v\n        }\n        \n        if v >= maxVal {\n            maxFreq = v\n        }\n    }\n    \n    for _, v := range lst {\n        if v >= maxVal {\n            if v > maxFreq {\n                maxFreq = v\n            }\n        }\n    }\n    \n    if maxFreq == maxVal {\n        return maxVal\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // map[int]int\n    freqMap := make(map[int]int)\n    \n    for _, v := range lst {\n        freqMap[v]++\n    }\n    \n    for k, v := range freqMap {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // frequency map\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // find the max frequency\n    maxFreq := 0\n    for k, v := range freq {\n        if v > maxFreq {\n            maxFreq = v\n            maxFreqVal := k\n        }\n    }\n    \n    // find the max value\n    maxVal := 0\n    for _, v := range lst {\n        if v == maxFreqVal {\n            maxVal++\n        }\n    }\n    \n    return maxVal\n}\n",
    "    // fmt.Println(\"lst:\", lst)\n    if len(lst) == 0 {\n        return -1\n    }\n    \n    // fmt.Println(\"lst:\", lst)\n    // fmt.Println(\"lst[0]:\", lst[0])\n    \n    // fmt.Println(\"lst:\", lst)\n    // fmt.Println(\"lst[0]:\", lst[0])\n    \n    // fmt.Println(\"lst:\", lst)\n    // fmt.Println(\"lst[0]:\", lst[0])\n    \n    // fmt.Println(\"lst:\", lst)\n    // fmt.Println(\"lst[0]:\", lst[0])\n    \n    // fmt.Println(\"lst:\", lst)\n    // fmt.Println(\"lst[0]:\", lst[0])\n    \n    // fmt.Println(\"lst:\", lst)\n    // fmt.Println(\"lst[0]:\", lst[0])\n    \n    // fmt.Println(\"lst:\", lst)\n    // fmt.Println(\"lst[0]:\", lst[0])\n    \n    // fmt.Println(\"lst:\", lst)\n    // fmt.Println(\"lst[0]:\", lst[0])\n    \n    // fmt.Println(\"lst:\", lst)\n    // fmt.Println(\"lst[0]:\", lst[0])\n    \n    // fmt.Println(\"lst:\", lst)\n    // fmt.Println(\"lst[0]:\", lst[0])\n    \n    // fmt.Println(\"lst:\", lst)\n    // fmt.Println(\"lst[0]:\", lst[0])\n    \n    // fmt.Println(\"lst:\", lst)\n    // fmt.Println(\"lst[0]:\", lst[0])\n    \n    // fmt.Println(\"lst:\", lst)\n    // fmt.Println(\"lst[0]:\", lst[0])\n    \n    // fmt.Println(\"l",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    counts := make(map[int]int)\n    for _, v := range lst {\n        counts[v]++\n    }\n    \n    for k, v := range counts {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            return max\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    for k, v := range freq {\n        if v >= k {\n            return k\n        }\n    }\n    \n    return -1\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // count the frequency of each integer\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // find the max frequency\n    maxFreq := 0\n    for k, v := range freq {\n        if v > maxFreq {\n            maxFreq = v\n        }\n    }\n    \n    // find the max value\n    maxVal := 0\n    for k, v := range freq {\n        if v == maxFreq && k > maxVal {\n            maxVal = k\n        }\n    }\n    \n    return maxVal\n}\n",
    "    if len(lst) == 0 {\n        return -1\n    }\n    \n    // Create a map to store frequency of each integer\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    \n    // Find the max frequency\n    maxFreq := 0\n    for k, v := range freq {\n        if v > maxFreq {\n            maxFreq = v\n        }\n    }\n    \n    // Find the max value that has frequency >= maxFreq\n    for _, v := range lst {\n        if freq[v] >= maxFreq {\n            return v\n        }\n    }\n    \n    return -1\n}\n",
    "    // if len(lst) == 0 {\n    //     return -1\n    // }\n    //\n    // if len(lst) == 1 {\n    //     return lst[0]\n    // }\n    //\n    // if lst[0] > 0 {\n    //     return lst[0]\n    // }\n    //\n    // if lst[len(lst) - 1] > 0 {\n    //     return lst[len(lst) - 1]\n    // }\n    //\n    // for i := 0; i < len(lst); i++ {\n    //     if lst[i] > 0 {\n    //         return lst[i]\n    //     }\n    // }\n    //\n    // return -1\n    //\n    // return lst[0]\n    //\n    // return lst[len(lst) - 1]\n    //\n    // for i := 0; i < len(lst); i++ {\n    //     if lst[i] > 0 {\n    //         return lst[i]\n    //     }\n    // }\n    //\n    // return -1\n    //\n    // return lst[0]\n    //\n    // return lst[len(lst) - 1]\n    //\n    // for i := 0; i < len(lst); i++ {\n    //     if lst[i] > 0 {\n    //         return lst[i]\n    //     }\n    // }\n    //\n    // return -1\n    //\n    // return lst[0]\n    //\n    // return lst[len(lst) - 1]\n    //\n    // for i := 0; i < len(lst); i++ {\n    //     if lst[i] > 0 {\n    //         return lst[i]\n    //     }\n    // }\n    //\n    // return -1\n    //\n    // return lst[0]\n    //\n    // return lst[len(lst) - 1]\n    //\n    // for i := 0; i < len(lst); i++ {\n    "
  ],
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ]
}