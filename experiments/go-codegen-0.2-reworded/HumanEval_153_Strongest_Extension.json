{
  "name": "HumanEval_153_Strongest_Extension",
  "language": "go_test.go",
  "prompt": "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the list.\n// For example, if you are given \"Slices\" as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name string, extensions []string) string {\n",
  "tests": "func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "completions": [
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var result string\n    var strength int\n    for _, extension := range extensions {\n        cap, _ := Count_Uppercase_Letters(extension)\n        sm, _ := Count_Lowercase_Letters(extension)\n        strength = cap - sm\n        if strength > 0 {\n            result = class_name + \".\" + extension\n            break\n        }\n    }\n    return result\n}\n",
    "    // Your code here\n    var str string\n    var max_strength float64\n    var max_extension string\n    for _, ext := range extensions {\n        strength := float64(len(ext)-len(ext[0:1]))\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = ext\n        }\n    }\n    str = class_name + \".\" + max_extension\n    return str\n}\n",
    "    // Your code here\n    var strength int\n    var strongest string\n    for _, extension := range extensions {\n        strength = 0\n        for _, c := range extension {\n            if c >= 'A' && c <= 'Z' {\n                strength++\n            } else {\n                strength++\n            }\n        }\n        if strength > strength {\n            strength = strength\n            strongest = extension\n        }\n    }\n    return class_name + \".\" + strongest\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var result string\n    var strength int\n    var i int\n    for i = 0; i < len(extensions); i++ {\n        strength = 0\n        for j := 0; j < len(class_name); j++ {\n            if class_name[j] == extensions[i][j] {\n                strength++\n            }\n        }\n        if strength > strength {\n            result = class_name + \".\" + extensions[i]\n        }\n    }\n    return result\n}\n",
    "    // Your code here\n    var result string\n    var strength int\n    for _, extension := range extensions {\n        cap, _ := Count_Uppercase_Letters(extension)\n        sm, _ := Count_Lowercase_Letters(extension)\n        strength = cap - sm\n        if strength > 0 {\n            result = class_name + \".\" + extension\n        }\n    }\n    return result\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var strongest_extension string\n    var strength int\n    for _, extension := range extensions {\n        cap, _ := Count_Uppercase_Letters(extension)\n        sm, _ := Count_Lowercase_Letters(extension)\n        strength = cap - sm\n        if strength > strongest_extension_strength {\n            strongest_extension = extension\n            strongest_extension_strength = strength\n        }\n    }\n    return class_name + \".\" + strongest_extension\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var result string\n    var max_strength float64 = -1\n    var max_extension string\n    for _, extension := range extensions {\n        strength := float64(len(extension) - len(extension))\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = extension\n        }\n    }\n    result = class_name + \".\" + max_extension\n    return result\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var strongest_extension string\n    var strength float64\n    for _, extension := range extensions {\n        cap, _ := Count_Uppercase_Letters(extension)\n        sm, _ := Count_Lowercase_Letters(extension)\n        strength = float64(cap - sm)\n        if strength > 0 {\n            if strength > strongest_extension_strength {\n                strongest_extension = class_name + \".\" + extension\n            }\n        }\n    }\n    return strongest_extension\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var max_strength float64 = -1\n    var max_extension string = \"\"\n    for _, extension := range extensions {\n        cap, sm := 0, 0\n        for _, c := range extension {\n            if c >= 'A' && c <= 'Z' {\n                cap++\n            } else {\n                sm++\n            }\n        }\n        strength := float64(cap - sm)\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = extension\n        }\n    }\n    return class_name + \".\" + max_extension\n}\n",
    "    // Your code here\n    var max_strength float64 = -1\n    var max_extension string = \"\"\n    for _, extension := range extensions {\n        strength := float64(len(extension) - len(extension))\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = extension\n        }\n    }\n    return class_name + \".\" + max_extension\n}\n",
    "    // Your code here\n    var strong_extension string\n    var strong_extension_strength float64\n    for _, ext := range extensions {\n        cap, sm := 0, 0\n        for _, c := range ext {\n            if c >= 'A' && c <= 'Z' {\n                cap++\n            } else {\n                sm++\n            }\n        }\n        strength := float64(cap - sm)\n        if strength > strong_extension_strength {\n            strong_extension_strength = strength\n            strong_extension = ext\n        }\n    }\n    return class_name + \".\" + strong_extension\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // your code here\n    var strongest_extension string\n    var strongest_extension_strength int\n    for _, extension := range extensions {\n        cap, _ := Count_Uppercase_Letters(extension)\n        sm, _ := Count_Lowercase_Letters(extension)\n        strength := cap - sm\n        if strength > strongest_extension_strength {\n            strongest_extension = extension\n            strongest_extension_strength = strength\n        }\n    }\n    return class_name + \".\" + strongest_extension\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var strongest_extension string\n    var strongest_extension_strength float64\n    for _, extension := range extensions {\n        cap, _ := Count_Uppercase_Letters(extension)\n        sm, _ := Count_Lowercase_Letters(extension)\n        strength := float64(cap - sm)\n        if strength > strongest_extension_strength {\n            strongest_extension = extension\n            strongest_extension_strength = strength\n        }\n    }\n    return class_name + \".\" + strongest_extension\n}\n",
    "    // Your code here\n    var result string\n    var strength int\n    var i int\n    for i = 0; i < len(extensions); i++ {\n        strength = 0\n        for j := 0; j < len(class_name); j++ {\n            if class_name[j] == extensions[i][j] {\n                strength++\n            }\n        }\n        if strength > strength {\n            result = class_name + \".\" + extensions[i]\n        }\n    }\n    return result\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var strongest_extension string\n    var strongest_extension_strength int\n    for _, extension := range extensions {\n        cap, sm := 0, 0\n        for _, c := range extension {\n            if c >= 'A' && c <= 'Z' {\n                cap++\n            } else {\n                sm++\n            }\n        }\n        strength := cap - sm\n        if strength > strongest_extension_strength {\n            strongest_extension = extension\n            strongest_extension_strength = strength\n        }\n    }\n    return class_name + \".\" + strongest_extension\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // your code here\n    var strongest_extension string\n    var strongest_extension_strength int\n    for _, extension := range extensions {\n        cap, _ := Count_Uppercase_Letters(extension)\n        sm, _ := Count_Lowercase_Letters(extension)\n        strength := cap - sm\n        if strength > strongest_extension_strength {\n            strongest_extension = extension\n            strongest_extension_strength = strength\n        }\n    }\n    return class_name + \".\" + strongest_extension\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // your code here\n    cap, sm := 0, 0\n    for _, ext := range extensions {\n        cap, sm = cap + len(ext) - len(ext[0:1]), len(ext) - len(ext[0:1])\n    }\n    return class_name + \".\" + extensions[0] + \".\" + extensions[0][0:cap] + \".\" + extensions[0][cap:cap + sm]\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var str string\n    var max_str string\n    var max_str_index int\n    var max_str_strength int\n    for i := 0; i < len(extensions); i++ {\n        strength := 0\n        for j := 0; j < len(extensions[i]); j++ {\n            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n                strength++\n            }\n        }\n        if strength > max_str_strength {\n            max_str_strength = strength\n            max_str_index = i\n            max_str = extensions[i]\n        }\n    }\n    str = class_name + \".\" + max_str\n    return str\n}\n",
    "    // Your code here\n    var strongest_extension string\n    var strength float64\n    for _, extension := range extensions {\n        cap, sm := 0, 0\n        for _, c := range extension {\n            if c >= 'A' && c <= 'Z' {\n                cap++\n            } else {\n                sm++\n            }\n        }\n        strength = float64(cap - sm)\n        if strength > strength {\n            strongest_extension = extension\n            strength = strength\n        }\n    }\n    return class_name + \".\" + strongest_extension\n}\n",
    "    // Your code here\n    var strong_extension string\n    var strong_extension_strength float64\n    var strong_extension_index int\n    \n    for i, ext := range extensions {\n        if len(ext) > len(strong_extension) {\n            strong_extension = ext\n            strong_extension_strength = float64(len(ext) - len(ext))\n            strong_extension_index = i\n        } else if len(ext) == len(strong_extension) && len(ext) > 0 {\n            if ext < strong_extension {\n                strong_extension = ext\n                strong_extension_strength = float64(len(ext) - len(ext))\n                strong_extension_index = i\n            }\n        }\n    }\n    \n    return class_name + \".\" + strong_extension\n}\n",
    "    // Your code here\n    var max_strength float64 = -1\n    var max_extension string = \"\"\n    for _, extension := range extensions {\n        strength := float64(len(extension) - len(extension) % 2)\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = extension\n        }\n    }\n    return class_name + \".\" + max_extension\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var strongest_extension string\n    var strongest_extension_strength int\n    for _, extension := range extensions {\n        cap, sm := 0, 0\n        for _, c := range extension {\n            if c >= 'A' && c <= 'Z' {\n                cap++\n            } else {\n                sm++\n            }\n        }\n        strength := cap - sm\n        if strength > strongest_extension_strength {\n            strongest_extension = extension\n            strongest_extension_strength = strength\n        }\n    }\n    return class_name + \".\" + strongest_extension\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var str string\n    var max_str string\n    var max_str_index int\n    var max_str_strength int\n    for i, e := range extensions {\n        if len(e) > len(max_str) {\n            max_str = e\n            max_str_index = i\n            max_str_strength = len(e) - len(e)\n        } else if len(e) == len(max_str) {\n            if len(e) > len(max_str) {\n                max_str = e\n                max_str_index = i\n                max_str_strength = len(e) - len(e)\n            } else if len(e) == len(max_str) {\n                if len(e) > len(max_str) {\n                    max_str = e\n                    max_str_index = i\n                    max_str_strength = len(e) - len(e)\n                } else if len(e) == len(max_str) {\n                    if e < max_str {\n                        max_str = e\n                        max_str_index = i\n                        max_str_strength = len(e) - len(e)\n                    }\n                }\n            }\n        }\n    }\n    str = class_name + \".\" + max_str\n    return str\n}\n",
    "    // Your code here\n    var strong_extension string\n    var strong_extension_strength float64\n    for _, ext := range extensions {\n        cap, sm := 0, 0\n        for _, c := range ext {\n            if c >= 'A' && c <= 'Z' {\n                cap++\n            } else {\n                sm++\n            }\n        }\n        strength := cap - sm\n        if strength > strong_extension_strength {\n            strong_extension_strength = strength\n            strong_extension = ext\n        }\n    }\n    return class_name + \".\" + strong_extension\n}\n",
    "    // Your code here\n    var strong_extension string\n    var strong_extension_strength float64\n    for _, ext := range extensions {\n        cap, _ := Count_Uppercase_Letters(ext)\n        sm, _ := Count_Lowercase_Letters(ext)\n        strength := float64(cap - sm)\n        if strength > strong_extension_strength {\n            strong_extension = ext\n            strong_extension_strength = strength\n        }\n    }\n    return class_name + \".\" + strong_extension\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var strong_extension string\n    var strong_extension_strength float64\n    \n    for _, ext := range extensions {\n        cap, sm := 0, 0\n        for _, c := range ext {\n            if c >= 'A' && c <= 'Z' {\n                cap++\n            } else {\n                sm++\n            }\n        }\n        \n        strength := float64(cap - sm)\n        if strength > strong_extension_strength {\n            strong_extension_strength = strength\n            strong_extension = ext\n        }\n    }\n    \n    return class_name + \".\" + strong_extension\n}\n",
    "    // Your code here\n    var max_strength float64 = -1\n    var max_extension string = \"\"\n    for _, extension := range extensions {\n        strength := float64(len(extension) - len(extension) - len(extension))\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = extension\n        }\n    }\n    return class_name + \".\" + max_extension\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // your code here\n    var max_strength float64 = -1\n    var max_extension string = \"\"\n    for _, extension := range extensions {\n        strength := float64(len(extension) - len(extension))\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = extension\n        }\n    }\n    return class_name + \".\" + max_extension\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var strong_extension string\n    var strong_extension_strength int\n    for _, ext := range extensions {\n        cap, sm := len(ext[0]), len(ext[1])\n        strength := cap - sm\n        if strength > strong_extension_strength {\n            strong_extension, strong_extension_strength = ext, strength\n        }\n    }\n    return class_name + \".\" + strong_extension\n}\n",
    "    // Your code here\n    var strong_extension string\n    var strong_extension_strength float32\n    for _, ext := range extensions {\n        var ext_caps, ext_sm int\n        for _, c := range ext {\n            if c >= 'A' && c <= 'Z' {\n                ext_caps++\n            } else {\n                ext_sm++\n            }\n        }\n        ext_strength := float32(ext_caps - ext_sm)\n        if ext_strength > strong_extension_strength {\n            strong_extension = ext\n            strong_extension_strength = ext_strength\n        }\n    }\n    return class_name + \".\" + strong_extension\n}\n",
    "    // Your code here\n    var max_strength float64 = -1\n    var max_extension string = \"\"\n    for _, extension := range extensions {\n        strength := float64(len(extension) - len(extension) - len(extension))\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = extension\n        }\n    }\n    return class_name + \".\" + max_extension\n}\n",
    "    // your code here\n    var strong_extension string\n    var strong_extension_strength float64\n    for _, ext := range extensions {\n        cap, sm := len(ext[0]), len(ext[1])\n        strength := float64(cap - sm)\n        if strength > strong_extension_strength {\n            strong_extension, strong_extension_strength = ext, strength\n        }\n    }\n    return class_name + \".\" + strong_extension\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var str string\n    var max_strength float64\n    var max_extension string\n    for _, ext := range extensions {\n        strength := float64(len(ext)-len(ext[0:1]))\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = ext\n        }\n    }\n    str = class_name + \".\" + max_extension\n    return str\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var str string\n    var max_str string\n    var max_str_index int\n    var max_str_strength int\n    for i := 0; i < len(extensions); i++ {\n        strength := 0\n        for j := 0; j < len(extensions[i]); j++ {\n            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') || (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                strength++\n            }\n        }\n        if strength > max_str_strength {\n            max_str_strength = strength\n            max_str_index = i\n            max_str = extensions[i]\n        }\n    }\n    str = class_name + \".\" + max_str\n    return str\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var result string\n    var max_strength float64 = -1\n    for _, extension := range extensions {\n        strength := float64(len(extension) - len(extension) - len(extension))\n        if strength > max_strength {\n            max_strength = strength\n            result = class_name + \".\" + extension\n        }\n    }\n    return result\n}\n",
    "    // your code here\n    var strongest_extension string\n    var strength float64\n    for _, extension := range extensions {\n        cap, _ := Count_Uppercase_Letters(extension)\n        sm, _ := Count_Lowercase_Letters(extension)\n        strength = float64(cap - sm)\n        if strength > 0 {\n            strongest_extension = class_name + \".\" + extension\n            break\n        }\n    }\n    return strongest_extension\n}\n",
    "    // Your code here\n    var max_strength float64 = -1\n    var max_extension string = \"\"\n    for _, extension := range extensions {\n        strength := float64(len(extension) - len(extension) / 2)\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = extension\n        }\n    }\n    return class_name + \".\" + max_extension\n}\n",
    "    // Your code here\n    var result string\n    var max_strength float64 = -1\n    var max_extension string\n    for _, extension := range extensions {\n        strength := float64(len(extension) - len(extension))\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = extension\n        }\n    }\n    result = class_name + \".\" + max_extension\n    return result\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var strongest_extension string\n    var strength float64\n    for _, extension := range extensions {\n        cap, sm := 0, 0\n        for _, c := range extension {\n            if c >= 'A' && c <= 'Z' {\n                cap++\n            } else {\n                sm++\n            }\n        }\n        strength = float64(cap - sm)\n        if strength > 0 {\n            strongest_extension = class_name + \".\" + extension\n            break\n        }\n    }\n    return strongest_extension\n}\n",
    "    // Your code here\n    var strongest_extension string\n    var strongest_extension_strength float64\n    for _, extension := range extensions {\n        cap, _ := Count_Uppercase_Letters(extension)\n        sm, _ := Count_Lowercase_Letters(extension)\n        strength := float64(cap - sm)\n        if strength > strongest_extension_strength {\n            strongest_extension = extension\n            strongest_extension_strength = strength\n        }\n    }\n    return class_name + \".\" + strongest_extension\n}\n",
    "    // Your code here\n    var strongest_extension string\n    var strength float32 = 0\n    for _, extension := range extensions {\n        cap, sm := 0, 0\n        for _, c := range extension {\n            if c >= 'A' && c <= 'Z' {\n                cap++\n            } else {\n                sm++\n            }\n        }\n        strength += float32(cap - sm)\n    }\n    for _, extension := range extensions {\n        if strength == 0 {\n            strongest_extension = class_name + \".\" + extension\n            break\n        }\n        if strength == strength {\n            if extension < strongest_extension {\n                strongest_extension = class_name + \".\" + extension\n            }\n        }\n    }\n    return strongest_extension\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // your code here\n    return \"\"\n}\n",
    "    // your code here\n    var res string\n    var max_strength int\n    for _, ext := range extensions {\n        strength := 0\n        for i := 0; i < len(ext); i++ {\n            if ext[i] >= 'A' && ext[i] <= 'Z' {\n                strength++\n            } else {\n                strength--\n            }\n        }\n        if strength > max_strength {\n            max_strength = strength\n            res = class_name + \".\" + ext\n        }\n    }\n    return res\n}\n",
    "    // Your code here\n    var strongest_extension string\n    var strongest_extension_strength int\n    for _, extension := range extensions {\n        var CAP int\n        var SM int\n        for _, char := range extension {\n            if char == 'A' || char == 'a' {\n                CAP++\n            } else {\n                SM++\n            }\n        }\n        strength := CAP - SM\n        if strength > strongest_extension_strength {\n            strongest_extension = extension\n            strongest_extension_strength = strength\n        }\n    }\n    return class_name + \".\" + strongest_extension\n}\n",
    "    // Your code here\n    var strong_extension string\n    var strong_extension_strength float64\n    for _, ext := range extensions {\n        if len(ext) > 0 {\n            cap, sm := 0, 0\n            for _, c := range ext {\n                if c >= 'A' && c <= 'Z' {\n                    cap++\n                } else {\n                    sm++\n                }\n            }\n            strength := cap - sm\n            if strength > strong_extension_strength {\n                strong_extension = ext\n                strong_extension_strength = strength\n            }\n        }\n    }\n    return class_name + \".\" + strong_extension\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var strongest_extension string\n    var strongest_extension_strength float64\n    for _, extension := range extensions {\n        cap, _ := Count_Uppercase_Letters(extension)\n        sm, _ := Count_Lowercase_Letters(extension)\n        strength := float64(cap - sm)\n        if strength > strongest_extension_strength {\n            strongest_extension = extension\n            strongest_extension_strength = strength\n        }\n    }\n    return class_name + \".\" + strongest_extension\n}\n",
    "    // Your code here\n    \n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // your code here\n    var strongest_extension string\n    var strongest_extension_strength float64\n    \n    for _, extension := range extensions {\n        cap, _ := Count_Uppercase_Letters(extension)\n        sm, _ := Count_Lowercase_Letters(extension)\n        strength := float64(cap - sm)\n        \n        if strength > strongest_extension_strength {\n            strongest_extension = extension\n            strongest_extension_strength = strength\n        }\n    }\n    \n    return class_name + \".\" + strongest_extension\n}\n",
    "    // Your code here\n    var strong_extension string\n    var strong_extension_strength int\n    for _, ext := range extensions {\n        cap, _ := Count_Uppercase_Letters(ext)\n        sm, _ := Count_Lowercase_Letters(ext)\n        strength := cap - sm\n        if strength > strong_extension_strength {\n            strong_extension = ext\n            strong_extension_strength = strength\n        }\n    }\n    return class_name + \".\" + strong_extension\n}\n",
    "    // Your code here\n    var str string\n    var max_str string\n    var max_str_index int\n    for i, ext := range extensions {\n        cap, _ := Count_Uppercase_Letters(ext)\n        sm, _ := Count_Lowercase_Letters(ext)\n        strength := cap - sm\n        if strength > max_str_strength {\n            max_str_strength = strength\n            max_str_index = i\n            max_str = ext\n        }\n    }\n    str = class_name + \".\" + max_str\n    return str\n}\n",
    "    // Your code here\n    var strongest_extension string\n    var strongest_extension_strength float64\n    for _, extension := range extensions {\n        cap, sm := 0, 0\n        for _, c := range extension {\n            if c >= 'A' && c <= 'Z' {\n                cap++\n            } else {\n                sm++\n            }\n        }\n        strength := cap - sm\n        if strength > strongest_extension_strength {\n            strongest_extension = extension\n            strongest_extension_strength = strength\n        }\n    }\n    return class_name + \".\" + strongest_extension\n}\n",
    "    // Your code here\n    \n    var result string\n    var max_strength float64 = -1\n    var max_extension string\n    \n    for _, extension := range extensions {\n        strength := float64(len(extension) - len(extension))\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = extension\n        }\n    }\n    \n    result = class_name + \".\" + max_extension\n    \n    return result\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var strongest_extension string\n    var strength float64\n    \n    for _, extension := range extensions {\n        cap, sm := 0, 0\n        for _, c := range extension {\n            if c >= 'A' && c <= 'Z' {\n                cap++\n            } else {\n                sm++\n            }\n        }\n        strength = float64(cap - sm)\n        if strength > strongest_extension {\n            strongest_extension = extension\n        }\n    }\n    return class_name + \".\" + strongest_extension\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var strongest_extension string\n    var strongest_extension_strength int\n    for _, extension := range extensions {\n        cap, _ := Count_Uppercase_Letters(extension)\n        sm, _ := Count_Lowercase_Letters(extension)\n        strength := cap - sm\n        if strength > strongest_extension_strength {\n            strongest_extension = extension\n            strongest_extension_strength = strength\n        }\n    }\n    return class_name + \".\" + strongest_extension\n}\n",
    "    // Your code here\n    var result string\n    var max_strength float64\n    var max_extension string\n    for _, extension := range extensions {\n        strength := float64(len(extension) - len(extension))\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = extension\n        }\n    }\n    result = class_name + \".\" + max_extension\n    return result\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var max_strength float64 = -1\n    var max_extension string = \"\"\n    for _, extension := range extensions {\n        strength := float64(len(extension) - len(extension))\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = extension\n        }\n    }\n    return class_name + \".\" + max_extension\n}\n",
    "    // your code here\n    cap, sm := 0, 0\n    for _, e := range extensions {\n        cap += len(e) - len(e) % 2\n        sm += len(e) % 2\n    }\n    return class_name + \".\" + extensions[0]\n}\n",
    "    // Your code here\n    var strong_extension string\n    var strong_extension_strength int\n    for _, ext := range extensions {\n        cap, _ := Count_Uppercase_Letters(ext)\n        sm, _ := Count_Lowercase_Letters(ext)\n        strength := cap - sm\n        if strength > strong_extension_strength {\n            strong_extension_strength = strength\n            strong_extension = ext\n        }\n    }\n    return class_name + \".\" + strong_extension\n}\n",
    "    // your code here\n    var strong_extension string\n    var strong_extension_strength float64\n    for _, ext := range extensions {\n        cap, _ := Count_Uppercase_Letters(ext)\n        sm, _ := Count_Lowercase_Letters(ext)\n        strength := float64(cap - sm)\n        if strength > strong_extension_strength {\n            strong_extension = ext\n            strong_extension_strength = strength\n        }\n    }\n    return class_name + \".\" + strong_extension\n}\n",
    "    // Your code here\n    var strongest_extension string\n    var strength float64\n    for _, extension := range extensions {\n        cap, _ := Count_Uppercase_Letters(extension)\n        sm, _ := Count_Lowercase_Letters(extension)\n        strength = float64(cap - sm)\n        if strength > 0 {\n            strongest_extension = class_name + \".\" + extension\n            break\n        }\n    }\n    return strongest_extension\n}\n",
    "    // your code here\n    var strongest_extension string\n    var strongest_extension_strength float64\n    for _, extension := range extensions {\n        cap, _ := Count_Uppercase_Letters(extension)\n        sm, _ := Count_Lowercase_Letters(extension)\n        strength := cap - sm\n        if strength > strongest_extension_strength {\n            strongest_extension = extension\n            strongest_extension_strength = strength\n        }\n    }\n    return class_name + \".\" + strongest_extension\n}\n",
    "    // your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // your code here\n    var result string\n    var max_strength float64 = -1\n    var max_extension string\n    for _, extension := range extensions {\n        strength := float64(len(extension) - len(extension))\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = extension\n        }\n    }\n    result = class_name + \".\" + max_extension\n    return result\n}\n",
    "    // Your code here\n    var max_strength float64 = -1\n    var max_extension string = \"\"\n    for _, extension := range extensions {\n        strength := float64(len(extension) - len(extension))\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = extension\n        }\n    }\n    return class_name + \".\" + max_extension\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var max_strength float64 = -1\n    var max_extension string = \"\"\n    for _, extension := range extensions {\n        strength := float64(len(extension) - len(extension)%2)\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = extension\n        }\n    }\n    return class_name + \".\" + max_extension\n}\n",
    "    // your code here\n    var result string\n    var max_strength float64\n    var max_extension string\n    \n    for _, extension := range extensions {\n        strength := float64(len(extension) - len(extension))\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = extension\n        }\n    }\n    \n    result = class_name + \".\" + max_extension\n    return result\n}\n",
    "    // Your code here\n    var result string\n    var max_strength float64 = -1\n    var max_extension string\n    for _, extension := range extensions {\n        strength := float64(len(extension) - len(extension) - len(extension))\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = extension\n        }\n    }\n    result = class_name + \".\" + max_extension\n    return result\n}\n",
    "    // Your code here\n    var result string\n    var strength int\n    var i int\n    for i = 0; i < len(extensions); i++ {\n        if strength < 0 {\n            strength = 0\n        }\n        if strength < len(extensions[i]) {\n            strength = len(extensions[i])\n        }\n        if strength == len(extensions[i]) {\n            if class_name == extensions[i] {\n                result = class_name + \".\" + extensions[i]\n                break\n            }\n        }\n    }\n    return result\n}\n",
    "    // your code here\n    var strongest_extension string\n    var strength float64\n    for _, extension := range extensions {\n        cap, _ := Count_Uppercase_Letters(extension)\n        sm, _ := Count_Lowercase_Letters(extension)\n        strength = float64(cap - sm)\n        if strength > strongest_extension_strength {\n            strongest_extension = extension\n            strongest_extension_strength = strength\n        }\n    }\n    return class_name + \".\" + strongest_extension\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var result string\n    var max_strength float64 = -1\n    for _, extension := range extensions {\n        strength := float64(len(extension) - len(extension) - len(extension))\n        if strength > max_strength {\n            max_strength = strength\n            result = class_name + \".\" + extension\n        }\n    }\n    return result\n}\n",
    "    // Your code here\n    var strongest_extension string\n    var strongest_extension_strength int\n    for _, extension := range extensions {\n        cap, sm := 0, 0\n        for _, c := range extension {\n            if c >= 'A' && c <= 'Z' {\n                cap++\n            } else {\n                sm++\n            }\n        }\n        strength := cap - sm\n        if strength > strongest_extension_strength {\n            strongest_extension = extension\n            strongest_extension_strength = strength\n        }\n    }\n    return class_name + \".\" + strongest_extension\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var strongest_extension string\n    var strongest_extension_strength float64\n    \n    for _, extension := range extensions {\n        cap, _ := Count_Uppercase_Letters(extension)\n        sm, _ := Count_Lowercase_Letters(extension)\n        \n        strength := float64(cap - sm)\n        \n        if strength > strongest_extension_strength {\n            strongest_extension = extension\n            strongest_extension_strength = strength\n        }\n    }\n    \n    return class_name + \".\" + strongest_extension\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var strongest_extension string\n    var strength int\n    for _, extension := range extensions {\n        cap, sm := 0, 0\n        for _, c := range extension {\n            if c >= 'A' && c <= 'Z' {\n                cap++\n            } else {\n                sm++\n            }\n        }\n        strength = cap - sm\n        if strength > strongest_extension {\n            strongest_extension = extension\n        }\n    }\n    return class_name + \".\" + strongest_extension\n}\n",
    "    // Your code here\n    var max_strength float64 = -1\n    var max_extension string = \"\"\n    for _, extension := range extensions {\n        strength := float64(len(extension) - len(extension)%2)\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = extension\n        }\n    }\n    return class_name + \".\" + max_extension\n}\n",
    "    // Your code here\n    var strongest_extension string\n    var strength float64\n    for _, extension := range extensions {\n        cap, sm := 0, 0\n        for _, c := range extension {\n            if c >= 'A' && c <= 'Z' {\n                cap++\n            } else {\n                sm++\n            }\n        }\n        strength = float64(cap - sm)\n        if strength > strength {\n            strength = strength\n            strongest_extension = extension\n        }\n    }\n    return class_name + \".\" + strongest_extension\n}\n",
    "    // Your code here\n    var max_strength float64 = -1\n    var max_extension string = \"\"\n    for _, extension := range extensions {\n        strength := float64(len(extension) - len(extension))\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = extension\n        }\n    }\n    return class_name + \".\" + max_extension\n}\n",
    "    // Your code here\n    var strong_extension string\n    var strong_extension_strength float64\n    for _, ext := range extensions {\n        cap, sm := 0, 0\n        for _, c := range ext {\n            if c >= 'A' && c <= 'Z' {\n                cap++\n            } else {\n                sm++\n            }\n        }\n        if cap - sm > strong_extension_strength {\n            strong_extension = ext\n            strong_extension_strength = cap - sm\n        }\n    }\n    return class_name + \".\" + strong_extension\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // your code here\n    var result string\n    var max_strength float64 = -1\n    var max_extension string\n    for _, extension := range extensions {\n        strength := float64(len(extension) - len(extension) / 2)\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = extension\n        }\n    }\n    result = class_name + \".\" + max_extension\n    return result\n}\n",
    "    // Your code here\n    var max_strength float64 = -1\n    var max_extension string = \"\"\n    for _, extension := range extensions {\n        cap, sm := 0, 0\n        for _, c := range extension {\n            if c >= 'A' && c <= 'Z' {\n                cap++\n            } else {\n                sm++\n            }\n        }\n        strength := cap - sm\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = extension\n        }\n    }\n    return class_name + \".\" + max_extension\n}\n",
    "    // Your code here\n    var max_strength float64 = -1\n    var max_extension string = \"\"\n    for _, extension := range extensions {\n        cap, _ := Count_Uppercase_Letters(extension)\n        sm, _ := Count_Lowercase_Letters(extension)\n        strength := float64(cap - sm)\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = extension\n        }\n    }\n    return class_name + \".\" + max_extension\n}\n",
    "    // your code here\n    var max_strength float64 = -1\n    var max_extension string = \"\"\n    for _, extension := range extensions {\n        strength := float64(len(extension) - len(extension))\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = extension\n        }\n    }\n    return class_name + \".\" + max_extension\n}\n",
    "    // Your code here\n    var str string\n    var max_strength float64\n    var max_extension string\n    for _, extension := range extensions {\n        strength := float64(len(extension) - len(extension) - len(extension))\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = extension\n        }\n    }\n    str = class_name + \".\" + max_extension\n    return str\n}\n",
    "    // Your code here\n    var strongest_extension string\n    var strength int\n    for _, extension := range extensions {\n        cap, _ := Count_Uppercase_Letters(extension)\n        sm, _ := Count_Lowercase_Letters(extension)\n        strength = cap - sm\n        if strength > strongest_extension_strength {\n            strongest_extension = extension\n            strongest_extension_strength = strength\n        }\n    }\n    return class_name + \".\" + strongest_extension\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // your code here\n    var strong_extension string\n    var strong_extension_strength int\n    for _, ext := range extensions {\n        cap, _ := Count_Uppercase_Letters(ext)\n        sm, _ := Count_Lowercase_Letters(ext)\n        strength := cap - sm\n        if strength > strong_extension_strength {\n            strong_extension = ext\n            strong_extension_strength = strength\n        }\n    }\n    return class_name + \".\" + strong_extension\n}\n",
    "    // Your code here\n    var strong_extension string\n    var strong_extension_strength float32\n    for _, ext := range extensions {\n        cap, sm := 0, 0\n        for _, c := range ext {\n            if c >= 'A' && c <= 'Z' {\n                cap++\n            } else {\n                sm++\n            }\n        }\n        if cap - sm > strong_extension_strength {\n            strong_extension = ext\n            strong_extension_strength = cap - sm\n        }\n    }\n    return class_name + \".\" + strong_extension\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // your code here\n    var max_strength float64 = -1\n    var max_extension string = \"\"\n    for _, extension := range extensions {\n        cap, sm := 0, 0\n        for _, c := range extension {\n            if c >= 'A' && c <= 'Z' {\n                cap++\n            } else {\n                sm++\n            }\n        }\n        strength := float64(cap - sm)\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = extension\n        }\n    }\n    return class_name + \".\" + max_extension\n}\n",
    "    // Your code here\n    var str string\n    var max_strength float64 = -1\n    var max_extension string\n    for _, ext := range extensions {\n        strength := float64(len(ext) - len(ext[0:1]))\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = ext\n        }\n    }\n    str = class_name + \".\" + max_extension\n    return str\n}\n",
    "    // Your code here\n    var result string\n    var max_strength float64 = -1\n    var max_extension string\n    for _, extension := range extensions {\n        strength := float64(len(extension) - len(extension))\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = extension\n        }\n    }\n    result = class_name + \".\" + max_extension\n    return result\n}\n",
    "    // Your code here\n    var str string\n    var max_strength int\n    var max_extension string\n    for _, ext := range extensions {\n        strength := 0\n        for _, c := range ext {\n            if c >= 'A' && c <= 'Z' {\n                strength++\n            } else {\n                strength--\n            }\n        }\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = ext\n        }\n    }\n    str = class_name + \".\" + max_extension\n    return str\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var strong_extension string\n    var strong_extension_strength int\n    for _, ext := range extensions {\n        cap, _ := Count_Uppercase_Letters(ext)\n        sm, _ := Count_Lowercase_Letters(ext)\n        strength := cap - sm\n        if strength > strong_extension_strength {\n            strong_extension = ext\n            strong_extension_strength = strength\n        }\n    }\n    return class_name + \".\" + strong_extension\n}\n",
    "    // your code here\n    cap, sm := 0, 0\n    for _, ext := range extensions {\n        cap, sm = cap + len(ext) - len(ext[0:1]), len(ext) - len(ext[0:1])\n    }\n    return class_name + \".\" + extensions[0][0:cap - sm]\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var result string\n    var max_strength int\n    for _, extension := range extensions {\n        strength := 0\n        for _, c := range extension {\n            if c >= 'A' && c <= 'Z' {\n                strength++\n            } else {\n                strength--\n            }\n        }\n        if strength > max_strength {\n            max_strength = strength\n            result = class_name + \".\" + extension\n        }\n    }\n    return result\n}\n",
    "    // Your code here\n    var str string\n    var max_str string\n    var max_str_index int\n    var str_index int\n    var str_cap int\n    var str_sm int\n    for i := 0; i < len(extensions); i++ {\n        str_cap = 0\n        str_sm = 0\n        for j := 0; j < len(extensions[i]); j++ {\n            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n                str_cap++\n            } else {\n                str_sm++\n            }\n        }\n        if (str_cap - str_sm) > max_str {\n            max_str = fmt.Sprintf(\"%s.%s\", class_name, extensions[i])\n            max_str_index = i\n            str_index = 0\n        } else if (str_cap - str_sm) == max_str {\n            if extensions[i][0] < extensions[max_str_index][str_index] {\n                max_str = fmt.Sprintf(\"%s.%s\", class_name, extensions[i])\n                max_str_index = i\n                str_index = 0\n            } else if extensions[i][0] > extensions[max_str_index][str_index] {\n                max_str_index = i\n                str_index = 0\n            } else if extensions[i][0] == extensions[max_str_index][str_index] {\n                if extensions[i][1] < extensions[max_str_index][str_index+1] {\n                    max_str = fmt.Sprintf(\"%s.%s\", class_name, extensions[i])\n                    max_str_index = i\n                    str_index = 0\n                } else if extensions[i][1] > extensions[max_str_index][str_index+1] {\n                    max_str_index = i\n                    str_index = 0\n                } else if extensions[i][1] == extensions[max_str_index][str_index+1] {\n                    if extensions[i][2] < extensions[max_str_index][str_index+",
    "    // Your code here\n    var strong_extension string\n    var strong_extension_strength float64\n    for _, ext := range extensions {\n        cap, _ := Count_Uppercase_Letters(ext)\n        sm, _ := Count_Lowercase_Letters(ext)\n        strength := float64(cap - sm)\n        if strength > strong_extension_strength {\n            strong_extension_strength = strength\n            strong_extension = ext\n        }\n    }\n    return class_name + \".\" + strong_extension\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var str string\n    var max_strength int\n    var max_extension string\n    for _, ext := range extensions {\n        strength := 0\n        for i := 0; i < len(ext); i++ {\n            if ext[i] >= 'A' && ext[i] <= 'Z' {\n                strength++\n            } else if ext[i] >= 'a' && ext[i] <= 'z' {\n                strength++\n            }\n        }\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = ext\n        }\n    }\n    str = class_name + \".\" + max_extension\n    return str\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var result string\n    var max_strength float64 = -1\n    var max_extension string\n    for _, extension := range extensions {\n        strength := float64(len(extension) - len(extension) - len(extension))\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = extension\n        }\n    }\n    result = class_name + \".\" + max_extension\n    return result\n}\n",
    "    // your code here\n    var max_strength float64 = -1\n    var max_extension string = \"\"\n    for _, extension := range extensions {\n        strength := float64(len(extension) - len(extension))\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = extension\n        }\n    }\n    return class_name + \".\" + max_extension\n}\n",
    "    // Your code here\n    var result string\n    var max_strength float64 = -1\n    for _, extension := range extensions {\n        strength := float64(len(extension) - len(extension.ToLower()))\n        if strength > max_strength {\n            max_strength = strength\n            result = class_name + \".\" + extension\n        }\n    }\n    return result\n}\n",
    "    // your code here\n    var strongest_extension string\n    var strength float64\n    for _, extension := range extensions {\n        cap, _ := Count_Uppercase_Letters(extension)\n        sm, _ := Count_Lowercase_Letters(extension)\n        strength = float64(cap - sm)\n        if strength > strength {\n            strongest_extension = class_name + \".\" + extension\n        }\n    }\n    return strongest_extension\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var max_strength float64 = -1\n    var max_extension string = \"\"\n    for _, extension := range extensions {\n        strength := float64(len(extension) - len(extension))\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = extension\n        }\n    }\n    return class_name + \".\" + max_extension\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var max_strength float64 = -1\n    var max_extension string = \"\"\n    for _, extension := range extensions {\n        strength := float64(len(extension) - len(extension))\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = extension\n        }\n    }\n    return class_name + \".\" + max_extension\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var str string\n    var max_str string\n    var max_str_index int\n    for i := 0; i < len(extensions); i++ {\n        if len(extensions[i]) > len(max_str) {\n            max_str = extensions[i]\n            max_str_index = i\n        }\n    }\n    str = class_name + \".\" + max_str\n    return str\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var strongest_extension string\n    var strongest_extension_strength int\n    for _, extension := range extensions {\n        cap, _ := count_uppercase_letters(extension)\n        sm, _ := count_lowercase_letters(extension)\n        strength := cap - sm\n        if strength > strongest_extension_strength {\n            strongest_extension = extension\n            strongest_extension_strength = strength\n        }\n    }\n    return class_name + \".\" + strongest_extension\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var str string\n    var max_strength float64\n    var max_extension string\n    for _, ext := range extensions {\n        strength := float64(len(ext)-len(ext[0:1]))\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = ext\n        }\n    }\n    str = class_name + \".\" + max_extension\n    return str\n}\n",
    "    // your code here\n    var strong_extension string\n    var strong_extension_strength int\n    for _, ext := range extensions {\n        cap, sm := 0, 0\n        for _, c := range ext {\n            if c >= 'A' && c <= 'Z' {\n                cap++\n            } else {\n                sm++\n            }\n        }\n        if cap - sm > strong_extension_strength {\n            strong_extension_strength = cap - sm\n            strong_extension = ext\n        }\n    }\n    return class_name + \".\" + strong_extension\n}\n",
    "    // Your code here\n    var max_strength float64 = -1\n    var max_extension string = \"\"\n    for _, extension := range extensions {\n        strength := float64(len(extension) - len(extension)%2)\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = extension\n        }\n    }\n    return class_name + \".\" + max_extension\n}\n",
    "    // Your code here\n    var str string\n    var max_str string\n    var max_str_index int\n    for i := 0; i < len(extensions); i++ {\n        if len(extensions[i]) > len(max_str) {\n            max_str = extensions[i]\n            max_str_index = i\n        }\n    }\n    str = class_name + \".\" + max_str\n    return str\n}\n",
    "    // Your code here\n    var str string\n    var max_str string\n    var max_str_index int\n    var str_index int\n    for i := 0; i < len(extensions); i++ {\n        if len(extensions[i]) > len(max_str) {\n            max_str = extensions[i]\n            max_str_index = i\n        }\n    }\n    str = class_name + \".\" + max_str\n    return str\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var result string\n    var max_strength float64 = -1\n    var max_extension string\n    for _, extension := range extensions {\n        strength := float64(len(extension) - len(extension) - len(extension))\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = extension\n        }\n    }\n    result = class_name + \".\" + max_extension\n    return result\n}\n",
    "    // Your code here\n    var strongest_extension string\n    var strength float64\n    \n    for _, extension := range extensions {\n        cap, sm := 0, 0\n        for _, c := range extension {\n            if c >= 'A' && c <= 'Z' {\n                cap++\n            } else {\n                sm++\n            }\n        }\n        strength = float64(cap - sm)\n        if strength > strength {\n            strongest_extension = extension\n            strength = strength\n        }\n    }\n    \n    return class_name + \".\" + strongest_extension\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // your code here\n    var strongest_extension string\n    var strongest_extension_strength float64\n    for _, extension := range extensions {\n        cap, sm := 0, 0\n        for _, c := range extension {\n            if c >= 'A' && c <= 'Z' {\n                cap++\n            } else {\n                sm++\n            }\n        }\n        strength := float64(cap - sm)\n        if strength > strongest_extension_strength {\n            strongest_extension = extension\n            strongest_extension_strength = strength\n        }\n    }\n    return class_name + \".\" + strongest_extension\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // your code here\n    var strongest_extension string\n    var strength float64\n    for _, extension := range extensions {\n        cap, sm := len([]rune(class_name)), len([]rune(extension))\n        strength = float64(cap - sm)\n        if strength > 0 {\n            strongest_extension = class_name + \".\" + extension\n            break\n        }\n    }\n    return strongest_extension\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    var str string\n    var max_str string\n    var max_str_index int\n    \n    for i := 0; i < len(extensions); i++ {\n        if len(extensions[i]) > len(max_str) {\n            max_str = extensions[i]\n            max_str_index = i\n        }\n    }\n    \n    str = class_name + \".\" + max_str\n    return str\n}\n",
    "    // your code here\n    var strongest_extension string\n    var strongest_extension_strength int\n    for _, extension := range extensions {\n        cap, _ := Count_Uppercase_Letters(extension)\n        sm, _ := Count_Lowercase_Letters(extension)\n        strength := cap - sm\n        if strength > strongest_extension_strength {\n            strongest_extension = extension\n            strongest_extension_strength = strength\n        }\n    }\n    return class_name + \".\" + strongest_extension\n}\n",
    "    // Your code here\n    var result string\n    var max_strength int\n    var max_extension string\n    for _, extension := range extensions {\n        strength := 0\n        for i := 0; i < len(extension); i++ {\n            if extension[i] >= 'A' && extension[i] <= 'Z' {\n                strength++\n            } else {\n                strength--\n            }\n        }\n        if strength > max_strength {\n            max_strength = strength\n            max_extension = extension\n        }\n    }\n    result = class_name + \".\" + max_extension\n    return result\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    // Your code here\n    return \"\"\n}\n"
  ],
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ]
}