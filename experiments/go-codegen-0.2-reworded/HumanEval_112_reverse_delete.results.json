{
  "name": "HumanEval_112_reverse_delete",
  "language": "go_test.go",
  "prompt": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n",
  "tests": "func TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            isPalindrome = true\n            for j := 1; j < len(c); j++ {\n                if s[i - j] != c[j] {\n                    isPalindrome = false\n                    break\n                }\n            }\n            if isPalindrome {\n                s = s[0:i] + s[i+1:]\n            }\n        }\n    }\n    result = []interface{}{s, isPalindrome}\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(0x545605, 0x5, 0x5452ff, 0x2, 0x0, 0x58a6ff, 0x3b)\n\t/tmp/tmpvopjm18d_test.go:27 +0x214\ncommand-line-arguments_test.TestReverse_Delete(0xc000102600)\n\t/tmp/tmpvopjm18d_test.go:48 +0x6b\ntesting.tRunner(0xc000102600, 0x54f228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    var result string\n    var is_palindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = result + s[i]\n            c = c[1:]\n        } else {\n            break\n        }\n    }\n    if len(c) == 0 {\n        is_palindrome = true\n    }\n    return []interface{}{result, is_palindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi5odp0mb_test.go:26:29: invalid operation: result + s[i] (mismatched types string and byte)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                s = s[0:i] + s[i+1:]\n                isPalindrome = true\n                break\n            }\n        }\n    }\n    result = append(result, s)\n    result = append(result, isPalindrome)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[bcd %!s(bool=false)]', got '[bcd %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // fmt.Printf(\"s: %s, c: %s\\n\", s, c)\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] == c[0] {\n            result = append(result, fmt.Sprintf(\"%s\", s[i:len(s)-i]))\n            break\n        }\n    }\n    if len(result) == 0 {\n        result = append(result, fmt.Sprintf(\"%s\", s))\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpewlbdq4j_test.go:59: expected '[bcd %!s(bool=false)]', got '[abcde]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpewlbdq4j_test.go:59: expected '[acdef %!s(bool=false)]', got '[bcde]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpewlbdq4j_test.go:59: expected '[cdedc %!s(bool=true)]', got '[abcdedcba]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpewlbdq4j_test.go:59: expected '[dik %!s(bool=false)]', got '[wi]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpewlbdq4j_test.go:59: expected '[ %!s(bool=true)]', got '[a]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpewlbdq4j_test.go:59: expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpewlbdq4j_test.go:59: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmpewlbdq4j_test.go:59: expected '[abba %!s(bool=true)]', got '[vabba]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpewlbdq4j_test.go:59: expected '[ %!s(bool=true)]', got '[mamma]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            s = s[0:i] + s[i+1:]\n        }\n    }\n    if s == s[::-1] {\n        result = append(result, s, true)\n    } else {\n        result = append(result, s, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374747,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpeu7rmpjd_test.go:30:15: 2nd index required in 3-index slice\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    var result string\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = s[i:len(s)]\n            isPalindrome = true\n            for j := 0; j < len(c); j++ {\n                if s[i] != c[j] {\n                    isPalindrome = false\n                    break\n                }\n            }\n            break\n        }\n    }\n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmptw_nxg_2_test.go:64: expected '[bcd %!s(bool=false)]', got '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmptw_nxg_2_test.go:64: expected '[acdef %!s(bool=false)]', got '[bcdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmptw_nxg_2_test.go:64: expected '[cdedc %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmptw_nxg_2_test.go:64: expected '[dik %!s(bool=false)]', got '[wik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmptw_nxg_2_test.go:64: expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmptw_nxg_2_test.go:64: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmptw_nxg_2_test.go:64: expected '[abcdedcba %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmptw_nxg_2_test.go:64: expected '[abba %!s(bool=true)]', got '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmptw_nxg_2_test.go:64: expected '[ %!s(bool=true)]', got '[ma %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:i+1])\n            c = c[1:]\n            if len(c) == 0 {\n                break\n            }\n        }\n    }\n    if len(c) > 0 {\n        return result\n    }\n    if len(s) == len(result) {\n        if s == result[0].(string) {\n            result = append(result, true)\n        } else {\n            result = append(result, false)\n        }\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpwfmsu0vw_test.go:68: expected '[bcd %!s(bool=false)]', got '[a]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpwfmsu0vw_test.go:68: expected '[acdef %!s(bool=false)]', got '[b]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpwfmsu0vw_test.go:68: expected '[cdedc %!s(bool=true)]', got '[a b]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpwfmsu0vw_test.go:68: expected '[dik %!s(bool=false)]', got '[w]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpwfmsu0vw_test.go:68: expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpwfmsu0vw_test.go:68: expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpwfmsu0vw_test.go:68: expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmpwfmsu0vw_test.go:68: expected '[abba %!s(bool=true)]', got '[v]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpwfmsu0vw_test.go:68: expected '[ %!s(bool=true)]', got '[m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:i+1])\n            s = s[:i] + s[i+1:]\n        }\n    }\n    if len(s) > 0 {\n        result = append(result, s)\n    }\n    result = append(result, fmt.Sprintf(\"%v\", len(s) == 0))\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(0x54606e, 0x9, 0x0, 0x0, 0xc000156080, 0x2, 0x2)\n\t/tmp/tmpp08gexn__test.go:23 +0x43c\ncommand-line-arguments_test.TestReverse_Delete(0xc000102600)\n\t/tmp/tmpp08gexn__test.go:47 +0x237\ntesting.tRunner(0xc000102600, 0x54f228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    \n    var result string\n    var isPalindrome bool\n    \n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = s[i:] + result\n            c = c[1:]\n            if len(c) == 0 {\n                isPalindrome = true\n                break\n            }\n        }\n    }\n    \n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmppnt0u0fa_test.go:64: expected '[bcd %!s(bool=false)]', got '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmppnt0u0fa_test.go:64: expected '[acdef %!s(bool=false)]', got '[bcdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmppnt0u0fa_test.go:64: expected '[cdedc %!s(bool=true)]', got '[baa %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmppnt0u0fa_test.go:64: expected '[dik %!s(bool=false)]', got '[wik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmppnt0u0fa_test.go:64: expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmppnt0u0fa_test.go:64: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmppnt0u0fa_test.go:64: expected '[abcdedcba %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmppnt0u0fa_test.go:64: expected '[abba %!s(bool=true)]', got '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmppnt0u0fa_test.go:64: expected '[ %!s(bool=true)]', got '[ma %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if c[0] == s[i] {\n            s = s[0:i] + s[i+1:]\n            c = c[1:]\n        }\n    }\n    if s == s[::-1] {\n        result = append(result, s)\n        result = append(result, true)\n    } else {\n        result = append(result, s)\n        result = append(result, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374747,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp3sf2q0fw_test.go:31:15: 2nd index required in 3-index slice\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:i+1])\n            c = c[1:]\n        }\n    }\n    if len(c) == 0 {\n        result = append(result, s)\n    }\n    if len(c) > 0 {\n        result = append(result, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(0x545852, 0x6, 0x545278, 0x0, 0xc0000a4020, 0x2, 0x2)\n\t/tmp/tmp1zsc0qnx_test.go:27 +0x385\ncommand-line-arguments_test.TestReverse_Delete(0xc000001380)\n\t/tmp/tmp1zsc0qnx_test.go:49 +0xcb\ntesting.tRunner(0xc000001380, 0x54f228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    var result string\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = result + s[i]\n            c = c[1:]\n        } else {\n            result = result + s[i]\n        }\n    }\n    if len(c) == 0 {\n        isPalindrome = true\n    } else {\n        isPalindrome = false\n    }\n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb6mybrgd_test.go:26:29: invalid operation: result + s[i] (mismatched types string and byte)\n/tmp/tmpb6mybrgd_test.go:29:29: invalid operation: result + s[i] (mismatched types string and byte)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    var result string\n    var is_palindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = result + s[i]\n            c = c[1:]\n        } else {\n            result = result + s[i]\n        }\n    }\n    if len(c) == 0 {\n        is_palindrome = true\n    }\n    return []interface{}{result, is_palindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwvyj5xab_test.go:26:29: invalid operation: result + s[i] (mismatched types string and byte)\n/tmp/tmpwvyj5xab_test.go:29:29: invalid operation: result + s[i] (mismatched types string and byte)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            s = s[0:i] + s[i+1:]\n        }\n    }\n    if s == s[::-1] {\n        result = append(result, s)\n        result = append(result, true)\n    } else {\n        result = append(result, s)\n        result = append(result, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374747,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpbqd4v_vm_test.go:30:15: 2nd index required in 3-index slice\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    var result []interface{}\n    var result_bool bool\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := len(c) - 1; j >= 0; j-- {\n            if s[i] == c[j] {\n                result = append(result, s[i:i+1])\n                result_bool = false\n                break\n            }\n        }\n    }\n    result = append(result, s)\n    result_bool = true\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpadm4sdh5_test.go:23:9: result_bool declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            s = s[0:i] + s[i+1:]\n            isPalindrome = true\n        }\n    }\n    result = []interface{}{s, isPalindrome}\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmprm79s51l_test.go:24\ncommand-line-arguments_test.TestReverse_Delete(0xc000001380)\n\t/tmp/tmprm79s51l_test.go:45 +0x730\ntesting.tRunner(0xc000001380, 0x54df18)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            s = s[0:i] + s[i+1:]\n        }\n    }\n    if s == s[::-1] {\n        result = append(result, s)\n        result = append(result, true)\n    } else {\n        result = append(result, s)\n        result = append(result, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374747,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpbqd4v_vm_test.go:30:15: 2nd index required in 3-index slice\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if c[0] == s[i] {\n            s = s[0:i] + s[i+1:]\n            c = c[1:]\n        }\n    }\n    if s == s[::-1] {\n        result = append(result, s)\n        result = append(result, true)\n    } else {\n        result = append(result, s)\n        result = append(result, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374747,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp3sf2q0fw_test.go:31:15: 2nd index required in 3-index slice\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // fmt.Println(\"reverse_delete\", s, c)\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    if s[0] == c[0] {\n        return reverse_delete(s[1:], c[1:])\n    }\n    return reverse_delete(s[1:], c)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpkx98hlh1_test.go:52: expected '[bcd %!s(bool=false)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpkx98hlh1_test.go:52: expected '[acdef %!s(bool=false)]', got '[cdef %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpkx98hlh1_test.go:52: expected '[cdedc %!s(bool=true)]', got '[cdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpkx98hlh1_test.go:52: expected '[dik %!s(bool=false)]', got '[ik %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpkx98hlh1_test.go:52: expected '[ %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpkx98hlh1_test.go:52: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpkx98hlh1_test.go:52: expected '[abcdedcba %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmpkx98hlh1_test.go:52: expected '[abba %!s(bool=true)]', got '[abba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpkx98hlh1_test.go:52: expected '[ %!s(bool=true)]', got '[ %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            for j := len(c) - 1; j >= 0; j-- {\n                if s[i] == c[j] {\n                    s = s[0:i] + s[i+1:]\n                    break\n                }\n            }\n        }\n    }\n    if s == s[::-1] {\n        result = append(result, s)\n        result = append(result, true)\n    } else {\n        result = append(result, s)\n        result = append(result, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374747,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpsrv9vwzw_test.go:36:15: 2nd index required in 3-index slice\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:i+1])\n            s = s[0:i] + s[i+1:]\n        }\n    }\n    if s == s[::-1] {\n        result = append(result, true)\n    } else {\n        result = append(result, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374747,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp86z178q0_test.go:31:15: 2nd index required in 3-index slice\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    var result []interface{}\n    var result_bool bool\n    var result_string string\n    var result_index int\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := len(c) - 1; j >= 0; j-- {\n            if s[i] == c[j] {\n                result_index = i\n                result_string = s[i:len(s)]\n                result_bool = true\n                break\n            }\n        }\n        if result_bool {\n            break\n        }\n    }\n    result = append(result, result_string)\n    result = append(result, result_bool)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj1mk4h8s_test.go:25:9: result_index declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    var result string\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = result + s[i]\n            c = c[1:]\n        } else {\n            break\n        }\n    }\n    if len(c) == 0 {\n        isPalindrome = true\n    } else {\n        isPalindrome = false\n    }\n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3x_i9bam_test.go:26:29: invalid operation: result + s[i] (mismatched types string and byte)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    \n    var result string\n    var isPalindrome bool\n    \n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = s[i:] + result\n            c = c[1:]\n            if len(c) == 0 {\n                isPalindrome = true\n                break\n            }\n        }\n    }\n    \n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmppnt0u0fa_test.go:64: expected '[bcd %!s(bool=false)]', got '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmppnt0u0fa_test.go:64: expected '[acdef %!s(bool=false)]', got '[bcdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmppnt0u0fa_test.go:64: expected '[cdedc %!s(bool=true)]', got '[baa %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmppnt0u0fa_test.go:64: expected '[dik %!s(bool=false)]', got '[wik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmppnt0u0fa_test.go:64: expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmppnt0u0fa_test.go:64: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmppnt0u0fa_test.go:64: expected '[abcdedcba %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmppnt0u0fa_test.go:64: expected '[abba %!s(bool=true)]', got '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmppnt0u0fa_test.go:64: expected '[ %!s(bool=true)]', got '[ma %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    var result []interface{}\n    var result_bool bool\n    var result_string string\n    var result_index int\n    var result_length int\n    var result_index_bool bool\n    var result_index_string string\n    var result_index_index int\n    var result_index_length int\n    var result_index_index_bool bool\n    var result_index_index_string string\n    var result_index_index_index int\n    var result_index_index_length int\n    var result_index_index_index_bool bool\n    var result_index_index_index_string string\n    var result_index_index_index_index int\n    var result_index_index_index_length int\n    var result_index_index_index_index_bool bool\n    var result_index_index_index_index_string string\n    var result_index_index_index_index_index int\n    var result_index_index_index_index_length int\n    var result_index_index_index_index_index_bool bool\n    var result_index_index_index_index_index_string string\n    var result_index_index_index_index_index_index int\n    var result_index_index_index_index_index_length int\n    var result_index_index_index_index_index_index_bool bool\n    var result_index_index_index_index_index_index_string string\n    var result_index_index_index_index_index_index_index int\n    var result_index_index_index_index_index_index_length int\n    var result_index_index_index_index_index_index_index_bool bool\n    var result_index_index_index_index_index_index_index_string string\n    var result_index_index_index_index_index_index_index_index int\n    var result_index_index_index_index_index_index_index_length int\n    var result_index_index_index_index_index_index_index_index_bool bool\n    var result_index_index_index_index_index_index_index_index_string string\n    var result\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374747,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpqohw3d3h_test.go:57:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            s = s[0:i] + s[i+1:]\n        }\n    }\n    if s == s[::-1] {\n        result = append(result, s, true)\n    } else {\n        result = append(result, s, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374747,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpeu7rmpjd_test.go:30:15: 2nd index required in 3-index slice\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    \n    var result string\n    var isPalindrome bool\n    \n    for i := len(s) - 1; i >= 0; i-- {\n        if c[0] == s[i] {\n            result = s[0:i] + s[i+1:]\n            isPalindrome = true\n            break\n        }\n    }\n    \n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpt_4fa2as_test.go:61: expected '[bcd %!s(bool=false)]', got '[bcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpt_4fa2as_test.go:61: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpt_4fa2as_test.go:61: expected '[cdedc %!s(bool=true)]', got '[abcdedcb %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpt_4fa2as_test.go:61: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpt_4fa2as_test.go:61: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpt_4fa2as_test.go:61: expected '[abcdedcba %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpt_4fa2as_test.go:61: expected '[ %!s(bool=true)]', got '[mama %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    var result []interface{}\n    var result_bool bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            for j := 1; j < len(c); j++ {\n                if s[i] != c[j] {\n                    break\n                }\n            }\n            if j == len(c) {\n                result_bool = true\n                result = append(result, s[i:i+len(c)])\n                s = s[0:i] + s[i+len(c):]\n            }\n        }\n    }\n    result = append(result, result_bool)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvdoj7a76_test.go:31:16: undefined: j\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var result_bool bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:i+1])\n            result_bool = false\n            for j := 1; j < len(c); j++ {\n                if s[i-j] != c[j] {\n                    result_bool = true\n                    break\n                }\n            }\n            if result_bool == false {\n                result_bool = true\n            }\n            break\n        }\n    }\n    return []interface{}{fmt.Sprintf(\"%s\", result), result_bool}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(0x545605, 0x5, 0x5452ff, 0x2, 0x0, 0x58a71f, 0x3b)\n\t/tmp/tmpwbt2zajy_test.go:28 +0x2fd\ncommand-line-arguments_test.TestReverse_Delete(0xc000001380)\n\t/tmp/tmpwbt2zajy_test.go:49 +0x6b\ntesting.tRunner(0xc000001380, 0x54f228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                s = s[0:i] + s[i+1:]\n                isPalindrome = true\n                break\n            }\n        }\n    }\n    result = []interface{}{s, isPalindrome}\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpquazizxz_test.go:57: expected '[bcd %!s(bool=false)]', got '[bcd %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpquazizxz_test.go:57: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpquazizxz_test.go:57: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpquazizxz_test.go:57: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpquazizxz_test.go:57: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:len(s)])\n            s = s[0:i]\n            break\n        }\n    }\n    if len(s) == 0 {\n        result = append(result, s)\n        result = append(result, true)\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:len(s)])\n            s = s[0:i]\n            break\n        }\n    }\n    if len(s) == 0 {\n        result = append(result, s)\n        result = append(result, false)\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:len(s)])\n            s = s[0:i]\n            break\n        }\n    }\n    if len(s) == 0 {\n        result = append(result, s)\n        result = append(result, false)\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:len(s)])\n            s = s[0:i]\n            break\n        }\n    }\n    if len(s) == 0 {\n        result = append(result, s)\n        result = append(result, false)\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:len(s)])\n            s = s[0:i]\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374748,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpy3dcusvn_test.go:78:6: expected '(', found TestReverse_Delete\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                s = s[0:i] + s[i+1:]\n                break\n            }\n        }\n    }\n    if s == \"\" {\n        result = append(result, s, true)\n    } else {\n        result = append(result, s, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmp_apm27tn_test.go:59: expected '[cdedc %!s(bool=true)]', got '[cdedc %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp_apm27tn_test.go:59: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmp_apm27tn_test.go:59: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp_apm27tn_test.go:59: expected '[abba %!s(bool=true)]', got '[abba %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var result_bool bool\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                s = s[0:i] + s[i+1:]\n                result_bool = true\n                break\n            }\n        }\n    }\n    result = []interface{}{s, result_bool}\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmp3dksqgnv_test.go:57: expected '[bcd %!s(bool=false)]', got '[bcd %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp3dksqgnv_test.go:57: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp3dksqgnv_test.go:57: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp3dksqgnv_test.go:57: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmp3dksqgnv_test.go:57: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:i+1])\n            for j := 0; j < len(c); j++ {\n                if s[i] == c[j] {\n                    s = s[0:i] + s[i+1:]\n                    break\n                }\n            }\n        }\n    }\n    if len(s) == 0 {\n        return result\n    }\n    if s == s[::-1] {\n        return append(result, true)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374749,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp3gs89crq_test.go:40:15: 2nd index required in 3-index slice\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    \n    var result string\n    var isPalindrome bool\n    \n    for i := len(s) - 1; i >= 0; i-- {\n        if c[0] == s[i] {\n            result += s[i]\n            c = c[1:]\n        }\n    }\n    \n    if len(c) == 0 {\n        isPalindrome = true\n    }\n    \n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjcwydebg_test.go:31:20: invalid operation: result += s[i] (mismatched types string and byte)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:i+1])\n            for j := 1; j < len(c); j++ {\n                if s[i] == c[j] {\n                    result = append(result, s[i:i+j])\n                }\n            }\n            s = s[0:i] + s[i+len(c):]\n        }\n    }\n    if len(s) == 0 {\n        result = append(result, s)\n    }\n    if s == s[::-1] {\n        result = append(result, true)\n    } else {\n        result = append(result, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpkm5qkip0_test.go:40:15: 2nd index required in 3-index slice\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var palindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := len(c) - 1; j >= 0; j-- {\n            if s[i] == c[j] {\n                s = s[0:i] + s[i+1:]\n                palindrome = true\n                break\n            }\n        }\n        if palindrome {\n            break\n        }\n    }\n    result = append(result, s)\n    result = append(result, palindrome)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpf0yftw5k_test.go:61: expected '[bcd %!s(bool=false)]', got '[abcd %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpf0yftw5k_test.go:61: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpf0yftw5k_test.go:61: expected '[cdedc %!s(bool=true)]', got '[abcdedcb %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpf0yftw5k_test.go:61: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpf0yftw5k_test.go:61: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpf0yftw5k_test.go:61: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpf0yftw5k_test.go:61: expected '[ %!s(bool=true)]', got '[mamm %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    \n    var result string\n    var isPalindrome bool\n    \n    for i := len(s) - 1; i >= 0; i-- {\n        if c[0] == s[i] {\n            result += s[i]\n            c = c[1:]\n        }\n    }\n    \n    if len(c) == 0 {\n        isPalindrome = true\n    }\n    \n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp44787u9m_test.go:31:20: invalid operation: result += s[i] (mismatched types string and byte)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            for j := 0; j < len(c); j++ {\n                if s[i] == c[j] {\n                    s = s[0:i] + s[i+1:]\n                    isPalindrome = true\n                    break\n                }\n            }\n        }\n    }\n    result = append(result, s)\n    result = append(result, isPalindrome)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(0x54606e, 0x9, 0x0, 0x0, 0xc0000a40a0, 0x2, 0x2)\n\t/tmp/tmph4jmte44_test.go:24 +0x23b\ncommand-line-arguments_test.TestReverse_Delete(0xc000001380)\n\t/tmp/tmph4jmte44_test.go:51 +0x237\ntesting.tRunner(0xc000001380, 0x54f228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var result_bool bool\n    var result_string string\n    var result_index int\n    var result_length int\n    var result_length_int int\n    var result_length_int_int int\n    var result_length_int_int_int int\n    var result_length_int_int_int_int int\n    var result_length_int_int_int_int_int int\n    var result_length_int_int_int_int_int_int int\n    var result_length_int_int_int_int_int_int_int int\n    var result_length_int_int_int_int_int_int_int_int int\n    var result_length_int_int_int_int_int_int_int_int_int int\n    var result_length_int_int_int_int_int_int_int_int_int_int int\n    var result_length_int_int_int_int_int_int_int_int_int_int_int int\n    var result_length_int_int_int_int_int_int_int_int_int_int_int_int int\n    var result_length_int_int_int_int_int_int_int_int_int_int_int_int_int int\n    var result_length_int_int_int_int_int_int_int_int_int_int_int_int_int_int int\n    var result_length_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int int\n    var result_length_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int int\n    var result_length_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int int\n    var result_length_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int int\n    var result_length_int_\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpu1g7qonf_test.go:44:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    \n    var result string\n    var isPalindrome bool\n    \n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = s[0:i] + s[i+1:]\n            isPalindrome = true\n            break\n        }\n    }\n    \n    if isPalindrome {\n        return []interface{}{result, isPalindrome}\n    } else {\n        return []interface{}{s, isPalindrome}\n    }\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpy98curbc_test.go:65: expected '[bcd %!s(bool=false)]', got '[bcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpy98curbc_test.go:65: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpy98curbc_test.go:65: expected '[cdedc %!s(bool=true)]', got '[abcdedcb %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpy98curbc_test.go:65: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpy98curbc_test.go:65: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpy98curbc_test.go:65: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpy98curbc_test.go:65: expected '[ %!s(bool=true)]', got '[mama %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var result_string string\n    var result_bool bool\n    \n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result_string = s[i:len(s)]\n            result_bool = true\n            for j := len(c) - 1; j >= 1; j-- {\n                if s[i] == c[j] {\n                    result_string = s[i:len(s)]\n                    result_bool = true\n                    break\n                }\n            }\n            break\n        }\n    }\n    result = append(result, result_string)\n    result = append(result, result_bool)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(0x54606e, 0x9, 0x0, 0x0, 0xc0000a40a0, 0x2, 0x2)\n\t/tmp/tmp9cl711go_test.go:26 +0x1f4\ncommand-line-arguments_test.TestReverse_Delete(0xc000001380)\n\t/tmp/tmp9cl711go_test.go:56 +0x237\ntesting.tRunner(0xc000001380, 0x54f228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var result_string string\n    var result_bool bool\n    var i int\n    var j int\n    for i = len(s) - 1; i >= 0; i-- {\n        for j = 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                break\n            }\n        }\n        if j == len(c) {\n            result_string = s[i:]\n            result_bool = true\n            break\n        }\n    }\n    result = append(result, result_string)\n    result = append(result, result_bool)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpfwlks9s3_test.go:64: expected '[bcd %!s(bool=false)]', got '[de %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpfwlks9s3_test.go:64: expected '[acdef %!s(bool=false)]', got '[f %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpfwlks9s3_test.go:64: expected '[cdedc %!s(bool=true)]', got '[cba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpfwlks9s3_test.go:64: expected '[dik %!s(bool=false)]', got '[k %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpfwlks9s3_test.go:64: expected '[ %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpfwlks9s3_test.go:64: expected '[abcdedcba %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpfwlks9s3_test.go:64: expected '[abcdedcba %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmpfwlks9s3_test.go:64: expected '[abba %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpfwlks9s3_test.go:64: expected '[ %!s(bool=true)]', got '[ %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := len(c) - 1; j >= 0; j-- {\n            if s[i] == c[j] {\n                s = s[0:i] + s[i+1:]\n                break\n            }\n        }\n    }\n    if len(s) == 0 {\n        result = append(result, s, true)\n    } else {\n        result = append(result, s, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpyk003ova_test.go:59: expected '[cdedc %!s(bool=true)]', got '[cdedc %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpyk003ova_test.go:59: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpyk003ova_test.go:59: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmpyk003ova_test.go:59: expected '[abba %!s(bool=true)]', got '[abba %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    result := []interface{}{}\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            s = s[0:i] + s[i+1:]\n            result = append(result, s)\n        }\n    }\n    if len(s) == 0 {\n        result = append(result, s)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536060, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536060, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpda8hl2_1_test.go:23\ncommand-line-arguments_test.TestReverse_Delete(0xc000001380)\n\t/tmp/tmpda8hl2_1_test.go:46 +0xbbf\ntesting.tRunner(0xc000001380, 0x54ef18)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{\"\", false}\n    }\n    if len(s) < len(c) {\n        return []interface{}{\"\", false}\n    }\n    var result string\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = result + s[i]\n            for j := 1; j < len(c); j++ {\n                if s[i] == c[j] {\n                    result = result + s[i]\n                } else {\n                    break\n                }\n            }\n        } else {\n            break\n        }\n    }\n    if len(result) == 0 {\n        return []interface{}{\"\", false}\n    }\n    isPalindrome = isPalindromeString(result)\n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnpfrlowc_test.go:32:29: invalid operation: result + s[i] (mismatched types string and byte)\n/tmp/tmpnpfrlowc_test.go:35:37: invalid operation: result + s[i] (mismatched types string and byte)\n/tmp/tmpnpfrlowc_test.go:47:20: undefined: isPalindromeString\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var result_bool bool\n    var result_string string\n    var result_index int\n    var result_length int\n    var result_index_bool bool\n    var result_index_string string\n    var result_index_index int\n    var result_index_length int\n    var result_index_index_bool bool\n    var result_index_index_string string\n    var result_index_index_index int\n    var result_index_index_length int\n    var result_index_index_index_bool bool\n    var result_index_index_index_string string\n    var result_index_index_index_index int\n    var result_index_index_index_length int\n    var result_index_index_index_index_bool bool\n    var result_index_index_index_index_string string\n    var result_index_index_index_index_index int\n    var result_index_index_index_index_length int\n    var result_index_index_index_index_index_bool bool\n    var result_index_index_index_index_index_string string\n    var result_index_index_index_index_index_index int\n    var result_index_index_index_index_index_length int\n    var result_index_index_index_index_index_index_bool bool\n    var result_index_index_index_index_index_index_string string\n    var result_index_index_index_index_index_index_index int\n    var result_index_index_index_index_index_index_length int\n    var result_index_index_index_index_index_index_index_bool bool\n    var result_index_index_index_index_index_index_index_string string\n    var result_index_index_index_index_index_index_index_index int\n    var result_index_index_index_index_index_index_index_length int\n    var result_index_index_index_index_index_index_index_index_bool bool\n    var result_index_index_index_index_index_index_index_index_string string\n    var result_index_index_index_\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp_ktgde7d_test.go:56:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    if len(s) == 1 {\n        return []interface{}{s, true}\n    }\n    if len(c) == 1 {\n        return []interface{}{s, false}\n    }\n    if s[0] == c[0] {\n        return []interface{}{s[1:], false}\n    }\n    if s[0] == c[1] {\n        return []interface{}{s[1:], true}\n    }\n    if s[1] == c[0] {\n        return []interface{}{s[2:], false}\n    }\n    if s[1] == c[1] {\n        return []interface{}{s[2:], true}\n    }\n    return []interface{}{s, false}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpsol2uvly_test.go:67: expected '[bcd %!s(bool=false)]', got '[bcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpsol2uvly_test.go:67: expected '[acdef %!s(bool=false)]', got '[abcdef %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpsol2uvly_test.go:67: expected '[cdedc %!s(bool=true)]', got '[bcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpsol2uvly_test.go:67: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpsol2uvly_test.go:67: expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpsol2uvly_test.go:67: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpsol2uvly_test.go:67: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmpsol2uvly_test.go:67: expected '[abba %!s(bool=true)]', got '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpsol2uvly_test.go:67: expected '[ %!s(bool=true)]', got '[amma %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    \n    var result string\n    var isPalindrome bool\n    \n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = s[i:] + result\n            c = c[1:]\n            if len(c) == 0 {\n                isPalindrome = true\n                break\n            }\n        }\n    }\n    \n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpowyktziu_test.go:64: expected '[bcd %!s(bool=false)]', got '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpowyktziu_test.go:64: expected '[acdef %!s(bool=false)]', got '[bcdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpowyktziu_test.go:64: expected '[cdedc %!s(bool=true)]', got '[baa %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpowyktziu_test.go:64: expected '[dik %!s(bool=false)]', got '[wik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpowyktziu_test.go:64: expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpowyktziu_test.go:64: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpowyktziu_test.go:64: expected '[abcdedcba %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmpowyktziu_test.go:64: expected '[abba %!s(bool=true)]', got '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpowyktziu_test.go:64: expected '[ %!s(bool=true)]', got '[ma %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] == c[0] {\n            result = append(result, fmt.Sprintf(\"%s\", s[i:i+1]))\n            for j := 0; j < len(c); j++ {\n                if s[i] == c[j] {\n                    i--\n                    break\n                }\n            }\n        }\n    }\n    if len(result) == 0 {\n        result = append(result, fmt.Sprintf(\"%s\", s))\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374781,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var palindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            for j := len(c) - 1; j >= 0; j-- {\n                if s[i] == c[j] {\n                    s = s[0:i] + s[i+1:]\n                    palindrome = true\n                    break\n                }\n            }\n        }\n    }\n    result = append(result, s)\n    result = append(result, palindrome)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(0x54606e, 0x9, 0x0, 0x0, 0xc000156080, 0x2, 0x2)\n\t/tmp/tmp7_va87es_test.go:24 +0x247\ncommand-line-arguments_test.TestReverse_Delete(0xc000102600)\n\t/tmp/tmp7_va87es_test.go:51 +0x237\ntesting.tRunner(0xc000102600, 0x54f228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    var result string\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = result + s[i]\n            c = c[1:]\n        } else {\n            break\n        }\n    }\n    if len(c) == 0 {\n        isPalindrome = true\n    }\n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa2f3bj3s_test.go:29:29: invalid operation: result + s[i] (mismatched types string and byte)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var palindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            for j := 0; j < len(c); j++ {\n                if s[i] == c[j] {\n                    s = s[0:i] + s[i+1:]\n                    palindrome = true\n                    break\n                }\n            }\n        }\n    }\n    result = append(result, s)\n    result = append(result, palindrome)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001ba000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001ba000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(0x54606e, 0x9, 0x0, 0x0, 0xc0001b8080, 0x2, 0x2)\n\t/tmp/tmpyfb478p3_test.go:24 +0x23b\ncommand-line-arguments_test.TestReverse_Delete(0xc000186300)\n\t/tmp/tmpyfb478p3_test.go:51 +0x237\ntesting.tRunner(0xc000186300, 0x54f228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:i+1])\n            s = s[0:i] + s[i+1:]\n        }\n    }\n    if s == \"\" {\n        result = append(result, s)\n        result = append(result, true)\n    } else {\n        result = append(result, s)\n        result = append(result, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmprt719r24_test.go:62: expected '[bcd %!s(bool=false)]', got '[a bcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmprt719r24_test.go:62: expected '[acdef %!s(bool=false)]', got '[b acdef %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmprt719r24_test.go:62: expected '[cdedc %!s(bool=true)]', got '[a a bcdedcb %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmprt719r24_test.go:62: expected '[dik %!s(bool=false)]', got '[w dik %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmprt719r24_test.go:62: expected '[ %!s(bool=true)]', got '[a  %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmprt719r24_test.go:62: expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmprt719r24_test.go:62: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmprt719r24_test.go:62: expected '[abba %!s(bool=true)]', got '[v abba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmprt719r24_test.go:62: expected '[ %!s(bool=true)]', got '[m m m aa %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    \n    var result string\n    var isPalindrome bool\n    \n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = result + s[i]\n            c = c[1:]\n        } else {\n            break\n        }\n    }\n    \n    if len(c) == 0 {\n        isPalindrome = true\n    } else {\n        isPalindrome = false\n    }\n    \n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsopbcma6_test.go:31:29: invalid operation: result + s[i] (mismatched types string and byte)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                s = s[0:i] + s[i+1:]\n                isPalindrome = true\n                break\n            }\n        }\n    }\n    result = append(result, s, isPalindrome)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmp4yvvlk0m_test.go:57: expected '[bcd %!s(bool=false)]', got '[bcd %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp4yvvlk0m_test.go:57: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp4yvvlk0m_test.go:57: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp4yvvlk0m_test.go:57: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmp4yvvlk0m_test.go:57: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    \n    var result string\n    var isPalindrome bool\n    \n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            for j := 0; j < len(c); j++ {\n                if s[i] == c[j] {\n                    result += s[i]\n                    break\n                }\n            }\n        } else {\n            result += s[i]\n        }\n    }\n    \n    isPalindrome = isPalindromeString(result)\n    \n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8n4hgbvw_test.go:33:28: invalid operation: result += s[i] (mismatched types string and byte)\n/tmp/tmp8n4hgbvw_test.go:38:20: invalid operation: result += s[i] (mismatched types string and byte)\n/tmp/tmp8n4hgbvw_test.go:42:20: undefined: isPalindromeString\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    \n    var result string\n    var isPalindrome bool\n    \n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            for j := 0; j < len(c); j++ {\n                if s[i] == c[j] {\n                    result += s[i]\n                    break\n                }\n            }\n        } else {\n            result += s[i]\n        }\n    }\n    \n    isPalindrome = isPalindromeString(result)\n    \n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8n4hgbvw_test.go:33:28: invalid operation: result += s[i] (mismatched types string and byte)\n/tmp/tmp8n4hgbvw_test.go:38:20: invalid operation: result += s[i] (mismatched types string and byte)\n/tmp/tmp8n4hgbvw_test.go:42:20: undefined: isPalindromeString\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    var result string\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if c[0] == s[i] {\n            result = s[0:i] + s[i+1:]\n            isPalindrome = true\n            for j := 0; j < len(c); j++ {\n                if c[j] != s[i] {\n                    isPalindrome = false\n                    break\n                }\n            }\n            break\n        }\n    }\n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpmi3qwo0t_test.go:64: expected '[bcd %!s(bool=false)]', got '[bcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpmi3qwo0t_test.go:64: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpmi3qwo0t_test.go:64: expected '[cdedc %!s(bool=true)]', got '[abcdedcb %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpmi3qwo0t_test.go:64: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpmi3qwo0t_test.go:64: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpmi3qwo0t_test.go:64: expected '[abcdedcba %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpmi3qwo0t_test.go:64: expected '[ %!s(bool=true)]', got '[mama %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    var result string\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = s[i:] + result\n            c = c[1:]\n        }\n    }\n    if len(c) == 0 {\n        isPalindrome = true\n    }\n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x537320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x537320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpoa5d3xlp_test.go:25\ncommand-line-arguments_test.TestReverse_Delete(0xc000102600)\n\t/tmp/tmpoa5d3xlp_test.go:44 +0x1959\ntesting.tRunner(0xc000102600, 0x550228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:i+1])\n            s = s[0:i] + s[i+1:]\n        }\n    }\n    if s == \"\" {\n        result = append(result, s)\n    }\n    if s == s[::-1] {\n        result = append(result, true)\n    } else {\n        result = append(result, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp29kmfwir_test.go:34:15: 2nd index required in 3-index slice\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                s = s[0:i] + s[i+1:]\n                break\n            }\n        }\n    }\n    if s == \"\" {\n        result = append(result, s, true)\n    } else {\n        result = append(result, s, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmp_apm27tn_test.go:59: expected '[cdedc %!s(bool=true)]', got '[cdedc %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp_apm27tn_test.go:59: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmp_apm27tn_test.go:59: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp_apm27tn_test.go:59: expected '[abba %!s(bool=true)]', got '[abba %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:i+1])\n            s = s[0:i] + s[i+1:]\n        }\n    }\n    if s == s[0:0] {\n        result = append(result, s)\n    }\n    if s == s[0:0] {\n        result = append(result, s)\n    }\n    if s == s[0:0] {\n        result = append(result, s)\n    }\n    if s == s[0:0] {\n        result = append(result, s)\n    }\n    if s == s[0:0] {\n        result = append(result, s)\n    }\n    if s == s[0:0] {\n        result = append(result, s)\n    }\n    if s == s[0:0] {\n        result = append(result, s)\n    }\n    if s == s[0:0] {\n        result = append(result, s)\n    }\n    if s == s[0:0] {\n        result = append(result, s)\n    }\n    if s == s[0:0] {\n        result = append(result, s)\n    }\n    if s == s[0:0] {\n        result = append(result, s)\n    }\n    if s == s[0:0] {\n        result = append(result, s)\n    }\n    if s == s[0:0] {\n        result = append(result, s)\n    }\n    if s == s[0:0] {\n        result = append(result, s)\n    }\n    if s == s[0:0] {\n        result = append(result, s)\n    }\n    if s == s[0:0] {\n        result = append(result, s)\n    }\n    if s == s[0:\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpq42prva5_test.go:80:6: expected '(', found TestReverse_Delete\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var result_string string\n    var result_bool bool\n    var i int\n    var j int\n    for i = len(s) - 1; i >= 0; i-- {\n        for j = 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                result_string = s[0:i] + s[i+1:]\n                result_bool = true\n                break\n            }\n        }\n        if result_bool == true {\n            break\n        }\n    }\n    result = append(result, result_string)\n    result = append(result, result_bool)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpijvnwei5_test.go:64: expected '[bcd %!s(bool=false)]', got '[abcd %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpijvnwei5_test.go:64: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpijvnwei5_test.go:64: expected '[cdedc %!s(bool=true)]', got '[abcdedcb %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpijvnwei5_test.go:64: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpijvnwei5_test.go:64: expected '[abcdedcba %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpijvnwei5_test.go:64: expected '[abcdedcba %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpijvnwei5_test.go:64: expected '[ %!s(bool=true)]', got '[mamm %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            s = s[:i] + s[i+1:]\n        }\n    }\n    if s == s[::-1] {\n        result = append(result, s)\n        result = append(result, true)\n    } else {\n        result = append(result, s)\n        result = append(result, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpllhf3pvi_test.go:31:15: 2nd index required in 3-index slice\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            s = s[0:i] + s[i+1:]\n            result = append(result, s)\n        }\n    }\n    if len(s) == 0 {\n        result = append(result, s)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpyjxd7kv7_test.go:59: expected '[bcd %!s(bool=false)]', got '[bcde]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpyjxd7kv7_test.go:59: expected '[acdef %!s(bool=false)]', got '[acdef]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpyjxd7kv7_test.go:59: expected '[cdedc %!s(bool=true)]', got '[abcdedcb bcdedcb]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpyjxd7kv7_test.go:59: expected '[dik %!s(bool=false)]', got '[dik]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpyjxd7kv7_test.go:59: expected '[ %!s(bool=true)]', got '[ ]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpyjxd7kv7_test.go:59: expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpyjxd7kv7_test.go:59: expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmpyjxd7kv7_test.go:59: expected '[abba %!s(bool=true)]', got '[abba]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpyjxd7kv7_test.go:59: expected '[ %!s(bool=true)]', got '[mama maa aa]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            s = s[0:i] + s[i+1:]\n            result = append(result, s)\n        }\n    }\n    if s == s[::-1] {\n        result = append(result, true)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp3trosbus_test.go:32:15: 2nd index required in 3-index slice\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    if len(s) == 1 {\n        return []interface{}{s, true}\n    }\n    if len(c) == 1 {\n        return []interface{}{s[0:len(s)-1] + s[len(s)-1], true}\n    }\n    if len(c) > 1 {\n        for i := 0; i < len(s); i++ {\n            if s[i] == c[0] {\n                return reverse_delete(s[i+1:len(s)], c[1:len(c)])\n            }\n        }\n    }\n    return []interface{}{s, false}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4jhfnjl9_test.go:29:44: invalid operation: s[0:len(s) - 1] + s[len(s) - 1] (mismatched types string and byte)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    \n    var result string\n    var isPalindrome bool\n    \n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = s[i:len(s)]\n            isPalindrome = true\n            for j := 1; j < len(c); j++ {\n                if s[i-j] != c[j] {\n                    isPalindrome = false\n                    break\n                }\n            }\n            break\n        }\n    }\n    \n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(0x545605, 0x5, 0x5452ff, 0x2, 0x0, 0x58a6ff, 0x3b)\n\t/tmp/tmp3brwqoaj_test.go:34 +0x25d\ncommand-line-arguments_test.TestReverse_Delete(0xc000001380)\n\t/tmp/tmp3brwqoaj_test.go:53 +0x6b\ntesting.tRunner(0xc000001380, 0x54f228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            s = s[0:i] + s[i+1:]\n        }\n    }\n    if s == s[::-1] {\n        result = append(result, s, true)\n    } else {\n        result = append(result, s, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp0vjub6zv_test.go:27:15: 2nd index required in 3-index slice\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    result := make([]interface{}, 2)\n    result[0] = \"\"\n    result[1] = false\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result[0] = result[0] + s[i]\n            for j := 1; j < len(c); j++ {\n                if s[i] == c[j] {\n                    result[0] = result[0] + s[i]\n                } else {\n                    break\n                }\n            }\n        } else {\n            result[0] = result[0] + s[i]\n        }\n    }\n    if result[0] == s {\n        result[1] = true\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk6k35vw0_test.go:27:35: invalid operation: result[0] + s[i] (mismatched types interface {} and byte)\n/tmp/tmpk6k35vw0_test.go:30:43: invalid operation: result[0] + s[i] (mismatched types interface {} and byte)\n/tmp/tmpk6k35vw0_test.go:36:35: invalid operation: result[0] + s[i] (mismatched types interface {} and byte)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:i+1])\n            for j := 0; j < len(c); j++ {\n                if s[i] == c[j] {\n                    s = s[0:i] + s[i+1:]\n                    break\n                }\n            }\n        }\n    }\n    if len(s) == 0 {\n        result = append(result, \"\")\n    }\n    if len(s) == 1 {\n        result = append(result, s)\n    }\n    if len(s) > 1 {\n        if s == s[0:len(s) - 1] {\n            result = append(result, s)\n        } else {\n            result = append(result, \"\")\n        }\n    }\n    if len(s) > 0 {\n        if s == s[0:len(s) - 1] {\n            result = append(result, s)\n        } else {\n            result = append(result, \"\")\n        }\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpo4xlvypi_test.go:81: expected '[bcd %!s(bool=false)]', got '[a  ]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpo4xlvypi_test.go:81: expected '[acdef %!s(bool=false)]', got '[b  ]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpo4xlvypi_test.go:81: expected '[cdedc %!s(bool=true)]', got '[a a  ]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpo4xlvypi_test.go:81: expected '[dik %!s(bool=false)]', got '[w  ]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpo4xlvypi_test.go:81: expected '[ %!s(bool=true)]', got '[a ]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpo4xlvypi_test.go:81: expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpo4xlvypi_test.go:81: expected '[abcdedcba %!s(bool=true)]', got '[ ]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmpo4xlvypi_test.go:81: expected '[abba %!s(bool=true)]', got '[v  ]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpo4xlvypi_test.go:81: expected '[ %!s(bool=true)]', got '[m m m  ]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    var result []interface{}\n    var result_string string\n    var result_bool bool\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := len(c) - 1; j >= 0; j-- {\n            if s[i] == c[j] {\n                result_string = s[0:i] + s[i+1:]\n                result_bool = true\n                break\n            }\n        }\n    }\n    result = append(result, result_string, result_bool)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmppuhgg1pb_test.go:59: expected '[bcd %!s(bool=false)]', got '[bcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmppuhgg1pb_test.go:59: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmppuhgg1pb_test.go:59: expected '[cdedc %!s(bool=true)]', got '[bcdedcba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmppuhgg1pb_test.go:59: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmppuhgg1pb_test.go:59: expected '[abcdedcba %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmppuhgg1pb_test.go:59: expected '[abcdedcba %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmppuhgg1pb_test.go:59: expected '[ %!s(bool=true)]', got '[amma %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    var result []interface{}\n    var result_string string\n    var result_bool bool\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := len(c) - 1; j >= 0; j-- {\n            if s[i] == c[j] {\n                result_string = s[0:i] + s[i+1:]\n                result_bool = true\n                break\n            }\n        }\n        if result_bool {\n            break\n        }\n    }\n    result = append(result, result_string)\n    result = append(result, result_bool)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmp70bbae7y_test.go:63: expected '[bcd %!s(bool=false)]', got '[abcd %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp70bbae7y_test.go:63: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmp70bbae7y_test.go:63: expected '[cdedc %!s(bool=true)]', got '[abcdedcb %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp70bbae7y_test.go:63: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp70bbae7y_test.go:63: expected '[abcdedcba %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmp70bbae7y_test.go:63: expected '[abcdedcba %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmp70bbae7y_test.go:63: expected '[ %!s(bool=true)]', got '[mamm %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:i+1])\n            c = c[1:]\n            if len(c) == 0 {\n                break\n            }\n        }\n    }\n    if len(c) > 0 {\n        result = append(result, false)\n    } else {\n        result = append(result, true)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmp56ol2y2h_test.go:63: expected '[bcd %!s(bool=false)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp56ol2y2h_test.go:63: expected '[acdef %!s(bool=false)]', got '[b %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmp56ol2y2h_test.go:63: expected '[cdedc %!s(bool=true)]', got '[a b %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp56ol2y2h_test.go:63: expected '[dik %!s(bool=false)]', got '[w %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmp56ol2y2h_test.go:63: expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp56ol2y2h_test.go:63: expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmp56ol2y2h_test.go:63: expected '[abcdedcba %!s(bool=true)]', got '[%!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp56ol2y2h_test.go:63: expected '[abba %!s(bool=true)]', got '[v %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmp56ol2y2h_test.go:63: expected '[ %!s(bool=true)]', got '[m %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    var result string\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                result = result + s[i]\n                isPalindrome = false\n                break\n            }\n        }\n    }\n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpiln21lll_test.go:27:33: invalid operation: result + s[i] (mismatched types string and byte)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:len(s)])\n            s = s[0:i]\n            break\n        }\n    }\n    if len(s) > 0 {\n        result = append(result, s)\n    }\n    if len(s) > 0 {\n        result = append(result, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpoea_xgwd_test.go:63: expected '[bcd %!s(bool=false)]', got '[abcde]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpoea_xgwd_test.go:63: expected '[acdef %!s(bool=false)]', got '[bcdef a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpoea_xgwd_test.go:63: expected '[cdedc %!s(bool=true)]', got '[a abcdedcb %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpoea_xgwd_test.go:63: expected '[dik %!s(bool=false)]', got '[wik d %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpoea_xgwd_test.go:63: expected '[ %!s(bool=true)]', got '[a]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpoea_xgwd_test.go:63: expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpoea_xgwd_test.go:63: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmpoea_xgwd_test.go:63: expected '[abba %!s(bool=true)]', got '[vabba]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpoea_xgwd_test.go:63: expected '[ %!s(bool=true)]', got '[ma mam %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:len(s)])\n            s = s[:i] + s[i+1:]\n        }\n    }\n    if s == s[:len(s) / 2] {\n        result = append(result, s)\n        result = append(result, true)\n    } else {\n        result = append(result, s)\n        result = append(result, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmphpa0bzde_test.go:62: expected '[bcd %!s(bool=false)]', got '[abcde bcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmphpa0bzde_test.go:62: expected '[acdef %!s(bool=false)]', got '[bcdef acdef %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmphpa0bzde_test.go:62: expected '[cdedc %!s(bool=true)]', got '[a abcdedcb bcdedcb %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmphpa0bzde_test.go:62: expected '[dik %!s(bool=false)]', got '[wik dik %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmphpa0bzde_test.go:62: expected '[ %!s(bool=true)]', got '[a  %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmphpa0bzde_test.go:62: expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmphpa0bzde_test.go:62: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmphpa0bzde_test.go:62: expected '[abba %!s(bool=true)]', got '[vabba abba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmphpa0bzde_test.go:62: expected '[ %!s(bool=true)]', got '[ma ma maa aa %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    \n    result := []interface{}{}\n    \n    for i := len(s) - 1; i >= 0; i-- {\n        if c[0] == s[i] {\n            result = append(result, s[i:len(s)])\n            s = s[0:i]\n        }\n    }\n    \n    if len(s) == 0 {\n        result = append(result, s)\n    }\n    \n    if len(s) == 0 {\n        result = append(result, s)\n    }\n    \n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmprasp85hj_test.go:67: expected '[bcd %!s(bool=false)]', got '[abcde  ]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmprasp85hj_test.go:67: expected '[acdef %!s(bool=false)]', got '[bcdef]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmprasp85hj_test.go:67: expected '[cdedc %!s(bool=true)]', got '[a abcdedcb  ]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmprasp85hj_test.go:67: expected '[dik %!s(bool=false)]', got '[wik]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmprasp85hj_test.go:67: expected '[ %!s(bool=true)]', got '[a  ]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmprasp85hj_test.go:67: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmprasp85hj_test.go:67: expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmprasp85hj_test.go:67: expected '[abba %!s(bool=true)]', got '[vabba  ]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmprasp85hj_test.go:67: expected '[ %!s(bool=true)]', got '[ma m ma  ]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    var result []interface{}\n    var result_string string\n    var result_bool bool\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := len(c) - 1; j >= 0; j-- {\n            if s[i] == c[j] {\n                result_string = s[0:i] + s[i+1:]\n                result_bool = true\n                break\n            }\n        }\n    }\n    result = append(result, result_string)\n    result = append(result, result_bool)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpb3kng91f_test.go:60: expected '[bcd %!s(bool=false)]', got '[bcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpb3kng91f_test.go:60: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpb3kng91f_test.go:60: expected '[cdedc %!s(bool=true)]', got '[bcdedcba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpb3kng91f_test.go:60: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpb3kng91f_test.go:60: expected '[abcdedcba %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpb3kng91f_test.go:60: expected '[abcdedcba %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpb3kng91f_test.go:60: expected '[ %!s(bool=true)]', got '[amma %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    if len(s) < len(c) {\n        return []interface{}{s, false}\n    }\n    var result string\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = result + s[i]\n            for j := 1; j < len(c); j++ {\n                if s[i] == c[j] {\n                    result = result + s[i]\n                } else {\n                    break\n                }\n            }\n        } else {\n            break\n        }\n    }\n    if len(result) == 0 {\n        return []interface{}{s, false}\n    }\n    if len(result) == len(s) {\n        isPalindrome = true\n    }\n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppua96rdn_test.go:29:29: invalid operation: result + s[i] (mismatched types string and byte)\n/tmp/tmppua96rdn_test.go:32:37: invalid operation: result + s[i] (mismatched types string and byte)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var result_bool bool\n    var result_string string\n    \n    for i := len(s) - 1; i >= 0; i-- {\n        for j := len(c) - 1; j >= 0; j-- {\n            if s[i] == c[j] {\n                result_bool = false\n                break\n            }\n        }\n        if result_bool == false {\n            break\n        }\n    }\n    \n    if result_bool == true {\n        result_string = s[0:len(s) - len(c)]\n        result = append(result, result_string)\n        result = append(result, result_bool)\n    }\n    \n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpvp1l6y4c_test.go:67: expected '[bcd %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpvp1l6y4c_test.go:67: expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpvp1l6y4c_test.go:67: expected '[cdedc %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpvp1l6y4c_test.go:67: expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpvp1l6y4c_test.go:67: expected '[ %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpvp1l6y4c_test.go:67: expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpvp1l6y4c_test.go:67: expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmpvp1l6y4c_test.go:67: expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpvp1l6y4c_test.go:67: expected '[ %!s(bool=true)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:i+1])\n            s = s[:i] + s[i+1:]\n        }\n    }\n    if len(s) == 0 {\n        result = append(result, s)\n    }\n    if len(s) == 0 && len(c) == 1 {\n        result = append(result, true)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmp4weltq9t_test.go:61: expected '[bcd %!s(bool=false)]', got '[a]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp4weltq9t_test.go:61: expected '[acdef %!s(bool=false)]', got '[b]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmp4weltq9t_test.go:61: expected '[cdedc %!s(bool=true)]', got '[a a]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp4weltq9t_test.go:61: expected '[dik %!s(bool=false)]', got '[w]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmp4weltq9t_test.go:61: expected '[ %!s(bool=true)]', got '[a  %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp4weltq9t_test.go:61: expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmp4weltq9t_test.go:61: expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp4weltq9t_test.go:61: expected '[abba %!s(bool=true)]', got '[v]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmp4weltq9t_test.go:61: expected '[ %!s(bool=true)]', got '[m m m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    result := make([]interface{}, 2)\n    result[0] = \"\"\n    result[1] = false\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result[0] = s[0:i] + s[i+1:]\n            result[1] = true\n            break\n        }\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536060, 0xc0001ba000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536060, 0xc0001ba000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpi6xvflax_test.go:25\ncommand-line-arguments_test.TestReverse_Delete(0xc000186300)\n\t/tmp/tmpi6xvflax_test.go:46 +0x8f1\ntesting.tRunner(0xc000186300, 0x54ef18)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            s = s[0:i] + s[i+1:]\n        }\n    }\n    if s == s[::-1] {\n        result = append(result, s, true)\n    } else {\n        result = append(result, s, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpmwzsi443_test.go:31:15: 2nd index required in 3-index slice\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                s = s[0:i] + s[i+1:]\n                isPalindrome = true\n                break\n            }\n        }\n    }\n    result = append(result, s)\n    result = append(result, isPalindrome)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[bcd %!s(bool=false)]', got '[bcd %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                s = s[0:i] + s[i+1:]\n                isPalindrome = true\n                break\n            }\n        }\n    }\n    result = append(result, s)\n    result = append(result, isPalindrome)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[bcd %!s(bool=false)]', got '[bcd %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := len(c) - 1; j >= 0; j-- {\n            if s[i] == c[j] {\n                s = s[0:i] + s[i+1:]\n                break\n            }\n        }\n    }\n    if s == \"\" {\n        result = append(result, s, true)\n    } else {\n        result = append(result, s, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmp8z07hef4_test.go:59: expected '[cdedc %!s(bool=true)]', got '[cdedc %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp8z07hef4_test.go:59: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmp8z07hef4_test.go:59: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp8z07hef4_test.go:59: expected '[abba %!s(bool=true)]', got '[abba %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            s = s[0:i] + s[i+1:]\n        }\n    }\n    if s == s[::-1] {\n        result = append(result, s, true)\n    } else {\n        result = append(result, s, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpmwzsi443_test.go:31:15: 2nd index required in 3-index slice\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var result_string string\n    var result_bool bool\n    var i int\n    var j int\n    for i = len(s) - 1; i >= 0; i-- {\n        for j = 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                result_string = s[0:i] + s[i+1:]\n                result_bool = true\n                break\n            }\n        }\n        if result_bool {\n            result = append(result, result_string)\n            result_string = \"\"\n            result_bool = false\n        }\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpg00vodvn_test.go:64: expected '[bcd %!s(bool=false)]', got '[abcd bcde]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpg00vodvn_test.go:64: expected '[acdef %!s(bool=false)]', got '[acdef]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpg00vodvn_test.go:64: expected '[cdedc %!s(bool=true)]', got '[abcdedcb abcdedca acdedcba bcdedcba]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpg00vodvn_test.go:64: expected '[dik %!s(bool=false)]', got '[dik]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpg00vodvn_test.go:64: expected '[ %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpg00vodvn_test.go:64: expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpg00vodvn_test.go:64: expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmpg00vodvn_test.go:64: expected '[abba %!s(bool=true)]', got '[abba]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpg00vodvn_test.go:64: expected '[ %!s(bool=true)]', got '[mamm mama mama mmma amma]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var palindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := len(c) - 1; j >= 0; j-- {\n            if s[i] == c[j] {\n                s = s[0:i] + s[i+1:]\n                palindrome = true\n                break\n            }\n        }\n        if palindrome {\n            break\n        }\n    }\n    result = append(result, s)\n    result = append(result, palindrome)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpf0yftw5k_test.go:61: expected '[bcd %!s(bool=false)]', got '[abcd %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpf0yftw5k_test.go:61: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpf0yftw5k_test.go:61: expected '[cdedc %!s(bool=true)]', got '[abcdedcb %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpf0yftw5k_test.go:61: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpf0yftw5k_test.go:61: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpf0yftw5k_test.go:61: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpf0yftw5k_test.go:61: expected '[ %!s(bool=true)]', got '[mamm %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var result_bool bool\n    var result_string string\n    var result_index int\n\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result_index = i\n            for j := 1; j < len(c); j++ {\n                if s[i - j] != c[j] {\n                    result_index = i - j\n                    break\n                }\n            }\n            result_string = s[0:result_index] + s[result_index+1:]\n            result_bool = true\n            break\n        }\n    }\n    result = append(result, result_string)\n    result = append(result, result_bool)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(0x545605, 0x5, 0x5452ff, 0x2, 0x0, 0x58a6df, 0x3b)\n\t/tmp/tmpv4h88591_test.go:30 +0x265\ncommand-line-arguments_test.TestReverse_Delete(0xc000001380)\n\t/tmp/tmpv4h88591_test.go:52 +0x6b\ntesting.tRunner(0xc000001380, 0x54f228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                s = s[0:i] + s[i+1:]\n                isPalindrome = true\n                break\n            }\n        }\n    }\n    result = []interface{}{s, isPalindrome}\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpquazizxz_test.go:57: expected '[bcd %!s(bool=false)]', got '[bcd %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpquazizxz_test.go:57: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpquazizxz_test.go:57: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpquazizxz_test.go:57: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpquazizxz_test.go:57: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var result_string string\n    var result_bool bool\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                result_string = s[0:i] + s[i+1:]\n                result_bool = is_palindrome(result_string)\n                result = append(result, result_string, result_bool)\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0x8htoii_test.go:28:31: undefined: is_palindrome\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    \n    var result string\n    var isPalindrome bool\n    \n    for i := len(s) - 1; i >= 0; i-- {\n        if c[0] == s[i] {\n            result = s[0:i] + s[i+1:]\n            isPalindrome = true\n            break\n        }\n    }\n    \n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpatpux3r9_test.go:61: expected '[bcd %!s(bool=false)]', got '[bcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpatpux3r9_test.go:61: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpatpux3r9_test.go:61: expected '[cdedc %!s(bool=true)]', got '[abcdedcb %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpatpux3r9_test.go:61: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpatpux3r9_test.go:61: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpatpux3r9_test.go:61: expected '[abcdedcba %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpatpux3r9_test.go:61: expected '[ %!s(bool=true)]', got '[mama %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var palindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                s = s[0:i] + s[i+1:]\n                palindrome = true\n                break\n            }\n        }\n    }\n    result = []interface{}{s, palindrome}\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpv704czm7_test.go:57: expected '[bcd %!s(bool=false)]', got '[bcd %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpv704czm7_test.go:57: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpv704czm7_test.go:57: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpv704czm7_test.go:57: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpv704czm7_test.go:57: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    if len(s) == 1 {\n        return []interface{}{s, true}\n    }\n    if len(c) == 1 {\n        return []interface{}{s[:len(s)-1], true}\n    }\n    if s[0] == c[0] {\n        return reverse_delete(s[1:len(s)], c[1:len(c)])\n    }\n    if s[0] == c[1] {\n        return reverse_delete(s[1:len(s)], c[2:len(c)])\n    }\n    return []interface{}{s, false}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmp_nagzxn7_test.go:61: expected '[bcd %!s(bool=false)]', got '[bcd %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp_nagzxn7_test.go:61: expected '[acdef %!s(bool=false)]', got '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmp_nagzxn7_test.go:61: expected '[cdedc %!s(bool=true)]', got '[bcdedcb %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp_nagzxn7_test.go:61: expected '[dik %!s(bool=false)]', got '[dwi %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmp_nagzxn7_test.go:61: expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp_nagzxn7_test.go:61: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmp_nagzxn7_test.go:61: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcb %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp_nagzxn7_test.go:61: expected '[abba %!s(bool=true)]', got '[vabb %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmp_nagzxn7_test.go:61: expected '[ %!s(bool=true)]', got '[mma %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    result := []interface{}{}\n    if len(s) == 0 {\n        return result\n    }\n    if len(c) == 0 {\n        return result\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] == c[0] {\n            result = append(result, fmt.Sprintf(\"%s\", s[i:len(s)-i]))\n            break\n        }\n    }\n    if len(result) == 0 {\n        return result\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] == c[0] {\n            result = append(result, fmt.Sprintf(\"%s\", s[i:len(s)-i]))\n            break\n        }\n    }\n    if len(result) == 0 {\n        return result\n    }\n    if s[0] == c[0] {\n        result = append(result, fmt.Sprintf(\"%s\", s[0:len(s)-1]))\n    }\n    if len(result) == 0 {\n        return result\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] == c[0] {\n            result = append(result, fmt.Sprintf(\"%s\", s[i:len(s)-i]))\n            break\n        }\n    }\n    if len(result) == 0 {\n        return result\n    }\n    if s[0] == c[0] {\n        result = append(result, fmt.Sprintf(\"%s\", s[0:len(s)-1]))\n    }\n    if len(result) == 0 {\n        return result\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] == c[0] {\n            result = append(result, fmt.Sprintf(\"%s\", s[i:len(s)-i]))\n            break\n        }\n    }\n    if len(result) == 0 {\n        return result\n    }\n    if s[0] == c[0] {\n        result = append(result, fmt\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpsqy8xk59_test.go:77:36: missing ',' before newline in argument list\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                s = s[0:i] + s[i+1:]\n                isPalindrome = true\n                break\n            }\n        }\n    }\n    result = append(result, s, isPalindrome)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmp4yvvlk0m_test.go:57: expected '[bcd %!s(bool=false)]', got '[bcd %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp4yvvlk0m_test.go:57: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp4yvvlk0m_test.go:57: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp4yvvlk0m_test.go:57: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmp4yvvlk0m_test.go:57: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            for j := len(c) - 1; j >= 0; j-- {\n                if s[i] == c[j] {\n                    s = s[0:i] + s[i+1:]\n                    break\n                }\n            }\n        }\n    }\n    if isPalindrome(s) {\n        result = append(result, s)\n        result = append(result, true)\n    } else {\n        result = append(result, s)\n        result = append(result, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp68geyucw_test.go:36:8: undefined: isPalindrome\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    \n    result := []interface{}{}\n    \n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            s = s[0:i] + s[i+1:]\n        }\n    }\n    \n    if s == s[::-1] {\n        result = append(result, s)\n        result = append(result, true)\n    } else {\n        result = append(result, s)\n        result = append(result, false)\n    }\n    \n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpdj2qni4f_test.go:30:15: 2nd index required in 3-index slice\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := len(c) - 1; j >= 0; j-- {\n            if s[i] == c[j] {\n                s = s[0:i] + s[i+1:]\n                break\n            }\n        }\n    }\n    if s == \"\" {\n        result = append(result, s, true)\n    } else {\n        result = append(result, s, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmp8z07hef4_test.go:59: expected '[cdedc %!s(bool=true)]', got '[cdedc %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp8z07hef4_test.go:59: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmp8z07hef4_test.go:59: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp8z07hef4_test.go:59: expected '[abba %!s(bool=true)]', got '[abba %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var result_bool bool\n    var result_string string\n    var result_index int\n    var result_length int\n    var result_index_int int\n    var result_index_string string\n    var result_index_bool bool\n    var result_index_string_bool bool\n    var result_index_string_bool_bool bool\n    var result_index_string_bool_bool_bool bool\n    var result_index_string_bool_bool_bool_bool bool\n    var result_index_string_bool_bool_bool_bool_bool bool\n    var result_index_string_bool_bool_bool_bool_bool_bool bool\n    var result_index_string_bool_bool_bool_bool_bool_bool_bool bool\n    var result_index_string_bool_bool_bool_bool_bool_bool_bool_bool bool\n    var result_index_string_bool_bool_bool_bool_bool_bool_bool_bool_bool bool\n    var result_index_string_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool bool\n    var result_index_string_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool bool\n    var result_index_string_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool bool\n    var result_index_string_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool bool\n    var result_index_string_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool bool\n    var result_index_string_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool bool\n    var result_index_string_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool bool\n    var result_index_string_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpz_ic6yir_test.go:45:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    \n    var result string\n    var isPalindrome bool\n    \n    for i := len(s) - 1; i >= 0; i-- {\n        if c[0] == s[i] {\n            result = s[i:len(s)]\n            isPalindrome = true\n            for j := 1; j < len(c); j++ {\n                if c[j] != s[i - j] {\n                    isPalindrome = false\n                    break\n                }\n            }\n            break\n        }\n    }\n    \n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(0x545605, 0x5, 0x5452ff, 0x2, 0x0, 0x58a6ff, 0x3b)\n\t/tmp/tmpe80muepb_test.go:34 +0x253\ncommand-line-arguments_test.TestReverse_Delete(0xc000102600)\n\t/tmp/tmpe80muepb_test.go:53 +0x6b\ntesting.tRunner(0xc000102600, 0x54f228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            for j := len(c) - 1; j >= 0; j-- {\n                if s[i] == c[j] {\n                    s = s[0:i] + s[i+1:]\n                    isPalindrome = true\n                    break\n                }\n            }\n        }\n    }\n    result = append(result, s)\n    result = append(result, isPalindrome)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(0x54606e, 0x9, 0x0, 0x0, 0xc000156080, 0x2, 0x2)\n\t/tmp/tmpyx6i82j5_test.go:24 +0x247\ncommand-line-arguments_test.TestReverse_Delete(0xc000102600)\n\t/tmp/tmpyx6i82j5_test.go:51 +0x237\ntesting.tRunner(0xc000102600, 0x54f228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if c[0] == s[i] {\n            s = s[0:i] + s[i+1:]\n            c = c[1:]\n        }\n    }\n    if s == s[::-1] {\n        result = append(result, fmt.Sprintf(\"%s\", s))\n        result = append(result, true)\n    } else {\n        result = append(result, fmt.Sprintf(\"%s\", s))\n        result = append(result, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmppdijw12k_test.go:31:15: 2nd index required in 3-index slice\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:i+1])\n            c = c[1:]\n            if len(c) == 0 {\n                break\n            }\n        }\n    }\n    if len(c) > 0 {\n        return result\n    }\n    if len(s) == len(result) {\n        if s == result[0].(string) {\n            result = append(result, true)\n        } else {\n            result = append(result, false)\n        }\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpwfmsu0vw_test.go:68: expected '[bcd %!s(bool=false)]', got '[a]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpwfmsu0vw_test.go:68: expected '[acdef %!s(bool=false)]', got '[b]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpwfmsu0vw_test.go:68: expected '[cdedc %!s(bool=true)]', got '[a b]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpwfmsu0vw_test.go:68: expected '[dik %!s(bool=false)]', got '[w]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpwfmsu0vw_test.go:68: expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpwfmsu0vw_test.go:68: expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpwfmsu0vw_test.go:68: expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmpwfmsu0vw_test.go:68: expected '[abba %!s(bool=true)]', got '[v]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpwfmsu0vw_test.go:68: expected '[ %!s(bool=true)]', got '[m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    \n    var result []interface{}\n    \n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:i+1])\n            c = c[1:]\n        }\n    }\n    \n    if len(c) == 0 {\n        result = append(result, s)\n        result = append(result, true)\n    } else {\n        result = append(result, s[0:len(s) - len(c)])\n        result = append(result, false)\n    }\n    \n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(0x545852, 0x6, 0x545278, 0x1, 0xc0000be640, 0x3, 0x4)\n\t/tmp/tmppm34vew__test.go:25 +0x466\ncommand-line-arguments_test.TestReverse_Delete(0xc000001380)\n\t/tmp/tmppm34vew__test.go:50 +0xcb\ntesting.tRunner(0xc000001380, 0x54f228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var result_string string\n    var result_bool bool\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                result_string = s[i:len(s)]\n                result_bool = true\n                break\n            }\n        }\n    }\n    result = append(result, result_string)\n    result = append(result, result_bool)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmph_5rceeu_test.go:59: expected '[bcd %!s(bool=false)]', got '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmph_5rceeu_test.go:59: expected '[acdef %!s(bool=false)]', got '[bcdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmph_5rceeu_test.go:59: expected '[cdedc %!s(bool=true)]', got '[abcdedcba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmph_5rceeu_test.go:59: expected '[dik %!s(bool=false)]', got '[wik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmph_5rceeu_test.go:59: expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmph_5rceeu_test.go:59: expected '[abcdedcba %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmph_5rceeu_test.go:59: expected '[abcdedcba %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmph_5rceeu_test.go:59: expected '[abba %!s(bool=true)]', got '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmph_5rceeu_test.go:59: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var result_bool bool\n    var result_string string\n    \n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result_string = s[0:i] + s[i+1:]\n            result_bool = true\n            break\n        }\n    }\n    \n    result = append(result, result_string)\n    result = append(result, result_bool)\n    \n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536060, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536060, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmp3pl56t25_test.go:26\ncommand-line-arguments_test.TestReverse_Delete(0xc000001380)\n\t/tmp/tmp3pl56t25_test.go:51 +0x825\ntesting.tRunner(0xc000001380, 0x54ef18)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var result_bool bool\n    var result_string string\n    var result_index int\n    var result_index_bool bool\n    var result_index_string string\n    var result_index_index int\n    var result_index_index_bool bool\n    var result_index_index_string string\n    var result_index_index_index int\n    var result_index_index_index_bool bool\n    var result_index_index_index_string string\n    var result_index_index_index_index int\n    var result_index_index_index_index_bool bool\n    var result_index_index_index_index_string string\n    var result_index_index_index_index_index int\n    var result_index_index_index_index_index_bool bool\n    var result_index_index_index_index_index_string string\n    var result_index_index_index_index_index_index int\n    var result_index_index_index_index_index_index_bool bool\n    var result_index_index_index_index_index_index_string string\n    var result_index_index_index_index_index_index_index int\n    var result_index_index_index_index_index_index_index_bool bool\n    var result_index_index_index_index_index_index_index_string string\n    var result_index_index_index_index_index_index_index_index int\n    var result_index_index_index_index_index_index_index_index_bool bool\n    var result_index_index_index_index_index_index_index_index_string string\n    var result_index_index_index_index_index_index_index_index_index int\n    var result_index_index_index_index_index_index_index_index_index_bool bool\n    var result_index_index_index_index_index_index_index_index_index_string string\n    var result_index_index_index_index_index_index_index_index_index_index int\n    var result_index_index_index_index_index_index_index_index_index_index_\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp41na10zq_test.go:52:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{\"\", false}\n    }\n    if len(s) == 1 {\n        return []interface{}{s, true}\n    }\n    if len(c) == 1 {\n        return []interface{}{s, false}\n    }\n    var result string\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = s[0:i] + s[i+1:]\n            isPalindrome = true\n            break\n        }\n    }\n    if isPalindrome {\n        return []interface{}{result, isPalindrome}\n    }\n    return []interface{}{s, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmppdwdi1w3_test.go:67: expected '[bcd %!s(bool=false)]', got '[bcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmppdwdi1w3_test.go:67: expected '[acdef %!s(bool=false)]', got '[abcdef %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmppdwdi1w3_test.go:67: expected '[cdedc %!s(bool=true)]', got '[abcdedcb %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmppdwdi1w3_test.go:67: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmppdwdi1w3_test.go:67: expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmppdwdi1w3_test.go:67: expected '[abcdedcba %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmppdwdi1w3_test.go:67: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmppdwdi1w3_test.go:67: expected '[abba %!s(bool=true)]', got '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmppdwdi1w3_test.go:67: expected '[ %!s(bool=true)]', got '[mama %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var result_bool bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:i+1])\n            result_bool = false\n        } else {\n            result = append(result, s[i])\n            result_bool = true\n        }\n    }\n    return []interface{}{result, result_bool}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536060, 0xc00015a000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536060, 0xc00015a000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpovpjs_gp_test.go:24\ncommand-line-arguments_test.TestReverse_Delete(0xc000102600)\n\t/tmp/tmpovpjs_gp_test.go:47 +0xe45\ntesting.tRunner(0xc000102600, 0x54ef18)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            for j := 0; j < len(c); j++ {\n                if s[i] == c[j] {\n                    s = s[0:i] + s[i+1:]\n                    isPalindrome = true\n                    break\n                }\n            }\n        }\n    }\n    result = append(result, s)\n    result = append(result, isPalindrome)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(0x54606e, 0x9, 0x0, 0x0, 0xc0000a40a0, 0x2, 0x2)\n\t/tmp/tmph4jmte44_test.go:24 +0x23b\ncommand-line-arguments_test.TestReverse_Delete(0xc000001380)\n\t/tmp/tmph4jmte44_test.go:51 +0x237\ntesting.tRunner(0xc000001380, 0x54f228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    var result string\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if c[0] == s[i] {\n            result += s[i]\n            c = c[1:]\n        } else {\n            break\n        }\n    }\n    if len(c) == 0 {\n        isPalindrome = true\n    }\n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpz7uk6ijn_test.go:29:20: invalid operation: result += s[i] (mismatched types string and byte)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                s = s[0:i] + s[i+1:]\n                isPalindrome = true\n                break\n            }\n        }\n    }\n    result = append(result, s)\n    result = append(result, isPalindrome)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[bcd %!s(bool=false)]', got '[bcd %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    result := []interface{}{}\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:i+1])\n            c = c[1:]\n        }\n    }\n    if len(c) > 0 {\n        result = append(result, c)\n    }\n    if len(s) == 0 {\n        result = append(result, \"\")\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x538320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x538320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmp2wgfof4p_test.go:23\ncommand-line-arguments_test.TestReverse_Delete(0xc000102600)\n\t/tmp/tmp2wgfof4p_test.go:45 +0x282c\ntesting.tRunner(0xc000102600, 0x551228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            s = s[0:i] + s[i+1:]\n            result = append(result, s)\n        }\n    }\n    if len(s) == 0 {\n        result = append(result, s)\n    }\n    if len(s) == len(c) {\n        result = append(result, true)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpzi2dcqcz_test.go:61: expected '[bcd %!s(bool=false)]', got '[bcde]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpzi2dcqcz_test.go:61: expected '[acdef %!s(bool=false)]', got '[acdef]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpzi2dcqcz_test.go:61: expected '[cdedc %!s(bool=true)]', got '[abcdedcb bcdedcb]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpzi2dcqcz_test.go:61: expected '[dik %!s(bool=false)]', got '[dik]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpzi2dcqcz_test.go:61: expected '[ %!s(bool=true)]', got '[ ]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpzi2dcqcz_test.go:61: expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpzi2dcqcz_test.go:61: expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmpzi2dcqcz_test.go:61: expected '[abba %!s(bool=true)]', got '[abba]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpzi2dcqcz_test.go:61: expected '[ %!s(bool=true)]', got '[mama maa aa]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    \n    var result string\n    var isPalindrome bool\n    \n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = s[i:] + result\n            c = c[1:]\n        }\n    }\n    \n    if len(c) == 0 {\n        isPalindrome = true\n    }\n    \n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2(0x537320, 0xc00015a000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102900)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x537320, 0xc00015a000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmp8f6uvj61_test.go:30\ncommand-line-arguments_test.TestReverse_Delete(0xc000102900)\n\t/tmp/tmp8f6uvj61_test.go:51 +0x1845\ntesting.tRunner(0xc000102900, 0x550228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            for j := 0; j < len(c); j++ {\n                if s[i] == c[j] {\n                    s = s[0:i] + s[i+1:]\n                    isPalindrome = true\n                    break\n                }\n            }\n        }\n    }\n    result = append(result, s)\n    result = append(result, isPalindrome)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(0x54606e, 0x9, 0x0, 0x0, 0xc0000a40a0, 0x2, 0x2)\n\t/tmp/tmph4jmte44_test.go:24 +0x23b\ncommand-line-arguments_test.TestReverse_Delete(0xc000001380)\n\t/tmp/tmph4jmte44_test.go:51 +0x237\ntesting.tRunner(0xc000001380, 0x54f228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            s = s[0:i] + s[i+1:]\n            result = append(result, s)\n        }\n    }\n    if len(s) == 0 {\n        result = append(result, s)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpb965bv9k_test.go:58: expected '[bcd %!s(bool=false)]', got '[bcde]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpb965bv9k_test.go:58: expected '[acdef %!s(bool=false)]', got '[acdef]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpb965bv9k_test.go:58: expected '[cdedc %!s(bool=true)]', got '[abcdedcb bcdedcb]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpb965bv9k_test.go:58: expected '[dik %!s(bool=false)]', got '[dik]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpb965bv9k_test.go:58: expected '[ %!s(bool=true)]', got '[ ]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpb965bv9k_test.go:58: expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpb965bv9k_test.go:58: expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmpb965bv9k_test.go:58: expected '[abba %!s(bool=true)]', got '[abba]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpb965bv9k_test.go:58: expected '[ %!s(bool=true)]', got '[mama maa aa]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var result_string string\n    var result_bool bool\n    \n    for i := 0; i < len(s); i++ {\n        for j := 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                result_string = s[i:len(s)-1]\n                result_bool = true\n                break\n            }\n        }\n    }\n    \n    result = append(result, result_string)\n    result = append(result, result_bool)\n    \n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpm7m9qfss_test.go:62: expected '[bcd %!s(bool=false)]', got '[ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpm7m9qfss_test.go:62: expected '[acdef %!s(bool=false)]', got '[bcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpm7m9qfss_test.go:62: expected '[cdedc %!s(bool=true)]', got '[ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpm7m9qfss_test.go:62: expected '[dik %!s(bool=false)]', got '[wi %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpm7m9qfss_test.go:62: expected '[abcdedcba %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpm7m9qfss_test.go:62: expected '[abcdedcba %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmpm7m9qfss_test.go:62: expected '[abba %!s(bool=true)]', got '[vabb %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if c[0] == s[i] {\n            s = s[0:i] + s[i+1:]\n            c = c[1:]\n        }\n    }\n    if s == s[::-1] {\n        result = append(result, s)\n        result = append(result, true)\n    } else {\n        result = append(result, s)\n        result = append(result, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374747,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp3sf2q0fw_test.go:31:15: 2nd index required in 3-index slice\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    var result []interface{}\n    var result_string string\n    var result_bool bool\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                result_string = s[0:i] + s[i+1:]\n                result_bool = true\n                break\n            }\n        }\n    }\n    result = append(result, result_string, result_bool)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmp1fhi87xk_test.go:59: expected '[bcd %!s(bool=false)]', got '[bcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp1fhi87xk_test.go:59: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmp1fhi87xk_test.go:59: expected '[cdedc %!s(bool=true)]', got '[bcdedcba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp1fhi87xk_test.go:59: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp1fhi87xk_test.go:59: expected '[abcdedcba %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmp1fhi87xk_test.go:59: expected '[abcdedcba %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmp1fhi87xk_test.go:59: expected '[ %!s(bool=true)]', got '[amma %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.033s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var result_string string\n    var result_bool bool\n    var i int\n    var j int\n    for i = len(s) - 1; i >= 0; i-- {\n        for j = len(c) - 1; j >= 0; j-- {\n            if s[i] == c[j] {\n                result_string = s[0:i] + s[i+1:]\n                result_bool = true\n                break\n            }\n        }\n    }\n    result = append(result, result_string)\n    result = append(result, result_bool)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmprbcmrph2_test.go:61: expected '[bcd %!s(bool=false)]', got '[bcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmprbcmrph2_test.go:61: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmprbcmrph2_test.go:61: expected '[cdedc %!s(bool=true)]', got '[bcdedcba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmprbcmrph2_test.go:61: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmprbcmrph2_test.go:61: expected '[abcdedcba %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmprbcmrph2_test.go:61: expected '[abcdedcba %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmprbcmrph2_test.go:61: expected '[ %!s(bool=true)]', got '[amma %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{\"\", false}\n    }\n    \n    var result string\n    var isPalindrome bool\n    \n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = result + s[i]\n            c = c[1:]\n        } else {\n            break\n        }\n    }\n    \n    if len(c) == 0 {\n        isPalindrome = true\n    } else {\n        isPalindrome = false\n    }\n    \n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0rwiv5kw_test.go:31:29: invalid operation: result + s[i] (mismatched types string and byte)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    \n    var result string\n    var isPalindrome bool\n    \n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = s[0:i] + s[i+1:]\n            isPalindrome = true\n            break\n        }\n    }\n    \n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpvmxtqdgs_test.go:61: expected '[bcd %!s(bool=false)]', got '[bcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpvmxtqdgs_test.go:61: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpvmxtqdgs_test.go:61: expected '[cdedc %!s(bool=true)]', got '[abcdedcb %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpvmxtqdgs_test.go:61: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpvmxtqdgs_test.go:61: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpvmxtqdgs_test.go:61: expected '[abcdedcba %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpvmxtqdgs_test.go:61: expected '[ %!s(bool=true)]', got '[mama %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s, c)\n    // fmt.Println(s\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpljjdafd3_test.go:64:6: expected '(', found TestReverse_Delete\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                s = s[0:i] + s[i+1:]\n                isPalindrome = true\n                break\n            }\n        }\n    }\n    result = []interface{}{s, isPalindrome}\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpquazizxz_test.go:57: expected '[bcd %!s(bool=false)]', got '[bcd %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpquazizxz_test.go:57: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpquazizxz_test.go:57: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpquazizxz_test.go:57: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpquazizxz_test.go:57: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    \n    result := []interface{}{}\n    \n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:i+1])\n            c = c[1:]\n            if len(c) == 0 {\n                break\n            }\n        }\n    }\n    \n    if len(c) > 0 {\n        return []interface{}{result, false}\n    }\n    \n    return []interface{}{result, true}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpd0js99x0_test.go:66: expected '[bcd %!s(bool=false)]', got '[[a] %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpd0js99x0_test.go:66: expected '[acdef %!s(bool=false)]', got '[[b] %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpd0js99x0_test.go:66: expected '[cdedc %!s(bool=true)]', got '[[a b] %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpd0js99x0_test.go:66: expected '[dik %!s(bool=false)]', got '[[w] %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpd0js99x0_test.go:66: expected '[ %!s(bool=true)]', got '[[a] %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpd0js99x0_test.go:66: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpd0js99x0_test.go:66: expected '[abcdedcba %!s(bool=true)]', got '[[] %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmpd0js99x0_test.go:66: expected '[abba %!s(bool=true)]', got '[[v] %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpd0js99x0_test.go:66: expected '[ %!s(bool=true)]', got '[[m] %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:i+1])\n            c = c[1:]\n        }\n    }\n    if len(c) > 0 {\n        return result\n    }\n    if len(s) == len(result) {\n        result = append(result, true)\n    } else {\n        result = append(result, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(0x545852, 0x6, 0x545278, 0x1, 0xc00009a4c0, 0x1, 0x1)\n\t/tmp/tmp5f9kzca3_test.go:27 +0x365\ncommand-line-arguments_test.TestReverse_Delete(0xc000001380)\n\t/tmp/tmp5f9kzca3_test.go:51 +0xcb\ntesting.tRunner(0xc000001380, 0x54f228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            s = s[0:i] + s[i+1:]\n        }\n    }\n    if s == s[::-1] {\n        result = append(result, s)\n        result = append(result, true)\n    } else {\n        result = append(result, s)\n        result = append(result, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374747,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpbqd4v_vm_test.go:30:15: 2nd index required in 3-index slice\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            s = s[0:i] + s[i+1:]\n            isPalindrome = true\n            break\n        }\n    }\n    result = append(result, s)\n    result = append(result, isPalindrome)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536060, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536060, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmphgz39456_test.go:24\ncommand-line-arguments_test.TestReverse_Delete(0xc000001380)\n\t/tmp/tmphgz39456_test.go:47 +0x850\ntesting.tRunner(0xc000001380, 0x54ef18)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                s = s[0:i] + s[i+1:]\n                isPalindrome = true\n                break\n            }\n        }\n    }\n    result = append(result, s, isPalindrome)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmp4yvvlk0m_test.go:57: expected '[bcd %!s(bool=false)]', got '[bcd %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp4yvvlk0m_test.go:57: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp4yvvlk0m_test.go:57: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp4yvvlk0m_test.go:57: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmp4yvvlk0m_test.go:57: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var isPalindrome bool\n    var s2 string\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            s2 = s[0:i] + s[i+1:]\n            isPalindrome = true\n            for j := 0; j < len(c); j++ {\n                if s2[j] != c[j] {\n                    isPalindrome = false\n                    break\n                }\n            }\n            if isPalindrome {\n                result = append(result, s2)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(0x56dbd0, 0x1, 0x56dbd0, 0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmph8_arihy_test.go:29 +0x226\ncommand-line-arguments_test.TestReverse_Delete(0xc000102600)\n\t/tmp/tmph8_arihy_test.go:53 +0x1e4\ntesting.tRunner(0xc000102600, 0x54f228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:i+1])\n            c = c[1:]\n            if len(c) == 0 {\n                break\n            }\n        }\n    }\n    if len(c) > 0 {\n        return result\n    }\n    if len(result) == 0 {\n        return result\n    }\n    if len(result) == 1 {\n        return result\n    }\n    if result[0] == result[len(result)-1] {\n        return result\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmp6wdc7x8s_test.go:71: expected '[bcd %!s(bool=false)]', got '[a]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp6wdc7x8s_test.go:71: expected '[acdef %!s(bool=false)]', got '[b]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmp6wdc7x8s_test.go:71: expected '[cdedc %!s(bool=true)]', got '[a b]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp6wdc7x8s_test.go:71: expected '[dik %!s(bool=false)]', got '[w]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmp6wdc7x8s_test.go:71: expected '[ %!s(bool=true)]', got '[a]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp6wdc7x8s_test.go:71: expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmp6wdc7x8s_test.go:71: expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp6wdc7x8s_test.go:71: expected '[abba %!s(bool=true)]', got '[v]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmp6wdc7x8s_test.go:71: expected '[ %!s(bool=true)]', got '[m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    result := []interface{}{}\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:i+1])\n            for j := i; j >= 0; j-- {\n                if s[j] == c[0] {\n                    s = s[0:j] + s[j+1:]\n                }\n            }\n        }\n    }\n    if len(s) == 0 {\n        result = append(result, s)\n    }\n    if len(s) == len(c) {\n        result = append(result, true)\n    } else {\n        result = append(result, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [7] with length 7 [recovered]\n\tpanic: runtime error: index out of range [7] with length 7\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(0x54606e, 0x7, 0x5452fd, 0x2, 0xc0000a4040, 0x2, 0x2)\n\t/tmp/tmpo9metwri_test.go:23 +0x4ba\ncommand-line-arguments_test.TestReverse_Delete(0xc000001380)\n\t/tmp/tmpo9metwri_test.go:52 +0x12b\ntesting.tRunner(0xc000001380, 0x54f228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var result_string string\n    var result_bool bool\n    \n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result_string = s[0:i] + s[i+1:]\n            result_bool = true\n            break\n        }\n    }\n    \n    result = append(result, result_string)\n    result = append(result, result_bool)\n    \n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536060, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a0300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536060, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpbm240_lc_test.go:26\ncommand-line-arguments_test.TestReverse_Delete(0xc0001a0300)\n\t/tmp/tmpbm240_lc_test.go:51 +0x825\ntesting.tRunner(0xc0001a0300, 0x54ef18)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    var result string\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if c[0] == s[i] {\n            result = s[i:len(s)]\n            isPalindrome = true\n            for j := 0; j < len(c); j++ {\n                if c[j] != s[i] {\n                    isPalindrome = false\n                    break\n                }\n            }\n            if isPalindrome {\n                s = s[:i]\n                break\n            }\n        }\n    }\n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmp2i91aes0_test.go:67: expected '[bcd %!s(bool=false)]', got '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp2i91aes0_test.go:67: expected '[acdef %!s(bool=false)]', got '[bcdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmp2i91aes0_test.go:67: expected '[cdedc %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp2i91aes0_test.go:67: expected '[dik %!s(bool=false)]', got '[wik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmp2i91aes0_test.go:67: expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp2i91aes0_test.go:67: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmp2i91aes0_test.go:67: expected '[abcdedcba %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp2i91aes0_test.go:67: expected '[abba %!s(bool=true)]', got '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmp2i91aes0_test.go:67: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var result_string string\n    var result_bool bool\n    \n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result_string = s[0:i] + s[i+1:]\n            result_bool = true\n            break\n        }\n    }\n    \n    result = append(result, result_string, result_bool)\n    \n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpmf_ntml0_test.go:26\ncommand-line-arguments_test.TestReverse_Delete(0xc000102600)\n\t/tmp/tmpmf_ntml0_test.go:50 +0x630\ntesting.tRunner(0xc000102600, 0x54df18)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if c[0] == s[i] {\n            result = append(result, s[i:len(s)])\n            s = s[0:i]\n            break\n        }\n    }\n    if len(s) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if c[0] == s[i] {\n            result = append(result, s[i:len(s)])\n            s = s[0:i]\n            break\n        }\n    }\n    if len(s) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if c[0] == s[i] {\n            result = append(result, s[i:len(s)])\n            s = s[0:i]\n            break\n        }\n    }\n    if len(s) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if c[0] == s[i] {\n            result = append(result, s[i:len(s)])\n            s = s[0:i]\n            break\n        }\n    }\n    if len(s) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if c[0] == s[i] {\n            result = append(result, s[i:len(s)])\n            s = s[0:i]\n            break\n        }\n    }\n    if len(s) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if c[0] == s[i] {\n            result = append(result, s[i:len(s)\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpqihqe7nq_test.go:78:47: expected ']', found newline\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    for i := len(s) - 1; i >= 0; i-- {\n        if c[0] == s[i] {\n            result = append(result, s[i:i+1])\n            c = c[1:]\n        }\n    }\n    if len(c) > 0 {\n        result = append(result, s[0:0])\n    }\n    result = append(result, fmt.Sprintf(\"%s\", c))\n    result = append(result, true)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001ba000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001ba000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(0x545852, 0x6, 0x545278, 0x0, 0xc000188640, 0x4, 0x4)\n\t/tmp/tmpobl5dh29_test.go:23 +0x471\ncommand-line-arguments_test.TestReverse_Delete(0xc000186300)\n\t/tmp/tmpobl5dh29_test.go:44 +0xcb\ntesting.tRunner(0xc000186300, 0x54f228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                s = s[0:i] + s[i+1:]\n                break\n            }\n        }\n    }\n    if s == \"\" {\n        result = append(result, s, true)\n    } else {\n        result = append(result, s, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmp_apm27tn_test.go:59: expected '[cdedc %!s(bool=true)]', got '[cdedc %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp_apm27tn_test.go:59: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmp_apm27tn_test.go:59: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp_apm27tn_test.go:59: expected '[abba %!s(bool=true)]', got '[abba %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    result := []interface{}{}\n    if len(s) == 0 {\n        return result\n    }\n    if len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            s = s[0:i] + s[i+1:]\n        }\n    }\n    if s == s[::-1] {\n        result = append(result, s)\n        result = append(result, true)\n    } else {\n        result = append(result, s)\n        result = append(result, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpdxgmpiuh_test.go:33:15: 2nd index required in 3-index slice\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    var result string\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = s[i:] + result\n            c = c[1:]\n        }\n    }\n    if len(c) == 0 {\n        isPalindrome = true\n    }\n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x537320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x537320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpgi__br9__test.go:25\ncommand-line-arguments_test.TestReverse_Delete(0xc000102600)\n\t/tmp/tmpgi__br9__test.go:44 +0x1959\ntesting.tRunner(0xc000102600, 0x550228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    \n    var result string\n    var isPalindrome bool\n    \n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = s[i:] + result\n            c = c[1:]\n        }\n    }\n    \n    if len(c) == 0 {\n        isPalindrome = true\n    }\n    \n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x537320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x537320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpwqsc8ril_test.go:30\ncommand-line-arguments_test.TestReverse_Delete(0xc000001380)\n\t/tmp/tmpwqsc8ril_test.go:51 +0x1845\ntesting.tRunner(0xc000001380, 0x550228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    var result string\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = s[i:] + result\n            c = c[1:]\n        }\n    }\n    if len(c) == 0 {\n        isPalindrome = true\n    }\n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x537320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x537320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpgi__br9__test.go:25\ncommand-line-arguments_test.TestReverse_Delete(0xc000102600)\n\t/tmp/tmpgi__br9__test.go:44 +0x1959\ntesting.tRunner(0xc000102600, 0x550228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:len(s)])\n            s = s[0:i]\n            break\n        }\n    }\n    if len(s) == 0 {\n        result = append(result, s)\n    }\n    if len(s) == 0 {\n        result = append(result, true)\n    } else {\n        result = append(result, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpjvq3yo47_test.go:64: expected '[bcd %!s(bool=false)]', got '[abcde  %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpjvq3yo47_test.go:64: expected '[acdef %!s(bool=false)]', got '[bcdef %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpjvq3yo47_test.go:64: expected '[cdedc %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpjvq3yo47_test.go:64: expected '[dik %!s(bool=false)]', got '[wik %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpjvq3yo47_test.go:64: expected '[ %!s(bool=true)]', got '[a  %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpjvq3yo47_test.go:64: expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpjvq3yo47_test.go:64: expected '[abcdedcba %!s(bool=true)]', got '[%!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmpjvq3yo47_test.go:64: expected '[abba %!s(bool=true)]', got '[vabba  %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpjvq3yo47_test.go:64: expected '[ %!s(bool=true)]', got '[ma %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{\"\", false}\n    }\n    if len(s) == 1 {\n        return []interface{}{s, true}\n    }\n    if len(c) == 1 {\n        return []interface{}{s, false}\n    }\n    if s[0] == c[0] {\n        return reverse_delete(s[1:], c[1:])\n    }\n    if s[0] == c[1] {\n        return reverse_delete(s[1:], c[0:])\n    }\n    return []interface{}{s, false}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmplk6ynhif_test.go:61: expected '[bcd %!s(bool=false)]', got '[bcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmplk6ynhif_test.go:61: expected '[acdef %!s(bool=false)]', got '[abcdef %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmplk6ynhif_test.go:61: expected '[cdedc %!s(bool=true)]', got '[bcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmplk6ynhif_test.go:61: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmplk6ynhif_test.go:61: expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmplk6ynhif_test.go:61: expected '[abcdedcba %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmplk6ynhif_test.go:61: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmplk6ynhif_test.go:61: expected '[abba %!s(bool=true)]', got '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmplk6ynhif_test.go:61: expected '[ %!s(bool=true)]', got '[mma %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var result_bool bool\n    var result_string string\n    var result_index int\n    var result_index_bool bool\n    var result_index_string string\n    var result_index_index int\n    var result_index_index_bool bool\n    var result_index_index_string string\n    var result_index_index_index int\n    var result_index_index_index_bool bool\n    var result_index_index_index_string string\n    var result_index_index_index_index int\n    var result_index_index_index_index_bool bool\n    var result_index_index_index_index_string string\n    var result_index_index_index_index_index int\n    var result_index_index_index_index_index_bool bool\n    var result_index_index_index_index_index_string string\n    var result_index_index_index_index_index_index int\n    var result_index_index_index_index_index_index_bool bool\n    var result_index_index_index_index_index_index_string string\n    var result_index_index_index_index_index_index_index int\n    var result_index_index_index_index_index_index_index_bool bool\n    var result_index_index_index_index_index_index_index_string string\n    var result_index_index_index_index_index_index_index_index int\n    var result_index_index_index_index_index_index_index_index_bool bool\n    var result_index_index_index_index_index_index_index_index_string string\n    var result_index_index_index_index_index_index_index_index_index int\n    var result_index_index_index_index_index_index_index_index_index_bool bool\n    var result_index_index_index_index_index_index_index_index_index_string string\n    var result_index_index_index_index_index_index_index_index_index_index int\n    var result_index_index_index_index_index_index_index_index_index_index_\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp41na10zq_test.go:52:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    var result string\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = s[i:len(s)]\n            isPalindrome = true\n            for j := 0; j < len(c); j++ {\n                if s[i] != c[j] {\n                    isPalindrome = false\n                    break\n                }\n            }\n            break\n        }\n    }\n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmptw_nxg_2_test.go:64: expected '[bcd %!s(bool=false)]', got '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmptw_nxg_2_test.go:64: expected '[acdef %!s(bool=false)]', got '[bcdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmptw_nxg_2_test.go:64: expected '[cdedc %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmptw_nxg_2_test.go:64: expected '[dik %!s(bool=false)]', got '[wik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmptw_nxg_2_test.go:64: expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmptw_nxg_2_test.go:64: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmptw_nxg_2_test.go:64: expected '[abcdedcba %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmptw_nxg_2_test.go:64: expected '[abba %!s(bool=true)]', got '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmptw_nxg_2_test.go:64: expected '[ %!s(bool=true)]', got '[ma %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    var result []interface{}\n    var result_bool bool\n    var result_string string\n    if len(s) == 0 {\n        result_bool = true\n        result_string = \"\"\n    } else {\n        result_bool = false\n        result_string = s\n    }\n    for i := 0; i < len(c); i++ {\n        for j := len(s) - 1; j >= 0; j-- {\n            if s[j] == c[i] {\n                result_bool = true\n                result_string = result_string[0:j] + result_string[j+1:]\n                break\n            }\n        }\n    }\n    result = []interface{}{result_string, result_bool}\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: slice bounds out of range [5:4] [recovered]\n\tpanic: runtime error: slice bounds out of range [5:4]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(0x545605, 0x5, 0x5452ff, 0x2, 0x0, 0x58a6df, 0x3b)\n\t/tmp/tmp7tntnv57_test.go:36 +0x205\ncommand-line-arguments_test.TestReverse_Delete(0xc000186300)\n\t/tmp/tmp7tntnv57_test.go:52 +0x6b\ntesting.tRunner(0xc000186300, 0x54f228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:i+1])\n            c = c[1:]\n            if len(c) == 0 {\n                break\n            }\n        }\n    }\n    if len(c) > 0 {\n        return result\n    }\n    if len(result) == 0 {\n        return []interface{}{\"\", false}\n    }\n    if len(result) == 1 {\n        if result[0] == s {\n            return []interface{}{\"\", true}\n        }\n        return []interface{}{\"\", false}\n    }\n    if result[0] == s {\n        return []interface{}{\"\", true}\n    }\n    return []interface{}{\"\", false}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpzue6sb_1_test.go:74: expected '[bcd %!s(bool=false)]', got '[a]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpzue6sb_1_test.go:74: expected '[acdef %!s(bool=false)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpzue6sb_1_test.go:74: expected '[cdedc %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpzue6sb_1_test.go:74: expected '[dik %!s(bool=false)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpzue6sb_1_test.go:74: expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpzue6sb_1_test.go:74: expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmpzue6sb_1_test.go:74: expected '[abba %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpzue6sb_1_test.go:74: expected '[ %!s(bool=true)]', got '[m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:i+1])\n            s = s[0:i] + s[i+1:]\n        }\n    }\n    if s == \"\" {\n        result = append(result, s)\n    }\n    if s == s[::-1] {\n        result = append(result, true)\n    } else {\n        result = append(result, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp29kmfwir_test.go:34:15: 2nd index required in 3-index slice\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var result_bool bool\n    var result_string string\n    var result_index int\n    var result_length int\n    var result_length_int int\n    var result_length_string string\n    var result_length_string_int int\n    var result_length_string_string string\n    var result_length_string_string_int int\n    var result_length_string_string_string int\n    var result_length_string_string_string_int int\n    var result_length_string_string_string_string int\n    var result_length_string_string_string_string_int int\n    var result_length_string_string_string_string_string int\n    var result_length_string_string_string_string_string_int int\n    var result_length_string_string_string_string_string_string int\n    var result_length_string_string_string_string_string_string_int int\n    var result_length_string_string_string_string_string_string_string int\n    var result_length_string_string_string_string_string_string_string_int int\n    var result_length_string_string_string_string_string_string_string_string int\n    var result_length_string_string_string_string_string_string_string_string_int int\n    var result_length_string_string_string_string_string_string_string_string_string int\n    var result_length_string_string_string_string_string_string_string_string_string_int int\n    var result_length_string_string_string_string_string_string_string_string_string_string int\n    var result_length_string_string_string_string_string_string_string_string_string_string_int int\n    var result_length_string_string_string_string_string_string_string_string_string_string_string int\n    var result_length_string_string_string_string_string_string_string_string_string_string_string_int int\n    var result_length_string_string_string_string_string_string_string_string_string_string_string\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpeprubfvb_test.go:49:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:i+1])\n            s = s[0:i] + s[i+1:]\n        }\n    }\n    if len(s) == 0 {\n        result = append(result, s)\n        result = append(result, true)\n    } else {\n        result = append(result, s)\n        result = append(result, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(0x54606e, 0x9, 0x0, 0x0, 0xc0000be740, 0x3, 0x4)\n\t/tmp/tmpetjv0rca_test.go:23 +0x4de\ncommand-line-arguments_test.TestReverse_Delete(0xc000001380)\n\t/tmp/tmpetjv0rca_test.go:50 +0x237\ntesting.tRunner(0xc000001380, 0x54f228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:i+1])\n            c = c[1:]\n        }\n    }\n    if len(c) == 0 {\n        result = append(result, s)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x537320, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x537320, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmp8bu2r10i_test.go:26\ncommand-line-arguments_test.TestReverse_Delete(0xc000102600)\n\t/tmp/tmp8bu2r10i_test.go:45 +0x2365\ntesting.tRunner(0xc000102600, 0x550228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    if len(s) == 1 {\n        return []interface{}{s, true}\n    }\n    if len(c) == 1 {\n        return []interface{}{s, false}\n    }\n    if s[0] == c[0] {\n        return reverse_delete(s[1:], c[1:])\n    }\n    if s[0] == c[1] {\n        return reverse_delete(s[1:], c[0:])\n    }\n    return []interface{}{s, false}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374764,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpo_c974d__test.go:61: expected '[bcd %!s(bool=false)]', got '[bcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpo_c974d__test.go:61: expected '[acdef %!s(bool=false)]', got '[abcdef %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpo_c974d__test.go:61: expected '[cdedc %!s(bool=true)]', got '[bcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpo_c974d__test.go:61: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpo_c974d__test.go:61: expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpo_c974d__test.go:61: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpo_c974d__test.go:61: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmpo_c974d__test.go:61: expected '[abba %!s(bool=true)]', got '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpo_c974d__test.go:61: expected '[ %!s(bool=true)]', got '[mma %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var result_string string\n    var result_bool bool\n    var i int\n    var j int\n    for i = len(s) - 1; i >= 0; i-- {\n        for j = 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                break\n            }\n        }\n        if j == len(c) {\n            result_string = s[i:]\n            result_bool = true\n            break\n        }\n    }\n    result = []interface{}{result_string, result_bool}\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374764,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpz_7qw_g9_test.go:63: expected '[bcd %!s(bool=false)]', got '[de %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpz_7qw_g9_test.go:63: expected '[acdef %!s(bool=false)]', got '[f %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpz_7qw_g9_test.go:63: expected '[cdedc %!s(bool=true)]', got '[cba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpz_7qw_g9_test.go:63: expected '[dik %!s(bool=false)]', got '[k %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpz_7qw_g9_test.go:63: expected '[ %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpz_7qw_g9_test.go:63: expected '[abcdedcba %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpz_7qw_g9_test.go:63: expected '[abcdedcba %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmpz_7qw_g9_test.go:63: expected '[abba %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpz_7qw_g9_test.go:63: expected '[ %!s(bool=true)]', got '[ %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    \n    var result string\n    var isPalindrome bool\n    \n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = s[0:i] + s[i+1:]\n            isPalindrome = true\n            for j := 0; j < len(c); j++ {\n                if s[i] != c[j] {\n                    isPalindrome = false\n                    break\n                }\n            }\n            break\n        }\n    }\n    \n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374764,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpjl9_u94w_test.go:67: expected '[bcd %!s(bool=false)]', got '[bcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpjl9_u94w_test.go:67: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpjl9_u94w_test.go:67: expected '[cdedc %!s(bool=true)]', got '[abcdedcb %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpjl9_u94w_test.go:67: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpjl9_u94w_test.go:67: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpjl9_u94w_test.go:67: expected '[abcdedcba %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpjl9_u94w_test.go:67: expected '[ %!s(bool=true)]', got '[mama %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := len(c) - 1; j >= 0; j-- {\n            if s[i] == c[j] {\n                s = s[0:i] + s[i+1:]\n                isPalindrome = true\n                break\n            }\n        }\n        if isPalindrome {\n            break\n        }\n    }\n    result = append(result, s)\n    result = append(result, isPalindrome)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374764,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpf_3pbs1m_test.go:61: expected '[bcd %!s(bool=false)]', got '[abcd %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpf_3pbs1m_test.go:61: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpf_3pbs1m_test.go:61: expected '[cdedc %!s(bool=true)]', got '[abcdedcb %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpf_3pbs1m_test.go:61: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpf_3pbs1m_test.go:61: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpf_3pbs1m_test.go:61: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpf_3pbs1m_test.go:61: expected '[ %!s(bool=true)]', got '[mamm %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                s = s[0:i] + s[i+1:]\n                isPalindrome = true\n                break\n            }\n        }\n    }\n    result = append(result, s)\n    result = append(result, isPalindrome)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[bcd %!s(bool=false)]', got '[bcd %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    var result []interface{}\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                s = s[0:i] + s[i+1:]\n                isPalindrome = true\n                break\n            }\n        }\n    }\n    result = []interface{}{s, isPalindrome}\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374764,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmppels6p8d_test.go:58: expected '[bcd %!s(bool=false)]', got '[bcd %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmppels6p8d_test.go:58: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmppels6p8d_test.go:58: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmppels6p8d_test.go:58: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmppels6p8d_test.go:58: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            for j := 0; j < len(c); j++ {\n                if s[i] == c[j] {\n                    s = s[0:i] + s[i+1:]\n                    isPalindrome = true\n                    break\n                }\n            }\n        }\n    }\n    result = append(result, s)\n    result = append(result, isPalindrome)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(0x54606e, 0x9, 0x0, 0x0, 0xc0000a40a0, 0x2, 0x2)\n\t/tmp/tmph4jmte44_test.go:24 +0x23b\ncommand-line-arguments_test.TestReverse_Delete(0xc000001380)\n\t/tmp/tmph4jmte44_test.go:51 +0x237\ntesting.tRunner(0xc000001380, 0x54f228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var result_bool bool\n    for i := 0; i < len(s); i++ {\n        if c[0] == s[i] {\n            result = append(result, s[i:len(s)])\n            result_bool = false\n            for j := 0; j < len(c); j++ {\n                if c[j] == s[i] {\n                    result_bool = true\n                    break\n                }\n            }\n            break\n        }\n    }\n    return []interface{}{result, result_bool}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374764,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536060, 0xc0001ba000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536060, 0xc0001ba000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpbl02e20q_test.go:24\ncommand-line-arguments_test.TestReverse_Delete(0xc000186300)\n\t/tmp/tmpbl02e20q_test.go:51 +0x9fe\ntesting.tRunner(0xc000186300, 0x54ef20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // fmt.Println(\"reverse_delete\")\n    // fmt.Println(\"s:\", s)\n    // fmt.Println(\"c:\", c)\n    // fmt.Println(\"\")\n    \n    result := []interface{}{}\n    \n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    \n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            s = s[0:i] + s[i+1:]\n            c = c[1:]\n        }\n    }\n    \n    if len(s) == 0 {\n        result = append(result, s)\n        result = append(result, false)\n        return result\n    }\n    \n    if len(c) == 0 {\n        result = append(result, s)\n        result = append(result, true)\n        return result\n    }\n    \n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374764,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(0x545852, 0x6, 0x545278, 0x1, 0x64d388, 0x0, 0x0)\n\t/tmp/tmpjc23blnm_test.go:33 +0x3fa\ncommand-line-arguments_test.TestReverse_Delete(0xc000102600)\n\t/tmp/tmpjc23blnm_test.go:62 +0xcb\ntesting.tRunner(0xc000102600, 0x54f228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := len(c) - 1; j >= 0; j-- {\n            if s[i] == c[j] {\n                s = s[0:i] + s[i+1:]\n                break\n            }\n        }\n    }\n    if len(s) == 0 {\n        result = append(result, s, true)\n    } else {\n        result = append(result, s, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpyk003ova_test.go:59: expected '[cdedc %!s(bool=true)]', got '[cdedc %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpyk003ova_test.go:59: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpyk003ova_test.go:59: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmpyk003ova_test.go:59: expected '[abba %!s(bool=true)]', got '[abba %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    \n    var result string\n    var isPalindrome bool\n    \n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = s[i:len(s)]\n            isPalindrome = true\n            for j := 1; j < len(c); j++ {\n                if s[i-j] != c[j] {\n                    isPalindrome = false\n                    break\n                }\n            }\n            break\n        }\n    }\n    \n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(0x545605, 0x5, 0x5452ff, 0x2, 0x0, 0x58a6ff, 0x3b)\n\t/tmp/tmp3brwqoaj_test.go:34 +0x25d\ncommand-line-arguments_test.TestReverse_Delete(0xc000001380)\n\t/tmp/tmp3brwqoaj_test.go:53 +0x6b\ntesting.tRunner(0xc000001380, 0x54f228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    var result []interface{}\n    if len(s) == 0 || len(c) == 0 {\n        result = []interface{}{s, false}\n        return result\n    }\n    for i := 0; i < len(s); i++ {\n        if c[0] == s[i] {\n            c = c[1:]\n        }\n    }\n    if len(c) == 0 {\n        result = []interface{}{s, true}\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if c[0] == s[i] {\n            c = c[1:]\n        }\n    }\n    if len(c) == 0 {\n        result = []interface{}{s, true}\n        return result\n    }\n    result = []interface{}{s, false}\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374764,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(0x545852, 0x6, 0x545278, 0x1, 0xc000156000, 0x2, 0x2)\n\t/tmp/tmpzi1mu6sk_test.go:28 +0x3af\ncommand-line-arguments_test.TestReverse_Delete(0xc000102600)\n\t/tmp/tmpzi1mu6sk_test.go:57 +0xcb\ntesting.tRunner(0xc000102600, 0x54f228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    var result []interface{}\n    var result_bool bool\n    var result_string string\n    \n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result_string = s[0:i] + s[i+1:]\n            result_bool = true\n            break\n        }\n    }\n    \n    result = append(result, result_string)\n    result = append(result, result_bool)\n    \n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374764,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmprtka5pwm_test.go:27\ncommand-line-arguments_test.TestReverse_Delete(0xc000102600)\n\t/tmp/tmprtka5pwm_test.go:52 +0x825\ntesting.tRunner(0xc000102600, 0x54ef18)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.040s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    var result []interface{}\n    var result_bool bool\n    var result_string string\n    \n    for i := 0; i < len(s); i++ {\n        if c[0] == s[i] {\n            result_bool = false\n            for j := 0; j < len(c); j++ {\n                if c[j] == s[i] {\n                    result_bool = true\n                    break\n                }\n            }\n            if result_bool == true {\n                result_string = s[0:i] + s[i+1:]\n                result = append(result, result_string)\n            }\n        }\n    }\n    \n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(0x54606e, 0x9, 0x0, 0x0, 0xc00009a540, 0x1, 0x1)\n\t/tmp/tmpzajxjkyw_test.go:27 +0x205\ncommand-line-arguments_test.TestReverse_Delete(0xc000001380)\n\t/tmp/tmpzajxjkyw_test.go:57 +0x237\ntesting.tRunner(0xc000001380, 0x54f228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var result_bool bool\n    var result_string string\n    var result_index int\n    var result_length int\n    var result_length_int int\n    var result_length_string string\n    var result_length_string_int int\n    var result_length_string_string string\n    var result_length_string_string_int int\n    var result_length_string_string_string string\n    var result_length_string_string_string_int int\n    var result_length_string_string_string_string string\n    var result_length_string_string_string_string_int int\n    var result_length_string_string_string_string_string string\n    var result_length_string_string_string_string_string_int int\n    var result_length_string_string_string_string_string_string string\n    var result_length_string_string_string_string_string_string_int int\n    var result_length_string_string_string_string_string_string_string string\n    var result_length_string_string_string_string_string_string_string_int int\n    var result_length_string_string_string_string_string_string_string_string string\n    var result_length_string_string_string_string_string_string_string_string_int int\n    var result_length_string_string_string_string_string_string_string_string_string string\n    var result_length_string_string_string_string_string_string_string_string_string_int int\n    var result_length_string_string_string_string_string_string_string_string_string_string string\n    var result_length_string_string_string_string_string_string_string_string_string_string_int int\n    var result_length_string_string_string_string_string_string_string_string_string_string_string string\n    var result_length_string_string_string_string_string_string_string_string_string_string_string_int int\n    var result_length_string_string_string_string_string_string_string_string_string_string_string\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374764,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpq6szjown_test.go:49:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var result_bool bool\n    var result_string string\n    var result_index int\n    var result_length int\n    var result_index_bool bool\n    var result_index_string string\n    var result_index_index int\n    var result_index_length int\n    var result_index_index_bool bool\n    var result_index_index_string string\n    var result_index_index_index int\n    var result_index_index_length int\n    var result_index_index_index_bool bool\n    var result_index_index_index_string string\n    var result_index_index_index_index int\n    var result_index_index_index_length int\n    var result_index_index_index_index_bool bool\n    var result_index_index_index_index_string string\n    var result_index_index_index_index_index int\n    var result_index_index_index_index_length int\n    var result_index_index_index_index_index_bool bool\n    var result_index_index_index_index_index_string string\n    var result_index_index_index_index_index_index int\n    var result_index_index_index_index_index_length int\n    var result_index_index_index_index_index_index_bool bool\n    var result_index_index_index_index_index_index_string string\n    var result_index_index_index_index_index_index_index int\n    var result_index_index_index_index_index_index_length int\n    var result_index_index_index_index_index_index_index_bool bool\n    var result_index_index_index_index_index_index_index_string string\n    var result_index_index_index_index_index_index_index_index int\n    var result_index_index_index_index_index_index_index_length int\n    var result_index_index_index_index_index_index_index_index_bool bool\n    var result_index_index_index_index_index_index_index_index_string string\n    var result_index_index_index_\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp_ktgde7d_test.go:56:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                s = s[0:i] + s[i+1:]\n                break\n            }\n        }\n    }\n    if len(s) == 0 {\n        result = append(result, s)\n    } else {\n        result = append(result, s)\n        result = append(result, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmp9x9k4ami_test.go:60: expected '[cdedc %!s(bool=true)]', got '[cdedc %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmp9x9k4ami_test.go:60: expected '[ %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp9x9k4ami_test.go:60: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmp9x9k4ami_test.go:60: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp9x9k4ami_test.go:60: expected '[abba %!s(bool=true)]', got '[abba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmp9x9k4ami_test.go:60: expected '[ %!s(bool=true)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    result := make([]interface{}, 2)\n    result[0] = s\n    result[1] = false\n    for i := 0; i < len(s); i++ {\n        if s[i] == c[0] {\n            for j := 0; j < len(c); j++ {\n                if s[i+j] != c[j] {\n                    break\n                }\n                if j == len(c) - 1 {\n                    result[1] = true\n                    break\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [9] with length 9 [recovered]\n\tpanic: runtime error: index out of range [9] with length 9\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmprq9y2ysi_test.go:28\ncommand-line-arguments_test.TestReverse_Delete(0xc000001380)\n\t/tmp/tmprq9y2ysi_test.go:50 +0x692\ntesting.tRunner(0xc000001380, 0x54df20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if c[0] == s[i] {\n            s = s[0:i] + s[i+1:]\n            c = c[1:]\n        }\n    }\n    if s == \"\" {\n        result = append(result, s, true)\n    } else {\n        result = append(result, s, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x537320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x537320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpsyv0xe_r_test.go:26\ncommand-line-arguments_test.TestReverse_Delete(0xc000001380)\n\t/tmp/tmpsyv0xe_r_test.go:47 +0x2065\ntesting.tRunner(0xc000001380, 0x550228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                s = s[0:i] + s[i+1:]\n                isPalindrome = true\n                break\n            }\n        }\n    }\n    result = append(result, s)\n    result = append(result, isPalindrome)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[bcd %!s(bool=false)]', got '[bcd %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    var result string\n    var isPalindrome bool\n    \n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = s[i:len(s)]\n            isPalindrome = true\n            for j := 1; j < len(c); j++ {\n                if s[i - j] != c[j] {\n                    isPalindrome = false\n                    break\n                }\n            }\n            break\n        }\n    }\n    \n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpyo43sqag_test.go:30\ncommand-line-arguments_test.TestReverse_Delete(0xc000001380)\n\t/tmp/tmpyo43sqag_test.go:49 +0x5cf\ntesting.tRunner(0xc000001380, 0x54df20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var palindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := len(c) - 1; j >= 0; j-- {\n            if s[i] == c[j] {\n                s = s[0:i] + s[i+1:]\n                palindrome = true\n                break\n            }\n        }\n        if palindrome {\n            break\n        }\n    }\n    result = append(result, s)\n    result = append(result, palindrome)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpf0yftw5k_test.go:61: expected '[bcd %!s(bool=false)]', got '[abcd %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpf0yftw5k_test.go:61: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpf0yftw5k_test.go:61: expected '[cdedc %!s(bool=true)]', got '[abcdedcb %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpf0yftw5k_test.go:61: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpf0yftw5k_test.go:61: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpf0yftw5k_test.go:61: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpf0yftw5k_test.go:61: expected '[ %!s(bool=true)]', got '[mamm %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var result_str string\n    var result_bool bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result_str = s[i:] + s[0:i]\n            result_bool = true\n            break\n        }\n    }\n    result = append(result, result_str)\n    result = append(result, result_bool)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536060, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536060, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpcky087mm_test.go:25\ncommand-line-arguments_test.TestReverse_Delete(0xc000001380)\n\t/tmp/tmpcky087mm_test.go:48 +0x825\ntesting.tRunner(0xc000001380, 0x54ef18)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var result_bool bool\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                s = s[0:i] + s[i+1:]\n                result_bool = true\n                break\n            }\n        }\n    }\n    result = []interface{}{s, result_bool}\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmp3dksqgnv_test.go:57: expected '[bcd %!s(bool=false)]', got '[bcd %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp3dksqgnv_test.go:57: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp3dksqgnv_test.go:57: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp3dksqgnv_test.go:57: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmp3dksqgnv_test.go:57: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            s = s[0:i] + s[i+1:]\n            result = append(result, s)\n        }\n    }\n    if len(s) == 0 {\n        result = append(result, s)\n    }\n    if len(s) == len(c) {\n        result = append(result, true)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmparl7o8k9_test.go:62: expected '[bcd %!s(bool=false)]', got '[bcde]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmparl7o8k9_test.go:62: expected '[acdef %!s(bool=false)]', got '[acdef]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmparl7o8k9_test.go:62: expected '[cdedc %!s(bool=true)]', got '[abcdedcb bcdedcb]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmparl7o8k9_test.go:62: expected '[dik %!s(bool=false)]', got '[dik]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmparl7o8k9_test.go:62: expected '[ %!s(bool=true)]', got '[ ]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmparl7o8k9_test.go:62: expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmparl7o8k9_test.go:62: expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmparl7o8k9_test.go:62: expected '[abba %!s(bool=true)]', got '[abba]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmparl7o8k9_test.go:62: expected '[ %!s(bool=true)]', got '[mama maa aa]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    if len(s) == 1 {\n        return []interface{}{s, true}\n    }\n    if len(c) == 1 {\n        return []interface{}{s, false}\n    }\n    var result string\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = s[0:i] + s[i+1:]\n            isPalindrome = true\n            break\n        }\n    }\n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmp9m_mc7_y_test.go:64: expected '[bcd %!s(bool=false)]', got '[bcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp9m_mc7_y_test.go:64: expected '[acdef %!s(bool=false)]', got '[abcdef %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmp9m_mc7_y_test.go:64: expected '[cdedc %!s(bool=true)]', got '[abcdedcb %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp9m_mc7_y_test.go:64: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmp9m_mc7_y_test.go:64: expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp9m_mc7_y_test.go:64: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmp9m_mc7_y_test.go:64: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp9m_mc7_y_test.go:64: expected '[abba %!s(bool=true)]', got '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmp9m_mc7_y_test.go:64: expected '[ %!s(bool=true)]', got '[mama %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    var result []interface{}\n    var palindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            for j := 0; j < len(c); j++ {\n                if s[i] == c[j] {\n                    s = s[0:i] + s[i+1:]\n                    palindrome = true\n                    break\n                }\n            }\n        }\n    }\n    result = append(result, s)\n    result = append(result, palindrome)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(0x54606e, 0x9, 0x0, 0x0, 0xc0000a40a0, 0x2, 0x2)\n\t/tmp/tmpqjt1yzp7_test.go:25 +0x23b\ncommand-line-arguments_test.TestReverse_Delete(0xc000001380)\n\t/tmp/tmpqjt1yzp7_test.go:52 +0x237\ntesting.tRunner(0xc000001380, 0x54f228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var result_string string\n    var result_bool bool\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := len(c) - 1; j >= 0; j-- {\n            if s[i] == c[j] {\n                result_string = s[0:i] + s[i+1:]\n                result_bool = true\n                break\n            }\n        }\n    }\n    result = append(result, result_string)\n    result = append(result, result_bool)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmp3pyz1p84_test.go:59: expected '[bcd %!s(bool=false)]', got '[bcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp3pyz1p84_test.go:59: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmp3pyz1p84_test.go:59: expected '[cdedc %!s(bool=true)]', got '[bcdedcba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp3pyz1p84_test.go:59: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp3pyz1p84_test.go:59: expected '[abcdedcba %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmp3pyz1p84_test.go:59: expected '[abcdedcba %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmp3pyz1p84_test.go:59: expected '[ %!s(bool=true)]', got '[amma %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            for j := len(c) - 1; j >= 0; j-- {\n                if s[i] == c[j] {\n                    s = s[0:i] + s[i+1:]\n                    isPalindrome = true\n                    break\n                }\n            }\n        }\n    }\n    result = append(result, s)\n    result = append(result, isPalindrome)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(0x54606e, 0x9, 0x0, 0x0, 0xc000156080, 0x2, 0x2)\n\t/tmp/tmpyx6i82j5_test.go:24 +0x247\ncommand-line-arguments_test.TestReverse_Delete(0xc000102600)\n\t/tmp/tmpyx6i82j5_test.go:51 +0x237\ntesting.tRunner(0xc000102600, 0x54f228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:i+1])\n            c = c[1:]\n        }\n    }\n    if len(c) > 0 {\n        result = append(result, c)\n    }\n    if len(result) == 0 {\n        result = append(result, \"\")\n    }\n    result = append(result, true)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x539320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x539320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmprmzmxusi_test.go:23\ncommand-line-arguments_test.TestReverse_Delete(0xc000001380)\n\t/tmp/tmprmzmxusi_test.go:46 +0x3885\ntesting.tRunner(0xc000001380, 0x552228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            s = s[0:i] + s[i+1:]\n        }\n    }\n    if s == s[::-1] {\n        result = append(result, s, true)\n    } else {\n        result = append(result, s, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374764,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp2cjxuy7d_test.go:31:15: 2nd index required in 3-index slice\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    \n    result := make([]interface{}, 2)\n    result[0] = s\n    result[1] = false\n    \n    for i := 0; i < len(s); i++ {\n        if c[0] == s[i] {\n            for j := 0; j < len(c); j++ {\n                if c[j] == s[i] {\n                    result[1] = true\n                    break\n                }\n            }\n            \n            if result[1] == true {\n                break\n            }\n        }\n    }\n    \n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpue6q_unh_test.go:69: expected '[bcd %!s(bool=false)]', got '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpue6q_unh_test.go:69: expected '[acdef %!s(bool=false)]', got '[abcdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpue6q_unh_test.go:69: expected '[cdedc %!s(bool=true)]', got '[abcdedcba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpue6q_unh_test.go:69: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpue6q_unh_test.go:69: expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpue6q_unh_test.go:69: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpue6q_unh_test.go:69: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmpue6q_unh_test.go:69: expected '[abba %!s(bool=true)]', got '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpue6q_unh_test.go:69: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // Write your code here\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:len(s)])\n            s = s[0:i]\n            break\n        }\n    }\n    if len(s) == 0 {\n        result = append(result, s)\n    }\n    if len(s) == len(c) {\n        result = append(result, true)\n    } else {\n        result = append(result, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmprq4ampb0_test.go:65: expected '[bcd %!s(bool=false)]', got '[abcde  %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmprq4ampb0_test.go:65: expected '[acdef %!s(bool=false)]', got '[bcdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmprq4ampb0_test.go:65: expected '[cdedc %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmprq4ampb0_test.go:65: expected '[dik %!s(bool=false)]', got '[wik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmprq4ampb0_test.go:65: expected '[ %!s(bool=true)]', got '[a  %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmprq4ampb0_test.go:65: expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmprq4ampb0_test.go:65: expected '[abcdedcba %!s(bool=true)]', got '[%!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmprq4ampb0_test.go:65: expected '[abba %!s(bool=true)]', got '[vabba  %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmprq4ampb0_test.go:65: expected '[ %!s(bool=true)]', got '[ma %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            result = append(result, s[i:i+1])\n            c = c[1:]\n        }\n    }\n    if len(c) > 0 {\n        result = append(result, s[0:0])\n    }\n    if len(result) == 0 {\n        return result\n    }\n    if len(result) == 1 {\n        return result\n    }\n    if result[0] == result[len(result)-1] {\n        return result\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.reverse_delete(0x545852, 0x6, 0x545278, 0x1, 0xc0000a4020, 0x2, 0x2)\n\t/tmp/tmpgrf3la6s_test.go:27 +0x3b0\ncommand-line-arguments_test.TestReverse_Delete(0xc000001380)\n\t/tmp/tmpgrf3la6s_test.go:55 +0xcb\ntesting.tRunner(0xc000001380, 0x54f228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    result := []interface{}{}\n    if len(s) == 0 || len(c) == 0 {\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            s = s[0:i] + s[i+1:]\n            result = append(result, s)\n        }\n    }\n    if s == s[::-1] {\n        result = append(result, true)\n    } else {\n        result = append(result, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpi4xii163_test.go:32:15: 2nd index required in 3-index slice\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var palindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                s = s[0:i] + s[i+1:]\n                palindrome = true\n                break\n            }\n        }\n    }\n    result = append(result, s)\n    result = append(result, palindrome)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpzbsumnax_test.go:58: expected '[bcd %!s(bool=false)]', got '[bcd %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpzbsumnax_test.go:58: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpzbsumnax_test.go:58: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpzbsumnax_test.go:58: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpzbsumnax_test.go:58: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    if len(s) == 1 {\n        return []interface{}{s, true}\n    }\n    if len(c) == 1 {\n        return []interface{}{s, false}\n    }\n    var result string\n    var isPalindrome bool\n    for i := 0; i < len(s); i++ {\n        if c[0] == s[i] {\n            result = s[0:i] + s[i+1:]\n            isPalindrome = true\n            break\n        }\n    }\n    if isPalindrome {\n        return []interface{}{result, isPalindrome}\n    }\n    return []interface{}{s, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpxb6fslqg_test.go:67: expected '[bcd %!s(bool=false)]', got '[bcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpxb6fslqg_test.go:67: expected '[acdef %!s(bool=false)]', got '[abcdef %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmpxb6fslqg_test.go:67: expected '[cdedc %!s(bool=true)]', got '[bcdedcba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpxb6fslqg_test.go:67: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpxb6fslqg_test.go:67: expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpxb6fslqg_test.go:67: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpxb6fslqg_test.go:67: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmpxb6fslqg_test.go:67: expected '[abba %!s(bool=true)]', got '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpxb6fslqg_test.go:67: expected '[ %!s(bool=true)]', got '[amma %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var result_bool bool\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                s = s[0:i] + s[i+1:]\n                result_bool = true\n                break\n            }\n        }\n    }\n    result = []interface{}{s, result_bool}\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmp3dksqgnv_test.go:57: expected '[bcd %!s(bool=false)]', got '[bcd %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp3dksqgnv_test.go:57: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp3dksqgnv_test.go:57: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp3dksqgnv_test.go:57: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmp3dksqgnv_test.go:57: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return []interface{}{s, false}\n    }\n    var result string\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            for j := 0; j < len(c); j++ {\n                if s[i] == c[j] {\n                    result += s[i]\n                    break\n                }\n            }\n        } else {\n            result += s[i]\n        }\n    }\n    if result == s {\n        isPalindrome = true\n    }\n    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg814__p5_test.go:31:28: invalid operation: result += s[i] (mismatched types string and byte)\n/tmp/tmpg814__p5_test.go:36:20: invalid operation: result += s[i] (mismatched types string and byte)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    var result []interface{}\n    var palindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                s = s[0:i] + s[i+1:]\n                palindrome = true\n                break\n            }\n        }\n    }\n    result = append(result, s)\n    result = append(result, palindrome)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpzn2zu4el_test.go:59: expected '[bcd %!s(bool=false)]', got '[bcd %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpzn2zu4el_test.go:59: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpzn2zu4el_test.go:59: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpzn2zu4el_test.go:59: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpzn2zu4el_test.go:59: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    // write your code here\n    var result []interface{}\n    var result_bool bool\n    if len(s) == 0 || len(c) == 0 {\n        result = []interface{}{s, result_bool}\n        return result\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n            s = s[0:i] + s[i+1:]\n            result_bool = false\n        } else {\n            result_bool = true\n        }\n    }\n    result = []interface{}{s, result_bool}\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmp8dtrbxz4_test.go:61: expected '[bcd %!s(bool=false)]', got '[bcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp8dtrbxz4_test.go:61: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n        tmp8dtrbxz4_test.go:61: expected '[cdedc %!s(bool=true)]', got '[bcdedcb %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp8dtrbxz4_test.go:61: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmp8dtrbxz4_test.go:61: expected '[ %!s(bool=true)]', got '[ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp8dtrbxz4_test.go:61: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp8dtrbxz4_test.go:61: expected '[abba %!s(bool=true)]', got '[abba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmp8dtrbxz4_test.go:61: expected '[ %!s(bool=true)]', got '[aa %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var result_bool bool\n    var result_string string\n    \n    for i := 0; i < len(s); i++ {\n        for j := 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                result_string = s[0:i] + s[i+1:]\n                result_bool = is_palindrome(result_string)\n                result = append(result, result_string, result_bool)\n                break\n            }\n        }\n    }\n    \n    return result\n}\n\n// is_palindrome\n// Check if a string is palindrome\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprxgh94xn_test.go:29:31: undefined: is_palindrome\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        for j := 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                s = s[0:i] + s[i+1:]\n                isPalindrome = true\n                break\n            }\n        }\n    }\n    result = append(result, s)\n    result = append(result, isPalindrome)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[bcd %!s(bool=false)]', got '[bcd %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[acdef %!s(bool=false)]', got '[acdef %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpod9ds9co_test.go:58: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}