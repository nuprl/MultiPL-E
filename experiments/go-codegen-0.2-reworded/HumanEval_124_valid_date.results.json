{
  "name": "HumanEval_124_valid_date",
  "language": "go_test.go",
  "prompt": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n",
  "tests": "func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] != '0' && date[0] != '1' && date[0] != '2' && date[0] != '3' && date[0] != '4' && date[0] != '5' && date[0] != '6' && date[0] != '7' && date[0] != '8' && date[0] != '9' && date[0] != '0' {\n        return false\n    }\n    if date[1] != '0' && date[1] != '1' && date[1] != '2' && date[1] != '3' && date[1] != '4' && date[1] != '5' && date[1] != '6' && date[1] != '7' && date[1] != '8' && date[1] != '9' && date[1] != '0' {\n        return false\n    }\n    if date[2] != '0' && date[2] != '1' && date[2] != '2' && date[2] != '3' && date[2] != '4' && date[2] != '5' && date[2] != '6' && date[2] != '7' && date[2] != '8' && date[2] != '9' && date[2] != '0' {\n        return false\n    }\n    if date[3] != '0' && date[3] != '1' && date[3] != '2' && date[3] != '3' && date[3] != '4' && date[3] != '5' && date[3] != '6' && date[3] != '7' && date[3] != '8' && date[3] != '9' && date[3] != '0' {\n        return false\n    }\n    if date[4] != '0' && date[4] != '1' && date[4] != '2' && date[4] != '3' && date[4]\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374748,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp3eooxo40_test.go:45:6: expected '(', found TestValid_Date\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    month, _ := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 29 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps_ikdy2p_test.go:32:47: undefined: month\n/tmp/tmps_ikdy2p_test.go:32:55: undefined: day\n/tmp/tmps_ikdy2p_test.go:32:61: undefined: year\n/tmp/tmps_ikdy2p_test.go:36:8: undefined: day\n/tmp/tmps_ikdy2p_test.go:38:16: undefined: day\n/tmp/tmps_ikdy2p_test.go:46:12: undefined: day\n/tmp/tmps_ikdy2p_test.go:50:12: undefined: day\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    month, _ := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n            return false\n        }\n    }\n    if day < 1 || day > 30 {\n        if month == 4 || month == 6 || month == 9 || month == 11 {\n            return false\n        }\n    }\n    if day < 1 || day > 29 {\n        if month == 2 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwmsxjgw8_test.go:32:47: undefined: month\n/tmp/tmpwmsxjgw8_test.go:32:55: undefined: day\n/tmp/tmpwmsxjgw8_test.go:32:61: undefined: year\n/tmp/tmpwmsxjgw8_test.go:36:8: undefined: day\n/tmp/tmpwmsxjgw8_test.go:41:8: undefined: day\n/tmp/tmpwmsxjgw8_test.go:46:8: undefined: day\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date[0:2], date[3:5], date[6:10]\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    if !(month[0] >= '1' && month[0] <= '12') || !(month[1] >= '1' && month[1] <= '12') {\n        return false\n    }\n    if !(day[0] >= '1' && day[0] <= '31') || !(day[1] >= '1' && day[1] <= '31') {\n        return false\n    }\n    if !(year[0] >= '0' && year[0] <= '9') || !(year[1] >= '0' && year[1] <= '9') || !(year[2] >= '0' && year[2] <= '9') || !(year[3] >= '0' && year[3] <= '9') {\n        return false\n    }\n    if year[0] == '0' || year[1] == '0' || year[2] == '0' || year[3] == '0' {\n        return false\n    }\n    if year[0] == '1' && year[1] == '1' && year[2] == '1' && year[3] == '1' {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374748,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpsgqrcfj3_test.go:33:41: illegal rune literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    month, _ := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n            return false\n        }\n    }\n    if day < 1 || day > 30 {\n        if month == 4 || month == 6 || month == 9 || month == 11 {\n            return false\n        }\n    }\n    if day < 1 || day > 29 {\n        if month == 2 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwmsxjgw8_test.go:32:47: undefined: month\n/tmp/tmpwmsxjgw8_test.go:32:55: undefined: day\n/tmp/tmpwmsxjgw8_test.go:32:61: undefined: year\n/tmp/tmpwmsxjgw8_test.go:36:8: undefined: day\n/tmp/tmpwmsxjgw8_test.go:41:8: undefined: day\n/tmp/tmpwmsxjgw8_test.go:46:8: undefined: day\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    fmt.Println(\"Validating date: \", date)\n    if len(date) == 0 {\n        return false\n    }\n    month, _ := parse_month(date)\n    if month == 0 {\n        return false\n    }\n    day, _ := parse_day(date)\n    if day == 0 {\n        return false\n    }\n    year, _ := parse_year(date)\n    if year == 0 {\n        return false\n    }\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt0eetq88_test.go:30:17: undefined: parse_month\n/tmp/tmpt0eetq88_test.go:34:15: undefined: parse_day\n/tmp/tmpt0eetq88_test.go:38:16: undefined: parse_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date[0:2], date[3:5], date[6:10]\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    if !(month[0] >= '1' && month[0] <= '12' && month[1] >= '1' && month[1] <= '12') {\n        return false\n    }\n    if !(day[0] >= '1' && day[0] <= '31' && day[1] >= '1' && day[1] <= '31') {\n        return false\n    }\n    if !(month[0] == '2' && day[0] == '29') {\n        if !(month[0] == '1' || month[0] == '3' || month[0] == '5' || month[0] == '7' || month[0] == '8' || month[0] == '10' || month[0] == '12') {\n            return false\n        }\n        if !(day[0] == '1' || day[0] == '30') {\n            return false\n        }\n    }\n    if !(month[1] == '4' || month[1] == '6' || month[1] == '9' || month[1] == '11') {\n        if !(day[1] == '1' || day[1] == '30') {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374748,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp7uyzqpbk_test.go:33:41: illegal rune literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    fmt.Println(\"Validating date: \", date)\n    if len(date) == 0 {\n        return false\n    }\n    month, _ := parse_month(date)\n    if month < 1 || month > 12 {\n        return false\n    }\n    day, _ := parse_day(date)\n    if day < 1 || day > 31 {\n        return false\n    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpohi3dydz_test.go:30:17: undefined: parse_month\n/tmp/tmpohi3dydz_test.go:34:15: undefined: parse_day\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date[0:2], date[3:5], date[6:10]\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    month_num, _ := fmt.Sscanf(month, \"%d\", &month_num)\n    if month_num < 1 || month_num > 12 {\n        return false\n    }\n    day_num, _ := fmt.Sscanf(day, \"%d\", &day_num)\n    if day_num < 1 || day_num > 31 {\n        return false\n    }\n    if month_num == 2 {\n        if day_num < 1 || day_num > 29 {\n            return false\n        }\n    } else {\n        if day_num < 1 || day_num > 30 {\n            return false\n        }\n    }\n    year_num, _ := fmt.Sscanf(year, \"%d\", &year_num)\n    if year_num < 1900 || year_num > 2100 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5ww9ck1z_test.go:33:46: undefined: month_num\n/tmp/tmp5ww9ck1z_test.go:37:42: undefined: day_num\n/tmp/tmp5ww9ck1z_test.go:50:44: undefined: year_num\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < '0' || date[0] > '9' {\n        return false\n    }\n    if date[1] < '0' || date[1] > '9' {\n        return false\n    }\n    if date[2] < '0' || date[2] > '9' {\n        return false\n    }\n    if date[3] < '0' || date[3] > '9' {\n        return false\n    }\n    if date[4] < '0' || date[4] > '9' {\n        return false\n    }\n    if date[5] < '0' || date[5] > '9' {\n        return false\n    }\n    if date[6] < '0' || date[6] > '9' {\n        return false\n    }\n    if date[7] < '0' || date[7] > '9' {\n        return false\n    }\n    if date[8] < '0' || date[8] > '9' {\n        return false\n    }\n    if date[9] < '0' || date[9] > '9' {\n        return false\n    }\n    if date[3] == '0' && date[4] == '0' && date[5] == '0' {\n        return false\n    }\n    if date[3] == '1' && date[4] == '1' && date[5] == '1' {\n        return false\n    }\n    if date[3] == '2' && date[4] == '2' && date[5] == '2' {\n        return false\n    }\n    if date[3] == '3' && date[4] == '3' && date[5] == '3' {\n        return false\n    }\n    if date[3] == '4' && date[4] == '4' && date[5] == '4' {\n        return false\n    }\n    if date[3] == '5' && date[\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374748,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp525vs2il_test.go:78:6: expected '(', found TestValid_Date\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date[0:2], date[3:5], date[6:10]\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    if month[0] < '1' || month[0] > '12' {\n        return false\n    }\n    if day[0] < '1' || day[0] > '30' {\n        return false\n    }\n    if month[1] < '1' || month[1] > '12' {\n        return false\n    }\n    if day[1] < '1' || day[1] > '29' {\n        return false\n    }\n    if year[0] < '0' || year[0] > '9' {\n        return false\n    }\n    if year[1] < '0' || year[1] > '9' {\n        return false\n    }\n    if year[2] < '0' || year[2] > '9' {\n        return false\n    }\n    if year[3] < '0' || year[3] > '9' {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374748,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp3mslf96h_test.go:33:37: illegal rune literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := get_month_day_year(date)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if year < 1000 || year > 9999 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa8slzdkw_test.go:29:25: undefined: get_month_day_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    fmt.Println(\"date: \", date)\n    if len(date) == 0 {\n        return false\n    }\n    month, _ := parse_month(date)\n    if month < 1 || month > 12 {\n        return false\n    }\n    day, _ := parse_day(date)\n    if day < 1 || day > 31 {\n        return false\n    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpusv7_6ms_test.go:30:17: undefined: parse_month\n/tmp/tmpusv7_6ms_test.go:34:15: undefined: parse_day\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date[0:2], date[2:4], date[4:8]\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    month_num, _ := fmt.Sscanf(month, \"%d\", &month_num)\n    if month_num < 1 || month_num > 12 {\n        return false\n    }\n    day_num, _ := fmt.Sscanf(day, \"%d\", &day_num)\n    if day_num < 1 || day_num > 31 {\n        return false\n    }\n    if month_num == 2 {\n        if day_num < 1 || day_num > 29 {\n            return false\n        }\n    } else {\n        if day_num < 1 || day_num > 30 {\n            return false\n        }\n    }\n    year_num, _ := fmt.Sscanf(year, \"%d\", &year_num)\n    if year_num < 1 || year_num > 9999 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6a1gec_j_test.go:33:46: undefined: month_num\n/tmp/tmp6a1gec_j_test.go:37:42: undefined: day_num\n/tmp/tmp6a1gec_j_test.go:50:44: undefined: year_num\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var month, day, year int\n    var err error\n    if month, err = parse_month(date); err != nil {\n        return false\n    }\n    if day, err = parse_day(date); err != nil {\n        return false\n    }\n    if year, err = parse_year(date); err != nil {\n        return false\n    }\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if year < 1900 || year > 2100 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpevwezar3_test.go:31:21: undefined: parse_month\n/tmp/tmpevwezar3_test.go:34:19: undefined: parse_day\n/tmp/tmpevwezar3_test.go:37:20: undefined: parse_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    month, _ := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 29 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps_ikdy2p_test.go:32:47: undefined: month\n/tmp/tmps_ikdy2p_test.go:32:55: undefined: day\n/tmp/tmps_ikdy2p_test.go:32:61: undefined: year\n/tmp/tmps_ikdy2p_test.go:36:8: undefined: day\n/tmp/tmps_ikdy2p_test.go:38:16: undefined: day\n/tmp/tmps_ikdy2p_test.go:46:12: undefined: day\n/tmp/tmps_ikdy2p_test.go:50:12: undefined: day\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date[0:2], date[2:4], date[4:8]\n    month_num, _ := fmt.Sscanf(month, \"%d\", &month_num)\n    if month_num < 1 || month_num > 12 {\n        return false\n    }\n    day_num, _ := fmt.Sscanf(day, \"%d\", &day_num)\n    if day_num < 1 || day_num > 31 {\n        return false\n    }\n    if month_num == 2 {\n        if day_num < 1 || day_num > 29 {\n            return false\n        }\n    } else {\n        if day_num < 1 || day_num > 30 {\n            return false\n        }\n    }\n    year_num, _ := fmt.Sscanf(year, \"%d\", &year_num)\n    if year_num < 1 || year_num > 9999 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7v70c_cf_test.go:30:46: undefined: month_num\n/tmp/tmp7v70c_cf_test.go:34:42: undefined: day_num\n/tmp/tmp7v70c_cf_test.go:47:44: undefined: year_num\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date[0:2], date[3:5], date[6:10]\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    month_num, _ := fmt.Sscanf(month, \"%d\", &month_num)\n    if month_num < 1 || month_num > 12 {\n        return false\n    }\n    day_num, _ := fmt.Sscanf(day, \"%d\", &day_num)\n    if day_num < 1 || day_num > 31 {\n        return false\n    }\n    if month_num == 2 {\n        if day_num < 1 || day_num > 29 {\n            return false\n        }\n    } else {\n        if day_num < 1 || day_num > 30 {\n            return false\n        }\n    }\n    year_num, _ := fmt.Sscanf(year, \"%d\", &year_num)\n    if year_num < 1900 || year_num > 2100 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5ww9ck1z_test.go:33:46: undefined: month_num\n/tmp/tmp5ww9ck1z_test.go:37:42: undefined: day_num\n/tmp/tmp5ww9ck1z_test.go:50:44: undefined: year_num\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var month, day, year int\n    var err error\n    if month, err = parse_month(date); err != nil {\n        return false\n    }\n    if day, err = parse_day(date); err != nil {\n        return false\n    }\n    if year, err = parse_year(date); err != nil {\n        return false\n    }\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if year < 1900 || year > 2100 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpevwezar3_test.go:31:21: undefined: parse_month\n/tmp/tmpevwezar3_test.go:34:19: undefined: parse_day\n/tmp/tmpevwezar3_test.go:37:20: undefined: parse_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    month, _ := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 29 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps_ikdy2p_test.go:32:47: undefined: month\n/tmp/tmps_ikdy2p_test.go:32:55: undefined: day\n/tmp/tmps_ikdy2p_test.go:32:61: undefined: year\n/tmp/tmps_ikdy2p_test.go:36:8: undefined: day\n/tmp/tmps_ikdy2p_test.go:38:16: undefined: day\n/tmp/tmps_ikdy2p_test.go:46:12: undefined: day\n/tmp/tmps_ikdy2p_test.go:50:12: undefined: day\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date[0:2], date[3:5], date[6:10]\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    if !(month[0] >= '1' && month[0] <= '12') || !(month[1] >= '1' && month[1] <= '12') {\n        return false\n    }\n    if !(day[0] >= '1' && day[0] <= '31') || !(day[1] >= '1' && day[1] <= '30') {\n        return false\n    }\n    if !(year[0] >= '0' && year[0] <= '9') || !(year[1] >= '0' && year[1] <= '9') || !(year[2] >= '0' && year[2] <= '9') || !(year[3] >= '0' && year[3] <= '9') {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374748,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpp3zfhe0s_test.go:33:41: illegal rune literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    fmt.Println(\"valid_date: \", date)\n    if len(date) == 0 {\n        return false\n    }\n    var month int\n    var day int\n    var year int\n    var err error\n    var valid bool\n    var month_str string\n    var day_str string\n    var year_str string\n    var month_int int\n    var day_int int\n    var year_int int\n    month_str = date[0:2]\n    day_str = date[3:5]\n    year_str = date[6:10]\n    month_int, err = strconv.Atoi(month_str)\n    if err != nil {\n        return false\n    }\n    day_int, err = strconv.Atoi(day_str)\n    if err != nil {\n        return false\n    }\n    year_int, err = strconv.Atoi(year_str)\n    if err != nil {\n        return false\n    }\n    if month_int < 1 || month_int > 12 {\n        return false\n    }\n    if month_int == 2 {\n        if day_int < 1 || day_int > 29 {\n            return false\n        }\n    } else if month_int == 1 || month_int == 3 || month_int == 5 || month_int == 7 || month_int == 8 || month_int == 10 || month_int == 12 {\n        if day_int < 1 || day_int > 31 {\n            return false\n        }\n    } else if month_int == 4 || month_int == 6 || month_int == 9 || month_int == 11 {\n        if day_int < 1 || day_int > 30 {\n            return false\n        }\n    }\n    if year_int < 1900 || year_int > 2100 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4t9lc22b_test.go:44:22: undefined: strconv\n/tmp/tmp4t9lc22b_test.go:48:20: undefined: strconv\n/tmp/tmp4t9lc22b_test.go:52:21: undefined: strconv\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, _ := parse_month(date)\n    day, _ := parse_day(date)\n    year, _ := parse_year(date)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 29 {\n            return false\n        }\n    }\n    if year < 1000 || year > 9999 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpse8899n7_test.go:29:17: undefined: parse_month\n/tmp/tmpse8899n7_test.go:30:15: undefined: parse_day\n/tmp/tmpse8899n7_test.go:31:16: undefined: parse_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, day, year := date[0:2], date[3:5], date[6:10]\n    \n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    \n    month_num, _ := fmt.Sscanf(month, \"%d\", &month_num)\n    if month_num < 1 || month_num > 12 {\n        return false\n    }\n    \n    day_num, _ := fmt.Sscanf(day, \"%d\", &day_num)\n    if day_num < 1 || day_num > 31 {\n        return false\n    }\n    \n    if month_num == 2 {\n        if day_num < 1 || day_num > 29 {\n            return false\n        }\n    } else {\n        if day_num < 1 || day_num > 30 {\n            return false\n        }\n    }\n    \n    year_num, _ := fmt.Sscanf(year, \"%d\", &year_num)\n    if year_num < 1 || year_num > 9999 {\n        return false\n    }\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_04cocjc_test.go:36:46: undefined: month_num\n/tmp/tmp_04cocjc_test.go:41:42: undefined: day_num\n/tmp/tmp_04cocjc_test.go:56:44: undefined: year_num\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date[0:2], date[3:5], date[6:10]\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    month_num, _ := fmt.Sscanf(month, \"%d\", &month_num)\n    if month_num < 1 || month_num > 12 {\n        return false\n    }\n    day_num, _ := fmt.Sscanf(day, \"%d\", &day_num)\n    if day_num < 1 || day_num > 31 {\n        return false\n    }\n    if month_num == 2 {\n        if day_num < 1 || day_num > 29 {\n            return false\n        }\n    } else {\n        if day_num < 1 || day_num > 30 {\n            return false\n        }\n    }\n    year_num, _ := fmt.Sscanf(year, \"%d\", &year_num)\n    if year_num < 1900 || year_num > 2100 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5ww9ck1z_test.go:33:46: undefined: month_num\n/tmp/tmp5ww9ck1z_test.go:37:42: undefined: day_num\n/tmp/tmp5ww9ck1z_test.go:50:44: undefined: year_num\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date[0:2], date[3:5], date[6:10]\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    if !(1 <= int(month[0]) && int(month[0]) <= 12) {\n        return false\n    }\n    if !(1 <= int(month[1]) && int(month[1]) <= 12) {\n        return false\n    }\n    if !(1 <= int(day[0]) && int(day[0]) <= 31) {\n        return false\n    }\n    if !(1 <= int(day[1]) && int(day[1]) <= 30) {\n        return false\n    }\n    if !(1 <= int(year[0]) && int(year[0]) <= 99) {\n        return false\n    }\n    if !(1900 <= int(year[1]) && int(year[1]) <= 2099) {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\npanic: runtime error: slice bounds out of range [:10] with length 9 [recovered]\n\tpanic: runtime error: slice bounds out of range [:10] with length 9\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.valid_date(0x545eff, 0x9, 0x58a600)\n\t/tmp/tmp_7hdiyvx_test.go:29 +0x12b\ncommand-line-arguments_test.TestValid_Date(0xc000001380)\n\t/tmp/tmp_7hdiyvx_test.go:63 +0xb8\ntesting.tRunner(0xc000001380, 0x54f270)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date[0:2], date[3:5], date[6:10]\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    month_num, _ := fmt.Sscanf(month, \"%d\", &month_num)\n    if month_num < 1 || month_num > 12 {\n        return false\n    }\n    day_num, _ := fmt.Sscanf(day, \"%d\", &day_num)\n    if day_num < 1 || day_num > 31 {\n        return false\n    }\n    if month_num == 2 {\n        if day_num < 1 || day_num > 29 {\n            return false\n        }\n    } else {\n        if day_num < 1 || day_num > 30 {\n            return false\n        }\n    }\n    year_num, _ := fmt.Sscanf(year, \"%d\", &year_num)\n    if year_num < 1900 || year_num > 2100 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5ww9ck1z_test.go:33:46: undefined: month_num\n/tmp/tmp5ww9ck1z_test.go:37:42: undefined: day_num\n/tmp/tmp5ww9ck1z_test.go:50:44: undefined: year_num\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date[0:2], date[3:5], date[6:10]\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    if !(month[0] >= '1' && month[0] <= '12' && month[1] >= '1' && month[1] <= '12') {\n        return false\n    }\n    if !(day[0] >= '1' && day[0] <= '31' && day[1] >= '1' && day[1] <= '31') {\n        return false\n    }\n    if !(month[0] == '2' && day[0] == '29') {\n        if !(month[0] == '2' && day[0] == '30') {\n            return false\n        }\n    }\n    if !(month[0] >= '1' && month[0] <= '12' && month[1] >= '1' && month[1] <= '12') {\n        return false\n    }\n    if !(day[0] >= '1' && day[0] <= '30' && day[1] >= '1' && day[1] <= '30') {\n        return false\n    }\n    if !(month[0] >= '1' && month[0] <= '12' && month[1] >= '1' && month[1] <= '12') {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpywsqhh4r_test.go:33:41: illegal rune literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    fmt.Println(\"valid_date: \", date)\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date[0:2], date[3:5], date[6:10]\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    month_num, _ := strconv.Atoi(month)\n    day_num, _ := strconv.Atoi(day)\n    year_num, _ := strconv.Atoi(year)\n    if month_num < 1 || month_num > 12 {\n        return false\n    }\n    if month_num == 2 && year_num%4 != 0 {\n        return false\n    }\n    if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n        if day_num < 1 || day_num > 31 {\n            return false\n        }\n    }\n    if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n        if day_num < 1 || day_num > 30 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpclypa91s_test.go:34:21: undefined: strconv\n/tmp/tmpclypa91s_test.go:35:19: undefined: strconv\n/tmp/tmpclypa91s_test.go:36:20: undefined: strconv\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, day, year := get_month_day_year(date)\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if year < 1900 || year > 2100 {\n        return false\n    }\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe4eyswph_test.go:30:25: undefined: get_month_day_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := get_month_day_year(date)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if year < 1 || year > 9999 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu6i40dj2_test.go:29:25: undefined: get_month_day_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[2] == '0' {\n        return false\n    }\n    if date[4] == '0' {\n        return false\n    }\n    if date[6] == '0' {\n        return false\n    }\n    if date[8] == '0' {\n        return false\n    }\n    if date[0] == '0' {\n        return false\n    }\n    if date[1] == '0' {\n        return false\n    }\n    if date[3] == '0' {\n        return false\n    }\n    if date[5] == '0' {\n        return false\n    }\n    if date[7] == '0' {\n        return false\n    }\n    if date[9] == '0' {\n        return false\n    }\n    if date[1] == '0' {\n        return false\n    }\n    if date[3] == '0' {\n        return false\n    }\n    if date[5] == '0' {\n        return false\n    }\n    if date[7] == '0' {\n        return false\n    }\n    if date[9] == '0' {\n        return false\n    }\n    if date[1] == '0' {\n        return false\n    }\n    if date[3] == '0' {\n        return false\n    }\n    if date[5] == '0' {\n        return false\n    }\n    if date[7] == '0' {\n        return false\n    }\n    if date[9] == '0' {\n        return false\n    }\n    if date[1] == '0' {\n        return false\n    }\n    if date[3] == '0' {\n        return false\n    }\n    if date[5] == '0' {\n        return false\n    }\n    if date[7] == '0' {\n        return false\n    }\n    if date[9] == '0' {\n        return false\n    }\n    if date\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmppe8tzapq_test.go:108:6: expected '(', found TestValid_Date\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    month, _ := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        return false\n    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxl4iz3sr_test.go:32:47: undefined: month\n/tmp/tmpxl4iz3sr_test.go:32:55: undefined: day\n/tmp/tmpxl4iz3sr_test.go:32:61: undefined: year\n/tmp/tmpxl4iz3sr_test.go:36:8: undefined: day\n/tmp/tmpxl4iz3sr_test.go:40:12: undefined: day\n/tmp/tmpxl4iz3sr_test.go:44:12: undefined: day\n/tmp/tmpxl4iz3sr_test.go:48:12: undefined: day\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    date_array := strings.Split(date, \"-\")\n    if len(date_array) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_array[0])\n    day, _ := strconv.Atoi(date_array[1])\n    year, _ := strconv.Atoi(date_array[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        return false\n    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    }\n    if year < 1000 || year > 9999 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_cui6o_a_test.go:29:19: undefined: strings\n/tmp/tmp_cui6o_a_test.go:33:17: undefined: strconv\n/tmp/tmp_cui6o_a_test.go:34:15: undefined: strconv\n/tmp/tmp_cui6o_a_test.go:35:16: undefined: strconv\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date[0:2], date[3:5], date[6:10]\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    month_num, _ := fmt.Sscanf(month, \"%d\", &month_num)\n    if month_num < 1 || month_num > 12 {\n        return false\n    }\n    day_num, _ := fmt.Sscanf(day, \"%d\", &day_num)\n    if day_num < 1 || day_num > 31 {\n        return false\n    }\n    if month_num == 2 {\n        if day_num < 1 || day_num > 29 {\n            return false\n        }\n    } else {\n        if day_num < 1 || day_num > 30 {\n            return false\n        }\n    }\n    year_num, _ := fmt.Sscanf(year, \"%d\", &year_num)\n    if year_num < 1 || year_num > 9999 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphbrje6f6_test.go:33:46: undefined: month_num\n/tmp/tmphbrje6f6_test.go:37:42: undefined: day_num\n/tmp/tmphbrje6f6_test.go:50:44: undefined: year_num\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    month, _ := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n            return false\n        }\n    }\n    if day < 1 || day > 30 {\n        if month == 4 || month == 6 || month == 9 || month == 11 {\n            return false\n        }\n    }\n    if day < 1 || day > 29 {\n        if month == 2 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwmsxjgw8_test.go:32:47: undefined: month\n/tmp/tmpwmsxjgw8_test.go:32:55: undefined: day\n/tmp/tmpwmsxjgw8_test.go:32:61: undefined: year\n/tmp/tmpwmsxjgw8_test.go:36:8: undefined: day\n/tmp/tmpwmsxjgw8_test.go:41:8: undefined: day\n/tmp/tmpwmsxjgw8_test.go:46:8: undefined: day\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date[0:2], date[2:4], date[4:8]\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    month_num, _ := fmt.Sscanf(month, \"%d\", &month_num)\n    if month_num < 1 || month_num > 12 {\n        return false\n    }\n    day_num, _ := fmt.Sscanf(day, \"%d\", &day_num)\n    if month_num == 2 && day_num < 1 || month_num == 2 && day_num > 29 {\n        return false\n    }\n    if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n        if day_num < 1 || day_num > 31 {\n            return false\n        }\n    } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n        if day_num < 1 || day_num > 30 {\n            return false\n        }\n    }\n    year_num, _ := fmt.Sscanf(year, \"%d\", &year_num)\n    if year_num < 1000 || year_num > 9999 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4qr_lg6u_test.go:33:46: undefined: month_num\n/tmp/tmp4qr_lg6u_test.go:37:42: undefined: day_num\n/tmp/tmp4qr_lg6u_test.go:50:44: undefined: year_num\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    month, _ := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day > 31 {\n            return false\n        }\n    } else {\n        if day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwi_twsf6_test.go:32:47: undefined: month\n/tmp/tmpwi_twsf6_test.go:32:55: undefined: day\n/tmp/tmpwi_twsf6_test.go:32:61: undefined: year\n/tmp/tmpwi_twsf6_test.go:36:8: undefined: day\n/tmp/tmpwi_twsf6_test.go:38:16: undefined: day\n/tmp/tmpwi_twsf6_test.go:46:12: undefined: day\n/tmp/tmpwi_twsf6_test.go:50:12: undefined: day\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    fmt.Println(\"valid_date: \", date)\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[2] != '-' {\n        return false\n    }\n    if date[5] != '-' {\n        return false\n    }\n    if date[8] != '-' {\n        return false\n    }\n    if date[0] < '0' || date[0] > '9' {\n        return false\n    }\n    if date[1] < '0' || date[1] > '9' {\n        return false\n    }\n    if date[3] < '0' || date[3] > '9' {\n        return false\n    }\n    if date[4] < '0' || date[4] > '9' {\n        return false\n    }\n    if date[6] < '0' || date[6] > '9' {\n        return false\n    }\n    if date[7] < '0' || date[7] > '9' {\n        return false\n    }\n    if date[9] < '0' || date[9] > '9' {\n        return false\n    }\n    if date[10] < '0' || date[10] > '9' {\n        return false\n    }\n    if date[0] > '2' {\n        return false\n    }\n    if date[1] > '9' {\n        return false\n    }\n    if date[3] > '9' {\n        return false\n    }\n    if date[4] > '9' {\n        return false\n    }\n    if date[6] > '9' {\n        return false\n    }\n    if date[7] > '9' {\n        return false\n    }\n    if date[9] > '9' {\n        return false\n    }\n    if date[10] > '9' {\n        return false\n    }\n    if date[2] > '9' {\n        return false\n    }\n    if date[5] > '9' {\n        return\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmplejcyqkj_test.go:95:6: expected '(', found TestValid_Date\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, day, year := get_month_day_year(date)\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if year < 1000 || year > 9999 {\n        return false\n    }\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7cza1ji5_test.go:30:25: undefined: get_month_day_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    month, _ := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day > 31 {\n            return false\n        }\n    } else {\n        if day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwi_twsf6_test.go:32:47: undefined: month\n/tmp/tmpwi_twsf6_test.go:32:55: undefined: day\n/tmp/tmpwi_twsf6_test.go:32:61: undefined: year\n/tmp/tmpwi_twsf6_test.go:36:8: undefined: day\n/tmp/tmpwi_twsf6_test.go:38:16: undefined: day\n/tmp/tmpwi_twsf6_test.go:46:12: undefined: day\n/tmp/tmpwi_twsf6_test.go:50:12: undefined: day\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, day, year := get_date_parts(date)\n    \n    if !is_valid_month(month) {\n        return false\n    }\n    \n    if !is_valid_day(day) {\n        return false\n    }\n    \n    if !is_valid_year(year) {\n        return false\n    }\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu0pr3j8h_test.go:30:25: undefined: get_date_parts\n/tmp/tmpu0pr3j8h_test.go:32:9: undefined: is_valid_month\n/tmp/tmpu0pr3j8h_test.go:36:9: undefined: is_valid_day\n/tmp/tmpu0pr3j8h_test.go:40:9: undefined: is_valid_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := parse_month(date)\n    if month == 0 {\n        return false\n    }\n    \n    day, _ := parse_day(date)\n    if day == 0 {\n        return false\n    }\n    \n    year, _ := parse_year(date)\n    if year == 0 {\n        return false\n    }\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6blgxngn_test.go:30:17: undefined: parse_month\n/tmp/tmp6blgxngn_test.go:35:15: undefined: parse_day\n/tmp/tmp6blgxngn_test.go:40:16: undefined: parse_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, day, year := date[0:2], date[3:5], date[6:10]\n    \n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    \n    month_num, err := fmt.Sscanf(month, \"%d\", &month_num)\n    if err != nil || month_num < 1 || month_num > 12 {\n        return false\n    }\n    \n    day_num, err := fmt.Sscanf(day, \"%d\", &day_num)\n    if err != nil || day_num < 1 || day_num > 31 {\n        return false\n    }\n    \n    if month_num == 2 {\n        if day_num < 1 || day_num > 29 {\n            return false\n        }\n    } else {\n        if day_num < 1 || day_num > 30 {\n            return false\n        }\n    }\n    \n    year_num, err := fmt.Sscanf(year, \"%d\", &year_num)\n    if err != nil || year_num < 1900 || year_num > 2100 {\n        return false\n    }\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpil4js03c_test.go:36:48: undefined: month_num\n/tmp/tmpil4js03c_test.go:41:44: undefined: day_num\n/tmp/tmpil4js03c_test.go:56:46: undefined: year_num\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < '0' || date[0] > '9' {\n        return false\n    }\n    if date[1] < '0' || date[1] > '9' {\n        return false\n    }\n    if date[2] < '0' || date[2] > '9' {\n        return false\n    }\n    if date[3] < '0' || date[3] > '9' {\n        return false\n    }\n    if date[4] < '0' || date[4] > '9' {\n        return false\n    }\n    if date[5] < '0' || date[5] > '9' {\n        return false\n    }\n    if date[6] < '0' || date[6] > '9' {\n        return false\n    }\n    if date[7] < '0' || date[7] > '9' {\n        return false\n    }\n    if date[8] < '0' || date[8] > '9' {\n        return false\n    }\n    if date[9] < '0' || date[9] > '9' {\n        return false\n    }\n    if date[3] == '0' && date[4] == '0' && date[5] == '0' {\n        return false\n    }\n    if date[3] == '1' && date[4] == '1' && date[5] == '1' {\n        return false\n    }\n    if date[3] == '2' && date[4] == '2' && date[5] == '2' {\n        return false\n    }\n    if date[3] == '3' && date[4] == '3' && date[5] == '3' {\n        return false\n    }\n    if date[3] == '4' && date[4] == '4' && date[5] == '4' {\n        return false\n    }\n    if date[3] == '5' && date[\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374748,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp525vs2il_test.go:78:6: expected '(', found TestValid_Date\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    month, _ := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq70nl7n0_test.go:32:47: undefined: month\n/tmp/tmpq70nl7n0_test.go:32:55: undefined: day\n/tmp/tmpq70nl7n0_test.go:32:61: undefined: year\n/tmp/tmpq70nl7n0_test.go:36:8: undefined: day\n/tmp/tmpq70nl7n0_test.go:38:16: undefined: day\n/tmp/tmpq70nl7n0_test.go:46:12: undefined: day\n/tmp/tmpq70nl7n0_test.go:50:12: undefined: day\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := parse_month(date)\n    if month == 0 {\n        return false\n    }\n    \n    day, _ := parse_day(date)\n    if day == 0 {\n        return false\n    }\n    \n    year, _ := parse_year(date)\n    if year == 0 {\n        return false\n    }\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6blgxngn_test.go:30:17: undefined: parse_month\n/tmp/tmp6blgxngn_test.go:35:15: undefined: parse_day\n/tmp/tmp6blgxngn_test.go:40:16: undefined: parse_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var month, day, year int\n    var err error\n    month, day, year, err = parse_date(date)\n    if err != nil {\n        return false\n    }\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn5b93zmu_test.go:31:29: undefined: parse_date\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    month, _ := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq70nl7n0_test.go:32:47: undefined: month\n/tmp/tmpq70nl7n0_test.go:32:55: undefined: day\n/tmp/tmpq70nl7n0_test.go:32:61: undefined: year\n/tmp/tmpq70nl7n0_test.go:36:8: undefined: day\n/tmp/tmpq70nl7n0_test.go:38:16: undefined: day\n/tmp/tmpq70nl7n0_test.go:46:12: undefined: day\n/tmp/tmpq70nl7n0_test.go:50:12: undefined: day\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    fmt.Printf(\"date: %s\\n\", date)\n    if len(date) == 0 {\n        return false\n    }\n    month, _ := parse_month(date)\n    day, _ := parse_day(date)\n    year, _ := parse_year(date)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    if year < 1000 || year > 9999 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxzuqyq3s_test.go:30:17: undefined: parse_month\n/tmp/tmpxzuqyq3s_test.go:31:15: undefined: parse_day\n/tmp/tmpxzuqyq3s_test.go:32:16: undefined: parse_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < '0' || date[0] > '9' {\n        return false\n    }\n    if date[1] < '0' || date[1] > '9' {\n        return false\n    }\n    if date[2] < '0' || date[2] > '9' {\n        return false\n    }\n    if date[3] < '0' || date[3] > '9' {\n        return false\n    }\n    if date[4] < '0' || date[4] > '9' {\n        return false\n    }\n    if date[5] < '0' || date[5] > '9' {\n        return false\n    }\n    if date[6] < '0' || date[6] > '9' {\n        return false\n    }\n    if date[7] < '0' || date[7] > '9' {\n        return false\n    }\n    if date[8] < '0' || date[8] > '9' {\n        return false\n    }\n    if date[9] < '0' || date[9] > '9' {\n        return false\n    }\n    if date[3] > '2' {\n        return false\n    }\n    if date[5] > '5' {\n        return false\n    }\n    if date[7] > '9' {\n        return false\n    }\n    if date[8] > '9' {\n        return false\n    }\n    if date[9] > '9' {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0 (0.00s)\n        tmpvwp7ls8k_test.go:108: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmpvwp7ls8k_test.go:108: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4 (0.00s)\n        tmpvwp7ls8k_test.go:108: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmpvwp7ls8k_test.go:108: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10 (0.00s)\n        tmpvwp7ls8k_test.go:108: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < '0' || date[0] > '9' {\n        return false\n    }\n    if date[1] < '0' || date[1] > '9' {\n        return false\n    }\n    if date[2] < '0' || date[2] > '9' {\n        return false\n    }\n    if date[3] < '0' || date[3] > '9' {\n        return false\n    }\n    if date[4] < '0' || date[4] > '9' {\n        return false\n    }\n    if date[5] < '0' || date[5] > '9' {\n        return false\n    }\n    if date[6] < '0' || date[6] > '9' {\n        return false\n    }\n    if date[7] < '0' || date[7] > '9' {\n        return false\n    }\n    if date[8] < '0' || date[8] > '9' {\n        return false\n    }\n    if date[9] < '0' || date[9] > '9' {\n        return false\n    }\n    if date[3] == '0' && date[4] == '0' && date[5] == '0' {\n        return false\n    }\n    if date[3] == '0' && date[4] == '0' && date[5] == '0' && date[6] == '0' {\n        return false\n    }\n    if date[3] == '0' && date[4] == '0' && date[5] == '0' && date[6] == '0' && date[7] == '0' {\n        return false\n    }\n    if date[3] == '0' && date[4] == '0' && date[5] == '0' && date[6] == '0' && date[7] == '0' && date[8] == '0' {\n        return false\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpuv9c0w24_test.go:73:6: expected '(', found TestValid_Date\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if date[0] == '/' {\n        return false\n    }\n    if date[3] == '/' {\n        return false\n    }\n    if date[6] == '/' {\n        return false\n    }\n    if date[8] == '/' {\n        return false\n    }\n    if date[10] == '/' {\n        return false\n    }\n    if date[12] == '/' {\n        return false\n    }\n    if date[14] == '/' {\n        return false\n    }\n    if date[16] == '/' {\n        return false\n    }\n    if date[18] == '/' {\n        return false\n    }\n    if date[20] == '/' {\n        return false\n    }\n    if date[22] == '/' {\n        return false\n    }\n    if date[24] == '/' {\n        return false\n    }\n    if date[26] == '/' {\n        return false\n    }\n    if date[28] == '/' {\n        return false\n    }\n    if date[30] == '/' {\n        return false\n    }\n    if date[32] == '/' {\n        return false\n    }\n    if date[34] == '/' {\n        return false\n    }\n    if date[36] == '/' {\n        return false\n    }\n    if date[38] == '/' {\n        return false\n    }\n    if date[40] == '/' {\n        return false\n    }\n    if date[42] == '/' {\n        return false\n    }\n    if date[44] == '/' {\n        return false\n    }\n    if date[46] == '/' {\n        return false\n    }\n    if date[48] == '/' {\n        return false\n    }\n    if date[50] == '/' {\n        return false\n    }\n    if date[52] == '/' {\n        return false\n    }\n    if date[54] == '/' {\n        return false\n    }\n    if date[56] == '/'\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp0qq_zd5u_test.go:111:6: expected '(', found TestValid_Date\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date[0:2], date[3:5], date[6:10]\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    if !(month[0] >= '1' && month[0] <= '12') || !(month[1] >= '1' && month[1] <= '12') {\n        return false\n    }\n    if !(day[0] >= '1' && day[0] <= '31') || !(day[1] >= '1' && day[1] <= '30') {\n        return false\n    }\n    if !(year[0] >= '1' && year[0] <= '12') || !(year[1] >= '1' && year[1] <= '31') || !(year[2] >= '1' && year[2] <= '30') {\n        return false\n    }\n    if !(year[3] >= '1' && year[3] <= '12') {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp1g6s56us_test.go:33:41: illegal rune literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < '0' || date[0] > '9' {\n        return false\n    }\n    if date[1] < '0' || date[1] > '9' {\n        return false\n    }\n    if date[2] < '0' || date[2] > '9' {\n        return false\n    }\n    if date[3] < '0' || date[3] > '9' {\n        return false\n    }\n    if date[4] < '0' || date[4] > '9' {\n        return false\n    }\n    if date[5] < '0' || date[5] > '9' {\n        return false\n    }\n    if date[6] < '0' || date[6] > '9' {\n        return false\n    }\n    if date[7] < '0' || date[7] > '9' {\n        return false\n    }\n    if date[8] < '0' || date[8] > '9' {\n        return false\n    }\n    if date[9] < '0' || date[9] > '9' {\n        return false\n    }\n    if date[3] == '0' && date[4] == '0' && date[5] == '0' {\n        return false\n    }\n    if date[3] == '0' && date[4] == '0' && date[5] == '0' && date[6] == '0' {\n        return false\n    }\n    if date[3] == '0' && date[4] == '0' && date[5] == '0' && date[6] == '0' && date[7] == '0' {\n        return false\n    }\n    if date[3] == '0' && date[4] == '0' && date[5] == '0' && date[6] == '0' && date[7] == '0' && date[8] == '0' {\n        return false\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpuv9c0w24_test.go:73:6: expected '(', found TestValid_Date\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var month, day, year int\n    var err error\n    month, day, year, err = parse_date(date)\n    if err != nil {\n        return false\n    }\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day > 31 {\n            return false\n        }\n    } else {\n        if day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5wguibka_test.go:31:29: undefined: parse_date\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    month, _ := parse_month(date[0:2])\n    day, _ := parse_day(date[2:4])\n    year, _ := parse_year(date[4:10])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 29 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg6_t6y_a_test.go:32:17: undefined: parse_month\n/tmp/tmpg6_t6y_a_test.go:33:15: undefined: parse_day\n/tmp/tmpg6_t6y_a_test.go:34:16: undefined: parse_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := parse_month(date)\n    if month == 0 {\n        return false\n    }\n    \n    day, _ := parse_day(date)\n    if day == 0 {\n        return false\n    }\n    \n    year, _ := parse_year(date)\n    if year == 0 {\n        return false\n    }\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6blgxngn_test.go:30:17: undefined: parse_month\n/tmp/tmp6blgxngn_test.go:35:15: undefined: parse_day\n/tmp/tmp6blgxngn_test.go:40:16: undefined: parse_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date[0:2], date[3:5], date[6:10]\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    if !(month[0] >= '1' && month[0] <= '12') || !(month[1] >= '1' && month[1] <= '12') {\n        return false\n    }\n    if !(day[0] >= '1' && day[0] <= '31') || !(day[1] >= '1' && day[1] <= '30') {\n        return false\n    }\n    if (month[0] == '2' && day[0] > '29') || (month[1] == '2' && day[1] > '29') {\n        return false\n    }\n    if !(year[0] >= '0' && year[0] <= '9') || !(year[1] >= '0' && year[1] <= '9') || !(year[2] >= '0' && year[2] <= '9') || !(year[3] >= '0' && year[3] <= '9') {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpfzte54fi_test.go:33:41: illegal rune literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := parse_month(date)\n    day, _ := parse_day(date)\n    year, _ := parse_year(date)\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day > 31 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day > 30 {\n            return false\n        }\n    }\n    \n    if year < 1000 || year > 9999 {\n        return false\n    }\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9quaqy3c_test.go:30:17: undefined: parse_month\n/tmp/tmp9quaqy3c_test.go:31:15: undefined: parse_day\n/tmp/tmp9quaqy3c_test.go:32:16: undefined: parse_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date[0:2], date[3:5], date[6:10]\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    month_num, _ := fmt.Sscanf(month, \"%d\", &month_num)\n    if month_num < 1 || month_num > 12 {\n        return false\n    }\n    day_num, _ := fmt.Sscanf(day, \"%d\", &day_num)\n    if day_num < 1 || day_num > 31 {\n        return false\n    }\n    if month_num == 2 {\n        if day_num < 1 || day_num > 29 {\n            return false\n        }\n    } else {\n        if day_num < 1 || day_num > 30 {\n            return false\n        }\n    }\n    year_num, _ := fmt.Sscanf(year, \"%d\", &year_num)\n    if year_num < 1900 || year_num > 2100 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5ww9ck1z_test.go:33:46: undefined: month_num\n/tmp/tmp5ww9ck1z_test.go:37:42: undefined: day_num\n/tmp/tmp5ww9ck1z_test.go:50:44: undefined: year_num\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    month, _ := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 29 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps_ikdy2p_test.go:32:47: undefined: month\n/tmp/tmps_ikdy2p_test.go:32:55: undefined: day\n/tmp/tmps_ikdy2p_test.go:32:61: undefined: year\n/tmp/tmps_ikdy2p_test.go:36:8: undefined: day\n/tmp/tmps_ikdy2p_test.go:38:16: undefined: day\n/tmp/tmps_ikdy2p_test.go:46:12: undefined: day\n/tmp/tmps_ikdy2p_test.go:50:12: undefined: day\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date[0:2], date[3:5], date[6:10]\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    if month[0] < '0' || month[0] > '2' || month[1] < '0' || month[1] > '9' {\n        return false\n    }\n    if day[0] < '0' || day[0] > '2' || day[1] < '0' || day[1] > '9' {\n        return false\n    }\n    if year[0] < '0' || year[0] > '9' || year[1] < '0' || year[1] > '9' {\n        return false\n    }\n    if year[2] < '0' || year[2] > '9' {\n        return false\n    }\n    if year[3] < '0' || year[3] > '9' {\n        return false\n    }\n    if year[0] == '0' && year[1] == '0' && year[2] == '0' && year[3] == '0' {\n        return false\n    }\n    if year[0] == '0' && year[1] == '0' && year[2] == '0' && year[3] != '0' {\n        return false\n    }\n    if year[0] == '0' && year[1] != '0' && year[2] == '0' && year[3] == '0' {\n        return false\n    }\n    if year[0] == '0' && year[1] != '0' && year[2] != '0' && year[3] == '0' {\n        return false\n    }\n    if year[0] != '0' && year[1] == '0' && year[2] == '0' && year[3] == '0' {\n        return false\n    }\n    if year[0] != '0' && year[1\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp9yc7jrxg_test.go:63:32: expected ']', found newline\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < '0' || date[0] > '9' {\n        return false\n    }\n    if date[1] < '0' || date[1] > '9' {\n        return false\n    }\n    if date[2] < '0' || date[2] > '9' {\n        return false\n    }\n    if date[3] < '0' || date[3] > '9' {\n        return false\n    }\n    if date[4] < '0' || date[4] > '9' {\n        return false\n    }\n    if date[5] < '0' || date[5] > '9' {\n        return false\n    }\n    if date[6] < '0' || date[6] > '9' {\n        return false\n    }\n    if date[7] < '0' || date[7] > '9' {\n        return false\n    }\n    if date[8] < '0' || date[8] > '9' {\n        return false\n    }\n    if date[9] < '0' || date[9] > '9' {\n        return false\n    }\n    if date[3] == '0' && date[4] == '0' && date[5] == '0' && date[6] == '0' && date[7] == '0' && date[8] == '0' && date[9] == '0' {\n        return false\n    }\n    if date[3] == '1' && date[4] == '1' && date[5] == '1' && date[6] == '1' && date[7] == '1' && date[8] == '1' && date[9] == '1' {\n        return false\n    }\n    if date[3] == '2' && date[4] == '2' && date[5] == '2' && date[6] == '2' && date[7] == '2' && date[8] ==\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpudjcscmk_test.go:69:6: expected '(', found TestValid_Date\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, _ := parse_month(date)\n    if month == 0 {\n        return false\n    }\n    day, _ := parse_day(date)\n    if day == 0 {\n        return false\n    }\n    year, _ := parse_year(date)\n    if year == 0 {\n        return false\n    }\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpil3p1930_test.go:29:17: undefined: parse_month\n/tmp/tmpil3p1930_test.go:33:15: undefined: parse_day\n/tmp/tmpil3p1930_test.go:37:16: undefined: parse_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    month, _ := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 29 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps_ikdy2p_test.go:32:47: undefined: month\n/tmp/tmps_ikdy2p_test.go:32:55: undefined: day\n/tmp/tmps_ikdy2p_test.go:32:61: undefined: year\n/tmp/tmps_ikdy2p_test.go:36:8: undefined: day\n/tmp/tmps_ikdy2p_test.go:38:16: undefined: day\n/tmp/tmps_ikdy2p_test.go:46:12: undefined: day\n/tmp/tmps_ikdy2p_test.go:50:12: undefined: day\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < '0' || date[0] > '9' {\n        return false\n    }\n    if date[1] < '0' || date[1] > '9' {\n        return false\n    }\n    if date[2] < '0' || date[2] > '9' {\n        return false\n    }\n    if date[3] < '0' || date[3] > '9' {\n        return false\n    }\n    if date[4] < '0' || date[4] > '9' {\n        return false\n    }\n    if date[5] < '0' || date[5] > '9' {\n        return false\n    }\n    if date[6] < '0' || date[6] > '9' {\n        return false\n    }\n    if date[7] < '0' || date[7] > '9' {\n        return false\n    }\n    if date[8] < '0' || date[8] > '9' {\n        return false\n    }\n    if date[9] < '0' || date[9] > '9' {\n        return false\n    }\n    if date[3] == '0' && date[4] == '0' && date[5] == '0' {\n        return false\n    }\n    if date[3] == '1' && date[4] == '1' && date[5] == '1' {\n        return false\n    }\n    if date[3] == '2' && date[4] == '2' && date[5] == '2' {\n        return false\n    }\n    if date[3] == '3' && date[4] == '3' && date[5] == '3' {\n        return false\n    }\n    if date[3] == '4' && date[4] == '4' && date[5] == '4' {\n        return false\n    }\n    if date[3] == '5' && date[\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374748,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp525vs2il_test.go:78:6: expected '(', found TestValid_Date\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < '0' || date[0] > '9' {\n        return false\n    }\n    if date[1] < '0' || date[1] > '9' {\n        return false\n    }\n    if date[2] < '0' || date[2] > '9' {\n        return false\n    }\n    if date[3] < '0' || date[3] > '9' {\n        return false\n    }\n    if date[4] < '0' || date[4] > '9' {\n        return false\n    }\n    if date[5] < '0' || date[5] > '9' {\n        return false\n    }\n    if date[6] < '0' || date[6] > '9' {\n        return false\n    }\n    if date[7] < '0' || date[7] > '9' {\n        return false\n    }\n    if date[8] < '0' || date[8] > '9' {\n        return false\n    }\n    if date[9] < '0' || date[9] > '9' {\n        return false\n    }\n    if date[3] == '0' && date[4] == '0' && date[5] == '0' && date[6] == '0' && date[7] == '0' && date[8] == '0' && date[9] == '0' {\n        return false\n    }\n    if date[3] == '1' && date[4] == '1' && date[5] == '1' && date[6] == '1' && date[7] == '1' && date[8] == '1' && date[9] == '1' {\n        return false\n    }\n    if date[3] == '2' && date[4] == '2' && date[5] == '2' && date[6] == '2' && date[7] == '2' && date[8] ==\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpudjcscmk_test.go:69:6: expected '(', found TestValid_Date\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    month, _ := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day > 31 {\n            return false\n        }\n    }\n    if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp80ggorzz_test.go:32:47: undefined: month\n/tmp/tmp80ggorzz_test.go:32:55: undefined: day\n/tmp/tmp80ggorzz_test.go:32:61: undefined: year\n/tmp/tmp80ggorzz_test.go:36:8: undefined: day\n/tmp/tmp80ggorzz_test.go:38:16: undefined: day\n/tmp/tmp80ggorzz_test.go:46:12: undefined: day\n/tmp/tmp80ggorzz_test.go:51:12: undefined: day\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, _ := parse_month(date)\n    if month == 0 {\n        return false\n    }\n    day, _ := parse_day(date)\n    if day == 0 {\n        return false\n    }\n    year, _ := parse_year(date)\n    if year == 0 {\n        return false\n    }\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpil3p1930_test.go:29:17: undefined: parse_month\n/tmp/tmpil3p1930_test.go:33:15: undefined: parse_day\n/tmp/tmpil3p1930_test.go:37:16: undefined: parse_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    date_arr := strings.Split(date, \"-\")\n    if len(date_arr) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_arr[0])\n    day, _ := strconv.Atoi(date_arr[1])\n    year, _ := strconv.Atoi(date_arr[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        return false\n    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq379a2zj_test.go:29:17: undefined: strings\n/tmp/tmpq379a2zj_test.go:33:17: undefined: strconv\n/tmp/tmpq379a2zj_test.go:34:15: undefined: strconv\n/tmp/tmpq379a2zj_test.go:35:16: undefined: strconv\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    month, _ := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day > 31 {\n            return false\n        }\n    } else {\n        if day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwi_twsf6_test.go:32:47: undefined: month\n/tmp/tmpwi_twsf6_test.go:32:55: undefined: day\n/tmp/tmpwi_twsf6_test.go:32:61: undefined: year\n/tmp/tmpwi_twsf6_test.go:36:8: undefined: day\n/tmp/tmpwi_twsf6_test.go:38:16: undefined: day\n/tmp/tmpwi_twsf6_test.go:46:12: undefined: day\n/tmp/tmpwi_twsf6_test.go:50:12: undefined: day\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    fmt.Println(\"date: \", date)\n    if len(date) == 0 {\n        return false\n    }\n    month, _ := strconv.Atoi(date[0:2])\n    day, _ := strconv.Atoi(date[3:5])\n    year, _ := strconv.Atoi(date[6:10])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpiv52ffxz_test.go:30:17: undefined: strconv\n/tmp/tmpiv52ffxz_test.go:31:15: undefined: strconv\n/tmp/tmpiv52ffxz_test.go:32:16: undefined: strconv\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var month, day, year int\n    var err error\n    month, day, year, err = parse_date(date)\n    if err != nil {\n        return false\n    }\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 29 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_4jnedxz_test.go:31:29: undefined: parse_date\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    month, _ := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq70nl7n0_test.go:32:47: undefined: month\n/tmp/tmpq70nl7n0_test.go:32:55: undefined: day\n/tmp/tmpq70nl7n0_test.go:32:61: undefined: year\n/tmp/tmpq70nl7n0_test.go:36:8: undefined: day\n/tmp/tmpq70nl7n0_test.go:38:16: undefined: day\n/tmp/tmpq70nl7n0_test.go:46:12: undefined: day\n/tmp/tmpq70nl7n0_test.go:50:12: undefined: day\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := get_month_day_year(date)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if year < 1000 || year > 9999 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa8slzdkw_test.go:29:25: undefined: get_month_day_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date[0:2], date[3:5], date[6:10]\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    month_num, _ := fmt.Sscanf(month, \"%d\", &month_num)\n    if month_num < 1 || month_num > 12 {\n        return false\n    }\n    day_num, _ := fmt.Sscanf(day, \"%d\", &day_num)\n    if day_num < 1 || day_num > 31 {\n        return false\n    }\n    if month_num == 2 {\n        if day_num < 1 || day_num > 29 {\n            return false\n        }\n    } else {\n        if day_num < 1 || day_num > 30 {\n            return false\n        }\n    }\n    year_num, _ := fmt.Sscanf(year, \"%d\", &year_num)\n    if year_num < 1900 || year_num > 2100 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5ww9ck1z_test.go:33:46: undefined: month_num\n/tmp/tmp5ww9ck1z_test.go:37:42: undefined: day_num\n/tmp/tmp5ww9ck1z_test.go:50:44: undefined: year_num\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    fmt.Println(\"Enter the date: \", date)\n    if len(date) == 0 {\n        fmt.Println(\"The date is empty.\")\n        return false\n    }\n    if len(date) != 10 {\n        fmt.Println(\"The date is not in the correct format.\")\n        return false\n    }\n    month, _ := strconv.Atoi(date[0:2])\n    day, _ := strconv.Atoi(date[2:4])\n    year, _ := strconv.Atoi(date[4:10])\n    if month < 1 || month > 12 {\n        fmt.Println(\"The month should be in the range of 1 to 12.\")\n        return false\n    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n            fmt.Println(\"The day should be in the range of 1 to 29.\")\n            return false\n        }\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            fmt.Println(\"The day should be in the range of 1 to 31.\")\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            fmt.Println(\"The day should be in the range of 1 to 30.\")\n            return false\n        }\n    }\n    if year < 1900 || year > 2100 {\n        fmt.Println(\"The year should be in the range of 1900 to 2100.\")\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp528acb25_test.go:35:17: undefined: strconv\n/tmp/tmp528acb25_test.go:36:15: undefined: strconv\n/tmp/tmp528acb25_test.go:37:16: undefined: strconv\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    month, _ := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day > 31 {\n            return false\n        }\n    } else {\n        if day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwi_twsf6_test.go:32:47: undefined: month\n/tmp/tmpwi_twsf6_test.go:32:55: undefined: day\n/tmp/tmpwi_twsf6_test.go:32:61: undefined: year\n/tmp/tmpwi_twsf6_test.go:36:8: undefined: day\n/tmp/tmpwi_twsf6_test.go:38:16: undefined: day\n/tmp/tmpwi_twsf6_test.go:46:12: undefined: day\n/tmp/tmpwi_twsf6_test.go:50:12: undefined: day\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    month, _ := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq70nl7n0_test.go:32:47: undefined: month\n/tmp/tmpq70nl7n0_test.go:32:55: undefined: day\n/tmp/tmpq70nl7n0_test.go:32:61: undefined: year\n/tmp/tmpq70nl7n0_test.go:36:8: undefined: day\n/tmp/tmpq70nl7n0_test.go:38:16: undefined: day\n/tmp/tmpq70nl7n0_test.go:46:12: undefined: day\n/tmp/tmpq70nl7n0_test.go:50:12: undefined: day\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    fmt.Println(\"Validating date: \", date)\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := get_month_day_year(date)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        return false\n    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    }\n    if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    if year < 1000 || year > 9999 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxbz8lu9g_test.go:30:25: undefined: get_month_day_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date[0:2], date[3:5], date[6:10]\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    month_num, _ := fmt.Sscanf(month, \"%d\", &month_num)\n    if month_num < 1 || month_num > 12 {\n        return false\n    }\n    day_num, _ := fmt.Sscanf(day, \"%d\", &day_num)\n    if day_num < 1 || day_num > 31 {\n        return false\n    }\n    if month_num == 2 {\n        if day_num < 1 || day_num > 29 {\n            return false\n        }\n    } else {\n        if day_num < 1 || day_num > 30 {\n            return false\n        }\n    }\n    year_num, _ := fmt.Sscanf(year, \"%d\", &year_num)\n    if year_num < 1900 || year_num > 2100 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5ww9ck1z_test.go:33:46: undefined: month_num\n/tmp/tmp5ww9ck1z_test.go:37:42: undefined: day_num\n/tmp/tmp5ww9ck1z_test.go:50:44: undefined: year_num\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, day, year := date[0:2], date[3:5], date[6:10]\n    \n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    \n    month_num, err := strconv.Atoi(month)\n    if err != nil {\n        return false\n    }\n    \n    if month_num < 1 || month_num > 12 {\n        return false\n    }\n    \n    day_num, err := strconv.Atoi(day)\n    if err != nil {\n        return false\n    }\n    \n    if month_num == 2 && day_num < 1 || month_num == 2 && day_num > 29 {\n        return false\n    }\n    \n    if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n        if day_num < 1 || day_num > 31 {\n            return false\n        }\n    }\n    \n    if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n        if day_num < 1 || day_num > 30 {\n            return false\n        }\n    }\n    \n    year_num, err := strconv.Atoi(year)\n    if err != nil {\n        return false\n    }\n    \n    if year_num < 1000 || year_num > 9999 {\n        return false\n    }\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr7e_sike_test.go:36:23: undefined: strconv\n/tmp/tmpr7e_sike_test.go:45:21: undefined: strconv\n/tmp/tmpr7e_sike_test.go:66:22: undefined: strconv\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date[0:2], date[3:5], date[6:10]\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    if !(month[0] >= '1' && month[0] <= '12' && month[1] >= '1' && month[1] <= '12') {\n        return false\n    }\n    if !(day[0] >= '1' && day[0] <= '31' && day[1] >= '1' && day[1] <= '31') {\n        return false\n    }\n    if !(month[0] >= '1' && month[0] <= '12' && month[1] >= '1' && month[1] <= '12') {\n        return false\n    }\n    if !(day[0] >= '1' && day[0] <= '30' && day[1] >= '1' && day[1] <= '30') {\n        return false\n    }\n    if !(month[0] >= '1' && month[0] <= '12' && month[1] >= '1' && month[1] <= '12') {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpjsdyc3b6_test.go:33:41: illegal rune literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    fmt.Println(\"valid_date: \", date)\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < '0' || date[0] > '9' {\n        return false\n    }\n    if date[1] < '0' || date[1] > '9' {\n        return false\n    }\n    if date[2] < '0' || date[2] > '9' {\n        return false\n    }\n    if date[3] < '0' || date[3] > '9' {\n        return false\n    }\n    if date[4] < '0' || date[4] > '9' {\n        return false\n    }\n    if date[5] < '0' || date[5] > '9' {\n        return false\n    }\n    if date[6] < '0' || date[6] > '9' {\n        return false\n    }\n    if date[7] < '0' || date[7] > '9' {\n        return false\n    }\n    if date[8] < '0' || date[8] > '9' {\n        return false\n    }\n    if date[9] < '0' || date[9] > '9' {\n        return false\n    }\n    if date[3] < '1' || date[3] > '12' {\n        return false\n    }\n    if date[5] < '1' || date[5] > '12' {\n        return false\n    }\n    if date[7] < '1' || date[7] > '12' {\n        return false\n    }\n    if date[8] < '1' || date[8] > '12' {\n        return false\n    }\n    if date[10] < '1' || date[10] > '31' {\n        return false\n    }\n    if date[3] == '1' && date[5] == '1' && date[7] == '1' && date[8] == '1' {\n        return false\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpt3rdwtv6_test.go:63:35: illegal rune literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    month, _ := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day > 31 {\n            return false\n        }\n    } else {\n        if day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwi_twsf6_test.go:32:47: undefined: month\n/tmp/tmpwi_twsf6_test.go:32:55: undefined: day\n/tmp/tmpwi_twsf6_test.go:32:61: undefined: year\n/tmp/tmpwi_twsf6_test.go:36:8: undefined: day\n/tmp/tmpwi_twsf6_test.go:38:16: undefined: day\n/tmp/tmpwi_twsf6_test.go:46:12: undefined: day\n/tmp/tmpwi_twsf6_test.go:50:12: undefined: day\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, day, year := date[0:2], date[3:5], date[6:10]\n    \n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    \n    month_num, _ := fmt.Sscanf(month, \"%d\", &month_num)\n    if month_num < 1 || month_num > 12 {\n        return false\n    }\n    \n    day_num, _ := fmt.Sscanf(day, \"%d\", &day_num)\n    if day_num < 1 || day_num > 31 {\n        return false\n    }\n    \n    if month_num == 2 {\n        if day_num < 1 || day_num > 29 {\n            return false\n        }\n    } else {\n        if day_num < 1 || day_num > 30 {\n            return false\n        }\n    }\n    \n    year_num, _ := fmt.Sscanf(year, \"%d\", &year_num)\n    if year_num < 1 || year_num > 9999 {\n        return false\n    }\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_04cocjc_test.go:36:46: undefined: month_num\n/tmp/tmp_04cocjc_test.go:41:42: undefined: day_num\n/tmp/tmp_04cocjc_test.go:56:44: undefined: year_num\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date[0:2], date[3:5], date[6:10]\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    month_num, _ := fmt.Sscanf(month, \"%d\", &month_num)\n    if month_num < 1 || month_num > 12 {\n        return false\n    }\n    day_num, _ := fmt.Sscanf(day, \"%d\", &day_num)\n    if day_num < 1 || day_num > 31 {\n        return false\n    }\n    if month_num == 2 {\n        if day_num < 1 || day_num > 29 {\n            return false\n        }\n    } else {\n        if day_num < 1 || day_num > 30 {\n            return false\n        }\n    }\n    year_num, _ := fmt.Sscanf(year, \"%d\", &year_num)\n    if year_num < 1900 || year_num > 2100 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5ww9ck1z_test.go:33:46: undefined: month_num\n/tmp/tmp5ww9ck1z_test.go:37:42: undefined: day_num\n/tmp/tmp5ww9ck1z_test.go:50:44: undefined: year_num\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date[0:2], date[3:5], date[6:10]\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    month_num, _ := fmt.Sscanf(month, \"%d\", &month_num)\n    if month_num < 1 || month_num > 12 {\n        return false\n    }\n    day_num, _ := fmt.Sscanf(day, \"%d\", &day_num)\n    if day_num < 1 || day_num > 31 {\n        return false\n    }\n    if month_num == 2 {\n        if day_num < 1 || day_num > 29 {\n            return false\n        }\n    } else {\n        if day_num < 1 || day_num > 30 {\n            return false\n        }\n    }\n    year_num, _ := fmt.Sscanf(year, \"%d\", &year_num)\n    if year_num < 1 || year_num > 9999 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphbrje6f6_test.go:33:46: undefined: month_num\n/tmp/tmphbrje6f6_test.go:37:42: undefined: day_num\n/tmp/tmphbrje6f6_test.go:50:44: undefined: year_num\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    fmt.Println(\"Validating date: \", date)\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := get_month_day_year(date)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if year < 1000 || year > 9999 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7elf8ws4_test.go:30:25: undefined: get_month_day_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date[0:2], date[3:5], date[6:10]\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    month_num, _ := fmt.Sscanf(month, \"%d\", &month_num)\n    if month_num < 1 || month_num > 12 {\n        return false\n    }\n    day_num, _ := fmt.Sscanf(day, \"%d\", &day_num)\n    if day_num < 1 || day_num > 31 {\n        return false\n    }\n    if month_num == 2 {\n        if day_num < 1 || day_num > 29 {\n            return false\n        }\n    } else {\n        if day_num < 1 || day_num > 30 {\n            return false\n        }\n    }\n    year_num, _ := fmt.Sscanf(year, \"%d\", &year_num)\n    if year_num < 1900 || year_num > 2100 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5ww9ck1z_test.go:33:46: undefined: month_num\n/tmp/tmp5ww9ck1z_test.go:37:42: undefined: day_num\n/tmp/tmp5ww9ck1z_test.go:50:44: undefined: year_num\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, _ := parse_month(date)\n    if month < 1 || month > 12 {\n        return false\n    }\n    day, _ := parse_day(date)\n    if day < 1 || day > 31 {\n        return false\n    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    }\n    year, _ := parse_year(date)\n    if year < 1 || year > 9999 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6gah9nfa_test.go:29:17: undefined: parse_month\n/tmp/tmp6gah9nfa_test.go:33:15: undefined: parse_day\n/tmp/tmp6gah9nfa_test.go:50:16: undefined: parse_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date[0:2], date[3:5], date[6:10]\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    if !(month[0] >= '1' && month[0] <= '12' && month[1] >= '1' && month[1] <= '12') {\n        return false\n    }\n    if !(day[0] >= '1' && day[0] <= '31' && day[1] >= '1' && day[1] <= '31') {\n        return false\n    }\n    if !(month[0] >= '1' && month[0] <= '12' && month[1] >= '1' && month[1] <= '12') {\n        return false\n    }\n    if !(day[0] >= '1' && day[0] <= '30' && day[1] >= '1' && day[1] <= '30') {\n        return false\n    }\n    if !(month[0] >= '1' && month[0] <= '12' && month[1] >= '1' && month[1] <= '12') {\n        return false\n    }\n    if !(day[0] >= '1' && day[0] <= '29' && day[1] >= '1' && day[1] <= '29') {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp2h22uxe3_test.go:33:41: illegal rune literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, _ := parse_month(date)\n    day, _ := parse_day(date)\n    year, _ := parse_year(date)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        return false\n    }\n    if month == 2 && day > 29 {\n        return false\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day > 30 {\n            return false\n        }\n    }\n    if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day > 29 {\n            return false\n        }\n    }\n    if year < 1000 || year > 9999 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp86xrh_l_test.go:29:17: undefined: parse_month\n/tmp/tmpp86xrh_l_test.go:30:15: undefined: parse_day\n/tmp/tmpp86xrh_l_test.go:31:16: undefined: parse_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, _ := parse_month(date)\n    day, _ := parse_day(date)\n    year, _ := parse_year(date)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        return false\n    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    }\n    if year < 1900 || year > 2100 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsi0xv6n4_test.go:29:17: undefined: parse_month\n/tmp/tmpsi0xv6n4_test.go:30:15: undefined: parse_day\n/tmp/tmpsi0xv6n4_test.go:31:16: undefined: parse_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    fmt.Printf(\"date: %s\\n\", date)\n    if len(date) == 0 {\n        return false\n    }\n    month, _ := parse_month(date)\n    if month < 1 || month > 12 {\n        return false\n    }\n    day, _ := parse_day(date)\n    if day < 1 || day > 31 {\n        return false\n    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    year, _ := parse_year(date)\n    if year < 1900 || year > 2100 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu7n36vss_test.go:30:17: undefined: parse_month\n/tmp/tmpu7n36vss_test.go:34:15: undefined: parse_day\n/tmp/tmpu7n36vss_test.go:47:16: undefined: parse_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] != '0' && date[0] != '1' && date[0] != '2' && date[0] != '3' && date[0] != '4' && date[0] != '5' && date[0] != '6' && date[0] != '7' && date[0] != '8' && date[0] != '9' && date[0] != '0' {\n        return false\n    }\n    if date[1] != '0' && date[1] != '1' && date[1] != '2' && date[1] != '3' && date[1] != '4' && date[1] != '5' && date[1] != '6' && date[1] != '7' && date[1] != '8' && date[1] != '9' && date[1] != '0' {\n        return false\n    }\n    if date[2] != '0' && date[2] != '1' && date[2] != '2' && date[2] != '3' && date[2] != '4' && date[2] != '5' && date[2] != '6' && date[2] != '7' && date[2] != '8' && date[2] != '9' && date[2] != '0' {\n        return false\n    }\n    if date[3] != '0' && date[3] != '1' && date[3] != '2' && date[3] != '3' && date[3] != '4' && date[3] != '5' && date[3] != '6' && date[3] != '7' && date[3] != '8' && date[3] != '9' && date[3] != '0' {\n        return false\n    }\n    if date[4] != '0' && date[4] != '1' && date[4] != '2' && date[4] != '3' && date[4]\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374748,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp3eooxo40_test.go:45:6: expected '(', found TestValid_Date\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, day, year := date[0:2], date[3:5], date[6:10]\n    \n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    \n    month_num, _ := fmt.Sscanf(month, \"%d\", &month_num)\n    if month_num < 1 || month_num > 12 {\n        return false\n    }\n    \n    day_num, _ := fmt.Sscanf(day, \"%d\", &day_num)\n    if day_num < 1 || day_num > 31 {\n        return false\n    }\n    \n    if month_num == 2 {\n        if day_num < 1 || day_num > 29 {\n            return false\n        }\n    } else {\n        if day_num < 1 || day_num > 30 {\n            return false\n        }\n    }\n    \n    year_num, _ := fmt.Sscanf(year, \"%d\", &year_num)\n    if year_num < 1 || year_num > 9999 {\n        return false\n    }\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_04cocjc_test.go:36:46: undefined: month_num\n/tmp/tmp_04cocjc_test.go:41:42: undefined: day_num\n/tmp/tmp_04cocjc_test.go:56:44: undefined: year_num\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    fmt.Println(\"valid_date: \", date)\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < '0' || date[0] > '9' {\n        return false\n    }\n    if date[1] < '0' || date[1] > '9' {\n        return false\n    }\n    if date[2] < '0' || date[2] > '9' {\n        return false\n    }\n    if date[3] < '0' || date[3] > '9' {\n        return false\n    }\n    if date[4] < '0' || date[4] > '9' {\n        return false\n    }\n    if date[5] < '0' || date[5] > '9' {\n        return false\n    }\n    if date[6] < '0' || date[6] > '9' {\n        return false\n    }\n    if date[7] < '0' || date[7] > '9' {\n        return false\n    }\n    if date[8] < '0' || date[8] > '9' {\n        return false\n    }\n    if date[9] < '0' || date[9] > '9' {\n        return false\n    }\n    if date[0] == '0' && date[1] == '0' && date[2] == '0' && date[3] == '0' && date[4] == '0' && date[5] == '0' && date[6] == '0' && date[7] == '0' && date[8] == '0' && date[9] == '0' {\n        return false\n    }\n    if date[0] == '1' && date[1] == '1' && date[2] == '1' && date[3] == '1' && date[4] == '1' && date[5] == '1' && date[6] == '1' && date[7] == '1' && date[8] == '1' &&\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmplfeeg1op_test.go:67:6: expected '(', found TestValid_Date\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if date[0] != '0' && date[0] != '1' && date[0] != '2' && date[0] != '3' && date[0] != '4' && date[0] != '5' && date[0] != '6' && date[0] != '7' && date[0] != '8' && date[0] != '9' && date[0] != '0' && date[0] != '1' && date[0] != '2' && date[0] != '3' && date[0] != '4' && date[0] != '5' && date[0] != '6' && date[0] != '7' && date[0] != '8' && date[0] != '9' && date[0] != '0' && date[0] != '1' && date[0] != '2' && date[0] != '3' && date[0] != '4' && date[0] != '5' && date[0] != '6' && date[0] != '7' && date[0] != '8' && date[0] != '9' && date[0] != '0' && date[0] != '1' && date[0] != '2' && date[0] != '3' && date[0] != '4' && date[0] != '5' && date[0] != '6' && date[0] != '7' && date[0] != '8' && date[0] != '9' && date[0] != '0' && date[0] != '1' && date[0] != '2' && date[0] != '3' && date[0] != '4' && date[0] != '5' && date[0] != '6' && date[0] != '7' && date[0] != '8' && date[0] != '9' && date[0] != '0' && date[0] != '1' && date[0] != '2' && date[0] != '3' && date[0] != '4\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpk3q20oti_test.go:29:991: rune literal not terminated\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := parse_month(date)\n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    day, _ := parse_day(date)\n    if day < 1 || day > 31 {\n        return false\n    }\n    \n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    \n    year, _ := parse_year(date)\n    if year < 1900 || year > 2100 {\n        return false\n    }\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0j679dmt_test.go:30:17: undefined: parse_month\n/tmp/tmp0j679dmt_test.go:35:15: undefined: parse_day\n/tmp/tmp0j679dmt_test.go:50:16: undefined: parse_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, day, year := get_month_day_year(date)\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        return false\n    }\n    \n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    }\n    \n    if year < 1 || year > 9999 {\n        return false\n    }\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4qhjnz7z_test.go:30:25: undefined: get_month_day_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, day, year := date[0:2], date[3:5], date[6:10]\n    \n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    \n    month_num, _ := fmt.Sscanf(month, \"%d\", &month_num)\n    if month_num < 1 || month_num > 12 {\n        return false\n    }\n    \n    day_num, _ := fmt.Sscanf(day, \"%d\", &day_num)\n    if day_num < 1 || day_num > 31 {\n        return false\n    }\n    \n    if month_num == 2 {\n        if day_num < 1 || day_num > 29 {\n            return false\n        }\n    } else {\n        if day_num < 1 || day_num > 30 {\n            return false\n        }\n    }\n    \n    year_num, _ := fmt.Sscanf(year, \"%d\", &year_num)\n    if year_num < 1900 || year_num > 2100 {\n        return false\n    }\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbn0v4d77_test.go:36:46: undefined: month_num\n/tmp/tmpbn0v4d77_test.go:41:42: undefined: day_num\n/tmp/tmpbn0v4d77_test.go:56:44: undefined: year_num\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date[0:2], date[3:5], date[6:10]\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    if len(month) != len(day) || len(month) != len(year) {\n        return false\n    }\n    if len(month) != len(year) {\n        return false\n    }\n    if len(month) != 2 {\n        return false\n    }\n    if len(day) != 2 {\n        return false\n    }\n    if len(year) != 4 {\n        return false\n    }\n    if len(month) != 2 {\n        return false\n    }\n    if len(day) != 2 {\n        return false\n    }\n    if len(year) != 4 {\n        return false\n    }\n    if len(month) != 2 {\n        return false\n    }\n    if len(day) != 2 {\n        return false\n    }\n    if len(year) != 4 {\n        return false\n    }\n    if len(month) != 2 {\n        return false\n    }\n    if len(day) != 2 {\n        return false\n    }\n    if len(year) != 4 {\n        return false\n    }\n    if len(month) != 2 {\n        return false\n    }\n    if len(day) != 2 {\n        return false\n    }\n    if len(year) != 4 {\n        return false\n    }\n    if len(month) != 2 {\n        return false\n    }\n    if len(day) != 2 {\n        return false\n    }\n    if len(year) != 4 {\n        return false\n    }\n    if len(month) != 2 {\n        return false\n    }\n    if len(day) != 2 {\n        return false\n    }\n    if len(year) != 4 {\n        return false\n    }\n    if len(month) != 2 {\n        return false\n    }\n    if len(day) != 2 {\n        return false\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpg0t4kius_test.go:108:6: expected '(', found TestValid_Date\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var month, day, year int\n    var valid = true\n    var month_str, day_str, year_str string\n    var month_int, day_int, year_int int\n    var month_int_valid, day_int_valid, year_int_valid bool\n    var month_int_valid_str, day_int_valid_str, year_int_valid_str string\n    var month_int_valid_str_valid, day_int_valid_str_valid, year_int_valid_str_valid bool\n    var month_int_valid_str_valid_valid, day_int_valid_str_valid_valid, year_int_valid_str_valid_valid bool\n    var month_int_valid_str_valid_valid_valid, day_int_valid_str_valid_valid_valid, year_int_valid_str_valid_valid_valid bool\n    var month_int_valid_str_valid_valid_valid_valid, day_int_valid_str_valid_valid_valid_valid, year_int_valid_str_valid_valid_valid_valid bool\n    var month_int_valid_str_valid_valid_valid_valid_valid, day_int_valid_str_valid_valid_valid_valid_valid, year_int_valid_str_valid_valid_valid_valid_valid bool\n    var month_int_valid_str_valid_valid_valid_valid_valid_valid, day_int_valid_str_valid_valid_valid_valid_valid_valid, year_int_valid_str_valid_valid_valid_valid_valid_valid bool\n    var month_int_valid_str_valid_valid_valid_valid_valid_valid_valid, day_int_valid_str_valid_valid_valid_valid_valid_valid_valid, year_int_valid_str_valid_valid_valid_valid_valid_valid_valid bool\n    var month_int_valid_str_valid_valid_valid_valid_valid_valid_valid_valid, day_int_valid_str_valid_valid_valid_valid_valid_valid\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpfuav_f0h_test.go:42:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, day, year := get_month_day_year(date)\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if year < 1900 || year > 2100 {\n        return false\n    }\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe4eyswph_test.go:30:25: undefined: get_month_day_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var month, day, year int\n    var err error\n    month, day, year, err = parse_date(date)\n    if err != nil {\n        return false\n    }\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day > 31 {\n            return false\n        }\n    } else {\n        if day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5wguibka_test.go:31:29: undefined: parse_date\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := get_month_day_year(date)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if year < 1900 || year > 2100 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfdug87yw_test.go:29:25: undefined: get_month_day_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, _ := parse_month(date)\n    if month == 0 {\n        return false\n    }\n    day, _ := parse_day(date)\n    if day == 0 {\n        return false\n    }\n    year, _ := parse_year(date)\n    if year == 0 {\n        return false\n    }\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3iegaivm_test.go:29:17: undefined: parse_month\n/tmp/tmp3iegaivm_test.go:33:15: undefined: parse_day\n/tmp/tmp3iegaivm_test.go:37:16: undefined: parse_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, _ := parse_month(date)\n    if month == 0 {\n        return false\n    }\n    day, _ := parse_day(date)\n    if day == 0 {\n        return false\n    }\n    year, _ := parse_year(date)\n    if year == 0 {\n        return false\n    }\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        return false\n    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0doyfa7r_test.go:29:17: undefined: parse_month\n/tmp/tmp0doyfa7r_test.go:33:15: undefined: parse_day\n/tmp/tmp0doyfa7r_test.go:37:16: undefined: parse_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[2] != '-' {\n        return false\n    }\n    if date[5] != '-' {\n        return false\n    }\n    if date[8] != '-' {\n        return false\n    }\n    if date[0] < '0' || date[0] > '9' {\n        return false\n    }\n    if date[1] < '0' || date[1] > '9' {\n        return false\n    }\n    if date[3] < '0' || date[3] > '9' {\n        return false\n    }\n    if date[4] < '0' || date[4] > '9' {\n        return false\n    }\n    if date[6] < '0' || date[6] > '9' {\n        return false\n    }\n    if date[7] < '0' || date[7] > '9' {\n        return false\n    }\n    if date[9] < '0' || date[9] > '9' {\n        return false\n    }\n    if date[10] < '0' || date[10] > '9' {\n        return false\n    }\n    if date[2] == '-' && date[5] == '-' && date[8] == '-' && date[0] > '3' && date[1] > '0' && date[1] < '4' && date[3] > '0' && date[3] < '6' && date[4] > '0' && date[4] < '9' && date[6] > '0' && date[6] < '9' && date[7] > '0' && date[7] < '9' && date[9] > '0' && date[9] < '9' && date[10] > '0' && date[10] < '9' {\n        return false\n    }\n    if date[2] == '-' && date[5] == '-' && date[8] == '-' && date[0] >\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpwmpb5uk4_test.go:69:6: expected '(', found TestValid_Date\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[2] < '0' || date[2] > '9' {\n        return false\n    }\n    if date[5] < '0' || date[5] > '9' {\n        return false\n    }\n    if date[8] < '0' || date[8] > '9' {\n        return false\n    }\n    if date[0] < '0' || date[0] > '9' {\n        return false\n    }\n    if date[1] < '0' || date[1] > '9' {\n        return false\n    }\n    if date[3] < '0' || date[3] > '9' {\n        return false\n    }\n    if date[4] < '0' || date[4] > '9' {\n        return false\n    }\n    if date[6] < '0' || date[6] > '9' {\n        return false\n    }\n    if date[7] < '0' || date[7] > '9' {\n        return false\n    }\n    if date[9] < '0' || date[9] > '9' {\n        return false\n    }\n    if date[10] < '0' || date[10] > '9' {\n        return false\n    }\n    if date[0] == '0' && date[1] == '0' && date[2] == '0' {\n        return false\n    }\n    if date[3] == '0' && date[4] == '0' && date[5] == '0' {\n        return false\n    }\n    if date[6] == '0' && date[7] == '0' && date[8] == '0' {\n        return false\n    }\n    if date[9] == '0' && date[10] == '0' && date[11] == '0' {\n        return false\n    }\n    if date[0] == '0' && date[1] == '0' && date[\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpdvu1a3wl_test.go:78:6: expected '(', found TestValid_Date\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, _ := parse_month(date)\n    if month == 0 {\n        return false\n    }\n    day, _ := parse_day(date)\n    if day == 0 {\n        return false\n    }\n    year, _ := parse_year(date)\n    if year == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwkfhcg4w_test.go:29:17: undefined: parse_month\n/tmp/tmpwkfhcg4w_test.go:33:15: undefined: parse_day\n/tmp/tmpwkfhcg4w_test.go:37:16: undefined: parse_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    fmt.Println(\"valid_date: \", date)\n    if len(date) == 0 {\n        return false\n    }\n    date_arr := strings.Split(date, \"-\")\n    if len(date_arr) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_arr[0])\n    day, _ := strconv.Atoi(date_arr[1])\n    year, _ := strconv.Atoi(date_arr[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day > 31 {\n            return false\n        }\n    } else {\n        if day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5fwgjzl1_test.go:30:17: undefined: strings\n/tmp/tmp5fwgjzl1_test.go:34:17: undefined: strconv\n/tmp/tmp5fwgjzl1_test.go:35:15: undefined: strconv\n/tmp/tmp5fwgjzl1_test.go:36:16: undefined: strconv\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date[0:2], date[3:5], date[6:10]\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    if !(month[0] >= '1' && month[0] <= '12' && month[1] >= '1' && month[1] <= '12') {\n        return false\n    }\n    if !(day[0] >= '1' && day[0] <= '31' && day[1] >= '1' && day[1] <= '31') {\n        return false\n    }\n    if !(month[0] == '2' && day[0] >= '1' && day[0] <= '29') {\n        return false\n    }\n    if !(month[0] == '4' || month[0] == '6' || month[0] == '9' || month[0] == '11') {\n        return false\n    }\n    if !(day[0] == '1' || day[0] == '3' || day[0] == '5' || day[0] == '7' || day[0] == '8' || day[0] == '10' || day[0] == '12') {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp17omc428_test.go:33:41: illegal rune literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date[0:2], date[3:5], date[6:10]\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    month_num, _ := fmt.Sscanf(month, \"%d\", &month_num)\n    if month_num < 1 || month_num > 12 {\n        return false\n    }\n    day_num, _ := fmt.Sscanf(day, \"%d\", &day_num)\n    if day_num < 1 || day_num > 31 {\n        return false\n    }\n    if month_num == 2 {\n        if day_num < 1 || day_num > 29 {\n            return false\n        }\n    } else {\n        if day_num < 1 || day_num > 30 {\n            return false\n        }\n    }\n    year_num, _ := fmt.Sscanf(year, \"%d\", &year_num)\n    if year_num < 1900 || year_num > 2100 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5ww9ck1z_test.go:33:46: undefined: month_num\n/tmp/tmp5ww9ck1z_test.go:37:42: undefined: day_num\n/tmp/tmp5ww9ck1z_test.go:50:44: undefined: year_num\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var month, day, year int\n    var err error\n    if month, err = parse_month(date); err != nil {\n        return false\n    }\n    if day, err = parse_day(date); err != nil {\n        return false\n    }\n    if year, err = parse_year(date); err != nil {\n        return false\n    }\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if year < 1900 || year > 2100 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpevwezar3_test.go:31:21: undefined: parse_month\n/tmp/tmpevwezar3_test.go:34:19: undefined: parse_day\n/tmp/tmpevwezar3_test.go:37:20: undefined: parse_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var month, day, year int\n    var err error\n    if month, err = parse_month(date); err != nil {\n        return false\n    }\n    if day, err = parse_day(date); err != nil {\n        return false\n    }\n    if year, err = parse_year(date); err != nil {\n        return false\n    }\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if year < 1900 || year > 2100 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpevwezar3_test.go:31:21: undefined: parse_month\n/tmp/tmpevwezar3_test.go:34:19: undefined: parse_day\n/tmp/tmpevwezar3_test.go:37:20: undefined: parse_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    date_arr := strings.Split(date, \"-\")\n    if len(date_arr) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_arr[0])\n    day, _ := strconv.Atoi(date_arr[1])\n    year, _ := strconv.Atoi(date_arr[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1sv100w3_test.go:29:17: undefined: strings\n/tmp/tmp1sv100w3_test.go:33:17: undefined: strconv\n/tmp/tmp1sv100w3_test.go:34:15: undefined: strconv\n/tmp/tmp1sv100w3_test.go:35:16: undefined: strconv\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    month, _ := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day > 31 {\n            return false\n        }\n    } else {\n        if day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwi_twsf6_test.go:32:47: undefined: month\n/tmp/tmpwi_twsf6_test.go:32:55: undefined: day\n/tmp/tmpwi_twsf6_test.go:32:61: undefined: year\n/tmp/tmpwi_twsf6_test.go:36:8: undefined: day\n/tmp/tmpwi_twsf6_test.go:38:16: undefined: day\n/tmp/tmpwi_twsf6_test.go:46:12: undefined: day\n/tmp/tmpwi_twsf6_test.go:50:12: undefined: day\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, day, year := date[0:2], date[3:5], date[6:10]\n    \n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    \n    if !(month[0] >= '1' && month[0] <= '12') || !(month[1] >= '1' && month[1] <= '12') {\n        return false\n    }\n    \n    if !(day[0] >= '1' && day[0] <= '31') || !(day[1] >= '1' && day[1] <= '31') {\n        return false\n    }\n    \n    if !(year[0] >= '1' && year[0] <= '31') || !(year[1] >= '1' && year[1] <= '31') || !(year[2] >= '1' && year[2] <= '31') || !(year[3] >= '1' && year[3] <= '31') {\n        return false\n    }\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpr0445xui_test.go:36:41: illegal rune literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15 (0.00s)\n        tmph5tppdxc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date[0:2], date[3:5], date[6:10]\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    if !(1 <= int(month[0]) && int(month[0]) <= 12) {\n        return false\n    }\n    if !(1 <= int(month[1]) && int(month[1]) <= 12) {\n        return false\n    }\n    if !(1 <= int(day[0]) && int(day[0]) <= 31) {\n        return false\n    }\n    if !(1 <= int(day[1]) && int(day[1]) <= 30) {\n        return false\n    }\n    if !(1 <= int(year[0]) && int(year[0]) <= 99) {\n        return false\n    }\n    if !(0 <= int(year[1]) && int(year[1]) <= 99) {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\npanic: runtime error: slice bounds out of range [:10] with length 9 [recovered]\n\tpanic: runtime error: slice bounds out of range [:10] with length 9\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c4000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a0300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c4000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.valid_date(0x545eff, 0x9, 0x58a600)\n\t/tmp/tmp10fpydqr_test.go:29 +0x11f\ncommand-line-arguments_test.TestValid_Date(0xc0001a0300)\n\t/tmp/tmp10fpydqr_test.go:63 +0xb8\ntesting.tRunner(0xc0001a0300, 0x54f270)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    month, _ := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day > 31 {\n            return false\n        }\n    } else {\n        if day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwi_twsf6_test.go:32:47: undefined: month\n/tmp/tmpwi_twsf6_test.go:32:55: undefined: day\n/tmp/tmpwi_twsf6_test.go:32:61: undefined: year\n/tmp/tmpwi_twsf6_test.go:36:8: undefined: day\n/tmp/tmpwi_twsf6_test.go:38:16: undefined: day\n/tmp/tmpwi_twsf6_test.go:46:12: undefined: day\n/tmp/tmpwi_twsf6_test.go:50:12: undefined: day\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, _ := parse_month(date)\n    if month < 1 || month > 12 {\n        return false\n    }\n    day, _ := parse_day(date)\n    if day < 1 || day > 31 {\n        return false\n    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwn6keg0l_test.go:29:17: undefined: parse_month\n/tmp/tmpwn6keg0l_test.go:33:15: undefined: parse_day\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15 (0.00s)\n        tmphn4q470y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, day, year := date[0:2], date[3:5], date[6:10]\n    \n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    \n    month_num, _ := fmt.Sscanf(month, \"%d\", &month_num)\n    if month_num < 1 || month_num > 12 {\n        return false\n    }\n    \n    day_num, _ := fmt.Sscanf(day, \"%d\", &day_num)\n    if day_num < 1 || day_num > 31 {\n        return false\n    }\n    \n    if month_num == 2 {\n        if day_num < 1 || day_num > 29 {\n            return false\n        }\n    } else {\n        if day_num < 1 || day_num > 30 {\n            return false\n        }\n    }\n    \n    year_num, _ := fmt.Sscanf(year, \"%d\", &year_num)\n    if year_num < 1 || year_num > 9999 {\n        return false\n    }\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_04cocjc_test.go:36:46: undefined: month_num\n/tmp/tmp_04cocjc_test.go:41:42: undefined: day_num\n/tmp/tmp_04cocjc_test.go:56:44: undefined: year_num\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    month, _ := parse_month(date[0:2])\n    day, _ := parse_day(date[2:4])\n    year, _ := parse_year(date[4:])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9rbbvoxb_test.go:32:17: undefined: parse_month\n/tmp/tmp9rbbvoxb_test.go:33:15: undefined: parse_day\n/tmp/tmp9rbbvoxb_test.go:34:16: undefined: parse_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, day, year := get_month_day_year(date)\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if year < 1900 || year > 2100 {\n        return false\n    }\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe4eyswph_test.go:30:25: undefined: get_month_day_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date[0:2], date[3:5], date[6:10]\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    month_num, _ := fmt.Sscanf(month, \"%d\", &month_num)\n    if month_num < 1 || month_num > 12 {\n        return false\n    }\n    day_num, _ := fmt.Sscanf(day, \"%d\", &day_num)\n    if day_num < 1 || day_num > 31 {\n        return false\n    }\n    if month_num == 2 {\n        if day_num < 1 || day_num > 29 {\n            return false\n        }\n    } else {\n        if day_num < 1 || day_num > 30 {\n            return false\n        }\n    }\n    year_num, _ := fmt.Sscanf(year, \"%d\", &year_num)\n    if year_num < 1900 || year_num > 2100 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5ww9ck1z_test.go:33:46: undefined: month_num\n/tmp/tmp5ww9ck1z_test.go:37:42: undefined: day_num\n/tmp/tmp5ww9ck1z_test.go:50:44: undefined: year_num\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, _ := parse_month(date)\n    day, _ := parse_day(date)\n    year, _ := parse_year(date)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        return false\n    }\n    if month == 2 && day > 29 {\n        return false\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    }\n    if year < 1900 || year > 2100 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpayys72kl_test.go:29:17: undefined: parse_month\n/tmp/tmpayys72kl_test.go:30:15: undefined: parse_day\n/tmp/tmpayys72kl_test.go:31:16: undefined: parse_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, day, year := get_month_day_year(date)\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day > 31 {\n            return false\n        }\n    } else {\n        if day > 30 {\n            return false\n        }\n    }\n    \n    if year < 1900 || year > 2100 {\n        return false\n    }\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpue5avkzv_test.go:30:25: undefined: get_month_day_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[2] != '-' {\n        return false\n    }\n    if date[5] != '-' {\n        return false\n    }\n    if date[8] != '-' {\n        return false\n    }\n    if date[0] < '0' || date[0] > '9' {\n        return false\n    }\n    if date[1] < '0' || date[1] > '9' {\n        return false\n    }\n    if date[3] < '0' || date[3] > '9' {\n        return false\n    }\n    if date[4] < '0' || date[4] > '9' {\n        return false\n    }\n    if date[6] < '0' || date[6] > '9' {\n        return false\n    }\n    if date[7] < '0' || date[7] > '9' {\n        return false\n    }\n    if date[9] < '0' || date[9] > '9' {\n        return false\n    }\n    if date[10] < '0' || date[10] > '9' {\n        return false\n    }\n    if date[0] > '2' {\n        return false\n    }\n    if date[1] > '9' {\n        return false\n    }\n    if date[3] > '9' {\n        return false\n    }\n    if date[4] > '9' {\n        return false\n    }\n    if date[6] > '9' {\n        return false\n    }\n    if date[7] > '9' {\n        return false\n    }\n    if date[9] > '9' {\n        return false\n    }\n    if date[10] > '9' {\n        return false\n    }\n    if date[2] > '9' {\n        return false\n    }\n    if date[5] > '9' {\n        return false\n    }\n    if date[8] > '9'\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp0g5fh0mi_test.go:96:6: expected '(', found TestValid_Date\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    month, _ := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n            return false\n        }\n    }\n    if day < 1 || day > 30 {\n        if month == 4 || month == 6 || month == 9 || month == 11 {\n            return false\n        }\n    }\n    if day < 1 || day > 29 {\n        if month == 2 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwmsxjgw8_test.go:32:47: undefined: month\n/tmp/tmpwmsxjgw8_test.go:32:55: undefined: day\n/tmp/tmpwmsxjgw8_test.go:32:61: undefined: year\n/tmp/tmpwmsxjgw8_test.go:36:8: undefined: day\n/tmp/tmpwmsxjgw8_test.go:41:8: undefined: day\n/tmp/tmpwmsxjgw8_test.go:46:8: undefined: day\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    month, _ := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq70nl7n0_test.go:32:47: undefined: month\n/tmp/tmpq70nl7n0_test.go:32:55: undefined: day\n/tmp/tmpq70nl7n0_test.go:32:61: undefined: year\n/tmp/tmpq70nl7n0_test.go:36:8: undefined: day\n/tmp/tmpq70nl7n0_test.go:38:16: undefined: day\n/tmp/tmpq70nl7n0_test.go:46:12: undefined: day\n/tmp/tmpq70nl7n0_test.go:50:12: undefined: day\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, _ := parse_month(date)\n    day, _ := parse_day(date)\n    year, _ := parse_year(date)\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if year < 1900 || year > 2100 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc4rjy3fo_test.go:29:17: undefined: parse_month\n/tmp/tmpc4rjy3fo_test.go:30:15: undefined: parse_day\n/tmp/tmpc4rjy3fo_test.go:31:16: undefined: parse_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10 (0.00s)\n        tmp3lsrvec6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, day, year := date[0:2], date[3:5], date[6:10]\n    \n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    \n    month_num, _ := fmt.Sscanf(month, \"%d\", &month_num)\n    if month_num < 1 || month_num > 12 {\n        return false\n    }\n    \n    day_num, _ := fmt.Sscanf(day, \"%d\", &day_num)\n    if day_num < 1 || day_num > 31 {\n        return false\n    }\n    \n    if month_num == 2 {\n        if day_num < 1 || day_num > 29 {\n            return false\n        }\n    } else {\n        if day_num < 1 || day_num > 30 {\n            return false\n        }\n    }\n    \n    year_num, _ := fmt.Sscanf(year, \"%d\", &year_num)\n    if year_num < 1000 || year_num > 9999 {\n        return false\n    }\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnl99b50r_test.go:36:46: undefined: month_num\n/tmp/tmpnl99b50r_test.go:41:42: undefined: day_num\n/tmp/tmpnl99b50r_test.go:56:44: undefined: year_num\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := parse_month(date)\n    if month == 0 {\n        return false\n    }\n    \n    day, _ := parse_day(date)\n    if day == 0 {\n        return false\n    }\n    \n    year, _ := parse_year(date)\n    if year == 0 {\n        return false\n    }\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6blgxngn_test.go:30:17: undefined: parse_month\n/tmp/tmp6blgxngn_test.go:35:15: undefined: parse_day\n/tmp/tmp6blgxngn_test.go:40:16: undefined: parse_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := parse_month(date)\n    day, _ := parse_day(date)\n    year, _ := parse_year(date)\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if year < 2000 || year > 2020 {\n            return false\n        }\n    }\n    \n    if month == 4 || month == 6 || month == 9 || month == 11 {\n        if year < 2000 || year > 2030 {\n            return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcur9ift9_test.go:30:17: undefined: parse_month\n/tmp/tmpcur9ift9_test.go:31:15: undefined: parse_day\n/tmp/tmpcur9ift9_test.go:32:16: undefined: parse_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var month, day, year int\n    var err error\n    month, day, year, err = parse_date(date)\n    if err != nil {\n        return false\n    }\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day > 31 {\n            return false\n        }\n    } else {\n        if day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5wguibka_test.go:31:29: undefined: parse_date\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    month, _ := parse_month(date[0:2])\n    day, _ := parse_day(date[2:4])\n    year, _ := parse_year(date[4:10])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if year < 1000 || year > 9999 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy2xidi5i_test.go:32:17: undefined: parse_month\n/tmp/tmpy2xidi5i_test.go:33:15: undefined: parse_day\n/tmp/tmpy2xidi5i_test.go:34:16: undefined: parse_year\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}