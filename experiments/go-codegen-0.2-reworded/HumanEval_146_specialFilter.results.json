{
  "name": "HumanEval_146_specialFilter",
  "language": "go_test.go",
  "prompt": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n",
  "tests": "func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp81gyl2af_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp81gyl2af_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp81gyl2af_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp81gyl2af_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    \n    var result int\n    \n    for _, num := range nums {\n        if num > 10 && (num%2 == 1 && num%3 == 1 && num%5 == 1 && num%7 == 1 && num%9 == 1) {\n            result++\n        }\n    }\n    \n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpea0z9rh__test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpea0z9rh__test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpea0z9rh__test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpea0z9rh__test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%3 == 1 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count int\n    for _, num := range nums {\n        if num > 10 && (num%2 == 1) && (num%10 == 5 || num%10 == 7 || num%10 == 9) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp7i8lytgq_test.go:45: expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp7i8lytgq_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    // your code here\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpl69z4mds_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl69z4mds_test.go:46: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpl69z4mds_test.go:46: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpl69z4mds_test.go:46: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    // Your code here\n    return 0\n}\n\n// What is the sum of the first ten digits of the number 100!\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 15\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 23\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp5kgtmtp3_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp5kgtmtp3_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp5kgtmtp3_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp5kgtmtp3_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && (num%2 == 1 && num%3 == 1 && num%5 == 1 && num%7 == 1 && num%9 == 1) {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpueuq54fo_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpueuq54fo_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpueuq54fo_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpueuq54fo_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && (num%2 == 1 && num%3 == 1) {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && (num%2 == 1) && (num%10 == 3 || num%10 == 5 || num%10 == 7 || num%10 == 9) {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpgocg_s75_test.go:45: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpgocg_s75_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count int\n    for _, num := range nums {\n        if num > 10 && (num%2 == 1 && num%3 == 1) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpr1grfxy7_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpr1grfxy7_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpr1grfxy7_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpr1grfxy7_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp81gyl2af_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp81gyl2af_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp81gyl2af_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp81gyl2af_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && (num%2 == 1 && num%3 == 1) {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%3 == 1 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    \n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp0kw5odax_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp0kw5odax_test.go:50: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp0kw5odax_test.go:50: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp0kw5odax_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.022s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && (num%2 == 1) && (num%10 == 5 || num%10 == 7 || num%10 == 9) {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8xbaqt_7_test.go:45: expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8xbaqt_7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && (num%10 == 1 || num%10 == 3 || num%10 == 5 || num%10 == 7 || num%10 == 9) {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpft02hwp3_test.go:45: expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpft02hwp3_test.go:45: expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpft02hwp3_test.go:45: expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && (num%2 == 1 && num%3 == 1 && num%5 == 1 && num%7 == 1 && num%9 == 1) {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpueuq54fo_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpueuq54fo_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpueuq54fo_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpueuq54fo_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && (num%10 == 1 || num%10 == 3 || num%10 == 5 || num%10 == 7 || num%10 == 9) {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpft02hwp3_test.go:45: expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpft02hwp3_test.go:45: expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpft02hwp3_test.go:45: expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && (num%2 == 1 && num%3 == 1) {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%3 == 1 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpvm6fteir_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpvm6fteir_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpvm6fteir_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpvm6fteir_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%3 == 1 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpvm6fteir_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpvm6fteir_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpvm6fteir_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpvm6fteir_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp81gyl2af_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp81gyl2af_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp81gyl2af_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp81gyl2af_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%3 == 1 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == 1 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp_4nsg1jb_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp_4nsg1jb_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_4nsg1jb_test.go:45: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp_4nsg1jb_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    \n    var count int\n    \n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            count++\n        }\n    }\n    \n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpix5czqvm_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpix5czqvm_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpix5czqvm_test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpix5czqvm_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && (num%2 == 1 && num%3 == 1) {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    \n    var result int\n    \n    for _, num := range nums {\n        if num > 10 && (num%2 == 1) && (num%10 == 3 || num%10 == 5 || num%10 == 7 || num%10 == 9) {\n            result++\n        }\n    }\n    \n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp5igdkcpl_test.go:48: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp5igdkcpl_test.go:48: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    count := 0\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            count++\n        }\n    }\n    \n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmps9ekrjes_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmps9ekrjes_test.go:50: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmps9ekrjes_test.go:50: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmps9ekrjes_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    \n    var count int\n    \n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            count++\n        }\n    }\n    \n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpix5czqvm_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpix5czqvm_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpix5czqvm_test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpix5czqvm_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    \n    if len(nums) == 0 {\n        return 0\n    }\n    \n    var result int\n    \n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    \n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpuqdk6k1t_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpuqdk6k1t_test.go:52: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpuqdk6k1t_test.go:52: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpuqdk6k1t_test.go:52: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    // Your code here\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    var result int\n    for i := 0; i < len(nums); i++ {\n        if nums[i] > 10 && nums[i]%2 == 1 && nums[i]%10 == nums[i]/10 {\n            result++\n        }\n    }\n    \n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpa32d5ei2_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpa32d5ei2_test.go:51: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpa32d5ei2_test.go:51: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpa32d5ei2_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    var count = 0\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpurpl7b7m_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpurpl7b7m_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpurpl7b7m_test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpurpl7b7m_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%3 == 1 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && (num%2 == 1 && num%3 == 1) {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%3 == 1 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && (num%2 == 1 && num%3 == 1 && num%5 == 1 && num%7 == 1 && num%9 == 1) {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpueuq54fo_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpueuq54fo_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpueuq54fo_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpueuq54fo_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%3 == 1 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%3 == 1 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%3 == 1 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    \n    if len(nums) == 0 {\n        return 0\n    }\n    \n    var result int\n    \n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            result++\n        }\n    }\n    \n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpq4kvlmtk_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpq4kvlmtk_test.go:52: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpq4kvlmtk_test.go:52: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpq4kvlmtk_test.go:52: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%3 == 1 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpvm6fteir_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpvm6fteir_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpvm6fteir_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpvm6fteir_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    \n    var count int\n    \n    for _, num := range nums {\n        if num > 10 && (num%2 == 1 && num%3 == 1) {\n            count++\n        }\n    }\n    \n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp9x00nqhp_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp9x00nqhp_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp9x00nqhp_test.go:48: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp9x00nqhp_test.go:48: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && (num%2 == 1 && num%3 == 1) {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    var count = 0\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpurpl7b7m_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpurpl7b7m_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpurpl7b7m_test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpurpl7b7m_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%3 == 1 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == 5 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpw8kxlw08_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpw8kxlw08_test.go:45: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpw8kxlw08_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == 1 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp_4nsg1jb_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp_4nsg1jb_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_4nsg1jb_test.go:45: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp_4nsg1jb_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%3 == 1 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    \n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp0kw5odax_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp0kw5odax_test.go:50: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp0kw5odax_test.go:50: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp0kw5odax_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.022s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    \n    if len(nums) == 0 {\n        return 0\n    }\n    \n    count := 0\n    \n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            count++\n        }\n    }\n    \n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp7rpe17ib_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp7rpe17ib_test.go:52: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp7rpe17ib_test.go:52: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp7rpe17ib_test.go:52: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    \n    if len(nums) == 0 {\n        return 0\n    }\n    \n    var result int\n    for i := 0; i < len(nums); i++ {\n        if nums[i] > 10 && nums[i]%2 == 1 && nums[i]%10 == nums[i]/10 {\n            result++\n        }\n    }\n    \n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpy4a9eh4b_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpy4a9eh4b_test.go:51: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpy4a9eh4b_test.go:51: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpy4a9eh4b_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == 5 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpw8kxlw08_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpw8kxlw08_test.go:45: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpw8kxlw08_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == 5 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpkdj6w2re_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpkdj6w2re_test.go:45: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpkdj6w2re_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpmxw9_hmi_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpmxw9_hmi_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpmxw9_hmi_test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpmxw9_hmi_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpl9zw_xu5_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl9zw_xu5_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpl9zw_xu5_test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpl9zw_xu5_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count int\n    for _, num := range nums {\n        if num > 10 && (num%2 == 1 && num%3 == 1) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpr1grfxy7_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpr1grfxy7_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpr1grfxy7_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpr1grfxy7_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    \n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp0kw5odax_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp0kw5odax_test.go:50: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp0kw5odax_test.go:50: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp0kw5odax_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.022s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp81gyl2af_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp81gyl2af_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp81gyl2af_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp81gyl2af_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    \n    var count int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpy5x0ba0o_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpy5x0ba0o_test.go:46: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpy5x0ba0o_test.go:46: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpy5x0ba0o_test.go:46: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && (num%2 == 1 && num%3 == 1) {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%3 == 1 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && (num%2 == 1 && num%3 == 1 && num%5 == 1 && num%7 == 1 && num%9 == 1) {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpueuq54fo_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpueuq54fo_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpueuq54fo_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpueuq54fo_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == 5 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpkdj6w2re_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpkdj6w2re_test.go:45: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpkdj6w2re_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    \n    var result int\n    \n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            result++\n        }\n    }\n    \n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp1kfm0bzw_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp1kfm0bzw_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp1kfm0bzw_test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp1kfm0bzw_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp81gyl2af_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp81gyl2af_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp81gyl2af_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp81gyl2af_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%3 == 1 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%3 == 1 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%3 == 1 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%3 == 1 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp81gyl2af_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp81gyl2af_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp81gyl2af_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp81gyl2af_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == 5 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpw8kxlw08_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpw8kxlw08_test.go:45: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpw8kxlw08_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%3 == 1 && num%5 == 1 && num%7 == 1 && num%9 == 1 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp_oefcbqj_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp_oefcbqj_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_oefcbqj_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp_oefcbqj_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    \n    if len(nums) == 0 {\n        return 0\n    }\n    \n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    \n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpomkdey10_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpomkdey10_test.go:51: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomkdey10_test.go:51: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpomkdey10_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    \n    var result int\n    \n    for _, num := range nums {\n        if num > 10 && (num%2 == 1 && num%3 == 1) {\n            result++\n        }\n    }\n    \n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmps9d0psc5_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmps9d0psc5_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmps9d0psc5_test.go:48: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmps9d0psc5_test.go:48: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    \n    // Your code here\n    \n    return 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp1fuw2m6d_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp1fuw2m6d_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp1fuw2m6d_test.go:42: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp1fuw2m6d_test.go:42: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    var count = 0\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            count++\n        }\n    }\n    \n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpngwljxcd_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpngwljxcd_test.go:50: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpngwljxcd_test.go:50: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpngwljxcd_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%3 == 1 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == 5 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpw8kxlw08_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpw8kxlw08_test.go:45: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpw8kxlw08_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp81gyl2af_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp81gyl2af_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp81gyl2af_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp81gyl2af_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count int\n    for _, num := range nums {\n        if num > 10 && (num%2 == 1 && num%3 == 1) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpr1grfxy7_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpr1grfxy7_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpr1grfxy7_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpr1grfxy7_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    \n    // Your code here\n    \n    return 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp1fuw2m6d_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp1fuw2m6d_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp1fuw2m6d_test.go:42: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp1fuw2m6d_test.go:42: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && (num%2 == 1 && num%3 == 1 && num%5 == 1 && num%7 == 1 && num%9 == 1) {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpueuq54fo_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpueuq54fo_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpueuq54fo_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpueuq54fo_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    var count int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            count++\n        }\n    }\n    \n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp5fh24q2z_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp5fh24q2z_test.go:50: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp5fh24q2z_test.go:50: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp5fh24q2z_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%3 == 1 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count = 0\n    for _, num := range nums {\n        if num > 10 && (num%2 == 1 && num%3 == 1 && num%5 == 1 && num%7 == 1 && num%9 == 1) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpfeikpjyu_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpfeikpjyu_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpfeikpjyu_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpfeikpjyu_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && (num%2 == 1 && num%3 == 1) {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && (num%2 == 1 && num%3 == 1) {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    \n    if len(nums) == 0 {\n        return 0\n    }\n    \n    var count int\n    for i := 0; i < len(nums); i++ {\n        if nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] {\n            count++\n        }\n    }\n    \n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpky7xombq_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpky7xombq_test.go:51: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpky7xombq_test.go:51: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpky7xombq_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num/10 {\n            result++\n        }\n    }\n    \n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpled39wtw_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpled39wtw_test.go:50: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpled39wtw_test.go:50: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpled39wtw_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp81gyl2af_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp81gyl2af_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp81gyl2af_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp81gyl2af_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%3 == 1 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && (num%10)%2 == 1 && (num%10)%2 == 1 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpb7__6o2m_test.go:19:24: redundant and: (num%10)%2 == 1 && (num%10)%2 == 1\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == 5 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpkdj6w2re_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpkdj6w2re_test.go:45: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpkdj6w2re_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%3 == 1 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == 1 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp_4nsg1jb_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp_4nsg1jb_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_4nsg1jb_test.go:45: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp_4nsg1jb_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%3 == 1 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpvm6fteir_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpvm6fteir_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpvm6fteir_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpvm6fteir_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && (num%2 == 1 && num%3 == 1) {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && (num%2 == 1 && num%3 == 1) {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%3 == 1 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && (num%2 == 1 && num%3 == 1) {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%3 == 1 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%3 == 1 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpvm6fteir_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpvm6fteir_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpvm6fteir_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpvm6fteir_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, v := range nums {\n        if v > 10 && v % 2 == 1 && v % 10 == 5 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpb_vj2ahm_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpb_vj2ahm_test.go:45: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpb_vj2ahm_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    count := 0\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            count++\n        }\n    }\n    \n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmps9ekrjes_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmps9ekrjes_test.go:50: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmps9ekrjes_test.go:50: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmps9ekrjes_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && (num%2 == 1) && (num%10 == 3 || num%10 == 5 || num%10 == 7 || num%10 == 9) {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpgocg_s75_test.go:45: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpgocg_s75_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    // Your code here\n    return 0\n}\n\n// What is the sum of the first two numbers in the list?\n// >>> specialFilter([1, 2, 3, 4, 5])\n// 6\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpa7lib11h_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpa7lib11h_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpa7lib11h_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpa7lib11h_test.go:43: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    \n    if len(nums) == 0 {\n        return 0\n    }\n    \n    var count = 0\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            count++\n        }\n    }\n    \n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpyw2gqghq_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpyw2gqghq_test.go:51: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpyw2gqghq_test.go:51: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpyw2gqghq_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    count := 0\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp4fpeok1h_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp4fpeok1h_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp4fpeok1h_test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp4fpeok1h_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == 1 {\n            result++\n        }\n    }\n    \n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp9aro09vz_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp9aro09vz_test.go:50: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp9aro09vz_test.go:50: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp9aro09vz_test.go:50: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == 5 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpw8kxlw08_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpw8kxlw08_test.go:45: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpw8kxlw08_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && (num%2 == 1 && num%3 == 1 && num%5 == 1 && num%7 == 1 && num%9 == 1) {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpueuq54fo_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpueuq54fo_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpueuq54fo_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpueuq54fo_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp0302hg7l_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count = 0\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%3 == 1 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpi32ilali_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpi32ilali_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpi32ilali_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpi32ilali_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    \n    var result int\n    \n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            result++\n        }\n    }\n    \n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp1kfm0bzw_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp1kfm0bzw_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp1kfm0bzw_test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp1kfm0bzw_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    \n    var result int\n    \n    for i := 0; i < len(nums); i++ {\n        if nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] {\n            result++\n        }\n    }\n    \n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp7p_6ctup_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp7p_6ctup_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp7p_6ctup_test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp7p_6ctup_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && (num%10 == 1 || num%10 == 3 || num%10 == 5 || num%10 == 7 || num%10 == 9) {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpft02hwp3_test.go:45: expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpft02hwp3_test.go:45: expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpft02hwp3_test.go:45: expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%3 == 1 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == 5 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpw8kxlw08_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpw8kxlw08_test.go:45: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpw8kxlw08_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    // Your code here\n    var result int\n    for _, num := range nums {\n        if num > 10 && (num%2 == 1 && num%3 == 1) {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpbsibtlzu_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpbsibtlzu_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpbsibtlzu_test.go:46: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpbsibtlzu_test.go:46: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    \n    if len(nums) == 0 {\n        return 0\n    }\n    \n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    \n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpomkdey10_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpomkdey10_test.go:51: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomkdey10_test.go:51: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpomkdey10_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%3 == 1 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && (num%2 == 1 && num%3 == 1) {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp0gpb51c7_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp0gpb51c7_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp0gpb51c7_test.go:40: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp0gpb51c7_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    count := 0\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            count++\n        }\n    }\n    \n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmps9ekrjes_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmps9ekrjes_test.go:50: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmps9ekrjes_test.go:50: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmps9ekrjes_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && (num%2 == 1 && num%3 == 1) {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp_xrg5ug6_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpu5quxkuw_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    \n    if len(nums) == 0 {\n        return 0\n    }\n    \n    var result int\n    \n    for _, num := range nums {\n        if num > 10 && (num%2 == 1 && num%3 == 1) {\n            result++\n        }\n    }\n    \n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp7kz8no9s_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp7kz8no9s_test.go:52: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp7kz8no9s_test.go:52: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp7kz8no9s_test.go:52: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    \n    var result int\n    \n    for _, num := range nums {\n        if num > 10 && (num%2 == 1 && num%3 == 1 && num%5 == 1 && num%7 == 1 && num%9 == 1) {\n            result++\n        }\n    }\n    \n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpea0z9rh__test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpea0z9rh__test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpea0z9rh__test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpea0z9rh__test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%3 == 1 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%3 == 1 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%3 == 1 {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphnatg58y_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 && num % 10 == num {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8jy4jlya_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}