language: js
name: HumanEval_59_largest_prime_factor
results:
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i < n){\n\t\tif(n % i\
    \ == 0){\n\t\t\tn = n / i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n %\
    \ i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n %\
    \ i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return i;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n %\
    \ i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i<=n){\n        if(n%i==0){\n\
    \            n = n/i;\n        }\n        else{\n            i++;\n        }\n\
    \    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }else{\n            i++;\n  \
    \      }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(n > 1){\n    if(n % i\
    \ == 0){\n      n = n / i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n %\
    \ i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n %\
    \ i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var factors = [];\n    var i = 2;\n   \
    \ while(n > 1){\n        if(n % i == 0){\n            factors.push(i);\n     \
    \       n /= i;\n        }\n        else{\n            i++;\n        }\n    }\n\
    \    return factors[factors.length - 1];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return i;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n %\
    \ i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i < n){\n       \
    \ if(n % i == 0){\n            n = n / i;\n        }\n        else{\n        \
    \    i++;\n        }\n    }\n    return n;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(n > 1){\n       \
    \ if(n % i == 0){\n            n /= i;\n        }else{\n            i++;\n   \
    \     }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n %\
    \ i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(n > 1){\n    if(n % i\
    \ == 0){\n      n = n / i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var factor = 2;\n    while(n > 1){\n  \
    \      if(n % factor == 0){\n            n /= factor;\n        }\n        else{\n\
    \            factor++;\n        }\n    }\n    return factor;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i < n){\n    if(n % i\
    \ == 0){\n      n = n / i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n %\
    \ i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i < n){\n    if(n % i\
    \ == 0){\n      n = n / i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(n > 1){\n       \
    \ if(n % i == 0){\n            n /= i;\n        }\n        else{\n           \
    \ i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var factor = 2;\n    while(n > 1){\n  \
    \      if(n % factor == 0){\n            n /= factor;\n        }\n        else{\n\
    \            factor++;\n        }\n    }\n    return factor;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(n > 1){\n\t\tif(n % i\
    \ == 0){\n\t\t\tn = n / i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar factors = [];\n\tvar i = 2;\n\twhile(n\
    \ > 1){\n\t\tif(n % i == 0){\n\t\t\tfactors.push(i);\n\t\t\tn /= i;\n\t\t}\n\t\
    \telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn factors[factors.length - 1];\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n %\
    \ i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n %\
    \ i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i < n){\n    if(n % i\
    \ == 0){\n      n = n / i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var factors = [];\n  var i = 2;\n  while(n\
    \ > 1){\n    if(n % i === 0){\n      factors.push(i);\n      n = n / i;\n    }\n\
    \    else{\n      i++;\n    }\n  }\n  return factors[factors.length - 1];\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n %\
    \ i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i < n){\n    if(n % i\
    \ == 0){\n      n = n / i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n %\
    \ i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(n > 1){\n       \
    \ if(n % i == 0){\n            n /= i;\n        }\n        else{\n           \
    \ i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n %\
    \ i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i < n){\n       \
    \ if(n % i == 0){\n            n = n / i;\n        }\n        else{\n        \
    \    i++;\n        }\n    }\n    return n;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }else{\n            i++;\n  \
    \      }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i < n){\n    if(n % i\
    \ == 0){\n      n = n / i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n %\
    \ i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n %\
    \ i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n %\
    \ i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return i;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    let i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n %\
    \ i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n %\
    \ i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n %\
    \ i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n %\
    \ i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }else{\n            i++;\n  \
    \      }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    //Your code here\n    var i = 2;\n    while\
    \ (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        } else {\n\
    \            i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n %\
    \ i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var factor = 2;\n    while(n > 1){\n  \
    \      if(n % factor == 0){\n            n /= factor;\n        }\n        else{\n\
    \            factor++;\n        }\n    }\n    return factor;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n %\
    \ i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i < n){\n       \
    \ if(n % i == 0){\n            n = n / i;\n        }\n        else{\n        \
    \    i++;\n        }\n    }\n    return n;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(n > 1){\n       \
    \ if(n % i == 0){\n            n /= i;\n        }\n        else{\n           \
    \ i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n %\
    \ i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar factors = prime_factors(n);\n\treturn\
    \ factors[factors.length - 1];\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpmgozouul.js:3\n\tvar factors = prime_factors(n);\n\t          \
    \    ^\n\nReferenceError: prime_factors is not defined\n    at largest_prime_factor\
    \ (/tmp/tmpmgozouul.js:3:16)\n    at test (/tmp/tmpmgozouul.js:12:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpmgozouul.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var factors = prime_factors(n);\n  return\
    \ factors[factors.length - 1];\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpqv1zjy0w.js:3\n  var factors = prime_factors(n);\n            \
    \    ^\n\nReferenceError: prime_factors is not defined\n    at largest_prime_factor\
    \ (/tmp/tmpqv1zjy0w.js:3:17)\n    at test (/tmp/tmpqv1zjy0w.js:12:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpqv1zjy0w.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(n > 1){\n    if(n % i\
    \ == 0){\n      n = n / i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var factors = [];\n    var i = 2;\n   \
    \ while(n > 1){\n        if(n % i == 0){\n            factors.push(i);\n     \
    \       n /= i;\n        }\n        else{\n            i++;\n        }\n    }\n\
    \    return factors[factors.length - 1];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n %\
    \ i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n %\
    \ i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n %\
    \ i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar largest_prime = 1;\n\tvar i = 2;\n\t\
    while(i <= n){\n\t\tif(n % i == 0){\n\t\t\tlargest_prime = i;\n\t\t\tn = n / i;\n\
    \t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn largest_prime;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(n > 1){\n       \
    \ if(n % i == 0){\n            n /= i;\n        }\n        else{\n           \
    \ i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i < n){\n       \
    \ if(n % i == 0){\n            n = n / i;\n        }else{\n            i++;\n\
    \        }\n    }\n    return n;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n %\
    \ i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }else{\n            i++;\n  \
    \      }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var factors = [];\n  var i = 2;\n  while(n\
    \ > 1){\n    if(n % i === 0){\n      factors.push(i);\n      n = n / i;\n    }\n\
    \    else{\n      i++;\n    }\n  }\n  return factors[factors.length - 1];\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(n > 1){\n    if(n % i\
    \ == 0){\n      n = n / i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n %\
    \ i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(n > 1){\n       \
    \ if(n % i == 0){\n            n /= i;\n        }else{\n            i++;\n   \
    \     }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var largest_prime = 1;\n  var i = 2;\n  while(i\
    \ <= n){\n    if(n % i == 0){\n      largest_prime = i;\n      n = n / i;\n  \
    \  }\n    else{\n      i++;\n    }\n  }\n  return largest_prime;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(n > 1){\n    if(n % i\
    \ == 0){\n      n = n / i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i < n){\n\t\tif(n % i\
    \ == 0){\n\t\t\tn = n / i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var largest_prime = 1;\n    var i = 2;\n\
    \    while(i <= n){\n        if(n % i == 0){\n            largest_prime = i;\n\
    \            n = n / i;\n        }\n        else{\n            i++;\n        }\n\
    \    }\n    return largest_prime;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n %\
    \ i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return i;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    let largest_prime = 1;\n    for(let i =\
    \ 2; i <= n; i++){\n        if(n % i == 0){\n            largest_prime = i;\n\
    \            n /= i;\n            i--;\n        }\n    }\n    return largest_prime;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    let i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n %\
    \ i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n %\
    \ i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n %\
    \ i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    let i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n %\
    \ i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n  var i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0){\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return i;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n    var i = 2;\n    while(i <= n){\n      \
    \  if(n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    function largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n %\
    \ i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
