language: js
name: HumanEval_18_how_many_times
results:
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var pos = string.indexOf(substring);\n    while (pos !== -1)\
    \ {\n        count++;\n        pos = string.indexOf(substring, pos + 1);\n   \
    \ }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    let\
    \ count = 0;\n    let index = string.indexOf(substring);\n    while(index !==\
    \ -1){\n        count++;\n        index = string.indexOf(substring, index + 1);\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    let\
    \ count = 0;\n    let index = 0;\n    while(index < string.length){\n        index\
    \ = string.indexOf(substring, index);\n        if(index === -1){\n           \
    \ break;\n        }\n        count++;\n        index++;\n    }\n    return count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var index = 0;\n    while (index != -1){\n        index = string.indexOf(substring,\
    \ index);\n        if (index != -1){\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var i = 0;\n    while (i < string.length) {\n        if (string.substring(i,\
    \ i + substring.length) == substring) {\n            count++;\n            i +=\
    \ substring.length;\n        } else {\n            i++;\n        }\n    }\n  \
    \  return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"\
    x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmp015um7_5.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp015um7_5.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var index = 0;\n    while(index != -1){\n        index = string.indexOf(substring,\
    \ index);\n        if(index != -1){\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var index = string.indexOf(substring);\n    while(index > -1){\n\
    \        count++;\n        index = string.indexOf(substring, index + 1);\n   \
    \ }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    let\
    \ count = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string.substring(i,\
    \ i + substring.length) === substring){\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var index = 0;\n    while(index < string.length){\n        index\
    \ = string.indexOf(substring, index);\n        if(index == -1){\n            break;\n\
    \        }\n        count++;\n        index++;\n    }\n    return count;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n  var\
    \ count = 0;\n  for (var i = 0; i < string.length; i++) {\n    if (string.substr(i,\
    \ substring.length) == substring) {\n      count++;\n    }\n  }\n  return count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var i = 0;\n    while (i < string.length){\n        if (string.substring(i,\
    \ i + substring.length) == substring){\n            count++;\n            i +=\
    \ substring.length;\n        }\n        else{\n            i++;\n        }\n \
    \   }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmpzx__e1x_.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzx__e1x_.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    let\
    \ count = 0;\n    let start = 0;\n    while(true){\n        let found = string.indexOf(substring,\
    \ start);\n        if(found == -1){\n            break;\n        }\n        count++;\n\
    \        start = found + 1;\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n  var\
    \ count = 0;\n  var i = 0;\n  while (i < string.length){\n    if (string.substring(i,\
    \ i + substring.length) == substring){\n      count++;\n      i += substring.length;\n\
    \    }\n    else{\n      i++;\n    }\n  }\n  return count;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmpa7uzt3dq.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpa7uzt3dq.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var i = 0;\n    while (i < string.length){\n        if (string.substring(i,\
    \ i + substring.length) == substring){\n            count++;\n            i +=\
    \ substring.length;\n        }\n        else{\n            i++;\n        }\n \
    \   }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmpzx__e1x_.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzx__e1x_.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var pos = string.indexOf(substring);\n    while (pos !== -1)\
    \ {\n        count++;\n        pos = string.indexOf(substring, pos + 1);\n   \
    \ }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var pos = string.indexOf(substring);\n    while (pos !== -1)\
    \ {\n        count++;\n        pos = string.indexOf(substring, pos + 1);\n   \
    \ }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var pos = string.indexOf(substring);\n    while (pos !== -1)\
    \ {\n        count++;\n        pos = string.indexOf(substring, pos + 1);\n   \
    \ }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n  var\
    \ count = 0;\n  for (var i = 0; i < string.length; i++) {\n    if (string.substr(i,\
    \ substring.length) == substring) {\n      count++;\n    }\n  }\n  return count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var i = 0;\n    while (i < string.length) {\n        if (string.substring(i,\
    \ i + substring.length) == substring) {\n            count++;\n            i +=\
    \ substring.length;\n        } else {\n            i++;\n        }\n    }\n  \
    \  return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"\
    x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmp015um7_5.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp015um7_5.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var index = 0;\n    while(index != -1){\n        index = string.indexOf(substring,\
    \ index);\n        if(index != -1){\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    let\
    \ count = 0;\n    let index = string.indexOf(substring);\n    while(index !==\
    \ -1){\n        count++;\n        index = string.indexOf(substring, index + 1);\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n  var\
    \ count = 0;\n  for (var i = 0; i < string.length; i++) {\n    if (string.substr(i,\
    \ substring.length) == substring) {\n      count++;\n    }\n  }\n  return count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var i = 0;\n    while (i < string.length){\n        if (string.substring(i,\
    \ i + substring.length) == substring){\n            count++;\n            i +=\
    \ substring.length;\n        }\n        else{\n            i++;\n        }\n \
    \   }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmpzx__e1x_.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzx__e1x_.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var i = 0;\n    while (i < string.length) {\n        if (string.substring(i,\
    \ i + substring.length) == substring) {\n            count++;\n            i +=\
    \ substring.length;\n        } else {\n            i++;\n        }\n    }\n  \
    \  return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"\
    x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmp015um7_5.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp015um7_5.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var lastIndex = 0;\n    while (lastIndex != -1) {\n        lastIndex\
    \ = string.indexOf(substring, lastIndex);\n        if (lastIndex != -1) {\n  \
    \          count++;\n            lastIndex += substring.length;\n        }\n \
    \   }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmpndba8u_d.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpndba8u_d.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    let\
    \ count = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string.substring(i,\
    \ i + substring.length) === substring){\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var index = 0;\n    while(index != -1){\n        index = string.indexOf(substring,\
    \ index);\n        if(index != -1){\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    let\
    \ count = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string.substring(i,\
    \ i + substring.length) === substring){\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n  var\
    \ count = 0;\n  for (var i = 0; i < string.length; i++) {\n    if (string.substr(i,\
    \ substring.length) == substring) {\n      count++;\n    }\n  }\n  return count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n  var\
    \ count = 0;\n  var i = 0;\n  while (i < string.length){\n    if (string.substring(i,\
    \ i + substring.length) == substring){\n      count++;\n      i += substring.length;\n\
    \    }\n    else{\n      i++;\n    }\n  }\n  return count;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmpa7uzt3dq.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpa7uzt3dq.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var pos = string.indexOf(substring);\n    while (pos !== -1)\
    \ {\n        count++;\n        pos = string.indexOf(substring, pos + 1);\n   \
    \ }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var index = 0;\n    while(index < string.length){\n        index\
    \ = string.indexOf(substring, index);\n        if(index == -1){\n            break;\n\
    \        }\n        count++;\n        index++;\n    }\n    return count;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var index = 0;\n    while(index != -1){\n        index = string.indexOf(substring,\
    \ index);\n        if(index != -1){\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var index = string.indexOf(substring);\n    while(index != -1){\n\
    \        count++;\n        index = string.indexOf(substring, index + 1);\n   \
    \ }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var i = 0;\n    while (i < string.length) {\n        if (string.substring(i,\
    \ i + substring.length) == substring) {\n            count++;\n            i +=\
    \ substring.length;\n        } else {\n            i++;\n        }\n    }\n  \
    \  return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"\
    x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmp015um7_5.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp015um7_5.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n  var\
    \ count = 0;\n  for (var i = 0; i < string.length; i++) {\n    if (string.substr(i,\
    \ substring.length) == substring) {\n      count++;\n    }\n  }\n  return count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i <= string.length - substring.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var i = 0;\n    while (i < string.length){\n        if (string.substring(i,\
    \ i + substring.length) == substring){\n            count++;\n            i +=\
    \ substring.length;\n        }\n        else{\n            i++;\n        }\n \
    \   }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmpzx__e1x_.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzx__e1x_.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n\tvar\
    \ count = 0;\n\tfor(var i = 0; i < string.length; i++){\n\t\tif(string.substring(i,\
    \ i + substring.length) == substring){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n\tvar\
    \ count = 0;\n\tfor(var i = 0; i < string.length; i++){\n\t\tif(string.substring(i,\
    \ i + substring.length) == substring){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var index = string.indexOf(substring);\n    while(index != -1){\n\
    \        count++;\n        index = string.indexOf(substring, index + 1);\n   \
    \ }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var index = 0;\n    while (index != -1){\n        index = string.indexOf(substring,\
    \ index);\n        if (index != -1){\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var index = string.indexOf(substring);\n    while(index != -1){\n\
    \        count++;\n        index = string.indexOf(substring, index + 1);\n   \
    \ }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var pos = string.indexOf(substring);\n    while (pos !== -1)\
    \ {\n        count++;\n        pos = string.indexOf(substring, pos + 1);\n   \
    \ }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var pos = string.indexOf(substring);\n    while (pos > -1) {\n\
    \        count++;\n        pos = string.indexOf(substring, pos + 1);\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var offset = 0;\n    while(true){\n        offset = string.indexOf(substring,\
    \ offset);\n        if(offset == -1){\n            break;\n        }\n       \
    \ count++;\n        offset += substring.length;\n    }\n    return count;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmpzf5l75df.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzf5l75df.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var i = 0;\n    while (i < string.length){\n        if (string.substring(i,\
    \ i + substring.length) == substring){\n            count++;\n            i +=\
    \ substring.length;\n        }\n        else{\n            i++;\n        }\n \
    \   }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmpzx__e1x_.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzx__e1x_.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var i = 0;\n    while (i < string.length){\n        if (string.substring(i,\
    \ i + substring.length) == substring){\n            count++;\n            i +=\
    \ substring.length;\n        }\n        else{\n            i++;\n        }\n \
    \   }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmpzx__e1x_.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzx__e1x_.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var pos = string.indexOf(substring);\n    while (pos != -1)\
    \ {\n        count++;\n        pos = string.indexOf(substring, pos + 1);\n   \
    \ }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var pos = string.indexOf(substring);\n    while (pos !== -1)\
    \ {\n        count++;\n        pos = string.indexOf(substring, pos + 1);\n   \
    \ }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var index = 0;\n    while(index != -1){\n        index = string.indexOf(substring,\
    \ index);\n        if(index != -1){\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    let\
    \ count = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string.substring(i,\
    \ i + substring.length) === substring){\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var i = 0;\n    while (i < string.length){\n        if (string.substring(i,\
    \ i + substring.length) == substring){\n            count++;\n            i +=\
    \ substring.length;\n        }\n        else{\n            i++;\n        }\n \
    \   }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmpzx__e1x_.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzx__e1x_.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var i = 0;\n    while (i < string.length){\n        if (string.substring(i,\
    \ i + substring.length) == substring){\n            count++;\n            i +=\
    \ substring.length;\n        }\n        else{\n            i++;\n        }\n \
    \   }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmpzx__e1x_.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzx__e1x_.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var index = 0;\n    while(index != -1){\n        index = string.indexOf(substring,\
    \ index);\n        if(index != -1){\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var i = 0;\n    while (i < string.length){\n        if (string.substring(i,\
    \ i + substring.length) == substring){\n            count++;\n            i +=\
    \ substring.length;\n        }\n        else{\n            i++;\n        }\n \
    \   }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmpzx__e1x_.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzx__e1x_.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var index = 0;\n    while(index < string.length){\n        index\
    \ = string.indexOf(substring, index);\n        if(index == -1){\n            break;\n\
    \        }\n        count++;\n        index++;\n    }\n    return count;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var position = 0;\n    while(position < string.length){\n  \
    \      position = string.indexOf(substring, position);\n        if(position <\
    \ 0){\n            break;\n        }\n        count++;\n        position++;\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var index = 0;\n    while(index < string.length){\n        index\
    \ = string.indexOf(substring, index);\n        if(index == -1){\n            break;\n\
    \        }\n        count++;\n        index++;\n    }\n    return count;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var pos = string.indexOf(substring);\n    while (pos !== -1)\
    \ {\n        count++;\n        pos = string.indexOf(substring, pos + 1);\n   \
    \ }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var index = 0;\n    while(index < string.length){\n        if(string.substring(index,\
    \ index + substring.length) == substring){\n            count++;\n           \
    \ index += substring.length;\n        }\n        else{\n            index++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmp8h3z8ylj.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8h3z8ylj.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var index = 0;\n    while(index < string.length){\n        index\
    \ = string.indexOf(substring, index);\n        if(index == -1){\n            break;\n\
    \        }\n        count++;\n        index++;\n    }\n    return count;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    if(substring.length\
    \ > string.length){\n        return 0;\n    }\n    var count = 0;\n    for(var\
    \ i = 0; i < string.length; i++){\n        if(string.substring(i, i + substring.length)\
    \ == substring){\n            count++;\n        }\n    }\n    return count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var index = string.indexOf(substring);\n    while(index != -1){\n\
    \        count++;\n        index = string.indexOf(substring, index + 1);\n   \
    \ }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    let\
    \ count = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string.substring(i,\
    \ i + substring.length) === substring){\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var index = 0;\n    while (index != -1){\n        index = string.indexOf(substring,\
    \ index);\n        if (index != -1){\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var pos = string.indexOf(substring);\n    while (pos !== -1)\
    \ {\n        count++;\n        pos = string.indexOf(substring, pos + 1);\n   \
    \ }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    let\
    \ count = 0;\n    let index = 0;\n    while(index !== -1){\n        index = string.indexOf(substring,\
    \ index);\n        if(index !== -1){\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var pos = string.indexOf(substring);\n    while (pos !== -1)\
    \ {\n        count++;\n        pos = string.indexOf(substring, pos + 1);\n   \
    \ }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var start = 0;\n    while (string.indexOf(substring, start)\
    \ > -1) {\n        count++;\n        start = string.indexOf(substring, start)\
    \ + 1;\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var index = 0;\n    while (index < string.length) {\n      \
    \  index = string.indexOf(substring, index);\n        if (index == -1) {\n   \
    \         break;\n        }\n        count++;\n        index++;\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n\
    \  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n  var\
    \ count = 0;\n  for (var i = 0; i < string.length; i++) {\n    if (string.substr(i,\
    \ substring.length) == substring) {\n      count++;\n    }\n  }\n  return count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var index = 0;\n    while(index != -1){\n        index = string.indexOf(substring,\
    \ index);\n        if(index != -1){\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    let\
    \ count = 0;\n    let index = 0;\n    while(index < string.length){\n        if(string.indexOf(substring,\
    \ index) != -1){\n            count++;\n            index = string.indexOf(substring,\
    \ index) + 1;\n        }else{\n            break;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n\
    \  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var i = 0;\n    while (i < string.length) {\n        if (string.substring(i,\
    \ i + substring.length) == substring) {\n            count++;\n            i +=\
    \ substring.length;\n        } else {\n            i++;\n        }\n    }\n  \
    \  return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"\
    x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmp015um7_5.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp015um7_5.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var index = 0;\n    while(index < string.length){\n        if(string.substring(index,\
    \ index + substring.length) == substring){\n            count++;\n           \
    \ index += substring.length;\n        }\n        else{\n            index++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmp8h3z8ylj.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8h3z8ylj.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var position = 0;\n    while (position < string.length) {\n\
    \        position = string.indexOf(substring, position);\n        if (position\
    \ != -1) {\n            count++;\n            position += substring.length;\n\
    \        } else {\n            break;\n        }\n    }\n    return count;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmp63si6pc9.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp63si6pc9.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    let\
    \ count = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string.substring(i,\
    \ i + substring.length) === substring){\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    let\
    \ count = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string.substring(i,\
    \ i + substring.length) === substring){\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var i = 0;\n    while (i < string.length) {\n        if (string.substring(i,\
    \ i + substring.length) == substring) {\n            count++;\n            i +=\
    \ substring.length;\n        } else {\n            i++;\n        }\n    }\n  \
    \  return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"\
    x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmp015um7_5.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp015um7_5.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n  var\
    \ count = 0;\n  for (var i = 0; i < string.length; i++) {\n    if (string.substr(i,\
    \ substring.length) == substring) {\n      count++;\n    }\n  }\n  return count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    let\
    \ count = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string.substring(i,\
    \ i + substring.length) === substring){\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n  var\
    \ count = 0;\n  for (var i = 0; i < string.length; i++) {\n    if (string.substr(i,\
    \ substring.length) == substring) {\n      count++;\n    }\n  }\n  return count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var i = 0;\n    while (i < string.length){\n        if (string.substring(i,\
    \ i + substring.length) == substring){\n            count += 1;\n            i\
    \ += substring.length;\n        }\n        else{\n            i += 1;\n      \
    \  }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmpk3o808f8.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpk3o808f8.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var index = 0;\n    while(index != -1){\n        index = string.indexOf(substring,\
    \ index);\n        if(index != -1){\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var index = 0;\n    while(index != -1){\n        index = string.indexOf(substring,\
    \ index);\n        if(index != -1){\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var pos = string.indexOf(substring);\n    while (pos >= 0) {\n\
    \        count++;\n        pos = string.indexOf(substring, pos + 1);\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var i = 0;\n    while (i < string.length){\n        if (string.substring(i,\
    \ i + substring.length) == substring){\n            count++;\n            i +=\
    \ substring.length;\n        }\n        else{\n            i++;\n        }\n \
    \   }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmpzx__e1x_.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzx__e1x_.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n  var\
    \ count = 0;\n  var index = 0;\n  while (index != -1){\n    index = string.indexOf(substring,\
    \ index);\n    if (index != -1){\n      count++;\n      index++;\n    }\n  }\n\
    \  return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"\
    x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var i = 0;\n    while (i < string.length){\n        var index\
    \ = string.indexOf(substring, i);\n        if (index == -1){\n            break;\n\
    \        }\n        count++;\n        i = index + 1;\n    }\n    return count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var i = 0;\n    while (i < string.length) {\n        if (string.substring(i,\
    \ i + substring.length) == substring) {\n            count++;\n            i +=\
    \ substring.length;\n        } else {\n            i++;\n        }\n    }\n  \
    \  return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"\
    x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmp015um7_5.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp015um7_5.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n\tvar\
    \ count = 0;\n\tvar index = 0;\n\twhile(index < string.length){\n\t\tindex = string.indexOf(substring,\
    \ index);\n\t\tif(index == -1){\n\t\t\tbreak;\n\t\t}\n\t\tcount++;\n\t\tindex++;\n\
    \t}\n\treturn count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var pos = string.indexOf(substring);\n    while (pos !== -1)\
    \ {\n        count++;\n        pos = string.indexOf(substring, pos + 1);\n   \
    \ }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var index = string.indexOf(substring);\n    while(index != -1){\n\
    \        count++;\n        index = string.indexOf(substring, index + 1);\n   \
    \ }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var i = 0;\n    while (i < string.length) {\n        if (string.substring(i,\
    \ i + substring.length) == substring) {\n            count++;\n            i +=\
    \ substring.length;\n        } else {\n            i++;\n        }\n    }\n  \
    \  return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"\
    x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmp015um7_5.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp015um7_5.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var i = 0;\n    while (i < string.length){\n        if (string.substring(i,\
    \ i + substring.length) == substring){\n            count++;\n            i +=\
    \ substring.length;\n        } else {\n            i++;\n        }\n    }\n  \
    \  return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"\
    x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmpeatjveau.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpeatjveau.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    let\
    \ count = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string.substring(i,\
    \ i + substring.length) === substring){\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var index = string.indexOf(substring);\n    while(index != -1){\n\
    \        count++;\n        index = string.indexOf(substring, index + 1);\n   \
    \ }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var index = 0;\n    while(index != -1){\n        index = string.indexOf(substring,\
    \ index);\n        if(index != -1){\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var lastIndex = 0;\n    while (lastIndex != -1) {\n        lastIndex\
    \ = string.indexOf(substring, lastIndex);\n        if (lastIndex != -1) {\n  \
    \          count++;\n            lastIndex += substring.length;\n        }\n \
    \   }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmpndba8u_d.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpndba8u_d.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var index = 0;\n    while(index < string.length){\n        index\
    \ = string.indexOf(substring, index);\n        if(index == -1){\n            break;\n\
    \        }\n        count++;\n        index++;\n    }\n    return count;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    let\
    \ count = 0;\n    let index = string.indexOf(substring);\n    while(index !==\
    \ -1){\n        count++;\n        index = string.indexOf(substring, index + 1);\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i <= string.length - substring.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunction how_many_times(string, substring){\n    var\
    \ count = 0;\n    var i = 0;\n    while (i < string.length){\n        if (string.substring(i,\
    \ i + substring.length) == substring){\n            count++;\n            i +=\
    \ substring.length;\n        }\n        else{\n            i++;\n        }\n \
    \   }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmpzx__e1x_.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzx__e1x_.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
