language: js
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let arr = s.split(\" \");\n   \
    \ let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(count_consonants(arr[i])\
    \ === n){\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp6mutwmra.js:11\n        if(count_consonants(arr[i]) === n){\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp6mutwmra.js:11:9)\n    at test (/tmp/tmp6mutwmra.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp6mutwmra.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(isConsonant(word[j])){\n                count++;\n   \
    \         }\n        }\n        if(count === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpr0b9zkp4.js:14\n            if(isConsonant(word[j])){\n       \
    \     ^\n\nReferenceError: isConsonant is not defined\n    at select_words (/tmp/tmpr0b9zkp4.js:14:13)\n\
    \    at test (/tmp/tmpr0b9zkp4.js:30:20)\n    at Object.<anonymous> (/tmp/tmpr0b9zkp4.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let consonants = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(!isVowel(word[j])){\n                consonants++;\n \
    \           }\n        }\n        if(consonants === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp03wx89qc.js:14\n            if(!isVowel(word[j])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmp03wx89qc.js:14:13)\n\
    \    at test (/tmp/tmp03wx89qc.js:30:20)\n    at Object.<anonymous> (/tmp/tmp03wx89qc.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let consonants = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let letter = word[j];\n            if(letter != 'a' && letter\
    \ != 'e' && letter != 'i' && letter != 'o' && letter != 'u'){\n              \
    \  consonants++;\n            }\n        }\n        if(consonants == n){\n   \
    \         result.push(word);\n        }\n    }\n    return result;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp7gaxar_o.js:34:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp7gaxar_o.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(isConsonant(word[j])){\n                count++;\n   \
    \         }\n        }\n        if(count === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpr0b9zkp4.js:14\n            if(isConsonant(word[j])){\n       \
    \     ^\n\nReferenceError: isConsonant is not defined\n    at select_words (/tmp/tmpr0b9zkp4.js:14:13)\n\
    \    at test (/tmp/tmpr0b9zkp4.js:30:20)\n    at Object.<anonymous> (/tmp/tmpr0b9zkp4.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ === n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpiqs2jtpd.js:11\n        if(count_consonants(words[i]) === n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpiqs2jtpd.js:11:9)\n    at test (/tmp/tmpiqs2jtpd.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpiqs2jtpd.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let result = [];\n    let words\
    \ = s.split(' ');\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let letter = word[j];\n            if(letter != 'a' && letter\
    \ != 'e' && letter != 'i' && letter != 'o' && letter != 'u'){\n              \
    \  count++;\n            }\n        }\n        if(count == n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpxkxu40gp.js:34:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpxkxu40gp.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(!isVowel(word[j])){\n                count++;\n      \
    \      }\n        }\n        if(count === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpg1xjm2ka.js:14\n            if(!isVowel(word[j])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmpg1xjm2ka.js:14:13)\n\
    \    at test (/tmp/tmpg1xjm2ka.js:30:20)\n    at Object.<anonymous> (/tmp/tmpg1xjm2ka.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        var\
    \ word = words[i];\n        var consonants = 0;\n        for(var j = 0; j < word.length;\
    \ j++){\n            var letter = word[j];\n            if(letter != \"a\" &&\
    \ letter != \"e\" && letter != \"i\" && letter != \"o\" && letter != \"u\"){\n\
    \                consonants++;\n            }\n        }\n        if(consonants\
    \ == n){\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpk1tjny7w.js:34:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpk1tjny7w.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(!isVowel(word[j])){\n                count++;\n      \
    \      }\n        }\n        if(count === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpg1xjm2ka.js:14\n            if(!isVowel(word[j])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmpg1xjm2ka.js:14:13)\n\
    \    at test (/tmp/tmpg1xjm2ka.js:30:20)\n    at Object.<anonymous> (/tmp/tmpg1xjm2ka.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ === n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpiqs2jtpd.js:11\n        if(count_consonants(words[i]) === n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpiqs2jtpd.js:11:9)\n    at test (/tmp/tmpiqs2jtpd.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpiqs2jtpd.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let letter = word[j];\n            if(letter != 'a' && letter\
    \ != 'e' && letter != 'i' && letter != 'o' && letter != 'u'){\n              \
    \  count++;\n            }\n        }\n        if(count == n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmphy2lq0hk.js:34:10)\n   \
    \ at Object.<anonymous> (/tmp/tmphy2lq0hk.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        if(words[i].length\
    \ - count_vowels(words[i]) === n){\n            result.push(words[i]);\n     \
    \   }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp9cny75kb.js:11\n        if(words[i].length - count_vowels(words[i])\
    \ === n){\n                    ^\n\nReferenceError: count_vowels is not defined\n\
    \    at select_words (/tmp/tmp9cny75kb.js:11:21)\n    at test (/tmp/tmp9cny75kb.js:23:20)\n\
    \    at Object.<anonymous> (/tmp/tmp9cny75kb.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let char = word[j];\n            if(char.toLowerCase() !==\
    \ 'a' && char.toLowerCase() !== 'e' && char.toLowerCase() !== 'i' && char.toLowerCase()\
    \ !== 'o' && char.toLowerCase() !== 'u'){\n                count++;\n        \
    \    }\n        }\n        if(count === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let word of words){\n        if(count_consonants(word)\
    \ === n){\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpjws35mre.js:11\n        if(count_consonants(word) === n){\n   \
    \     ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpjws35mre.js:11:9)\n    at test (/tmp/tmpjws35mre.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpjws35mre.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let consonants = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(!isVowel(word[j])){\n                consonants++;\n \
    \           }\n        }\n        if(consonants === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp03wx89qc.js:14\n            if(!isVowel(word[j])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmp03wx89qc.js:14:13)\n\
    \    at test (/tmp/tmp03wx89qc.js:30:20)\n    at Object.<anonymous> (/tmp/tmp03wx89qc.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ === n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpiqs2jtpd.js:11\n        if(count_consonants(words[i]) === n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpiqs2jtpd.js:11:9)\n    at test (/tmp/tmpiqs2jtpd.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpiqs2jtpd.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmplqx46xdb.js:11\n        if(count_consonants(words[i]) == n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmplqx46xdb.js:11:9)\n    at test (/tmp/tmplqx46xdb.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmplqx46xdb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(!isVowel(word[j])){\n                count++;\n      \
    \      }\n        }\n        if(count === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpg1xjm2ka.js:14\n            if(!isVowel(word[j])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmpg1xjm2ka.js:14:13)\n\
    \    at test (/tmp/tmpg1xjm2ka.js:30:20)\n    at Object.<anonymous> (/tmp/tmpg1xjm2ka.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let word of words){\n        let count = 0;\n    \
    \    for(let i = 0; i < word.length; i++){\n            if(!isVowel(word[i])){\n\
    \                count++;\n            }\n        }\n        if(count === n){\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpm300dtuf.js:13\n            if(!isVowel(word[i])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmpm300dtuf.js:13:13)\n\
    \    at test (/tmp/tmpm300dtuf.js:29:20)\n    at Object.<anonymous> (/tmp/tmpm300dtuf.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let arr = s.split(\" \");\n   \
    \ let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(count_consonants(arr[i])\
    \ === n){\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp6mutwmra.js:11\n        if(count_consonants(arr[i]) === n){\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp6mutwmra.js:11:9)\n    at test (/tmp/tmp6mutwmra.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp6mutwmra.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var arr = s.split(\" \");\n   \
    \ var result = [];\n    for(var i = 0; i < arr.length; i++){\n        var count\
    \ = 0;\n        for(var j = 0; j < arr[i].length; j++){\n            if(arr[i][j]\
    \ != \"a\" && arr[i][j] != \"e\" && arr[i][j] != \"i\" && arr[i][j] != \"o\" &&\
    \ arr[i][j] != \"u\"){\n                count++;\n            }\n        }\n \
    \       if(count == n){\n            result.push(arr[i]);\n        }\n    }\n\
    \    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmphu5jq_jd.js:32:10)\n   \
    \ at Object.<anonymous> (/tmp/tmphu5jq_jd.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpid5u7bu4.js:11\n        if(count_consonants(words[i]) == n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpid5u7bu4.js:11:9)\n    at test (/tmp/tmpid5u7bu4.js:22:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpid5u7bu4.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmplqx46xdb.js:11\n        if(count_consonants(words[i]) == n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmplqx46xdb.js:11:9)\n    at test (/tmp/tmplqx46xdb.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmplqx46xdb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n  let arr = s.split(' ');\n  let result\
    \ = [];\n  for(let i = 0; i < arr.length; i++){\n    if(countConsonants(arr[i])\
    \ === n){\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmps3njf7pj.js:11\n    if(countConsonants(arr[i]) === n){\n    ^\n\
    \nReferenceError: countConsonants is not defined\n    at select_words (/tmp/tmps3njf7pj.js:11:5)\n\
    \    at test (/tmp/tmps3njf7pj.js:23:20)\n    at Object.<anonymous> (/tmp/tmps3njf7pj.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let letter = word[j];\n            if(letter != 'a' && letter\
    \ != 'e' && letter != 'i' && letter != 'o' && letter != 'u'){\n              \
    \  count++;\n            }\n        }\n        if(count == n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmphy2lq0hk.js:34:10)\n   \
    \ at Object.<anonymous> (/tmp/tmphy2lq0hk.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(!isVowel(word[j])){\n                count++;\n      \
    \      }\n        }\n        if(count === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpg1xjm2ka.js:14\n            if(!isVowel(word[j])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmpg1xjm2ka.js:14:13)\n\
    \    at test (/tmp/tmpg1xjm2ka.js:30:20)\n    at Object.<anonymous> (/tmp/tmpg1xjm2ka.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ === n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpiqs2jtpd.js:11\n        if(count_consonants(words[i]) === n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpiqs2jtpd.js:11:9)\n    at test (/tmp/tmpiqs2jtpd.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpiqs2jtpd.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        var\
    \ word = words[i];\n        var count = 0;\n        for(var j = 0; j < word.length;\
    \ j++){\n            var letter = word[j];\n            if(letter != \"a\" &&\
    \ letter != \"e\" && letter != \"i\" && letter != \"o\" && letter != \"u\"){\n\
    \                count++;\n            }\n        }\n        if(count == n){\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp_xr9fq2a.js:34:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp_xr9fq2a.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmplqx46xdb.js:11\n        if(count_consonants(words[i]) == n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmplqx46xdb.js:11:9)\n    at test (/tmp/tmplqx46xdb.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmplqx46xdb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ === n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpiqs2jtpd.js:11\n        if(count_consonants(words[i]) === n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpiqs2jtpd.js:11:9)\n    at test (/tmp/tmpiqs2jtpd.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpiqs2jtpd.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmplqx46xdb.js:11\n        if(count_consonants(words[i]) == n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmplqx46xdb.js:11:9)\n    at test (/tmp/tmplqx46xdb.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmplqx46xdb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let arr = s.split(' ');\n    let\
    \ result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(countConsonants(arr[i])\
    \ === n){\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp9y69771m.js:11\n        if(countConsonants(arr[i]) === n){\n  \
    \      ^\n\nReferenceError: countConsonants is not defined\n    at select_words\
    \ (/tmp/tmp9y69771m.js:11:9)\n    at test (/tmp/tmp9y69771m.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp9y69771m.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let consonants = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let letter = word[j];\n            if(letter != 'a' && letter\
    \ != 'e' && letter != 'i' && letter != 'o' && letter != 'u'){\n              \
    \  consonants++;\n            }\n        }\n        if(consonants == n){\n   \
    \         result.push(word);\n        }\n    }\n    return result;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp7gaxar_o.js:34:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp7gaxar_o.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        var\
    \ word = words[i];\n        var consonants = 0;\n        for(var j = 0; j < word.length;\
    \ j++){\n            var letter = word[j];\n            if(letter != \"a\" &&\
    \ letter != \"e\" && letter != \"i\" && letter != \"o\" && letter != \"u\"){\n\
    \                consonants++;\n            }\n        }\n        if(consonants\
    \ == n){\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpk1tjny7w.js:34:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpk1tjny7w.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmplqx46xdb.js:11\n        if(count_consonants(words[i]) == n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmplqx46xdb.js:11:9)\n    at test (/tmp/tmplqx46xdb.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmplqx46xdb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let consonants = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let letter = word[j];\n            if(letter != 'a' && letter\
    \ != 'e' && letter != 'i' && letter != 'o' && letter != 'u'){\n              \
    \  consonants++;\n            }\n        }\n        if(consonants == n){\n   \
    \         result.push(word);\n        }\n    }\n    return result;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp7gaxar_o.js:34:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp7gaxar_o.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let consonants = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let char = word[j];\n            if(char !== 'a' && char\
    \ !== 'e' && char !== 'i' && char !== 'o' && char !== 'u'){\n                consonants++;\n\
    \            }\n        }\n        if(consonants === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp_to3mecv.js:34:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp_to3mecv.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmplqx46xdb.js:11\n        if(count_consonants(words[i]) == n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmplqx46xdb.js:11:9)\n    at test (/tmp/tmplqx46xdb.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmplqx46xdb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmplqx46xdb.js:11\n        if(count_consonants(words[i]) == n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmplqx46xdb.js:11:9)\n    at test (/tmp/tmplqx46xdb.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmplqx46xdb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let arr = s.split(\" \");\n   \
    \ let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(count_consonants(arr[i])\
    \ === n){\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp7wsj7sut.js:11\n        if(count_consonants(arr[i]) === n){\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp7wsj7sut.js:11:9)\n    at test (/tmp/tmp7wsj7sut.js:22:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp7wsj7sut.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmplqx46xdb.js:11\n        if(count_consonants(words[i]) == n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmplqx46xdb.js:11:9)\n    at test (/tmp/tmplqx46xdb.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmplqx46xdb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(!isVowel(word[j])){\n                count++;\n      \
    \      }\n        }\n        if(count === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpg1xjm2ka.js:14\n            if(!isVowel(word[j])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmpg1xjm2ka.js:14:13)\n\
    \    at test (/tmp/tmpg1xjm2ka.js:30:20)\n    at Object.<anonymous> (/tmp/tmpg1xjm2ka.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmplqx46xdb.js:11\n        if(count_consonants(words[i]) == n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmplqx46xdb.js:11:9)\n    at test (/tmp/tmplqx46xdb.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmplqx46xdb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let consonants = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let char = word[j];\n            if(char != 'a' && char !=\
    \ 'e' && char != 'i' && char != 'o' && char != 'u'){\n                consonants++;\n\
    \            }\n        }\n        if(consonants == n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpfkf7rhm2.js:34:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpfkf7rhm2.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let arr = s.split(' ');\n    let\
    \ result = [];\n    for(let i = 0; i < arr.length; i++){\n        let count =\
    \ 0;\n        for(let j = 0; j < arr[i].length; j++){\n            if(arr[i][j]\
    \ != 'a' && arr[i][j] != 'e' && arr[i][j] != 'i' && arr[i][j] != 'o' && arr[i][j]\
    \ != 'u'){\n                count++;\n            }\n        }\n        if(count\
    \ == n){\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp5cxelizd.js:32:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp5cxelizd.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let consonants = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(is_consonant(word[j])){\n                consonants++;\n\
    \            }\n        }\n        if(consonants === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpjovl3rec.js:14\n            if(is_consonant(word[j])){\n      \
    \      ^\n\nReferenceError: is_consonant is not defined\n    at select_words (/tmp/tmpjovl3rec.js:14:13)\n\
    \    at test (/tmp/tmpjovl3rec.js:30:20)\n    at Object.<anonymous> (/tmp/tmpjovl3rec.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n  var words = s.split(' ');\n  var\
    \ result = [];\n  for(var i = 0; i < words.length; i++){\n    var word = words[i];\n\
    \    var consonants = 0;\n    for(var j = 0; j < word.length; j++){\n      var\
    \ char = word[j];\n      if(char.match(/[^aeiou]/i)){\n        consonants++;\n\
    \      }\n    }\n    if(consonants === n){\n      result.push(word);\n    }\n\
    \  }\n  return result;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var arr = s.split(\" \");\n   \
    \ var result = [];\n    for(var i = 0; i < arr.length; i++){\n        var word\
    \ = arr[i];\n        var count = 0;\n        for(var j = 0; j < word.length; j++){\n\
    \            if(!isVowel(word[j])){\n                count++;\n            }\n\
    \        }\n        if(count === n){\n            result.push(word);\n       \
    \ }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp645c7skm.js:14\n            if(!isVowel(word[j])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmp645c7skm.js:14:13)\n\
    \    at test (/tmp/tmp645c7skm.js:30:20)\n    at Object.<anonymous> (/tmp/tmp645c7skm.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let result = [];\n    let words\
    \ = s.split(' ');\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let consonants = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(isConsonant(word[j])){\n                consonants++;\n\
    \            }\n        }\n        if(consonants === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpr7hwc1ac.js:14\n            if(isConsonant(word[j])){\n       \
    \     ^\n\nReferenceError: isConsonant is not defined\n    at select_words (/tmp/tmpr7hwc1ac.js:14:13)\n\
    \    at test (/tmp/tmpr7hwc1ac.js:30:20)\n    at Object.<anonymous> (/tmp/tmpr7hwc1ac.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let consonants = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let letter = word[j];\n            if(letter != 'a' && letter\
    \ != 'e' && letter != 'i' && letter != 'o' && letter != 'u'){\n              \
    \  consonants++;\n            }\n        }\n        if(consonants == n){\n   \
    \         result.push(word);\n        }\n    }\n    return result;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp7gaxar_o.js:34:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp7gaxar_o.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let arr = s.split(\" \");\n   \
    \ let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(count_consonants(arr[i])\
    \ === n){\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp6mutwmra.js:11\n        if(count_consonants(arr[i]) === n){\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp6mutwmra.js:11:9)\n    at test (/tmp/tmp6mutwmra.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp6mutwmra.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(!isVowel(word[j])){\n                count++;\n      \
    \      }\n        }\n        if(count === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpg1xjm2ka.js:14\n            if(!isVowel(word[j])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmpg1xjm2ka.js:14:13)\n\
    \    at test (/tmp/tmpg1xjm2ka.js:30:20)\n    at Object.<anonymous> (/tmp/tmpg1xjm2ka.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmplqx46xdb.js:11\n        if(count_consonants(words[i]) == n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmplqx46xdb.js:11:9)\n    at test (/tmp/tmplqx46xdb.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmplqx46xdb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let consonants = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let letter = word[j];\n            if(letter != 'a' && letter\
    \ != 'e' && letter != 'i' && letter != 'o' && letter != 'u'){\n              \
    \  consonants++;\n            }\n        }\n        if(consonants == n){\n   \
    \         result.push(word);\n        }\n    }\n    return result;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp7gaxar_o.js:34:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp7gaxar_o.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(!isVowel(word[j])){\n                count++;\n      \
    \      }\n        }\n        if(count === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpg1xjm2ka.js:14\n            if(!isVowel(word[j])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmpg1xjm2ka.js:14:13)\n\
    \    at test (/tmp/tmpg1xjm2ka.js:30:20)\n    at Object.<anonymous> (/tmp/tmpg1xjm2ka.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let consonants = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let letter = word[j];\n            if(letter != 'a' && letter\
    \ != 'e' && letter != 'i' && letter != 'o' && letter != 'u'){\n              \
    \  consonants++;\n            }\n        }\n        if(consonants == n){\n   \
    \         result.push(word);\n        }\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp1maoxtoo.js:35:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp1maoxtoo.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(!isVowel(word[j])){\n                count++;\n      \
    \      }\n        }\n        if(count === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpg1xjm2ka.js:14\n            if(!isVowel(word[j])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmpg1xjm2ka.js:14:13)\n\
    \    at test (/tmp/tmpg1xjm2ka.js:30:20)\n    at Object.<anonymous> (/tmp/tmpg1xjm2ka.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var arr = s.split(\" \");\n   \
    \ var result = [];\n    for(var i = 0; i < arr.length; i++){\n        if(count_consonants(arr[i])\
    \ == n){\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpx_ogzfex.js:11\n        if(count_consonants(arr[i]) == n){\n  \
    \      ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpx_ogzfex.js:11:9)\n    at test (/tmp/tmpx_ogzfex.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpx_ogzfex.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(!isVowel(word[j])){\n                count++;\n      \
    \      }\n        }\n        if(count === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpg1xjm2ka.js:14\n            if(!isVowel(word[j])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmpg1xjm2ka.js:14:13)\n\
    \    at test (/tmp/tmpg1xjm2ka.js:30:20)\n    at Object.<anonymous> (/tmp/tmpg1xjm2ka.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let cons = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let letter = word[j];\n            if(letter != 'a' && letter\
    \ != 'e' && letter != 'i' && letter != 'o' && letter != 'u'){\n              \
    \  cons++;\n            }\n        }\n        if(cons == n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpy3mvnutr.js:34:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpy3mvnutr.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let consonants = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let char = word[j];\n            if(char !== 'a' && char\
    \ !== 'e' && char !== 'i' && char !== 'o' && char !== 'u'){\n                consonants++;\n\
    \            }\n        }\n        if(consonants === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpicab1rj9.js:35:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpicab1rj9.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(!isVowel(word[j])){\n                count++;\n      \
    \      }\n        }\n        if(count === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpg1xjm2ka.js:14\n            if(!isVowel(word[j])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmpg1xjm2ka.js:14:13)\n\
    \    at test (/tmp/tmpg1xjm2ka.js:30:20)\n    at Object.<anonymous> (/tmp/tmpg1xjm2ka.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var arr = s.split(\" \");\n   \
    \ var result = [];\n    for(var i = 0; i < arr.length; i++){\n        if(count_consonants(arr[i])\
    \ == n){\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp58exr8xn.js:11\n        if(count_consonants(arr[i]) == n){\n  \
    \      ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp58exr8xn.js:11:9)\n    at test (/tmp/tmp58exr8xn.js:22:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp58exr8xn.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ === n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpiqs2jtpd.js:11\n        if(count_consonants(words[i]) === n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpiqs2jtpd.js:11:9)\n    at test (/tmp/tmpiqs2jtpd.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpiqs2jtpd.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let arr = s.split(' ');\n    let\
    \ result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(countConsonants(arr[i])\
    \ === n){\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp9y69771m.js:11\n        if(countConsonants(arr[i]) === n){\n  \
    \      ^\n\nReferenceError: countConsonants is not defined\n    at select_words\
    \ (/tmp/tmp9y69771m.js:11:9)\n    at test (/tmp/tmp9y69771m.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp9y69771m.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ === n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpiqs2jtpd.js:11\n        if(count_consonants(words[i]) === n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpiqs2jtpd.js:11:9)\n    at test (/tmp/tmpiqs2jtpd.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpiqs2jtpd.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let arr = s.split(\" \");\n   \
    \ let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(countConsonants(arr[i])\
    \ === n){\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpl2rdapda.js:11\n        if(countConsonants(arr[i]) === n){\n  \
    \      ^\n\nReferenceError: countConsonants is not defined\n    at select_words\
    \ (/tmp/tmpl2rdapda.js:11:9)\n    at test (/tmp/tmpl2rdapda.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpl2rdapda.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        var\
    \ word = words[i];\n        var count = 0;\n        for(var j = 0; j < word.length;\
    \ j++){\n            var letter = word[j];\n            if(letter != \"a\" &&\
    \ letter != \"e\" && letter != \"i\" && letter != \"o\" && letter != \"u\"){\n\
    \                count++;\n            }\n        }\n        if(count == n){\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp1bk4wqaz.js:35:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp1bk4wqaz.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmplqx46xdb.js:11\n        if(count_consonants(words[i]) == n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmplqx46xdb.js:11:9)\n    at test (/tmp/tmplqx46xdb.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmplqx46xdb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ === n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpiqs2jtpd.js:11\n        if(count_consonants(words[i]) === n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpiqs2jtpd.js:11:9)\n    at test (/tmp/tmpiqs2jtpd.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpiqs2jtpd.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    words.forEach(word => {\n        if(countConsonants(word)\
    \ === n){\n            result.push(word);\n        }\n    });\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp0ac_j5tg.js:11\n        if(countConsonants(word) === n){\n    \
    \    ^\n\nReferenceError: countConsonants is not defined\n    at /tmp/tmp0ac_j5tg.js:11:9\n\
    \    at Array.forEach (<anonymous>)\n    at select_words (/tmp/tmp0ac_j5tg.js:10:11)\n\
    \    at test (/tmp/tmp0ac_j5tg.js:23:20)\n    at Object.<anonymous> (/tmp/tmp0ac_j5tg.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let arr = s.split(' ');\n    let\
    \ result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i].match(/[^aeiou]/g)\
    \ && arr[i].match(/[^aeiou]/g).length === n){\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp7dc0rmu6.js:26:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp7dc0rmu6.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        var\
    \ word = words[i];\n        var consonants = 0;\n        for(var j = 0; j < word.length;\
    \ j++){\n            var letter = word[j];\n            if(letter != \"a\" &&\
    \ letter != \"e\" && letter != \"i\" && letter != \"o\" && letter != \"u\"){\n\
    \                consonants++;\n            }\n        }\n        if(consonants\
    \ == n){\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpk1tjny7w.js:34:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpk1tjny7w.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var arr = s.split(\" \");\n   \
    \ var result = [];\n    for(var i = 0; i < arr.length; i++){\n        if(consonants(arr[i])\
    \ === n){\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpf15xqp_f.js:11\n        if(consonants(arr[i]) === n){\n       \
    \ ^\n\nReferenceError: consonants is not defined\n    at select_words (/tmp/tmpf15xqp_f.js:11:9)\n\
    \    at test (/tmp/tmpf15xqp_f.js:23:20)\n    at Object.<anonymous> (/tmp/tmpf15xqp_f.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let consonants = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(isConsonant(word[j])){\n                consonants++;\n\
    \            }\n        }\n        if(consonants === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmprzjqzhsx.js:14\n            if(isConsonant(word[j])){\n       \
    \     ^\n\nReferenceError: isConsonant is not defined\n    at select_words (/tmp/tmprzjqzhsx.js:14:13)\n\
    \    at test (/tmp/tmprzjqzhsx.js:30:20)\n    at Object.<anonymous> (/tmp/tmprzjqzhsx.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(isConsonant(word[j])){\n                count++;\n   \
    \         }\n        }\n        if(count === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpr0b9zkp4.js:14\n            if(isConsonant(word[j])){\n       \
    \     ^\n\nReferenceError: isConsonant is not defined\n    at select_words (/tmp/tmpr0b9zkp4.js:14:13)\n\
    \    at test (/tmp/tmpr0b9zkp4.js:30:20)\n    at Object.<anonymous> (/tmp/tmpr0b9zkp4.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(isConsonant(word[j])){\n                count++;\n   \
    \         }\n        }\n        if(count === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpr0b9zkp4.js:14\n            if(isConsonant(word[j])){\n       \
    \     ^\n\nReferenceError: isConsonant is not defined\n    at select_words (/tmp/tmpr0b9zkp4.js:14:13)\n\
    \    at test (/tmp/tmpr0b9zkp4.js:30:20)\n    at Object.<anonymous> (/tmp/tmpr0b9zkp4.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmplqx46xdb.js:11\n        if(count_consonants(words[i]) == n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmplqx46xdb.js:11:9)\n    at test (/tmp/tmplqx46xdb.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmplqx46xdb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(!isVowel(word[j])){\n                count++;\n      \
    \      }\n        }\n        if(count === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpg1xjm2ka.js:14\n            if(!isVowel(word[j])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmpg1xjm2ka.js:14:13)\n\
    \    at test (/tmp/tmpg1xjm2ka.js:30:20)\n    at Object.<anonymous> (/tmp/tmpg1xjm2ka.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let consonants = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let letter = word[j];\n            if(letter.toLowerCase()\
    \ != 'a' && letter.toLowerCase() != 'e' && letter.toLowerCase() != 'i' && letter.toLowerCase()\
    \ != 'o' && letter.toLowerCase() != 'u'){\n                consonants++;\n   \
    \         }\n        }\n        if(consonants == n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let result = [];\n    let words\
    \ = s.split(' ');\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let letter = word[j];\n            if(letter != 'a' && letter\
    \ != 'e' && letter != 'i' && letter != 'o' && letter != 'u'){\n              \
    \  count++;\n            }\n        }\n        if(count == n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpzl9iivvp.js:35:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpzl9iivvp.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let arr = s.split(\" \");\n   \
    \ let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(count_consonants(arr[i])\
    \ === n){\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp6mutwmra.js:11\n        if(count_consonants(arr[i]) === n){\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp6mutwmra.js:11:9)\n    at test (/tmp/tmp6mutwmra.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp6mutwmra.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ === n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpiqs2jtpd.js:11\n        if(count_consonants(words[i]) === n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpiqs2jtpd.js:11:9)\n    at test (/tmp/tmpiqs2jtpd.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpiqs2jtpd.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let consonants = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let letter = word[j];\n            if(letter !== 'a' && letter\
    \ !== 'e' && letter !== 'i' && letter !== 'o' && letter !== 'u'){\n          \
    \      consonants++;\n            }\n        }\n        if(consonants === n){\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpkeyxcte4.js:35:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpkeyxcte4.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let consonants = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(!isVowel(word[j])){\n                consonants++;\n \
    \           }\n        }\n        if(consonants === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp03wx89qc.js:14\n            if(!isVowel(word[j])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmp03wx89qc.js:14:13)\n\
    \    at test (/tmp/tmp03wx89qc.js:30:20)\n    at Object.<anonymous> (/tmp/tmp03wx89qc.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmplqx46xdb.js:11\n        if(count_consonants(words[i]) == n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmplqx46xdb.js:11:9)\n    at test (/tmp/tmplqx46xdb.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmplqx46xdb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ === n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpiqs2jtpd.js:11\n        if(count_consonants(words[i]) === n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpiqs2jtpd.js:11:9)\n    at test (/tmp/tmpiqs2jtpd.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpiqs2jtpd.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        if(consonants_count(words[i])\
    \ == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp6eiuusd7.js:11\n        if(consonants_count(words[i]) == n){\n\
    \        ^\n\nReferenceError: consonants_count is not defined\n    at select_words\
    \ (/tmp/tmp6eiuusd7.js:11:9)\n    at test (/tmp/tmp6eiuusd7.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp6eiuusd7.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(!isVowel(word[j])){\n                count++;\n      \
    \      }\n        }\n        if(count === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpg1xjm2ka.js:14\n            if(!isVowel(word[j])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmpg1xjm2ka.js:14:13)\n\
    \    at test (/tmp/tmpg1xjm2ka.js:30:20)\n    at Object.<anonymous> (/tmp/tmpg1xjm2ka.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let arr = s.split(' ');\n    let\
    \ result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(count_consonants(arr[i])\
    \ === n){\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpu_tnafb2.js:11\n        if(count_consonants(arr[i]) === n){\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpu_tnafb2.js:11:9)\n    at test (/tmp/tmpu_tnafb2.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpu_tnafb2.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let letter = word[j];\n            if(letter != 'a' && letter\
    \ != 'e' && letter != 'i' && letter != 'o' && letter != 'u'){\n              \
    \  count++;\n            }\n        }\n        if(count == n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmphy2lq0hk.js:34:10)\n   \
    \ at Object.<anonymous> (/tmp/tmphy2lq0hk.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        var\
    \ word = words[i];\n        var consonants = 0;\n        for(var j = 0; j < word.length;\
    \ j++){\n            var letter = word[j];\n            if(letter != \"a\" &&\
    \ letter != \"e\" && letter != \"i\" && letter != \"o\" && letter != \"u\"){\n\
    \                consonants++;\n            }\n        }\n        if(consonants\
    \ == n){\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpk1tjny7w.js:34:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpk1tjny7w.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ === n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpiqs2jtpd.js:11\n        if(count_consonants(words[i]) === n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpiqs2jtpd.js:11:9)\n    at test (/tmp/tmpiqs2jtpd.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpiqs2jtpd.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let arr = s.split(' ');\n    let\
    \ result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(countConsonants(arr[i])\
    \ === n){\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp9y69771m.js:11\n        if(countConsonants(arr[i]) === n){\n  \
    \      ^\n\nReferenceError: countConsonants is not defined\n    at select_words\
    \ (/tmp/tmp9y69771m.js:11:9)\n    at test (/tmp/tmp9y69771m.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp9y69771m.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        var\
    \ word = words[i];\n        var consonants = 0;\n        for(var j = 0; j < word.length;\
    \ j++){\n            var letter = word[j];\n            if(letter.toLowerCase()\
    \ != \"a\" && letter.toLowerCase() != \"e\" && letter.toLowerCase() != \"i\" &&\
    \ letter.toLowerCase() != \"o\" && letter.toLowerCase() != \"u\"){\n         \
    \       consonants++;\n            }\n        }\n        if(consonants == n){\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        var\
    \ word = words[i];\n        var count = 0;\n        for(var j = 0; j < word.length;\
    \ j++){\n            var letter = word[j];\n            if(letter != \"a\" &&\
    \ letter != \"e\" && letter != \"i\" && letter != \"o\" && letter != \"u\"){\n\
    \                count++;\n            }\n        }\n        if(count == n){\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp_xr9fq2a.js:34:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp_xr9fq2a.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(!isVowel(word[j])){\n                count++;\n      \
    \      }\n        }\n        if(count === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpg1xjm2ka.js:14\n            if(!isVowel(word[j])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmpg1xjm2ka.js:14:13)\n\
    \    at test (/tmp/tmpg1xjm2ka.js:30:20)\n    at Object.<anonymous> (/tmp/tmpg1xjm2ka.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ === n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpiqs2jtpd.js:11\n        if(count_consonants(words[i]) === n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpiqs2jtpd.js:11:9)\n    at test (/tmp/tmpiqs2jtpd.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpiqs2jtpd.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ === n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpiqs2jtpd.js:11\n        if(count_consonants(words[i]) === n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpiqs2jtpd.js:11:9)\n    at test (/tmp/tmpiqs2jtpd.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpiqs2jtpd.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let arr = s.split(' ');\n    let\
    \ result = [];\n    for(let i = 0; i < arr.length; i++){\n        let word = arr[i];\n\
    \        let count = 0;\n        for(let j = 0; j < word.length; j++){\n     \
    \       let letter = word[j];\n            if(letter !== 'a' && letter !== 'e'\
    \ && letter !== 'i' && letter !== 'o' && letter !== 'u'){\n                count++;\n\
    \            }\n        }\n        if(count === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpo0hize6x.js:34:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpo0hize6x.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ === n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpiqs2jtpd.js:11\n        if(count_consonants(words[i]) === n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpiqs2jtpd.js:11:9)\n    at test (/tmp/tmpiqs2jtpd.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpiqs2jtpd.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ === n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpiqs2jtpd.js:11\n        if(count_consonants(words[i]) === n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpiqs2jtpd.js:11:9)\n    at test (/tmp/tmpiqs2jtpd.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpiqs2jtpd.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let arr = s.split(' ');\n    let\
    \ result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(countConsonants(arr[i])\
    \ === n){\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp9y69771m.js:11\n        if(countConsonants(arr[i]) === n){\n  \
    \      ^\n\nReferenceError: countConsonants is not defined\n    at select_words\
    \ (/tmp/tmp9y69771m.js:11:9)\n    at test (/tmp/tmp9y69771m.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp9y69771m.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let consonants = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let letter = word[j];\n            if(letter !== 'a' && letter\
    \ !== 'e' && letter !== 'i' && letter !== 'o' && letter !== 'u'){\n          \
    \      consonants++;\n            }\n        }\n        if(consonants === n){\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpkeyxcte4.js:35:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpkeyxcte4.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ === n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpiqs2jtpd.js:11\n        if(count_consonants(words[i]) === n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpiqs2jtpd.js:11:9)\n    at test (/tmp/tmpiqs2jtpd.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpiqs2jtpd.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let result = [];\n    let words\
    \ = s.split(' ');\n    for(let i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ === n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmprfxtyt98.js:11\n        if(count_consonants(words[i]) === n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmprfxtyt98.js:11:9)\n    at test (/tmp/tmprfxtyt98.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmprfxtyt98.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let consonants = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let char = word[j];\n            if(char != 'a' && char !=\
    \ 'e' && char != 'i' && char != 'o' && char != 'u'){\n                consonants++;\n\
    \            }\n        }\n        if(consonants == n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpfkf7rhm2.js:34:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpfkf7rhm2.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let consonants = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let letter = word[j];\n            if(letter.toLowerCase()\
    \ != 'a' && letter.toLowerCase() != 'e' && letter.toLowerCase() != 'i' && letter.toLowerCase()\
    \ != 'o' && letter.toLowerCase() != 'u'){\n                consonants++;\n   \
    \         }\n        }\n        if(consonants == n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpid5u7bu4.js:11\n        if(count_consonants(words[i]) == n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpid5u7bu4.js:11:9)\n    at test (/tmp/tmpid5u7bu4.js:22:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpid5u7bu4.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let consonants = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let char = word[j];\n            if(char != 'a' && char !=\
    \ 'e' && char != 'i' && char != 'o' && char != 'u'){\n                consonants++;\n\
    \            }\n        }\n        if(consonants == n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpblfdqb1m.js:35:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpblfdqb1m.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ === n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpiqs2jtpd.js:11\n        if(count_consonants(words[i]) === n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpiqs2jtpd.js:11:9)\n    at test (/tmp/tmpiqs2jtpd.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpiqs2jtpd.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ === n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpiqs2jtpd.js:11\n        if(count_consonants(words[i]) === n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpiqs2jtpd.js:11:9)\n    at test (/tmp/tmpiqs2jtpd.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpiqs2jtpd.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(!isVowel(word[j])){\n                count++;\n      \
    \      }\n        }\n        if(count === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpg1xjm2ka.js:14\n            if(!isVowel(word[j])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmpg1xjm2ka.js:14:13)\n\
    \    at test (/tmp/tmpg1xjm2ka.js:30:20)\n    at Object.<anonymous> (/tmp/tmpg1xjm2ka.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let result = [];\n    let words\
    \ = s.split(' ');\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let consonants = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let letter = word[j];\n            if(letter !== 'a' && letter\
    \ !== 'e' && letter !== 'i' && letter !== 'o' && letter !== 'u'){\n          \
    \      consonants++;\n            }\n        }\n        if(consonants === n){\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmph63z540k.js:34:10)\n   \
    \ at Object.<anonymous> (/tmp/tmph63z540k.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let result = [];\n    let words\
    \ = s.split(' ');\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(is_consonant(word[j])){\n                count++;\n  \
    \          }\n        }\n        if(count === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp4j70rlck.js:14\n            if(is_consonant(word[j])){\n      \
    \      ^\n\nReferenceError: is_consonant is not defined\n    at select_words (/tmp/tmp4j70rlck.js:14:13)\n\
    \    at test (/tmp/tmp4j70rlck.js:30:20)\n    at Object.<anonymous> (/tmp/tmp4j70rlck.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let letter = word[j];\n            if(letter !== 'a' && letter\
    \ !== 'e' && letter !== 'i' && letter !== 'o' && letter !== 'u'){\n          \
    \      count++;\n            }\n        }\n        if(count === n){\n        \
    \    result.push(word);\n        }\n    }\n    return result;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpj_szukga.js:34:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpj_szukga.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var arr = s.split(' ');\n    var\
    \ result = [];\n    for(var i = 0; i < arr.length; i++){\n        if(count_consonants(arr[i])\
    \ === n){\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpin16acdd.js:11\n        if(count_consonants(arr[i]) === n){\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpin16acdd.js:11:9)\n    at test (/tmp/tmpin16acdd.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpin16acdd.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ === n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpiqs2jtpd.js:11\n        if(count_consonants(words[i]) === n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpiqs2jtpd.js:11:9)\n    at test (/tmp/tmpiqs2jtpd.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpiqs2jtpd.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        if(countConsonants(words[i])\
    \ === n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_3jp3s_c.js:11\n        if(countConsonants(words[i]) === n){\n\
    \        ^\n\nReferenceError: countConsonants is not defined\n    at select_words\
    \ (/tmp/tmp_3jp3s_c.js:11:9)\n    at test (/tmp/tmp_3jp3s_c.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp_3jp3s_c.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmplqx46xdb.js:11\n        if(count_consonants(words[i]) == n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmplqx46xdb.js:11:9)\n    at test (/tmp/tmplqx46xdb.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmplqx46xdb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let consonants = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(!isVowel(word[j])){\n                consonants++;\n \
    \           }\n        }\n        if(consonants === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp03wx89qc.js:14\n            if(!isVowel(word[j])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmp03wx89qc.js:14:13)\n\
    \    at test (/tmp/tmp03wx89qc.js:30:20)\n    at Object.<anonymous> (/tmp/tmp03wx89qc.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let arr = s.split(\" \");\n   \
    \ let result = [];\n    for(let i = 0; i < arr.length; i++){\n        let count\
    \ = 0;\n        for(let j = 0; j < arr[i].length; j++){\n            if(arr[i][j]\
    \ != \"a\" && arr[i][j] != \"e\" && arr[i][j] != \"i\" && arr[i][j] != \"o\" &&\
    \ arr[i][j] != \"u\"){\n                count++;\n            }\n        }\n \
    \       if(count == n){\n            result.push(arr[i]);\n        }\n    }\n\
    \    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpyb0mcoqo.js:32:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpyb0mcoqo.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    if(s.length === 0){\n        return\
    \ [];\n    }\n    let arr = s.split(' ');\n    let result = [];\n    for(let i\
    \ = 0; i < arr.length; i++){\n        let word = arr[i];\n        let count =\
    \ 0;\n        for(let j = 0; j < word.length; j++){\n            if(word[j] !==\
    \ 'a' && word[j] !== 'e' && word[j] !== 'i' && word[j] !== 'o' && word[j] !==\
    \ 'u'){\n                count++;\n            }\n        }\n        if(count\
    \ === n){\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpqpiuvvuf.js:36:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpqpiuvvuf.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let letter = word[j];\n            if(!isVowel(letter)){\n\
    \                count++;\n            }\n        }\n        if(count === n){\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp4je16239.js:15\n            if(!isVowel(letter)){\n           \
    \ ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmp4je16239.js:15:13)\n\
    \    at test (/tmp/tmp4je16239.js:31:20)\n    at Object.<anonymous> (/tmp/tmp4je16239.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmplqx46xdb.js:11\n        if(count_consonants(words[i]) == n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmplqx46xdb.js:11:9)\n    at test (/tmp/tmplqx46xdb.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmplqx46xdb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(word[j] != 'a' && word[j] != 'e' && word[j] != 'i' &&\
    \ word[j] != 'o' && word[j] != 'u'){\n                count++;\n            }\n\
    \        }\n        if(count == n){\n            result.push(word);\n        }\n\
    \    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpwtf8cm9m.js:33:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpwtf8cm9m.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let consonants = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(isConsonant(word[j])){\n                consonants++;\n\
    \            }\n        }\n        if(consonants === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmprzjqzhsx.js:14\n            if(isConsonant(word[j])){\n       \
    \     ^\n\nReferenceError: isConsonant is not defined\n    at select_words (/tmp/tmprzjqzhsx.js:14:13)\n\
    \    at test (/tmp/tmprzjqzhsx.js:30:20)\n    at Object.<anonymous> (/tmp/tmprzjqzhsx.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let consonants = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let letter = word[j];\n            if(letter != 'a' && letter\
    \ != 'e' && letter != 'i' && letter != 'o' && letter != 'u'){\n              \
    \  consonants++;\n            }\n        }\n        if(consonants == n){\n   \
    \         result.push(word);\n        }\n    }\n    return result;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp7gaxar_o.js:34:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp7gaxar_o.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        if(consonants(words[i])\
    \ === n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpw8j4f7gk.js:11\n        if(consonants(words[i]) === n){\n     \
    \   ^\n\nReferenceError: consonants is not defined\n    at select_words (/tmp/tmpw8j4f7gk.js:11:9)\n\
    \    at test (/tmp/tmpw8j4f7gk.js:23:20)\n    at Object.<anonymous> (/tmp/tmpw8j4f7gk.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let arr = s.split(' ');\n    let\
    \ result = [];\n    for(let i = 0; i < arr.length; i++){\n        let word = arr[i];\n\
    \        let count = 0;\n        for(let j = 0; j < word.length; j++){\n     \
    \       let letter = word[j];\n            if(letter !== 'a' && letter !== 'e'\
    \ && letter !== 'i' && letter !== 'o' && letter !== 'u'){\n                count++;\n\
    \            }\n        }\n        if(count === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpo0hize6x.js:34:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpo0hize6x.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmplqx46xdb.js:11\n        if(count_consonants(words[i]) == n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmplqx46xdb.js:11:9)\n    at test (/tmp/tmplqx46xdb.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmplqx46xdb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let arr = s.split(\" \");\n   \
    \ let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(consonants(arr[i])\
    \ === n){\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpr2lgvxsp.js:11\n        if(consonants(arr[i]) === n){\n       \
    \ ^\n\nReferenceError: consonants is not defined\n    at select_words (/tmp/tmpr2lgvxsp.js:11:9)\n\
    \    at test (/tmp/tmpr2lgvxsp.js:22:20)\n    at Object.<anonymous> (/tmp/tmpr2lgvxsp.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let arr = s.split(' ');\n    let\
    \ result = [];\n    for(let i = 0; i < arr.length; i++){\n        let word = arr[i];\n\
    \        let count = 0;\n        for(let j = 0; j < word.length; j++){\n     \
    \       if(!isVowel(word[j])){\n                count++;\n            }\n    \
    \    }\n        if(count === n){\n            result.push(word);\n        }\n\
    \    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpjwj66kp0.js:14\n            if(!isVowel(word[j])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmpjwj66kp0.js:14:13)\n\
    \    at test (/tmp/tmpjwj66kp0.js:29:20)\n    at Object.<anonymous> (/tmp/tmpjwj66kp0.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ')\n    let\
    \ result = []\n    for(let i = 0; i < words.length; i++){\n        let word =\
    \ words[i]\n        let count = 0\n        for(let j = 0; j < word.length; j++){\n\
    \            if(!isVowel(word[j])){\n                count++\n            }\n\
    \        }\n        if(count === n){\n            result.push(word)\n        }\n\
    \    }\n    return result\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbg1a31nd.js:14\n            if(!isVowel(word[j])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmpbg1a31nd.js:14:13)\n\
    \    at test (/tmp/tmpbg1a31nd.js:30:20)\n    at Object.<anonymous> (/tmp/tmpbg1a31nd.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmplqx46xdb.js:11\n        if(count_consonants(words[i]) == n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmplqx46xdb.js:11:9)\n    at test (/tmp/tmplqx46xdb.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmplqx46xdb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let consonants = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let letter = word[j];\n            if(letter !== 'a' && letter\
    \ !== 'e' && letter !== 'i' && letter !== 'o' && letter !== 'u'){\n          \
    \      consonants++;\n            }\n        }\n        if(consonants === n){\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpfy3cr4dm.js:34:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpfy3cr4dm.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let letter = word[j];\n            if(letter != 'a' && letter\
    \ != 'e' && letter != 'i' && letter != 'o' && letter != 'u'){\n              \
    \  count++;\n            }\n        }\n        if(count == n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmphy2lq0hk.js:34:10)\n   \
    \ at Object.<anonymous> (/tmp/tmphy2lq0hk.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmplqx46xdb.js:11\n        if(count_consonants(words[i]) == n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmplqx46xdb.js:11:9)\n    at test (/tmp/tmplqx46xdb.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmplqx46xdb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        var\
    \ count = 0;\n        for(var j = 0; j < words[i].length; j++){\n            if(words[i][j]\
    \ != \"a\" && words[i][j] != \"e\" && words[i][j] != \"i\" && words[i][j] != \"\
    o\" && words[i][j] != \"u\"){\n                count++;\n            }\n     \
    \   }\n        if(count == n){\n            result.push(words[i]);\n        }\n\
    \    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp89nyvtjx.js:32:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp89nyvtjx.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(!isVowel(word[j])){\n                count++;\n      \
    \      }\n        }\n        if(count === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpg1xjm2ka.js:14\n            if(!isVowel(word[j])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmpg1xjm2ka.js:14:13)\n\
    \    at test (/tmp/tmpg1xjm2ka.js:30:20)\n    at Object.<anonymous> (/tmp/tmpg1xjm2ka.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var arr = s.split(\" \");\n   \
    \ var arr2 = [];\n    for(var i = 0; i < arr.length; i++){\n        if(count_consonants(arr[i])\
    \ == n){\n            arr2.push(arr[i]);\n        }\n    }\n    return arr2;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpj7y9irhp.js:11\n        if(count_consonants(arr[i]) == n){\n  \
    \      ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpj7y9irhp.js:11:9)\n    at test (/tmp/tmpj7y9irhp.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpj7y9irhp.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let arr = s.split(' ');\n    let\
    \ result = [];\n    for(let i = 0; i < arr.length; i++){\n        let count =\
    \ 0;\n        for(let j = 0; j < arr[i].length; j++){\n            if(arr[i][j]\
    \ !== 'a' && arr[i][j] !== 'e' && arr[i][j] !== 'i' && arr[i][j] !== 'o' && arr[i][j]\
    \ !== 'u'){\n                count++;\n            }\n        }\n        if(count\
    \ === n){\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpjw3omxjn.js:32:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpjw3omxjn.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let word of words){\n        if(count_consonants(word)\
    \ === n){\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpjws35mre.js:11\n        if(count_consonants(word) === n){\n   \
    \     ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpjws35mre.js:11:9)\n    at test (/tmp/tmpjws35mre.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpjws35mre.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let arr = s.split(' ');\n    let\
    \ result = [];\n    for(let i = 0; i < arr.length; i++){\n        let count =\
    \ 0;\n        for(let j = 0; j < arr[i].length; j++){\n            if(arr[i][j]\
    \ != 'a' && arr[i][j] != 'e' && arr[i][j] != 'i' && arr[i][j] != 'o' && arr[i][j]\
    \ != 'u'){\n                count++;\n            }\n        }\n        if(count\
    \ == n){\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp5cxelizd.js:32:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp5cxelizd.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let char = word[j];\n            if(char != 'a' && char !=\
    \ 'e' && char != 'i' && char != 'o' && char != 'u'){\n                count++;\n\
    \            }\n        }\n        if(count == n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp8uygnkrx.js:34:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp8uygnkrx.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let consonants = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let letter = word[j];\n            if(letter != 'a' && letter\
    \ != 'e' && letter != 'i' && letter != 'o' && letter != 'u'){\n              \
    \  consonants++;\n            }\n        }\n        if(consonants == n){\n   \
    \         result.push(word);\n        }\n    }\n    return result;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp7gaxar_o.js:34:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp7gaxar_o.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(!isVowel(word[j])){\n                count++;\n      \
    \      }\n        }\n        if(count === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpg1xjm2ka.js:14\n            if(!isVowel(word[j])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmpg1xjm2ka.js:14:13)\n\
    \    at test (/tmp/tmpg1xjm2ka.js:30:20)\n    at Object.<anonymous> (/tmp/tmpg1xjm2ka.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(!isVowel(word[j])){\n                count++;\n      \
    \      }\n        }\n        if(count === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpg1xjm2ka.js:14\n            if(!isVowel(word[j])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmpg1xjm2ka.js:14:13)\n\
    \    at test (/tmp/tmpg1xjm2ka.js:30:20)\n    at Object.<anonymous> (/tmp/tmpg1xjm2ka.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(!isVowel(word[j])){\n                count++;\n      \
    \      }\n        }\n        if(count === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpg1xjm2ka.js:14\n            if(!isVowel(word[j])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmpg1xjm2ka.js:14:13)\n\
    \    at test (/tmp/tmpg1xjm2ka.js:30:20)\n    at Object.<anonymous> (/tmp/tmpg1xjm2ka.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ === n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpiqs2jtpd.js:11\n        if(count_consonants(words[i]) === n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpiqs2jtpd.js:11:9)\n    at test (/tmp/tmpiqs2jtpd.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpiqs2jtpd.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let char = word[j];\n            if(char != 'a' && char !=\
    \ 'e' && char != 'i' && char != 'o' && char != 'u'){\n                count++;\n\
    \            }\n        }\n        if(count == n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp8uygnkrx.js:34:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp8uygnkrx.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let char = word[j];\n            if(!isVowel(char)){\n  \
    \              count++;\n            }\n        }\n        if(count === n){\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpf41lfejc.js:15\n            if(!isVowel(char)){\n            ^\n\
    \nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmpf41lfejc.js:15:13)\n\
    \    at test (/tmp/tmpf41lfejc.js:31:20)\n    at Object.<anonymous> (/tmp/tmpf41lfejc.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let letter = word[j];\n            if(letter !== 'a' && letter\
    \ !== 'e' && letter !== 'i' && letter !== 'o' && letter !== 'u'){\n          \
    \      count++;\n            }\n        }\n        if(count === n){\n        \
    \    result.push(word);\n        }\n    }\n    return result;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpj_szukga.js:34:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpj_szukga.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ === n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpiqs2jtpd.js:11\n        if(count_consonants(words[i]) === n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpiqs2jtpd.js:11:9)\n    at test (/tmp/tmpiqs2jtpd.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpiqs2jtpd.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ === n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpiqs2jtpd.js:11\n        if(count_consonants(words[i]) === n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpiqs2jtpd.js:11:9)\n    at test (/tmp/tmpiqs2jtpd.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpiqs2jtpd.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let word of words){\n        if(count_consonants(word)\
    \ === n){\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpjws35mre.js:11\n        if(count_consonants(word) === n){\n   \
    \     ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpjws35mre.js:11:9)\n    at test (/tmp/tmpjws35mre.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpjws35mre.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(!isVowel(word[j])){\n                count++;\n      \
    \      }\n        }\n        if(count === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpg1xjm2ka.js:14\n            if(!isVowel(word[j])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmpg1xjm2ka.js:14:13)\n\
    \    at test (/tmp/tmpg1xjm2ka.js:30:20)\n    at Object.<anonymous> (/tmp/tmpg1xjm2ka.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let word of words){\n        if(count_consonants(word)\
    \ === n){\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_3cctxhp.js:11\n        if(count_consonants(word) === n){\n   \
    \     ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp_3cctxhp.js:11:9)\n    at test (/tmp/tmp_3cctxhp.js:22:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp_3cctxhp.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        if(consonants(words[i])\
    \ == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpfv3jzite.js:11\n        if(consonants(words[i]) == n){\n      \
    \  ^\n\nReferenceError: consonants is not defined\n    at select_words (/tmp/tmpfv3jzite.js:11:9)\n\
    \    at test (/tmp/tmpfv3jzite.js:23:20)\n    at Object.<anonymous> (/tmp/tmpfv3jzite.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let consonants = 'bcdfghjklmnpqrstvwxyz';\n    let result = [];\n    for(let\
    \ i = 0; i < words.length; i++){\n        let count = 0;\n        for(let j =\
    \ 0; j < words[i].length; j++){\n            if(consonants.includes(words[i][j])){\n\
    \                count++;\n            }\n        }\n        if(count === n){\n\
    \            result.push(words[i]);\n        }\n    }\n    return result;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'lamb'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Mary',\n  'lamb'\n]\n    at test (/tmp/tmpf3dqe4ns.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpf3dqe4ns.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'lamb' ],\n\
    \  expected: [ 'Mary', 'lamb' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(!isVowel(word[j])){\n                count++;\n      \
    \      }\n        }\n        if(count === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpg1xjm2ka.js:14\n            if(!isVowel(word[j])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmpg1xjm2ka.js:14:13)\n\
    \    at test (/tmp/tmpg1xjm2ka.js:30:20)\n    at Object.<anonymous> (/tmp/tmpg1xjm2ka.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let arr = s.split(' ');\n    let\
    \ result = [];\n    for(let i = 0; i < arr.length; i++){\n        let word = arr[i];\n\
    \        let count = 0;\n        for(let j = 0; j < word.length; j++){\n     \
    \       if(!isVowel(word[j])){\n                count++;\n            }\n    \
    \    }\n        if(count === n){\n            result.push(word);\n        }\n\
    \    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpjwj66kp0.js:14\n            if(!isVowel(word[j])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmpjwj66kp0.js:14:13)\n\
    \    at test (/tmp/tmpjwj66kp0.js:29:20)\n    at Object.<anonymous> (/tmp/tmpjwj66kp0.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ === n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpiqs2jtpd.js:11\n        if(count_consonants(words[i]) === n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpiqs2jtpd.js:11:9)\n    at test (/tmp/tmpiqs2jtpd.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpiqs2jtpd.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        var\
    \ word = words[i];\n        var count = 0;\n        for(var j = 0; j < word.length;\
    \ j++){\n            var letter = word[j];\n            if(letter == \"a\" ||\
    \ letter == \"e\" || letter == \"i\" || letter == \"o\" || letter == \"u\"){\n\
    \                count++;\n            }\n        }\n        if(count == n){\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpvgp8d2l8.js:31:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpvgp8d2l8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var arr = s.split(\" \");\n   \
    \ var result = [];\n    for(var i = 0; i < arr.length; i++){\n        if(count_consonants(arr[i])\
    \ == n){\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpx_ogzfex.js:11\n        if(count_consonants(arr[i]) == n){\n  \
    \      ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpx_ogzfex.js:11:9)\n    at test (/tmp/tmpx_ogzfex.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpx_ogzfex.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let count\
    \ = 0;\n        for(let j = 0; j < words[i].length; j++){\n            if(words[i][j]\
    \ != 'a' && words[i][j] != 'e' && words[i][j] != 'i' && words[i][j] != 'o' &&\
    \ words[i][j] != 'u'){\n                count++;\n            }\n        }\n \
    \       if(count == n){\n            result.push(words[i]);\n        }\n    }\n\
    \    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpdig339jw.js:32:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpdig339jw.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let arr = s.split(' ');\n    let\
    \ result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i].match(/[^aeiou]/g)\
    \ && arr[i].match(/[^aeiou]/g).length === n){\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp7dc0rmu6.js:26:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp7dc0rmu6.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmplqx46xdb.js:11\n        if(count_consonants(words[i]) == n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmplqx46xdb.js:11:9)\n    at test (/tmp/tmplqx46xdb.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmplqx46xdb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    if(s === \"\"){\n        return\
    \ [];\n    }\n    let words = s.split(\" \");\n    let result = [];\n    for(let\
    \ i = 0; i < words.length; i++){\n        let word = words[i];\n        let count\
    \ = 0;\n        for(let j = 0; j < word.length; j++){\n            let letter\
    \ = word[j];\n            if(letter !== \"a\" && letter !== \"e\" && letter !==\
    \ \"i\" && letter !== \"o\" && letter !== \"u\"){\n                count++;\n\
    \            }\n        }\n        if(count === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpmn8j7j3k.js:37:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpmn8j7j3k.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let arr = s.split(' ');\n    let\
    \ result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(count_consonants(arr[i])\
    \ === n){\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpu_tnafb2.js:11\n        if(count_consonants(arr[i]) === n){\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpu_tnafb2.js:11:9)\n    at test (/tmp/tmpu_tnafb2.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpu_tnafb2.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ === n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp07cm_epz.js:11\n        if(count_consonants(words[i]) === n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp07cm_epz.js:11:9)\n    at test (/tmp/tmp07cm_epz.js:22:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp07cm_epz.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let letter = word[j];\n            if(!isVowel(letter)){\n\
    \                count++;\n            }\n        }\n        if(count === n){\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp4je16239.js:15\n            if(!isVowel(letter)){\n           \
    \ ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmp4je16239.js:15:13)\n\
    \    at test (/tmp/tmp4je16239.js:31:20)\n    at Object.<anonymous> (/tmp/tmp4je16239.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let consonants = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(!isVowel(word[j])){\n                consonants++;\n \
    \           }\n        }\n        if(consonants === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp03wx89qc.js:14\n            if(!isVowel(word[j])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmp03wx89qc.js:14:13)\n\
    \    at test (/tmp/tmp03wx89qc.js:30:20)\n    at Object.<anonymous> (/tmp/tmp03wx89qc.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(!isVowel(word[j])){\n                count++;\n      \
    \      }\n        }\n        if(count === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpg1xjm2ka.js:14\n            if(!isVowel(word[j])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmpg1xjm2ka.js:14:13)\n\
    \    at test (/tmp/tmpg1xjm2ka.js:30:20)\n    at Object.<anonymous> (/tmp/tmpg1xjm2ka.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmplqx46xdb.js:11\n        if(count_consonants(words[i]) == n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmplqx46xdb.js:11:9)\n    at test (/tmp/tmplqx46xdb.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmplqx46xdb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(!isVowel(word[j])){\n                count++;\n      \
    \      }\n        }\n        if(count === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpg1xjm2ka.js:14\n            if(!isVowel(word[j])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmpg1xjm2ka.js:14:13)\n\
    \    at test (/tmp/tmpg1xjm2ka.js:30:20)\n    at Object.<anonymous> (/tmp/tmpg1xjm2ka.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(!isVowel(word[j])){\n                count++;\n      \
    \      }\n        }\n        if(count === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpg1xjm2ka.js:14\n            if(!isVowel(word[j])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmpg1xjm2ka.js:14:13)\n\
    \    at test (/tmp/tmpg1xjm2ka.js:30:20)\n    at Object.<anonymous> (/tmp/tmpg1xjm2ka.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmplqx46xdb.js:11\n        if(count_consonants(words[i]) == n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmplqx46xdb.js:11:9)\n    at test (/tmp/tmplqx46xdb.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmplqx46xdb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        var\
    \ word = words[i];\n        var count = 0;\n        for(var j = 0; j < word.length;\
    \ j++){\n            var letter = word[j];\n            if(letter != \"a\" &&\
    \ letter != \"e\" && letter != \"i\" && letter != \"o\" && letter != \"u\"){\n\
    \                count++;\n            }\n        }\n        if(count == n){\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp_xr9fq2a.js:34:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp_xr9fq2a.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var str = s.split(' ');\n    var\
    \ arr = [];\n    for(var i = 0; i < str.length; i++){\n        var count = 0;\n\
    \        for(var j = 0; j < str[i].length; j++){\n            if(str[i][j] !=\
    \ 'a' && str[i][j] != 'e' && str[i][j] != 'i' && str[i][j] != 'o' && str[i][j]\
    \ != 'u'){\n                count++;\n            }\n        }\n        if(count\
    \ == n){\n            arr.push(str[i]);\n        }\n    }\n    return arr;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp83_kcfix.js:32:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp83_kcfix.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            let letter = word[j];\n            if(letter !== 'a' && letter\
    \ !== 'e' && letter !== 'i' && letter !== 'o' && letter !== 'u'){\n          \
    \      count++;\n            }\n        }\n        if(count === n){\n        \
    \    result.push(word);\n        }\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp10drvw8l.js:35:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp10drvw8l.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ === n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpiqs2jtpd.js:11\n        if(count_consonants(words[i]) === n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpiqs2jtpd.js:11:9)\n    at test (/tmp/tmpiqs2jtpd.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpiqs2jtpd.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmplqx46xdb.js:11\n        if(count_consonants(words[i]) == n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmplqx46xdb.js:11:9)\n    at test (/tmp/tmplqx46xdb.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmplqx46xdb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmplqx46xdb.js:11\n        if(count_consonants(words[i]) == n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmplqx46xdb.js:11:9)\n    at test (/tmp/tmplqx46xdb.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmplqx46xdb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let consonants = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(!isVowel(word[j])){\n                consonants++;\n \
    \           }\n        }\n        if(consonants === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp03wx89qc.js:14\n            if(!isVowel(word[j])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmp03wx89qc.js:14:13)\n\
    \    at test (/tmp/tmp03wx89qc.js:30:20)\n    at Object.<anonymous> (/tmp/tmp03wx89qc.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmplqx46xdb.js:11\n        if(count_consonants(words[i]) == n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmplqx46xdb.js:11:9)\n    at test (/tmp/tmplqx46xdb.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmplqx46xdb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        var\
    \ word = words[i];\n        var consonants = 0;\n        for(var j = 0; j < word.length;\
    \ j++){\n            var letter = word[j];\n            if(letter != \"a\" &&\
    \ letter != \"e\" && letter != \"i\" && letter != \"o\" && letter != \"u\"){\n\
    \                consonants++;\n            }\n        }\n        if(consonants\
    \ == n){\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpk1tjny7w.js:34:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpk1tjny7w.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    if(s.length === 0){\n        return\
    \ [];\n    }\n    let words = s.split(' ');\n    let result = [];\n    for(let\
    \ i = 0; i < words.length; i++){\n        let word = words[i];\n        let count\
    \ = 0;\n        for(let j = 0; j < word.length; j++){\n            if(word[j]\
    \ !== 'a' && word[j] !== 'e' && word[j] !== 'i' && word[j] !== 'o' && word[j]\
    \ !== 'u'){\n                count++;\n            }\n        }\n        if(count\
    \ === n){\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpv_zzj20r.js:36:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpv_zzj20r.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let consonants = 'bcdfghjklmnpqrstvwxyz';\n    let result = [];\n    for(let\
    \ i = 0; i < words.length; i++){\n        let count = 0;\n        for(let j =\
    \ 0; j < words[i].length; j++){\n            if(consonants.includes(words[i][j])){\n\
    \                count++;\n            }\n        }\n        if(count === n){\n\
    \            result.push(words[i]);\n        }\n    }\n    return result;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'lamb'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Mary',\n  'lamb'\n]\n    at test (/tmp/tmpf3dqe4ns.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpf3dqe4ns.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'lamb' ],\n\
    \  expected: [ 'Mary', 'lamb' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ === n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpiqs2jtpd.js:11\n        if(count_consonants(words[i]) === n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpiqs2jtpd.js:11:9)\n    at test (/tmp/tmpiqs2jtpd.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpiqs2jtpd.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ === n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpiqs2jtpd.js:11\n        if(count_consonants(words[i]) === n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpiqs2jtpd.js:11:9)\n    at test (/tmp/tmpiqs2jtpd.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpiqs2jtpd.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let cons = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(isConsonant(word[j])){\n                cons++;\n    \
    \        }\n        }\n        if(cons === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbe9d7siz.js:14\n            if(isConsonant(word[j])){\n       \
    \     ^\n\nReferenceError: isConsonant is not defined\n    at select_words (/tmp/tmpbe9d7siz.js:14:13)\n\
    \    at test (/tmp/tmpbe9d7siz.js:30:20)\n    at Object.<anonymous> (/tmp/tmpbe9d7siz.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(!isVowel(word[j])){\n                count++;\n      \
    \      }\n        }\n        if(count === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpg1xjm2ka.js:14\n            if(!isVowel(word[j])){\n          \
    \  ^\n\nReferenceError: isVowel is not defined\n    at select_words (/tmp/tmpg1xjm2ka.js:14:13)\n\
    \    at test (/tmp/tmpg1xjm2ka.js:30:20)\n    at Object.<anonymous> (/tmp/tmpg1xjm2ka.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n  let words = s.split(' ');\n  let\
    \ result = [];\n  for(let i = 0; i < words.length; i++){\n    let word = words[i];\n\
    \    let count = 0;\n    for(let j = 0; j < word.length; j++){\n      if(!isVowel(word[j])){\n\
    \        count++;\n      }\n    }\n    if(count === n){\n      result.push(word);\n\
    \    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpvu6tw87m.js:14\n      if(!isVowel(word[j])){\n      ^\n\nReferenceError:\
    \ isVowel is not defined\n    at select_words (/tmp/tmpvu6tw87m.js:14:7)\n   \
    \ at test (/tmp/tmpvu6tw87m.js:30:20)\n    at Object.<anonymous> (/tmp/tmpvu6tw87m.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        if(words[i].length\
    \ - words[i].replace(/[aeiou]/gi, '').length === n){\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpc92b_o24.js:22:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpc92b_o24.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let consonants = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(isConsonant(word[j])){\n                consonants++;\n\
    \            }\n        }\n        if(consonants === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmprzjqzhsx.js:14\n            if(isConsonant(word[j])){\n       \
    \     ^\n\nReferenceError: isConsonant is not defined\n    at select_words (/tmp/tmprzjqzhsx.js:14:13)\n\
    \    at test (/tmp/tmprzjqzhsx.js:30:20)\n    at Object.<anonymous> (/tmp/tmprzjqzhsx.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ === n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpiqs2jtpd.js:11\n        if(count_consonants(words[i]) === n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpiqs2jtpd.js:11:9)\n    at test (/tmp/tmpiqs2jtpd.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpiqs2jtpd.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < words.length; i++){\n        var\
    \ word = words[i];\n        var consonants = 0;\n        for(var j = 0; j < word.length;\
    \ j++){\n            var letter = word[j];\n            if(letter != \"a\" &&\
    \ letter != \"e\" && letter != \"i\" && letter != \"o\" && letter != \"u\"){\n\
    \                consonants++;\n            }\n        }\n        if(consonants\
    \ == n){\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpk1tjny7w.js:34:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpk1tjny7w.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = s.split(' ');\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        if(count_consonants(words[i])\
    \ === n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpiqs2jtpd.js:11\n        if(count_consonants(words[i]) === n){\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpiqs2jtpd.js:11:9)\n    at test (/tmp/tmpiqs2jtpd.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpiqs2jtpd.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977419
