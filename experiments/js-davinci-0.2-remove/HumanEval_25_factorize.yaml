name: HumanEval_25_factorize
language: js
prompt: "//Return list of prime factors of given integer in the order from smallest\
  \ to largest.\n// Each of the factors should be listed number of times corresponding\
  \ to how many times it appeares in factorization.\n// Input number should be equal\
  \ to the product of all factors\nfunction factorize(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
  \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
  \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
  \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n \
  \ assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
completions: ["    let factors = [];\n    let divisor = 2;\n    while (n > 2) {\n\
    \        if (n % divisor == 0) {\n            factors.push(divisor);\n       \
    \     n = n / divisor;\n        } else {\n            divisor++;\n        }\n\
    \    }\n    return factors;\n}\n", "    let factors = [];\n    let i = 2;\n  \
    \  while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return factors;\n}\n", "    let factors = [];\n    let prime = 2;\n    while\
    \ (n > 1) {\n        if (n % prime == 0) {\n            factors.push(prime);\n\
    \            n = n / prime;\n        } else {\n            prime++;\n        }\n\
    \    }\n    return factors;\n}\n", "    let factors = [];\n    let divisor = 2;\n\
    \    while (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let divisor\
    \ = 2;\n    while (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let i =\
    \ 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return factors;\n}\n", "    let result = [];\n    let prime = 2;\n    while\
    \ (n > 1) {\n        while (n % prime === 0) {\n            result.push(prime);\n\
    \            n /= prime;\n        }\n        prime++;\n    }\n    return result;\n\
    }\n", "    let factors = [];\n    let i = 2;\n    while (n > 1) {\n        while\
    \ (n % i === 0) {\n            factors.push(i);\n            n /= i;\n       \
    \ }\n        i++;\n    }\n    return factors;\n}\n", "    let result = [];\n \
    \   let i = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            result.push(i);\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return result;\n}\n", "    let factors = [];\n    let divisor = 2;\n    while\
    \ (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let primes\
    \ = getPrimes(n);\n    let i = 0;\n    while(n > 1){\n        if(n % primes[i]\
    \ === 0){\n            factors.push(primes[i]);\n            n = n / primes[i];\n\
    \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
  "    let result = [];\n    let i = 2;\n    while (n > 1) {\n        if (n % i ===\
    \ 0) {\n            result.push(i);\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return result;\n}\n", "    let factors\
    \ = [];\n    let divisor = 2;\n    while (n > 2) {\n        if (n % divisor ==\
    \ 0) {\n            factors.push(divisor);\n            n = n / divisor;\n   \
    \     } else {\n            divisor++;\n        }\n    }\n    return factors;\n\
    }\n", "    let factors = [];\n    let divisor = 2;\n    while (n > 2) {\n    \
    \    if (n % divisor == 0) {\n            factors.push(divisor);\n           \
    \ n = n / divisor;\n        } else {\n            divisor++;\n        }\n    }\n\
    \    return factors;\n}\n", "    let factors = [];\n    for (let i = 2; i <= n;\
    \ i++) {\n        while (n % i === 0) {\n            factors.push(i);\n      \
    \      n /= i;\n        }\n    }\n    return factors;\n}\n", "    let factors\
    \ = [];\n    let divisor = 2;\n    while (n > 2) {\n        if (n % divisor ==\
    \ 0) {\n            factors.push(divisor);\n            n = n / divisor;\n   \
    \     } else {\n            divisor++;\n        }\n    }\n    return factors;\n\
    }\n", "    let factors = [];\n    let divisor = 2;\n    while (n > 2) {\n    \
    \    if (n % divisor == 0) {\n            factors.push(divisor);\n           \
    \ n = n / divisor;\n        } else {\n            divisor++;\n        }\n    }\n\
    \    return factors;\n}\n", "    let factors = [];\n    let prime = 2;\n    while\
    \ (n > 1) {\n        if (n % prime === 0) {\n            factors.push(prime);\n\
    \            n = n / prime;\n        } else {\n            prime++;\n        }\n\
    \    }\n    return factors;\n}\n", "    let factors = [];\n    let i = 2;\n  \
    \  while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return factors;\n}\n", "    let factors = [];\n    let i = 2;\n    while (n\
    \ > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n         \
    \   n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ factors;\n}\n", "    let factors = [];\n    let prime = 2;\n    while (n > 1)\
    \ {\n        while (n % prime === 0) {\n            factors.push(prime);\n   \
    \         n = n / prime;\n        }\n        prime++;\n    }\n    return factors;\n\
    }\n", "    let factors = [];\n    let divisor = 2;\n    while (n > 2) {\n    \
    \    if (n % divisor == 0) {\n            factors.push(divisor);\n           \
    \ n = n / divisor;\n        } else {\n            divisor++;\n        }\n    }\n\
    \    return factors;\n}\n", "    let factors = [];\n    let i = 2;\n    while\
    \ (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n   \
    \         n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
  "    let factors = [];\n    let i = 2;\n    while (n > 1) {\n        while (n %\
    \ i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n \
    \       i++;\n    }\n    return factors;\n}\n", "    let factors = [];\n    let\
    \ divisor = 2;\n    while (n > 2) {\n        if (n % divisor == 0) {\n       \
    \     factors.push(divisor);\n            n = n / divisor;\n        } else {\n\
    \            divisor++;\n        }\n    }\n    return factors;\n}\n", "    let\
    \ factors = [];\n    let divisor = 2;\n    while (n > 2) {\n        if (n % divisor\
    \ == 0) {\n            factors.push(divisor);\n            n = n / divisor;\n\
    \        } else {\n            divisor++;\n        }\n    }\n    return factors;\n\
    }\n", "    let factors = [];\n    let i = 2;\n    while (n > 1) {\n        while\
    \ (n % i === 0) {\n            factors.push(i);\n            n /= i;\n       \
    \ }\n        i++;\n    }\n    return factors;\n}\n", "    let factors = [];\n\
    \    let divisor = 2;\n    while (n > 2) {\n        if (n % divisor == 0) {\n\
    \            factors.push(divisor);\n            n = n / divisor;\n        } else\
    \ {\n            divisor++;\n        }\n    }\n    return factors;\n}\n", "  \
    \  let factors = [];\n    let divisor = 2;\n    while (n > 2) {\n        if (n\
    \ % divisor == 0) {\n            factors.push(divisor);\n            n = n / divisor;\n\
    \        } else {\n            divisor++;\n        }\n    }\n    return factors;\n\
    }\n", "    let factors = [];\n    let divisor = 2;\n    while (n > 2) {\n    \
    \    if (n % divisor == 0) {\n            factors.push(divisor);\n           \
    \ n = n / divisor;\n        } else {\n            divisor++;\n        }\n    }\n\
    \    return factors;\n}\n", "    let result = [];\n    let i = 2;\n    while (n\
    \ > 1) {\n        if (n % i === 0) {\n            result.push(i);\n          \
    \  n /= i;\n        } else {\n            i++;\n        }\n    }\n    return result;\n\
    }\n", "    let factors = [];\n    let divisor = 2;\n    while (n > 2) {\n    \
    \    if (n % divisor == 0) {\n            factors.push(divisor);\n           \
    \ n = n / divisor;\n        } else {\n            divisor++;\n        }\n    }\n\
    \    return factors;\n}\n", "    let factors = [];\n    let divisor = 2;\n   \
    \ while (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let divisor\
    \ = 2;\n    while (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    var factors = [];\n    var divisor\
    \ = 2;\n    while(n > 2){\n        if(n % divisor == 0){\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        }\n        else{\n            divisor++;\n\
    \        }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let\
    \ i = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
  "    let factors = [];\n    let divisor = 2;\n    while (n > 2) {\n        if (n\
    \ % divisor == 0) {\n            factors.push(divisor);\n            n = n / divisor;\n\
    \        } else {\n            divisor++;\n        }\n    }\n    return factors;\n\
    }\n", "    let result = [];\n    let i = 2;\n    while (n > 1) {\n        if (n\
    \ % i === 0) {\n            result.push(i);\n            n /= i;\n        } else\
    \ {\n            i++;\n        }\n    }\n    return result;\n}\n", "    let factors\
    \ = [];\n    let divisor = 2;\n    while (n > 2) {\n        if (n % divisor ==\
    \ 0) {\n            factors.push(divisor);\n            n = n / divisor;\n   \
    \     } else {\n            divisor++;\n        }\n    }\n    return factors;\n\
    }\n", "    let factors = [];\n    let divisor = 2;\n    while (n > 2) {\n    \
    \    if (n % divisor == 0) {\n            factors.push(divisor);\n           \
    \ n = n / divisor;\n        } else {\n            divisor++;\n        }\n    }\n\
    \    return factors;\n}\n", "    let factors = [];\n    let i = 2;\n    while\
    \ (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n   \
    \         n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
  "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n\
    \      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return factors;\n\
    }\n", "    let factors = [];\n    let factor = 2;\n    while (n > 1) {\n     \
    \   while (n % factor === 0) {\n            factors.push(factor);\n          \
    \  n /= factor;\n        }\n        factor++;\n    }\n    return factors;\n}\n",
  "    let factors = [];\n    let divisor = 2;\n    while (n > 2) {\n        if (n\
    \ % divisor == 0) {\n            factors.push(divisor);\n            n = n / divisor;\n\
    \        } else {\n            divisor++;\n        }\n    }\n    return factors;\n\
    }\n", "    let factors = [];\n    let i = 2;\n    while (n > 1) {\n        while\
    \ (n % i === 0) {\n            factors.push(i);\n            n /= i;\n       \
    \ }\n        i++;\n    }\n    return factors;\n}\n", "    let factors = [];\n\
    \    let i = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i++;\n\
    \        }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let\
    \ i = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return factors;\n}", "    var factors = [];\n    var divisor = 2;\n    while(n\
    \ > 2){\n        if(n % divisor == 0){\n            factors.push(divisor);\n \
    \           n = n / divisor;\n        }\n        else{\n            divisor++;\n\
    \        }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let\
    \ divisor = 2;\n    while (n > 2) {\n        if (n % divisor == 0) {\n       \
    \     factors.push(divisor);\n            n = n / divisor;\n        } else {\n\
    \            divisor++;\n        }\n    }\n    return factors;\n}\n", "    let\
    \ factors = [];\n    let i = 2;\n    while (n > 1) {\n        if (n % i === 0)\
    \ {\n            factors.push(i);\n            n /= i;\n        } else {\n   \
    \         i++;\n        }\n    }\n    return factors;\n}\n", "    if(n<=1) return\
    \ [];\n    let factors = [];\n    let i = 2;\n    while(n>1){\n        if(n%i===0){\n\
    \            factors.push(i);\n            n = n/i;\n        }else{\n        \
    \    i++;\n        }\n    }\n    return factors;\n}\n", "    var factors = [];\n\
    \    var divisor = 2;\n    while(n > 2){\n        if(n % divisor == 0){\n    \
    \        factors.push(divisor);\n            n = n / divisor;\n        }\n   \
    \     else{\n            divisor++;\n        }\n    }\n    return factors;\n}\n",
  "    let factors = [];\n    let i = 2;\n    while (n > 1) {\n        if (n % i ===\
    \ 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n\
    \            i++;\n        }\n    }\n    return factors;\n}\n", "    let factors\
    \ = [];\n    let divisor = 2;\n    while (n > 2) {\n        if (n % divisor ==\
    \ 0) {\n            factors.push(divisor);\n            n = n / divisor;\n   \
    \     } else {\n            divisor++;\n        }\n    }\n    return factors;\n\
    }\n", "    let primeFactors = [];\n    let i = 2;\n    while (n > 1) {\n     \
    \   if (n % i === 0) {\n            primeFactors.push(i);\n            n = n /\
    \ i;\n        } else {\n            i++;\n        }\n    }\n    return primeFactors;\n\
    }\n", "    let factors = [];\n    let i = 2;\n    while (n > 1) {\n        if\
    \ (n % i === 0) {\n            factors.push(i);\n            n /= i;\n       \
    \ } else {\n            i++;\n        }\n    }\n    return factors;\n}\n", " \
    \   let factors = [];\n    let divisor = 2;\n    while (n > 2) {\n        if (n\
    \ % divisor == 0) {\n            factors.push(divisor);\n            n = n / divisor;\n\
    \        } else {\n            divisor++;\n        }\n    }\n    return factors;\n\
    }\n", "    let factors = [];\n    let i = 2;\n    while (n > 1) {\n        while\
    \ (n % i === 0) {\n            factors.push(i);\n            n /= i;\n       \
    \ }\n        i++;\n    }\n    return factors;\n}\n", "    let result = [];\n \
    \   let prime = 2;\n    while (n > 1) {\n        while (n % prime === 0) {\n \
    \           result.push(prime);\n            n /= prime;\n        }\n        prime++;\n\
    \    }\n    return result;\n}\n", "    let factors = [];\n    let divisor = 2;\n\
    \    while (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let divisor\
    \ = 2;\n    while (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let i =\
    \ 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
  "    let factors = [];\n    let i = 2;\n    while (n > 1) {\n        if (n % i ===\
    \ 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n\
    \            i++;\n        }\n    }\n    return factors;\n}\n", "    let factors\
    \ = [];\n    let i = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n\
    \            factors.push(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    return factors;\n}\n", "    let factors = [];\n    let divisor = 2;\n\
    \    while (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let divisor\
    \ = 2;\n    while (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let i =\
    \ 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
  "    let result = [];\n    let i = 2;\n    while (n > 1) {\n        if (n % i ===\
    \ 0) {\n            result.push(i);\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return result;\n}\n", "    let result\
    \ = [];\n    let i = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n\
    \            result.push(i);\n            n /= i;\n        }\n        i++;\n \
    \   }\n    return result;\n}\n", "    let factors = [];\n    let i = 2;\n    while\
    \ (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n      \
    \      n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ factors;\n}\n", "    let result = [];\n    let divisor = 2;\n    while (n >\
    \ 1) {\n        if (n % divisor === 0) {\n            result.push(divisor);\n\
    \            n /= divisor;\n        } else {\n            divisor++;\n       \
    \ }\n    }\n    return result;\n}\n", "    let factors = [];\n    let divisor\
    \ = 2;\n    while (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let divisor\
    \ = 2;\n    while (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let divisor\
    \ = 2;\n    while (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let divisor\
    \ = 2;\n    while (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let i =\
    \ 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
  "    let factors = [];\n    let divisor = 2;\n    while (n > 2) {\n        if (n\
    \ % divisor == 0) {\n            factors.push(divisor);\n            n = n / divisor;\n\
    \        } else {\n            divisor++;\n        }\n    }\n    return factors;\n\
    }\n", "    let factors = [];\n    let divisor = 2;\n    while (n > 2) {\n    \
    \    if (n % divisor == 0) {\n            factors.push(divisor);\n           \
    \ n = n / divisor;\n        } else {\n            divisor++;\n        }\n    }\n\
    \    return factors;\n}\n", "    let factors = [];\n    let divisor = 2;\n   \
    \ while (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let divisor\
    \ = 2;\n    while (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let divisor\
    \ = 2;\n    while (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let i =\
    \ 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return factors;\n}\n", "    let factors = [];\n    let i = 2;\n    while (n\
    \ > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n      \
    \      n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n", " \
    \   let factors = [];\n    let divisor = 2;\n    while (n > 2) {\n        if (n\
    \ % divisor == 0) {\n            factors.push(divisor);\n            n = n / divisor;\n\
    \        } else {\n            divisor++;\n        }\n    }\n    return factors;\n\
    }\n", "    let factors = [];\n    let divisor = 2;\n    while (n > 2) {\n    \
    \    if (n % divisor == 0) {\n            factors.push(divisor);\n           \
    \ n = n / divisor;\n        } else {\n            divisor++;\n        }\n    }\n\
    \    return factors;\n}\n", "    let factors = [];\n    let divisor = 2;\n   \
    \ while (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let result = [];\n    let prime\
    \ = 2;\n    while (n > 1) {\n        while (n % prime === 0) {\n            result.push(prime);\n\
    \            n /= prime;\n        }\n        prime++;\n    }\n    return result;\n\
    }\n", "    let factors = [];\n    let i = 2;\n    while (n > 1) {\n        while\
    \ (n % i === 0) {\n            factors.push(i);\n            n /= i;\n       \
    \ }\n        i++;\n    }\n    return factors;\n}\n", "    let factors = [];\n\
    \    let divisor = 2;\n    while (n > 2) {\n        if (n % divisor == 0) {\n\
    \            factors.push(divisor);\n            n = n / divisor;\n        } else\
    \ {\n            divisor++;\n        }\n    }\n    return factors;\n}\n", "  \
    \  let factors = [];\n    let i = 2;\n    while (n > 1) {\n        if (n % i ===\
    \ 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n\
    \            i++;\n        }\n    }\n    return factors;\n}\n", "    let factors\
    \ = [];\n    let divisor = 2;\n    while (n > 2) {\n        if (n % divisor ==\
    \ 0) {\n            factors.push(divisor);\n            n = n / divisor;\n   \
    \     } else {\n            divisor++;\n        }\n    }\n    return factors;\n\
    }\n", "  let factors = [];\n  let primes = [];\n  let i = 2;\n  while (i <= n)\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else\
    \ {\n      i++;\n    }\n  }\n  for (let i = 0; i < factors.length; i++) {\n  \
    \  if (primes.indexOf(factors[i]) === -1) {\n      primes.push(factors[i]);\n\
    \    }\n  }\n  let result = [];\n  for (let i = 0; i < primes.length; i++) {\n\
    \    let count = 0;\n    for (let j = 0; j < factors.length; j++) {\n      if\
    \ (primes[i] === factors[j]) {\n        count++;\n      }\n    }\n    result.push(count);\n\
    \  }\n  return result;\n}\n", "    let factors = [];\n    let divisor = 2;\n \
    \   while (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let divisor\
    \ = 2;\n    while (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let divisor\
    \ = 2;\n    while (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let divisor\
    \ = 2;\n    while (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let divisor\
    \ = 2;\n    while (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let divisor\
    \ = 2;\n    while (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let result = [];\n    let i = 2;\n\
    \    while (n > 1) {\n        while (n % i === 0) {\n            result.push(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return result;\n}\n",
  "    let factors = [];\n    let primes = getPrimes(n);\n    for (let i = 0; i <\
    \ primes.length; i++) {\n        if (n % primes[i] === 0) {\n            factors.push(primes[i]);\n\
    \            n = n / primes[i];\n            i--;\n        }\n    }\n    return\
    \ factors;\n}\n", "    let factors = [];\n    let divisor = 2;\n    while (n >\
    \ 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let divisor\
    \ = 2;\n    while (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let divisor\
    \ = 2;\n    while (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let divisor\
    \ = 2;\n    while (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    for (let\
    \ i = 2; i <= n; i++) {\n        while (n % i === 0) {\n            factors.push(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\n", "    let factors\
    \ = [];\n    let divisor = 2;\n    while (n > 2) {\n        if (n % divisor ==\
    \ 0) {\n            factors.push(divisor);\n            n = n / divisor;\n   \
    \     } else {\n            divisor++;\n        }\n    }\n    return factors;\n\
    }\n", "    let factors = [];\n    let prime = 2;\n    while (n > 1) {\n      \
    \  while (n % prime === 0) {\n            factors.push(prime);\n            n\
    \ = n / prime;\n        }\n        prime++;\n    }\n    return factors;\n}\n",
  "    let factors = [];\n    let divisor = 2;\n    while (n > 2) {\n        if (n\
    \ % divisor == 0) {\n            factors.push(divisor);\n            n = n / divisor;\n\
    \        } else {\n            divisor++;\n        }\n    }\n    return factors;\n\
    }\n", "    let factors = [];\n    let i = 2;\n    while (n > 1) {\n        while\
    \ (n % i === 0) {\n            factors.push(i);\n            n /= i;\n       \
    \ }\n        i++;\n    }\n    return factors;\n}\n", "    let factors = [];\n\
    \    let i = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n        \
    \    factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n \
    \   return factors;\n}\n", "    let factors = [];\n    let i = 2;\n    while (n\
    \ > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n      \
    \      n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n", " \
    \   let factors = [];\n    let prime = 2;\n    while (n > 1) {\n        if (n\
    \ % prime === 0) {\n            factors.push(prime);\n            n = n / prime;\n\
    \        } else {\n            prime++;\n        }\n    }\n    return factors;\n\
    }\n", "    let factors = [];\n    let prime = 2;\n    while (n > 1) {\n      \
    \  while (n % prime === 0) {\n            factors.push(prime);\n            n\
    \ = n / prime;\n        }\n        prime++;\n    }\n    return factors;\n}\n",
  "    let factors = [];\n    let divisor = 2;\n    while (n > 2) {\n        if (n\
    \ % divisor == 0) {\n            factors.push(divisor);\n            n = n / divisor;\n\
    \        } else {\n            divisor++;\n        }\n    }\n    return factors;\n\
    }\n", "    let result = [];\n    let i = 2;\n    while (n > 1) {\n        if (n\
    \ % i === 0) {\n            result.push(i);\n            n /= i;\n        } else\
    \ {\n            i++;\n        }\n    }\n    return result;\n}\n", "    let factors\
    \ = [];\n    let divisor = 2;\n    while (n > 2) {\n        if (n % divisor ==\
    \ 0) {\n            factors.push(divisor);\n            n = n / divisor;\n   \
    \     } else {\n            divisor++;\n        }\n    }\n    return factors;\n\
    }\n", "    let factors = [];\n    let divisor = 2;\n    while (n > 2) {\n    \
    \    if (n % divisor == 0) {\n            factors.push(divisor);\n           \
    \ n = n / divisor;\n        } else {\n            divisor++;\n        }\n    }\n\
    \    return factors;\n}\n", "    let result = [];\n    let i = 2;\n    while (n\
    \ > 1) {\n        while (n % i === 0) {\n            result.push(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    return result;\n}\n", "   \
    \ let factors = [];\n    let divisor = 2;\n    while (n > 2) {\n        if (n\
    \ % divisor == 0) {\n            factors.push(divisor);\n            n = n / divisor;\n\
    \        } else {\n            divisor++;\n        }\n    }\n    return factors;\n\
    }\n", "    let factors = [];\n    let divisor = 2;\n    while (n > 2) {\n    \
    \    if (n % divisor == 0) {\n            factors.push(divisor);\n           \
    \ n = n / divisor;\n        } else {\n            divisor++;\n        }\n    }\n\
    \    return factors;\n}\n", "    let factors = [];\n    let divisor = 2;\n   \
    \ while (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let divisor\
    \ = 2;\n    while (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let divisor\
    \ = 2;\n    while (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let i =\
    \ 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
  "    let factors = [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i\
    \ === 0) {\n            factors.push(i);\n            n /= i;\n        }\n   \
    \ }\n    return factors;\n}\n", "    let factors = [];\n    let i = 2;\n    while\
    \ (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n      \
    \      n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ factors;\n}\n", "    let primeFactors = [];\n    let divisor = 2;\n    while\
    \ (n > 2) {\n        if (n % divisor === 0) {\n            primeFactors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return primeFactors;\n}\n", "    var factors = [];\n    var\
    \ divisor = 2;\n    while(n > 2){\n        if(n % divisor == 0){\n           \
    \ factors.push(divisor);\n            n = n / divisor;\n        }\n        else{\n\
    \            divisor++;\n        }\n    }\n    return factors;\n}", "    let factors\
    \ = [];\n    let i = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n\
    \            factors.push(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    return factors;\n}\n", "    let factors = [];\n    let divisor = 2;\n\
    \    while (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let i =\
    \ 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return factors;\n}\n", "    let factors = [];\n    let i = 2;\n    while (n\
    \ > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n         \
    \   n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ factors;\n}\n", "    let factors = [];\n    let divisor = 2;\n    while (n >\
    \ 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let i =\
    \ 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
  "    let factors = [];\n    let i = 2;\n    while (n > 1) {\n        if (n % i ===\
    \ 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n\
    \            i++;\n        }\n    }\n    return factors;\n}\n", "    let factors\
    \ = [];\n    let divisor = 2;\n    while (n > 2) {\n        if (n % divisor ==\
    \ 0) {\n            factors.push(divisor);\n            n = n / divisor;\n   \
    \     } else {\n            divisor++;\n        }\n    }\n    return factors;\n\
    }\n", "    let factors = [];\n    let divisor = 2;\n    while (n > 2) {\n    \
    \    if (n % divisor == 0) {\n            factors.push(divisor);\n           \
    \ n = n / divisor;\n        } else {\n            divisor++;\n        }\n    }\n\
    \    return factors;\n}\n", "    let factors = [];\n    let i = 2;\n    while\
    \ (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n      \
    \      n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ factors;\n}\n", "    let result = [];\n    let i = 2;\n    while (n > 1) {\n\
    \        while (n % i === 0) {\n            result.push(i);\n            n /=\
    \ i;\n        }\n        i++;\n    }\n    return result;\n}\n", "    let factors\
    \ = [];\n    let i = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n   \
    \         factors.push(i);\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return factors;\n}\n", "    let factors = [];\n\
    \    for (let i = 2; i <= n; i++) {\n        while (n % i === 0) {\n         \
    \   factors.push(i);\n            n /= i;\n        }\n    }\n    return factors;\n\
    }\n", "    let factors = [];\n    let i = 2;\n    while (n > 1) {\n        if\
    \ (n % i === 0) {\n            factors.push(i);\n            n /= i;\n       \
    \ } else {\n            i++;\n        }\n    }\n    return factors;\n}\n", " \
    \   let factors = [];\n    let prime = 2;\n    while (n > 1) {\n        while\
    \ (n % prime === 0) {\n            factors.push(prime);\n            n = n / prime;\n\
    \        }\n        prime++;\n    }\n    return factors;\n}\n", "    let factors\
    \ = [];\n    let i = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n\
    \            factors.push(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    return factors;\n}\n", "    let result = [];\n    let i = 2;\n   \
    \ while (n > 1) {\n        if (n % i === 0) {\n            result.push(i);\n \
    \           n /= i;\n        } else {\n            i++;\n        }\n    }\n  \
    \  return result;\n}\n", "    let factors = [];\n    let i = 2;\n    while (n\
    \ > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n      \
    \      n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n", " \
    \   let factors = [];\n    let primeFactors = [];\n    let prime = 2;\n    while\
    \ (n > 1) {\n        while (n % prime === 0) {\n            factors.push(prime);\n\
    \            n = n / prime;\n        }\n        prime++;\n    }\n    let current\
    \ = null;\n    let cnt = 0;\n    for (let i = 0; i < factors.length; i++) {\n\
    \        if (factors[i] !== current) {\n            if (cnt > 0) {\n         \
    \       primeFactors.push(cnt);\n            }\n            current = factors[i];\n\
    \            cnt = 1;\n        } else {\n            cnt++;\n        }\n    }\n\
    \    if (cnt > 0) {\n        primeFactors.push(cnt);\n    }\n    return primeFactors;\n\
    }\n", "    let result = [];\n    let prime = 2;\n    while (n > 1) {\n       \
    \ while (n % prime === 0) {\n            result.push(prime);\n            n /=\
    \ prime;\n        }\n        prime++;\n    }\n    return result;\n}\n", "    let\
    \ factors = [];\n    let divisor = 2;\n    while (n > 2) {\n        if (n % divisor\
    \ == 0) {\n            factors.push(divisor);\n            n = n / divisor;\n\
    \        } else {\n            divisor++;\n        }\n    }\n    return factors;\n\
    }\n", "    let factors = [];\n    let i = 2;\n    while (n > 1) {\n        while\
    \ (n % i === 0) {\n            factors.push(i);\n            n /= i;\n       \
    \ }\n        i++;\n    }\n    return factors;\n}\n", "    let result = [];\n \
    \   let i = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n         \
    \   result.push(i);\n            n /= i;\n        }\n        i++;\n    }\n   \
    \ return result;\n}\n", "    let factors = [];\n    let i = 2;\n    while (n >\
    \ 1) {\n        if (n % i === 0) {\n            factors.push(i);\n           \
    \ n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n\
    }\n", "    var factors = [];\n    var divisor = 2;\n    while(n > 2){\n      \
    \  if(n % divisor == 0){\n            factors.push(divisor);\n            n =\
    \ n / divisor;\n        } else {\n            divisor++;\n        }\n    }\n \
    \   return factors;\n}\n", "    let factors = [];\n    let divisor = 2;\n    while\
    \ (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let primeFactors = [];\n    let\
    \ i = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            primeFactors.push(i);\n\
    \            n = n / i;\n        } else {\n            i++;\n        }\n    }\n\
    \    return primeFactors;\n}\n", "    let factors = [];\n    let divisor = 2;\n\
    \    while (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let divisor\
    \ = 2;\n    while (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let result = [];\n    let i = 2;\n\
    \    while (n > 1) {\n        if (n % i === 0) {\n            result.push(i);\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return result;\n}\n", "    let result = [];\n    let i = 2;\n    while (n\
    \ > 1) {\n        if (n % i === 0) {\n            result.push(i);\n          \
    \  n /= i;\n        } else {\n            i++;\n        }\n    }\n    return result;\n\
    }\n", "    let factors = [];\n    let divisor = 2;\n    while (n > 2) {\n    \
    \    if (n % divisor == 0) {\n            factors.push(divisor);\n           \
    \ n = n / divisor;\n        } else {\n            divisor++;\n        }\n    }\n\
    \    return factors;\n}\n", "    let factors = [];\n    for (let i = 2; i <= n;\
    \ i++) {\n        while (n % i === 0) {\n            factors.push(i);\n      \
    \      n /= i;\n        }\n    }\n    return factors;\n}\n", "    let factors\
    \ = [];\n    let i = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n   \
    \         factors.push(i);\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return factors;\n}\n", "    let factors = [];\n\
    \    let i = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n        \
    \    factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n \
    \   return factors;\n}\n", "    let factors = [];\n    let i = 2;\n    while (n\
    \ > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n         \
    \   n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ factors;\n}\n", "    let factors = [];\n    let divisor = 2;\n    while (n >\
    \ 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let i =\
    \ 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return factors;\n}\n", "    let factors = [];\n    let i = 2;\n    while (n\
    \ > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n      \
    \      n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n", " \
    \   let factors = [];\n    let i = 2;\n    while (n > 1) {\n        if (n % i\
    \ === 0) {\n            factors.push(i);\n            n /= i;\n        } else\
    \ {\n            i++;\n        }\n    }\n    return factors;\n}\n", "    let factors\
    \ = [];\n    let i = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n\
    \            factors.push(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    return factors;\n}\n", "    let factors = [];\n    let i = 2;\n  \
    \  while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return factors;\n}\n", "    let factors = [];\n    let divisor = 2;\n    while\
    \ (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let i =\
    \ 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return factors;\n}\n", "    let factors = [];\n    let divisor = 2;\n    while\
    \ (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let result = [];\n    let prime\
    \ = 2;\n    while (n > 1) {\n        while (n % prime === 0) {\n            result.push(prime);\n\
    \            n /= prime;\n        }\n        prime++;\n    }\n    return result;\n\
    }\n", "    let factors = [];\n    let i = 2;\n    while (n > 1) {\n        if\
    \ (n % i === 0) {\n            factors.push(i);\n            n /= i;\n       \
    \ } else {\n            i++;\n        }\n    }\n    return factors;\n}\n", " \
    \   let factors = [];\n    let i = 2;\n    while (n > 1) {\n        if (n % i\
    \ === 0) {\n            factors.push(i);\n            n /= i;\n        } else\
    \ {\n            i++;\n        }\n    }\n    return factors;\n}\n", "    let factors\
    \ = [];\n    let divisor = 2;\n    while (n > 2) {\n        if (n % divisor ==\
    \ 0) {\n            factors.push(divisor);\n            n = n / divisor;\n   \
    \     } else {\n            divisor++;\n        }\n    }\n    return factors;\n\
    }\n", "    let factors = [];\n    let divisor = 2;\n    while (n > 2) {\n    \
    \    if (n % divisor == 0) {\n            factors.push(divisor);\n           \
    \ n = n / divisor;\n        } else {\n            divisor++;\n        }\n    }\n\
    \    return factors;\n}\n", "    let factors = [];\n    let divisor = 2;\n   \
    \ while (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let i =\
    \ 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
  "    var factors = [];\n    var divisor = 2;\n    while(n > 2){\n        if(n %\
    \ divisor == 0){\n            factors.push(divisor);\n            n = n / divisor;\n\
    \        }\n        else{\n            divisor++;\n        }\n    }\n    return\
    \ factors;\n}\n", "    let factors = [];\n    let divisor = 2;\n    while (n >\
    \ 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let i =\
    \ 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
  "    let factors = [];\n    let prime = 2;\n    while (n > 1) {\n        while (n\
    \ % prime === 0) {\n            factors.push(prime);\n            n = n / prime;\n\
    \        }\n        prime++;\n    }\n    return factors;\n}\n", "    let factors\
    \ = [];\n    let i = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n\
    \            factors.push(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    return factors;\n}\n", "    let primeFactors = [];\n    let divisor\
    \ = 2;\n    while (n > 2) {\n        if (n % divisor === 0) {\n            primeFactors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return primeFactors;\n}\n", "    let result = [];\n    let\
    \ i = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            result.push(i);\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return result;\n}\n", "    let factors = [];\n    let divisor = 2;\n    while\
    \ (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let prime\
    \ = 2;\n    while (n > 1) {\n        while (n % prime === 0) {\n            factors.push(prime);\n\
    \            n = n / prime;\n        }\n        prime++;\n    }\n    return factors;\n\
    }\n", "    let factors = [];\n    let divisor = 2;\n    while (n > 2) {\n    \
    \    if (n % divisor == 0) {\n            factors.push(divisor);\n           \
    \ n = n / divisor;\n        } else {\n            divisor++;\n        }\n    }\n\
    \    return factors;\n}\n", "    let factors = [];\n    let divisor = 2;\n   \
    \ while (n > 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let primeFactors = [];\n    let\
    \ i = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            primeFactors.push(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return primeFactors;\n\
    }\n", "    let factors = [];\n    let divisor = 2;\n    while (n > 2) {\n    \
    \    if (n % divisor == 0) {\n            factors.push(divisor);\n           \
    \ n = n / divisor;\n        } else {\n            divisor++;\n        }\n    }\n\
    \    return factors;\n}\n", "    let factors = [];\n    let i = 2;\n    while\
    \ (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n   \
    \         n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
  "    let result = [];\n    let i = 2;\n    while (n > 1) {\n        if (n % i ===\
    \ 0) {\n            result.push(i);\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return result;\n}\n", "    let factors\
    \ = [];\n    let divisor = 2;\n    while (n > 2) {\n        if (n % divisor ==\
    \ 0) {\n            factors.push(divisor);\n            n = n / divisor;\n   \
    \     } else {\n            divisor++;\n        }\n    }\n    return factors;\n\
    }\n", "    let factors = [];\n    let divisor = 2;\n    while (n > 2) {\n    \
    \    if (n % divisor == 0) {\n            factors.push(divisor);\n           \
    \ n = n / divisor;\n        } else {\n            divisor++;\n        }\n    }\n\
    \    return factors;\n}\n", "    let factors = [];\n    let prime = 2;\n    while\
    \ (n > 1) {\n        if (n % prime === 0) {\n            factors.push(prime);\n\
    \            n = n / prime;\n        } else {\n            prime++;\n        }\n\
    \    }\n    return factors;\n}\n", "    let result = [];\n    let i = 2;\n   \
    \ while (n > 1) {\n        while (n % i === 0) {\n            result.push(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return result;\n}\n",
  "    let factors = [];\n    let i = 2;\n    while (n > 1) {\n        while (n %\
    \ i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n \
    \       i++;\n    }\n    return factors;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
