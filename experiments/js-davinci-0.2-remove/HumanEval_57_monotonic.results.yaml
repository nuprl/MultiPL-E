language: js
name: HumanEval_57_monotonic
results:
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n  var increasing = true;\n  var decreasing = true;\n \
    \ for(var i = 0; i < l.length - 1; i++){\n    if(l[i] > l[i+1]){\n      increasing\
    \ = false;\n    }\n    if(l[i] < l[i+1]){\n      decreasing = false;\n    }\n\
    \  }\n  return increasing || decreasing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var i = 0;\n    var inc = true;\n    var dec = true;\n\
    \    while(i < l.length - 1){\n        if(l[i] > l[i+1]){\n            inc = false;\n\
    \        }\n        if(l[i] < l[i+1]){\n            dec = false;\n        }\n\
    \        i++;\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var i = 0;\n    var j = 1;\n    var increasing = true;\n\
    \    var decreasing = true;\n    while(i < l.length-1){\n        if(l[i] > l[j]){\n\
    \            increasing = false;\n        }\n        if(l[i] < l[j]){\n      \
    \      decreasing = false;\n        }\n        i++;\n        j++;\n    }\n   \
    \ return increasing || decreasing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n\tvar inc = true;\n\tvar dec = true;\n\tfor(var i = 0;\
    \ i < l.length - 1; i++){\n\t\tif(l[i] > l[i+1]){\n\t\t\tinc = false;\n\t\t}\n\
    \t\tif(l[i] < l[i+1]){\n\t\t\tdec = false;\n\t\t}\n\t}\n\treturn inc || dec;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n  var i;\n  var increasing = true;\n  var decreasing =\
    \ true;\n  for(i=0;i<l.length-1;i++){\n    if(l[i]>l[i+1]){\n      increasing\
    \ = false;\n    }\n    if(l[i]<l[i+1]){\n      decreasing = false;\n    }\n  }\n\
    \  return increasing || decreasing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length-1; i++){\n        if(l[i] > l[i+1]){\n            inc =\
    \ false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n  \
    \      }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var increasing = true;\n    var decreasing = true;\n\
    \    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] < l[i+1]) decreasing\
    \ = false;\n        if(l[i] > l[i+1]) increasing = false;\n    }\n    return increasing\
    \ || decreasing;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n  var i = 0;\n  var j = 1;\n  var inc = 0;\n  var dec\
    \ = 0;\n  while(j < l.length){\n    if(l[i] < l[j]){\n      inc++;\n    }\n  \
    \  if(l[i] > l[j]){\n      dec++;\n    }\n    i++;\n    j++;\n  }\n  if(inc ==\
    \ l.length - 1 || dec == l.length - 1){\n    return true;\n  }\n  return false;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp7y2oydkm.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp7y2oydkm.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    if(l.length <= 2){\n        return true;\n    }\n\
    \    var increasing = l[0] < l[1];\n    for(var i = 1; i < l.length - 1; i++){\n\
    \        if(increasing){\n            if(l[i] > l[i+1]){\n                return\
    \ false;\n            }\n        }else{\n            if(l[i] < l[i+1]){\n    \
    \            return false;\n            }\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var increasing = true;\n    var decreasing = true;\n\
    \    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n    \
    \        increasing = false;\n        }\n        if(l[i] < l[i+1]){\n        \
    \    decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length-1; i++){\n        if(l[i] > l[i+1]){\n            inc =\
    \ false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n  \
    \      }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n  var inc = true;\n  var dec = true;\n  for(var i = 0;\
    \ i < l.length - 1; i++){\n    if(l[i] > l[i+1]){\n      inc = false;\n    }\n\
    \    if(l[i] < l[i+1]){\n      dec = false;\n    }\n  }\n  return inc || dec;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var increasing = true;\n    var decreasing = true;\n\
    \    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n    \
    \        increasing = false;\n        }\n        if(l[i] < l[i+1]){\n        \
    \    decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var i = 0;\n    var inc = true;\n    var dec = true;\n\
    \    while(i < l.length-1){\n        if(l[i] > l[i+1]){\n            inc = false;\n\
    \        }\n        if(l[i] < l[i+1]){\n            dec = false;\n        }\n\
    \        i++;\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var i;\n    var inc = true;\n    var dec = true;\n\
    \    for(i=0;i<l.length-1;i++){\n        if(l[i]>l[i+1]){\n            inc = false;\n\
    \        }\n        if(l[i]<l[i+1]){\n            dec = false;\n        }\n  \
    \  }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length-1; i++){\n        if(l[i] > l[i+1]){\n            inc =\
    \ false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n  \
    \      }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    if(l.length <= 1){\n        return true;\n    }\n\
    \    var i = 0;\n    var inc = l[i] < l[i+1];\n    while(i < l.length-1){\n  \
    \      if(inc){\n            if(l[i] > l[i+1]){\n                return false;\n\
    \            }\n        }else{\n            if(l[i] < l[i+1]){\n             \
    \   return false;\n            }\n        }\n        i++;\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    if(l.length <= 2){\n        return true;\n    }\n\
    \    var increasing = true;\n    var decreasing = true;\n    for(var i = 0; i\
    \ < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            increasing =\
    \ false;\n        }\n        if(l[i] < l[i+1]){\n            decreasing = false;\n\
    \        }\n    }\n    return increasing || decreasing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n\tvar i = 0;\n\tvar increasing = true;\n\tvar decreasing\
    \ = true;\n\twhile(i < l.length - 1){\n\t\tif(l[i] > l[i+1]){\n\t\t\tincreasing\
    \ = false;\n\t\t}\n\t\tif(l[i] < l[i+1]){\n\t\t\tdecreasing = false;\n\t\t}\n\t\
    \ti++;\n\t}\n\treturn increasing || decreasing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] < l[i+1]){\n            dec\
    \ = false;\n        }\n        if(l[i] > l[i+1]){\n            inc = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var i = 0;\n    var inc = true;\n    var dec = true;\n\
    \    while(i < l.length - 1){\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n        if(l[i] > l[i+1]){\n            inc = false;\n        }\n\
    \        i++;\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var is_increasing = true;\n    var is_decreasing =\
    \ true;\n    var i = 0;\n    while(i < l.length-1){\n        if(l[i] > l[i+1]){\n\
    \            is_increasing = false;\n        }\n        if(l[i] < l[i+1]){\n \
    \           is_decreasing = false;\n        }\n        i++;\n    }\n    return\
    \ is_increasing || is_decreasing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var increasing = true;\n    var decreasing = true;\n\
    \    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] < l[i+1]){\n    \
    \        decreasing = false;\n        }\n        if(l[i] > l[i+1]){\n        \
    \    increasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n\tif(l.length <= 1){\n\t\treturn true;\n\t}\n\tvar inc\
    \ = l[1] > l[0];\n\tfor(var i = 1; i < l.length; i++){\n\t\tif(inc){\n\t\t\tif(l[i]\
    \ < l[i-1]){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tif(l[i]\
    \ > l[i-1]){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var isIncreasing = true;\n    var isDecreasing = true;\n\
    \    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n    \
    \        isIncreasing = false;\n        }\n        if(l[i] < l[i+1]){\n      \
    \      isDecreasing = false;\n        }\n    }\n    return isIncreasing || isDecreasing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length-1; i++){\n        if(l[i] > l[i+1]){\n            inc =\
    \ false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n  \
    \      }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var increasing = true;\n    var decreasing = true;\n\
    \    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n    \
    \        increasing = false;\n        }\n        if(l[i] < l[i+1]){\n        \
    \    decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var increasing = true;\n    var decreasing = true;\n\
    \    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n    \
    \        increasing = false;\n        }\n        if(l[i] < l[i+1]){\n        \
    \    decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var is_increasing = true;\n    var is_decreasing =\
    \ true;\n    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n\
    \            is_increasing = false;\n        }\n        if(l[i] < l[i+1]){\n \
    \           is_decreasing = false;\n        }\n    }\n    return is_increasing\
    \ || is_decreasing;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n  var inc = true;\n  var dec = true;\n  for(var i = 0;\
    \ i < l.length - 1; i++){\n    if(l[i] > l[i+1]){\n      inc = false;\n    }\n\
    \    if(l[i] < l[i+1]){\n      dec = false;\n    }\n  }\n  return inc || dec;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n\tvar inc = true;\n\tvar dec = true;\n\tfor(var i = 0;\
    \ i < l.length-1; i++){\n\t\tif(l[i] > l[i+1]){\n\t\t\tinc = false;\n\t\t}\n\t\
    \tif(l[i] < l[i+1]){\n\t\t\tdec = false;\n\t\t}\n\t}\n\treturn inc || dec;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length-1; i++){\n        if(l[i] > l[i+1]){\n            inc =\
    \ false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n  \
    \      }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n  var inc = true;\n  var dec = true;\n  for(var i = 0;\
    \ i < l.length-1; i++){\n    if(l[i] > l[i+1]){\n      inc = false;\n    }\n \
    \   if(l[i] < l[i+1]){\n      dec = false;\n    }\n  }\n  return inc || dec;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n  var i = 0;\n  var inc = true;\n  var dec = true;\n \
    \ while(i < l.length - 1){\n    if(l[i] > l[i+1]){\n      inc = false;\n    }\n\
    \    if(l[i] < l[i+1]){\n      dec = false;\n    }\n    i++;\n  }\n  return inc\
    \ || dec;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n\tvar d = l[1] - l[0];\n\tfor(var i = 2; i < l.length;\
    \ i++){\n\t\tif(d * (l[i] - l[i-1]) < 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n\tvar i;\n\tvar increasing = true;\n\tvar decreasing =\
    \ true;\n\tfor(i=0;i<l.length-1;i++){\n\t\tif(l[i]<l[i+1]){\n\t\t\tdecreasing\
    \ = false;\n\t\t}\n\t\tif(l[i]>l[i+1]){\n\t\t\tincreasing = false;\n\t\t}\n\t\
    }\n\treturn increasing || decreasing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n\tvar inc = true;\n\tvar dec = true;\n\tfor(var i = 0;\
    \ i < l.length - 1; i++){\n\t\tif(l[i] > l[i+1]){\n\t\t\tinc = false;\n\t\t}\n\
    \t\tif(l[i] < l[i+1]){\n\t\t\tdec = false;\n\t\t}\n\t}\n\treturn inc || dec;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length-1; i++){\n        if(l[i] > l[i+1]){\n            inc =\
    \ false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n  \
    \      }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var i = 0;\n    var j = 1;\n    var increasing = true;\n\
    \    var decreasing = true;\n    while (i < l.length - 1){\n        if (l[i] >\
    \ l[j]){\n            increasing = false;\n        }\n        if (l[i] < l[j]){\n\
    \            decreasing = false;\n        }\n        i += 1;\n        j += 1;\n\
    \    }\n    return increasing || decreasing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n  var inc = true;\n  var dec = true;\n  for(var i = 0;\
    \ i < l.length-1; i++){\n    if(l[i] > l[i+1]){\n      inc = false;\n    }\n \
    \   if(l[i] < l[i+1]){\n      dec = false;\n    }\n  }\n  return inc || dec;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var increasing = true;\n    var decreasing = true;\n\
    \    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n    \
    \        increasing = false;\n        }\n        if(l[i] < l[i+1]){\n        \
    \    decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length-1; i++){\n        if(l[i] > l[i+1]){\n            inc =\
    \ false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n  \
    \      }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var i = 0;\n    var inc = true;\n    var dec = true;\n\
    \    while(i < l.length - 1){\n        if(l[i] > l[i+1]){\n            inc = false;\n\
    \        }\n        if(l[i] < l[i+1]){\n            dec = false;\n        }\n\
    \        i++;\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n  var inc = true;\n  var dec = true;\n  for(var i = 0;\
    \ i < l.length - 1; i++){\n    if(l[i] > l[i+1]){\n      inc = false;\n    }\n\
    \    if(l[i] < l[i+1]){\n      dec = false;\n    }\n  }\n  return inc || dec;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length-1; i++){\n        if(l[i] > l[i+1]){\n            inc =\
    \ false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n  \
    \      }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var increasing = true;\n    var decreasing = true;\n\
    \    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n    \
    \        increasing = false;\n        }\n        if(l[i] < l[i+1]){\n        \
    \    decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length-1; i++){\n        if(l[i] > l[i+1]){\n            inc =\
    \ false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n  \
    \      }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc=true;\n    var dec=true;\n    for(var i=0;i<l.length-1;i++){\n\
    \        if(l[i]>l[i+1]){\n            inc=false;\n        }\n        if(l[i]<l[i+1]){\n\
    \            dec=false;\n        }\n    }\n    return inc || dec;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n  var i,\n      inc = true,\n      dec = true;\n  for(i\
    \ = 1; i < l.length; i++){\n    if(l[i] > l[i-1]){\n      dec = false;\n    }\n\
    \    if(l[i] < l[i-1]){\n      inc = false;\n    }\n  }\n  return inc || dec;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length-1; i++){\n        if(l[i] > l[i+1]){\n            inc =\
    \ false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n  \
    \      }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var increasing = true;\n    var decreasing = true;\n\
    \    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n    \
    \        increasing = false;\n        }\n        if(l[i] < l[i+1]){\n        \
    \    decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    return l.every((e,i,a)=>i==0||a[i-1]<=e) || l.every((e,i,a)=>i==0||a[i-1]>=e);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length-1; i++){\n        if(l[i] > l[i+1]){\n            inc =\
    \ false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n  \
    \      }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    return l.every((e,i,a)=>i==0||a[i-1]<=e) || l.every((e,i,a)=>i==0||a[i-1]>=e);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    if(l.length <= 1){\n        return true;\n    }\n\
    \    if(l[0] < l[1]){\n        for(var i = 0; i < l.length - 1; i++){\n      \
    \      if(l[i] > l[i+1]){\n                return false;\n            }\n    \
    \    }\n    }\n    else if(l[0] > l[1]){\n        for(var i = 0; i < l.length\
    \ - 1; i++){\n            if(l[i] < l[i+1]){\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n  var inc = true;\n  var dec = true;\n  for(var i = 0;\
    \ i < l.length - 1; i++){\n    if(l[i] > l[i+1]){\n      inc = false;\n    }\n\
    \    if(l[i] < l[i+1]){\n      dec = false;\n    }\n  }\n  return inc || dec;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var increasing = true;\n    var decreasing = true;\n\
    \    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] < l[i+1]){\n    \
    \        decreasing = false;\n        }\n        if(l[i] > l[i+1]){\n        \
    \    increasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var i = 0;\n    var j = 1;\n    var increasing = false;\n\
    \    var decreasing = false;\n    while (i < l.length - 1){\n        if (l[i]\
    \ < l[j]){\n            increasing = true;\n        }\n        if (l[i] > l[j]){\n\
    \            decreasing = true;\n        }\n        i++;\n        j++;\n    }\n\
    \    if (increasing && decreasing){\n        return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length-1; i++){\n        if(l[i] > l[i+1]){\n            inc =\
    \ false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n  \
    \      }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var i = 0;\n    var j = 1;\n    var increasing = true;\n\
    \    var decreasing = true;\n    while(i < l.length-1){\n        if(l[i] > l[j]){\n\
    \            increasing = false;\n        }\n        if(l[i] < l[j]){\n      \
    \      decreasing = false;\n        }\n        i++;\n        j++;\n    }\n   \
    \ return increasing || decreasing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    if(l.length <= 2){\n        return true;\n    }\n\
    \    var inc = l[1] > l[0];\n    for(var i = 2; i < l.length; i++){\n        if(inc\
    \ && l[i] < l[i-1]){\n            return false;\n        }\n        if(!inc &&\
    \ l[i] > l[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n  var increasing = true;\n  var decreasing = true;\n \
    \ for(var i = 0; i < l.length - 1; i++){\n    if(l[i] > l[i+1]){\n      increasing\
    \ = false;\n    }\n    if(l[i] < l[i+1]){\n      decreasing = false;\n    }\n\
    \  }\n  return increasing || decreasing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var increasing = true;\n    var decreasing = true;\n\
    \    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n    \
    \        increasing = false;\n        }\n        if(l[i] < l[i+1]){\n        \
    \    decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length-1; i++){\n        if(l[i] > l[i+1]){\n            inc =\
    \ false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n  \
    \      }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length-1; i++){\n        if(l[i] > l[i+1]){\n            inc =\
    \ false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n  \
    \      }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var isIncreasing = true;\n    var isDecreasing = true;\n\
    \    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n    \
    \        isIncreasing = false;\n        }\n        if(l[i] < l[i+1]){\n      \
    \      isDecreasing = false;\n        }\n    }\n    return isIncreasing || isDecreasing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n\tif(l.length < 2){\n\t\treturn true;\n\t}\n\tvar inc\
    \ = l[1] > l[0];\n\tfor(var i = 2; i < l.length; i++){\n\t\tif(inc && l[i] < l[i-1]){\n\
    \t\t\treturn false;\n\t\t}\n\t\tif(!inc && l[i] > l[i-1]){\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n  var inc = true;\n  var dec = true;\n  for(var i = 0;\
    \ i < l.length - 1; i++){\n    if(l[i] > l[i+1]){\n      inc = false;\n    }\n\
    \    if(l[i] < l[i+1]){\n      dec = false;\n    }\n  }\n  return inc || dec;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length-1; i++){\n        if(l[i] > l[i+1]){\n            inc =\
    \ false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n  \
    \      }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    if(l.length <= 2){\n        return true;\n    }\n\
    \    var increasing = l[0] < l[1];\n    for(var i = 1; i < l.length - 1; i++){\n\
    \        if(increasing){\n            if(l[i] > l[i+1]){\n                return\
    \ false;\n            }\n        }else{\n            if(l[i] < l[i+1]){\n    \
    \            return false;\n            }\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var i = 0;\n    var j = 1;\n    var inc = 0;\n   \
    \ var dec = 0;\n    while(j < l.length){\n        if(l[i] < l[j]){\n         \
    \   inc++;\n        }\n        else if(l[i] > l[j]){\n            dec++;\n   \
    \     }\n        i++;\n        j++;\n    }\n    if(inc == l.length - 1 || dec\
    \ == l.length - 1){\n        return true;\n    }\n    else{\n        return false;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp7b3xe8is.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp7b3xe8is.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n  var i;\n  var inc = true;\n  var dec = true;\n  for(i=0;i<l.length-1;i++){\n\
    \    if(l[i]>l[i+1]){\n      inc = false;\n    }\n    if(l[i]<l[i+1]){\n     \
    \ dec = false;\n    }\n  }\n  return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n  var inc = true;\n  var dec = true;\n  for(var i = 0;\
    \ i < l.length - 1; i++){\n    if(l[i] > l[i+1]){\n      inc = false;\n    }\n\
    \    if(l[i] < l[i+1]){\n      dec = false;\n    }\n  }\n  return inc || dec;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var increasing = true;\n    var decreasing = true;\n\
    \    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] < l[i+1]){\n    \
    \        decreasing = false;\n        }\n        if(l[i] > l[i+1]){\n        \
    \    increasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n\tvar inc = true;\n\tvar dec = true;\n\tfor(var i = 0;\
    \ i < l.length - 1; i++){\n\t\tif(l[i] > l[i+1]){\n\t\t\tinc = false;\n\t\t}\n\
    \t\tif(l[i] < l[i+1]){\n\t\t\tdec = false;\n\t\t}\n\t}\n\treturn inc || dec;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    return l.every((e,i,a)=>i==0||e>=a[i-1])||l.every((e,i,a)=>i==0||e<=a[i-1]);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var increasing = true;\n    var decreasing = true;\n\
    \    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n    \
    \        increasing = false;\n        }\n        if(l[i] < l[i+1]){\n        \
    \    decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var i = 0;\n    var j = 1;\n    var inc = 0;\n   \
    \ var dec = 0;\n    while(j < l.length){\n        if(l[i] < l[j]){\n         \
    \   inc++;\n        }\n        else if(l[i] > l[j]){\n            dec++;\n   \
    \     }\n        i++;\n        j++;\n    }\n    if(inc == l.length - 1 || dec\
    \ == l.length - 1){\n        return true;\n    }\n    else{\n        return false;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp7b3xe8is.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp7b3xe8is.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n  var inc = true;\n  var dec = true;\n  for(var i = 0;\
    \ i < l.length-1; i++){\n    if(l[i] > l[i+1]){\n      inc = false;\n    }\n \
    \   if(l[i] < l[i+1]){\n      dec = false;\n    }\n  }\n  return inc || dec;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n  var inc = true;\n  var dec = true;\n  for(var i = 0;\
    \ i < l.length - 1; i++){\n    if(l[i] > l[i+1]){\n      inc = false;\n    }\n\
    \    if(l[i] < l[i+1]){\n      dec = false;\n    }\n  }\n  return inc || dec;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length-1; i++){\n        if(l[i] > l[i+1]){\n            inc =\
    \ false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n  \
    \      }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var i = 0;\n    var increasing = true;\n    var decreasing\
    \ = true;\n    while(i < l.length - 1){\n        if(l[i] > l[i+1]){\n        \
    \    increasing = false;\n        }\n        if(l[i] < l[i+1]){\n            decreasing\
    \ = false;\n        }\n        i++;\n    }\n    return increasing || decreasing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    if(l.length < 2){\n        return true;\n    }\n \
    \   var increasing = l[0] < l[1];\n    for(var i = 1; i < l.length; i++){\n  \
    \      if(increasing){\n            if(l[i] < l[i-1]){\n                return\
    \ false;\n            }\n        }else{\n            if(l[i] > l[i-1]){\n    \
    \            return false;\n            }\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var increasing = true;\n    var decreasing = true;\n\
    \    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n    \
    \        increasing = false;\n        }\n        if(l[i] < l[i+1]){\n        \
    \    decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var increasing = true;\n    var decreasing = true;\n\
    \    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] < l[i+1]){\n    \
    \        decreasing = false;\n        }\n        if(l[i] > l[i+1]){\n        \
    \    increasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n\tvar increasing = true;\n\tvar decreasing = true;\n\t\
    for(var i = 0; i < l.length - 1; i++){\n\t\tif(l[i] > l[i+1]){\n\t\t\tincreasing\
    \ = false;\n\t\t}\n\t\tif(l[i] < l[i+1]){\n\t\t\tdecreasing = false;\n\t\t}\n\t\
    }\n\treturn increasing || decreasing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n\tvar inc = true;\n\tvar dec = true;\n\tfor(var i = 0;\
    \ i < l.length-1; i++){\n\t\tif(l[i] < l[i+1]){\n\t\t\tdec = false;\n\t\t}\n\t\
    \tif(l[i] > l[i+1]){\n\t\t\tinc = false;\n\t\t}\n\t}\n\treturn inc || dec;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n  var inc = true;\n  var dec = true;\n  for(var i = 0;\
    \ i < l.length - 1; i++){\n    if(l[i] > l[i+1]){\n      inc = false;\n    }\n\
    \    if(l[i] < l[i+1]){\n      dec = false;\n    }\n  }\n  return inc || dec;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n\tvar inc = true;\n\tvar dec = true;\n\tvar prev = l[0];\n\
    \tfor(var i = 1; i < l.length; i++){\n\t\tif(l[i] < prev){\n\t\t\tinc = false;\n\
    \t\t}\n\t\tif(l[i] > prev){\n\t\t\tdec = false;\n\t\t}\n\t\tprev = l[i];\n\t}\n\
    \treturn inc || dec;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n\tvar increasing = true;\n\tvar decreasing = true;\n\t\
    for(var i = 0; i < l.length - 1; i++){\n\t\tif(l[i] > l[i+1]){\n\t\t\tincreasing\
    \ = false;\n\t\t}\n\t\tif(l[i] < l[i+1]){\n\t\t\tdecreasing = false;\n\t\t}\n\t\
    }\n\treturn increasing || decreasing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length-1; i++){\n        if(l[i] > l[i+1]){\n            inc =\
    \ false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n  \
    \      }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var increasing = true;\n    var decreasing = true;\n\
    \    for(var i = 0; i < l.length-1; i++){\n        if(l[i] > l[i+1]){\n      \
    \      increasing = false;\n        }\n        if(l[i] < l[i+1]){\n          \
    \  decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n  var inc = true;\n  var dec = true;\n  for(var i = 0;\
    \ i < l.length-1; i++){\n    if(l[i] > l[i+1]){\n      inc = false;\n    }\n \
    \   if(l[i] < l[i+1]){\n      dec = false;\n    }\n  }\n  return inc || dec;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    if(l.length<=1){\n        return true;\n    }\n  \
    \  var isIncreasing = l[0]<l[1];\n    for(var i=1;i<l.length-1;i++){\n       \
    \ if(isIncreasing){\n            if(l[i]>l[i+1]){\n                return false;\n\
    \            }\n        }else{\n            if(l[i]<l[i+1]){\n               \
    \ return false;\n            }\n        }\n    }\n    return true;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var increasing = true;\n    var decreasing = true;\n\
    \    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n    \
    \        increasing = false;\n        }\n        if(l[i] < l[i+1]){\n        \
    \    decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var isIncreasing = true;\n    var isDecreasing = true;\n\
    \    for(var i = 0; i < l.length-1; i++){\n        if(l[i] > l[i+1]){\n      \
    \      isIncreasing = false;\n        }\n        if(l[i] < l[i+1]){\n        \
    \    isDecreasing = false;\n        }\n    }\n    return isIncreasing || isDecreasing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n\tvar increasing = true;\n\tvar decreasing = true;\n\t\
    for(var i = 0; i < l.length - 1; i++){\n\t\tif(l[i] > l[i+1]){\n\t\t\tincreasing\
    \ = false;\n\t\t}\n\t\tif(l[i] < l[i+1]){\n\t\t\tdecreasing = false;\n\t\t}\n\t\
    }\n\treturn increasing || decreasing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n\tvar inc = true;\n\tvar dec = true;\n\tfor(var i = 0;\
    \ i < l.length - 1; i++){\n\t\tif(l[i] > l[i+1]){\n\t\t\tinc = false;\n\t\t}\n\
    \t\tif(l[i] < l[i+1]){\n\t\t\tdec = false;\n\t\t}\n\t}\n\treturn inc || dec;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length-1; i++){\n        if(l[i] > l[i+1]){\n            inc =\
    \ false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n  \
    \      }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var increasing = true;\n    var decreasing = true;\n\
    \    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] < l[i+1]){\n    \
    \        decreasing = false;\n        }\n        if(l[i] > l[i+1]){\n        \
    \    increasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n  var inc = true;\n  var dec = true;\n  for(var i = 0;\
    \ i < l.length - 1; i++){\n    if(l[i] > l[i+1]){\n      inc = false;\n    }\n\
    \    if(l[i] < l[i+1]){\n      dec = false;\n    }\n  }\n  return inc || dec;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length-1; i++){\n        if(l[i] > l[i+1]){\n            inc =\
    \ false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n  \
    \      }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length-1; i++){\n        if(l[i] > l[i+1]){\n            inc =\
    \ false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n  \
    \      }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var increasing = true;\n    var decreasing = true;\n\
    \    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] < l[i+1]){\n    \
    \        decreasing = false;\n        }\n        if(l[i] > l[i+1]){\n        \
    \    increasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n  if(l.length <= 2){\n    return true;\n  }\n  var inc\
    \ = l[0] < l[1];\n  for(var i = 1; i < l.length - 1; i++){\n    if(inc && l[i]\
    \ > l[i+1]){\n      return false;\n    }\n    if(!inc && l[i] < l[i+1]){\n   \
    \   return false;\n    }\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    if(l.length <= 2){\n        return true;\n    }\n\
    \    var inc = l[1] > l[0];\n    for(var i = 2; i < l.length; i++){\n        if(inc\
    \ && l[i] < l[i-1]){\n            return false;\n        }\n        if(!inc &&\
    \ l[i] > l[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length-1; i++){\n        if(l[i] > l[i+1]){\n            inc =\
    \ false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n  \
    \      }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length-1; i++){\n        if(l[i] > l[i+1]){\n            inc =\
    \ false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n  \
    \      }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    if(l.length <= 1){\n        return true;\n    }\n\
    \    var increasing = l[0] < l[1];\n    for(var i = 1; i < l.length; i++){\n \
    \       if(increasing && l[i-1] > l[i]){\n            return false;\n        }\n\
    \        if(!increasing && l[i-1] < l[i]){\n            return false;\n      \
    \  }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length-1; i++){\n        if(l[i] > l[i+1]){\n            inc =\
    \ false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n  \
    \      }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n  var inc = true;\n  var dec = true;\n  for(var i = 0;\
    \ i < l.length - 1; i++){\n    if(l[i] > l[i+1]){\n      inc = false;\n    }\n\
    \    if(l[i] < l[i+1]){\n      dec = false;\n    }\n  }\n  return inc || dec;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var increasing = true;\n    var decreasing = true;\n\
    \    for(var i = 0; i < l.length-1; i++){\n        if(l[i] > l[i+1]){\n      \
    \      increasing = false;\n        }\n        if(l[i] < l[i+1]){\n          \
    \  decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length-1; i++){\n        if(l[i] > l[i+1]){\n            inc =\
    \ false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n  \
    \      }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    return l.every((e,i,a)=>i==0||a[i-1]<=e) || l.every((e,i,a)=>i==0||a[i-1]>=e);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n\tvar i = 0;\n\tvar j = 1;\n\tvar increasing = false;\n\
    \tvar decreasing = false;\n\twhile(j < l.length){\n\t\tif(l[i] < l[j]){\n\t\t\t\
    increasing = true;\n\t\t}\n\t\tif(l[i] > l[j]){\n\t\t\tdecreasing = true;\n\t\t\
    }\n\t\ti++;\n\t\tj++;\n\t}\n\tif(increasing && decreasing){\n\t\treturn false;\n\
    \t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var increasing = true;\n    var decreasing = true;\n\
    \    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n    \
    \        increasing = false;\n        }\n        if(l[i] < l[i+1]){\n        \
    \    decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var i = 0;\n    var inc = true;\n    var dec = true;\n\
    \    while(i < l.length - 1){\n        if(l[i] > l[i+1]){\n            inc = false;\n\
    \        }\n        if(l[i] < l[i+1]){\n            dec = false;\n        }\n\
    \        i++;\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n\tvar inc = true;\n\tvar dec = true;\n\tfor(var i = 0;\
    \ i < l.length-1; i++){\n\t\tif(l[i] > l[i+1]){\n\t\t\tinc = false;\n\t\t}\n\t\
    \tif(l[i] < l[i+1]){\n\t\t\tdec = false;\n\t\t}\n\t}\n\treturn inc || dec;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    if(l.length <= 1){\n        return true;\n    }\n\
    \    var i = 0;\n    var increasing = true;\n    var decreasing = true;\n    while(i\
    \ < l.length - 1){\n        if(l[i] > l[i+1]){\n            increasing = false;\n\
    \        }\n        if(l[i] < l[i+1]){\n            decreasing = false;\n    \
    \    }\n        i++;\n    }\n    return increasing || decreasing;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var increasing = true;\n    var decreasing = true;\n\
    \    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] < l[i+1]){\n    \
    \        decreasing = false;\n        }\n        if(l[i] > l[i+1]){\n        \
    \    increasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var i;\n    var inc = true;\n    var dec = true;\n\
    \    for(i=0; i<l.length-1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length-1; i++){\n        if(l[i] > l[i+1]){\n            inc =\
    \ false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n  \
    \      }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var increasing = true;\n    var decreasing = true;\n\
    \    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n    \
    \        increasing = false;\n        }\n        if(l[i] < l[i+1]){\n        \
    \    decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    return l.every((e,i,a)=>i==0||a[i-1]<=e) || l.every((e,i,a)=>i==0||a[i-1]>=e);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n  var inc = true;\n  var dec = true;\n  for(var i = 0;\
    \ i < l.length - 1; i++){\n    if(l[i] > l[i+1]){\n      inc = false;\n    }\n\
    \    if(l[i] < l[i+1]){\n      dec = false;\n    }\n  }\n  return inc || dec;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n\tvar inc = true;\n\tvar dec = true;\n\tfor(var i = 0;\
    \ i < l.length - 1; i++){\n\t\tif(l[i] > l[i+1]){\n\t\t\tinc = false;\n\t\t}\n\
    \t\tif(l[i] < l[i+1]){\n\t\t\tdec = false;\n\t\t}\n\t}\n\treturn inc || dec;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length-1; i++){\n        if(l[i] > l[i+1]){\n            inc =\
    \ false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n  \
    \      }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var i,\n        len = l.length,\n        inc = true,\n\
    \        dec = true;\n    for(i = 0; i < len - 1; i++){\n        if(l[i] > l[i\
    \ + 1]){\n            inc = false;\n        }\n        if(l[i] < l[i + 1]){\n\
    \            dec = false;\n        }\n    }\n    return inc || dec;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n\tvar inc = true;\n\tvar dec = true;\n\tfor(var i = 0;\
    \ i < l.length-1; i++){\n\t\tif(l[i] > l[i+1]){\n\t\t\tinc = false;\n\t\t}\n\t\
    \tif(l[i] < l[i+1]){\n\t\t\tdec = false;\n\t\t}\n\t}\n\treturn inc || dec;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var increasing = true;\n    var decreasing = true;\n\
    \    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n    \
    \        increasing = false;\n        }\n        if(l[i] < l[i+1]){\n        \
    \    decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var increasing = true;\n    var decreasing = true;\n\
    \    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n    \
    \        increasing = false;\n        }\n        if(l[i] < l[i+1]){\n        \
    \    decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var i = 0;\n    var inc = true;\n    var dec = true;\n\
    \    while(i < l.length - 1){\n        if(l[i] > l[i+1]){\n            inc = false;\n\
    \        }\n        if(l[i] < l[i+1]){\n            dec = false;\n        }\n\
    \        i++;\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n\tvar i = 0;\n\tvar j = 1;\n\tvar inc = true;\n\tvar dec\
    \ = true;\n\twhile(i < l.length-1 && j < l.length){\n\t\tif(l[i] > l[j]){\n\t\t\
    \tinc = false;\n\t\t}\n\t\tif(l[i] < l[j]){\n\t\t\tdec = false;\n\t\t}\n\t\ti++;\n\
    \t\tj++;\n\t}\n\treturn inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n  var inc = true;\n  var dec = true;\n  for(var i = 0;\
    \ i < l.length - 1; i++){\n    if(l[i] > l[i+1]){\n      inc = false;\n    }\n\
    \    if(l[i] < l[i+1]){\n      dec = false;\n    }\n  }\n  return inc || dec;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    return l.every((e,i,a)=>i==0||a[i-1]<=e)||l.every((e,i,a)=>i==0||a[i-1]>=e);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    if(l.length <= 2){\n        return true;\n    }\n\
    \    var inc = l[1] > l[0];\n    for(var i = 2; i < l.length; i++){\n        if(inc){\n\
    \            if(l[i] < l[i-1]){\n                return false;\n            }\n\
    \        }else{\n            if(l[i] > l[i-1]){\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var increasing = true;\n    var decreasing = true;\n\
    \    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n    \
    \        increasing = false;\n        }\n        if(l[i] < l[i+1]){\n        \
    \    decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n  var inc = true;\n  var dec = true;\n  for(var i = 0;\
    \ i < l.length - 1; i++){\n    if(l[i] > l[i+1]){\n      inc = false;\n    }\n\
    \    if(l[i] < l[i+1]){\n      dec = false;\n    }\n  }\n  return inc || dec;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n  var increasing = true;\n  var decreasing = true;\n \
    \ for(var i = 0; i < l.length - 1; i++){\n    if(l[i] > l[i+1]){\n      increasing\
    \ = false;\n    }\n    if(l[i] < l[i+1]){\n      decreasing = false;\n    }\n\
    \  }\n  return increasing || decreasing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var increasing = true;\n    var decreasing = true;\n\
    \    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] < l[i+1]){\n    \
    \        decreasing = false;\n        }\n        if(l[i] > l[i+1]){\n        \
    \    increasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var increasing = true;\n    var decreasing = true;\n\
    \    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] < l[i+1]){\n    \
    \        decreasing = false;\n        }\n        if(l[i] > l[i+1]){\n        \
    \    increasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var increasing = true;\n    var decreasing = true;\n\
    \    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] < l[i+1]){\n    \
    \        decreasing = false;\n        }\n        if(l[i] > l[i+1]){\n        \
    \    increasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var increasing = true;\n    var decreasing = true;\n\
    \    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] < l[i+1]){\n    \
    \        decreasing = false;\n        }\n        if(l[i] > l[i+1]){\n        \
    \    increasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    if(l.length <= 1) return true;\n    var inc = l[1]\
    \ > l[0];\n    for(var i = 1; i < l.length; i++){\n        if(inc){\n        \
    \    if(l[i] < l[i-1]) return false;\n        }else{\n            if(l[i] > l[i-1])\
    \ return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n\
    \        }\n    }\n    return inc || dec;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l){\n    var direction = 0;\n    var i = 0;\n    while(i <\
    \ l.length-1){\n        if(l[i] < l[i+1]){\n            if(direction == -1){\n\
    \                return false;\n            }\n            direction = 1;\n  \
    \      }\n        else if(l[i] > l[i+1]){\n            if(direction == 1){\n \
    \               return false;\n            }\n            direction = -1;\n  \
    \      }\n        i++;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
