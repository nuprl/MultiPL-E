name: HumanEval_42_incr_list
language: js
prompt: "//Return list with elements incremented by 1.\nfunction incr_list(l){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
  \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
  \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
completions: ["\treturn l.map(function(x){return x+1;});\n}\n", "    var new_list\
    \ = [];\n    for(var i = 0; i < l.length; i++){\n        new_list.push(l[i] +\
    \ 1);\n    }\n    return new_list;\n}\n", "\tvar new_list = [];\n\tfor(var i =\
    \ 0; i < l.length; i++){\n\t\tnew_list.push(l[i] + 1);\n\t}\n\treturn new_list;\n\
    }\n", "\tvar new_list = [];\n\tfor(var i = 0; i < l.length; i++){\n\t\tnew_list.push(l[i]\
    \ + 1);\n\t}\n\treturn new_list;\n}\n", "    return l.map(function(x){return x+1;});\n\
    }\n", "    return l.map(function(x){return x+1;});\n}\n", "\treturn l.map(function(x){return\
    \ x+1;});\n}\n", "    return l.map(function(x){return x+1;});\n}\n", "    return\
    \ l.map(function(x){return x+1;});\n}\n", "    return l.map(function(x){return\
    \ x+1;});\n}\n", "\tvar new_list = [];\n\tfor(var i = 0; i < l.length; i++){\n\
    \t\tnew_list.push(l[i] + 1);\n\t}\n\treturn new_list;\n}\n", "\tvar new_list =\
    \ [];\n\tfor(var i = 0; i < l.length; i++){\n\t\tnew_list.push(l[i] + 1);\n\t\
    }\n\treturn new_list;\n}\n", "  return map(function(x){return x+1;},l);\n}\n",
  "    return l.map(function(x){return x+1;});\n}\n", "\treturn map(l, function(x){return\
    \ x+1;});\n}\n", "    return l.map(function(x){return x+1;});\n}\n", "\treturn\
    \ map(incr, l);\n}\n", "    return l.map(function(x){return x+1;});\n}\n", " \
    \   if(l.length == 0){\n        return [];\n    }\n    return [l[0] + 1].concat(incr_list(l.slice(1)));\n\
    }\n", "    return l.map(function(x){return x+1;});\n}\n", "  return l.map(function(x){return\
    \ x+1;});\n}\n", "    return l.map(function(x){return x+1;});\n}\n", "\tvar l_incr\
    \ = [];\n\tfor(var i = 0; i < l.length; i++){\n\t\tl_incr.push(l[i] + 1);\n\t\
    }\n\treturn l_incr;\n}\n", "    return l.map(function(x){return x+1;});\n}\n",
  "    return map(l, function(x){return x+1;});\n}\n", "    return l.map(function(x){return\
    \ x+1;});\n}\n", "    return map(incr, l);\n}\n", "    return l.map(function(x){return\
    \ x+1;});\n}\n", "    return l.map(function(x){return x+1});\n}\n", "    return\
    \ l.map(function(x){return x+1;});\n}\n", "    return l.map(function(x){return\
    \ x+1;});\n}\n", "\tvar new_list = [];\n\tfor(var i = 0; i < l.length; i++){\n\
    \t\tnew_list.push(l[i] + 1);\n\t}\n\treturn new_list;\n}\n", "  return l.map(function(e){\n\
    \    return e+1;\n  });\n}\n", "    return l.map(function(x){return x+1;});\n\
    }\n", "    return map(l, function(x){return x+1;});\n}\n", "\tvar new_list = [];\n\
    \tfor(var i = 0; i < l.length; i++){\n\t\tnew_list.push(l[i] + 1);\n\t}\n\treturn\
    \ new_list;\n}\n", "    return l.map(function(x){return x+1});\n}\n", "    return\
    \ l.map(function(x){return x+1;});\n}\n", "\tvar new_list = [];\n\tfor(var i =\
    \ 0; i < l.length; i++){\n\t\tnew_list.push(l[i] + 1);\n\t}\n\treturn new_list;\n\
    }\n", "  return l.map(function(x){return x+1;});\n}\n", "    return map(function(x){return\
    \ x+1;},l);\n}\n", "\tvar res = [];\n\tfor(var i=0; i<l.length; i++){\n\t\tres.push(l[i]+1);\n\
    \t}\n\treturn res;\n}\n", "    return l.map(function(x){return x+1;});\n}\n",
  "  return l.map(function(e){return e+1;});\n}\n", "\tvar new_list = [];\n\tfor(var\
    \ i = 0; i < l.length; i++){\n\t\tnew_list.push(l[i] + 1);\n\t}\n\treturn new_list;\n\
    }\n", "    return l.map(function(x){return x+1;});\n}\n", "  return l.map(function(e){return\
    \ e+1;});\n}\n", "    return map(incr, l);\n}\n", "    return l.map(function(x){return\
    \ x+1;});\n}\n", "  var new_list = [];\n  for(var i = 0; i < l.length; i++){\n\
    \    new_list.push(l[i] + 1);\n  }\n  return new_list;\n}\n", "\tvar new_list\
    \ = [];\n\tfor(var i = 0; i < l.length; i++){\n\t\tnew_list.push(l[i] + 1);\n\t\
    }\n\treturn new_list;\n}\n", "    return map(l, function(x){return x+1;});\n}\n",
  "  return map(function(x){return x+1;},l);\n}\n", "    return l.map(x => x + 1);\n\
    }\n", "\tvar new_list = [];\n\tfor(var i = 0; i < l.length; i++){\n\t\tnew_list.push(l[i]\
    \ + 1);\n\t}\n\treturn new_list;\n}\n", "    return l.map(function(x){return x+1;});\n\
    }\n", "  return map(l, function(x){return x+1;});\n}\n", "  return l.map(function(x){return\
    \ x+1;});\n}\n", "  return l.map(function(e){return e+1;});\n}\n", "    return\
    \ l.map(function(x){return x+1;});\n}\n", "  return map(incr, l);\n}\n", "\tvar\
    \ new_list = [];\n\tfor(var i = 0; i < l.length; i++){\n\t\tnew_list.push(l[i]\
    \ + 1);\n\t}\n\treturn new_list;\n}\n", "    return l.map(function(x){return x+1;});\n\
    }\n", "    return l.map(function(x){return x+1;});\n}\n", "    return l.map(function(x){\n\
    \        return x+1;\n    });\n}\n", "    var new_list = [];\n    for(var i =\
    \ 0; i < l.length; i++){\n        new_list.push(l[i] + 1);\n    }\n    return\
    \ new_list;\n}\n", "\tvar new_list = [];\n\tfor(var i = 0; i < l.length; i++){\n\
    \t\tnew_list.push(l[i] + 1);\n\t}\n\treturn new_list;\n}\n", "    return l.map(function(x){return\
    \ x+1;});\n}\n", "  var res = [];\n  for(var i = 0; i < l.length; i++){\n    res.push(l[i]\
    \ + 1);\n  }\n  return res;\n}\n", "    return l.map(x => x + 1);\n}\n", "   \
    \ return l.map(function(x){return x+1});\n}\n", "    return map(l, function(x){return\
    \ x+1;});\n}\n", "  return map(incr, l);\n}\n", "\treturn l.map(function(x){return\
    \ x+1;});\n}\n", "    return l.map(function(x){return x+1;});\n}\n", "    return\
    \ l.map(x => x + 1);\n}\n", "    return l.map(function(x){return x+1;});\n}\n",
  "    return l.map(function(x){return x+1;});\n}\n", "\tvar new_list = [];\n\tfor(var\
    \ i = 0; i < l.length; i++){\n\t\tnew_list.push(l[i] + 1);\n\t}\n\treturn new_list;\n\
    }\n", "  return l.map(function(x){return x+1;});\n}\n", "\tvar new_list = [];\n\
    \tfor(var i = 0; i < l.length; i++){\n\t\tnew_list.push(l[i] + 1);\n\t}\n\treturn\
    \ new_list;\n}\n", "    var new_list = [];\n    for(var i = 0; i < l.length; i++){\n\
    \        new_list.push(l[i] + 1);\n    }\n    return new_list;\n}\n", "    return\
    \ l.map(function(x){return x+1;});\n}\n", "    var new_list = [];\n    for(var\
    \ i = 0; i < l.length; i++){\n        new_list.push(l[i] + 1);\n    }\n    return\
    \ new_list;\n}\n", "\treturn map(incr, l);\n}\n", "    var new_list = [];\n  \
    \  for(var i = 0; i < l.length; i++){\n        new_list.push(l[i] + 1);\n    }\n\
    \    return new_list;\n}\n", "    return l.map(function(x){return x+1;});\n}\n",
  "    return l.map(function(x){return x+1;});\n}\n", "    return l.map(function(x){return\
    \ x+1;});\n}\n", "  return map(incr, l);\n}\n", "\tvar new_list = [];\n\tfor(var\
    \ i = 0; i < l.length; i++){\n\t\tnew_list.push(l[i] + 1);\n\t}\n\treturn new_list;\n\
    }\n", "\tvar new_list = [];\n\tfor(var i = 0; i < l.length; i++){\n\t\tnew_list.push(l[i]\
    \ + 1);\n\t}\n\treturn new_list;\n}\n", "    return l.map(x => x + 1);\n}\n",
  "\tvar new_list = [];\n\tfor(var i = 0; i < l.length; i++){\n\t\tnew_list.push(l[i]\
    \ + 1);\n\t}\n\treturn new_list;\n}\n", "    return l.map(function(x){return x+1;});\n\
    }\n", "\tvar new_list = [];\n\tfor(var i = 0; i < l.length; i++){\n\t\tnew_list.push(l[i]\
    \ + 1);\n\t}\n\treturn new_list;\n}\n", "\treturn map(l, function(x){return x+1;});\n\
    }\n", "\tvar new_list = [];\n\tfor(var i = 0; i < l.length; i++){\n\t\tnew_list.push(l[i]\
    \ + 1);\n\t}\n\treturn new_list;\n}\n", "    return l.map(function(x){return x+1;});\n\
    }\n", "\treturn l.map(function(x){return x+1;});\n}\n", "    return l.map(function(x){return\
    \ x+1;});\n}\n", "  return l.map(function(x){return x+1;});\n}\n", "\tvar i;\n\
    \tvar new_list = new Array();\n\tfor(i=0;i<l.length;i++){\n\t\tnew_list.push(l[i]+1);\n\
    \t}\n\treturn new_list;\n}\n", "    return map(incr, l);\n}\n", "  return l.map(function(x){return\
    \ x+1;});\n}\n", "    var l2 = [];\n    for(var i = 0; i < l.length; i++){\n \
    \       l2.push(l[i] + 1);\n    }\n    return l2;\n}\n", "\treturn l.map(function(x){return\
    \ x+1;});\n}\n", "  if(l.length == 0){\n    return [];\n  }\n  return [l[0] +\
    \ 1].concat(incr_list(l.slice(1)));\n}\n", "    return l.map(function(x){return\
    \ x+1;});\n}\n", "  return l.map(function(x){return x+1;});\n}\n", "    return\
    \ l.map(function(x){return x+1;});\n}\n", "\tvar new_list = [];\n\tfor(var i =\
    \ 0; i < l.length; i++){\n\t\tnew_list.push(l[i] + 1);\n\t}\n\treturn new_list;\n\
    }\n", "    return map(l, function(x){return x+1;});\n}\n", "    return l.map(function(x){return\
    \ x+1;});\n}\n", "\tvar ret = [];\n\tfor(var i = 0; i < l.length; i++){\n\t\t\
    ret.push(l[i] + 1);\n\t}\n\treturn ret;\n}\n", "    return l.map(function(x){return\
    \ x+1;});\n}\n", "\treturn l.map(function(x){return x+1;});\n}\n", "    return\
    \ l.map(function(x){return x+1;});\n}\n", "    return l.map(function(x){return\
    \ x+1;});\n}\n", "    return l.map(function(x){return x+1;});\n}\n", "    var\
    \ new_list = [];\n    for(var i = 0; i < l.length; i++){\n        new_list.push(l[i]\
    \ + 1);\n    }\n    return new_list;\n}\n", "    return l.map(function(x){return\
    \ x+1;});\n}\n", "    return l.map(function(x){return x+1;});\n}\n", "    return\
    \ map(l, function(e){\n        return e + 1;\n    });\n}\n", "    return l.map(function(x){return\
    \ x+1;});\n}\n", "    return l.map(function(x){return x+1;});\n}\n", "    var\
    \ new_list = [];\n    for(var i = 0; i < l.length; i++){\n        new_list.push(l[i]\
    \ + 1);\n    }\n    return new_list;\n}\n", "\tvar nl = [];\n\tfor(var i=0; i<l.length;\
    \ i++){\n\t\tnl.push(l[i]+1);\n\t}\n\treturn nl;\n}\n", "\tvar new_list = [];\n\
    \tfor(var i = 0; i < l.length; i++){\n\t\tnew_list.push(l[i] + 1);\n\t}\n\treturn\
    \ new_list;\n}\n", "\tvar new_list = [];\n\tfor(var i = 0; i < l.length; i++){\n\
    \t\tnew_list.push(l[i] + 1);\n\t}\n\treturn new_list;\n}\n", "\tvar incr_l = [];\n\
    \tfor(var i = 0; i < l.length; i++){\n\t\tincr_l.push(l[i] + 1);\n\t}\n\treturn\
    \ incr_l;\n}\n", "  return map(incr, l);\n}\n", "\tvar new_list = [];\n\tfor(var\
    \ i = 0; i < l.length; i++){\n\t\tnew_list.push(l[i] + 1);\n\t}\n\treturn new_list;\n\
    }\n", "    var new_list = [];\n    for(var i = 0; i < l.length; i++){\n      \
    \  new_list.push(l[i] + 1);\n    }\n    return new_list;\n}\n", "\tvar l2 = [];\n\
    \tfor(var i = 0; i < l.length; i++){\n\t\tl2.push(l[i] + 1);\n\t}\n\treturn l2;\n\
    }\n", "\tvar new_list = [];\n\tfor(var i = 0; i < l.length; i++){\n\t\tnew_list.push(l[i]\
    \ + 1);\n\t}\n\treturn new_list;\n}\n", "    return l.map(function(x){return x+1;});\n\
    }\n", "  return map(function(x){return x+1;},l);\n}\n", "    return l.map(function(x){return\
    \ x+1;});\n}\n", "    var new_list = [];\n    for(var i = 0; i < l.length; i++){\n\
    \        new_list.push(l[i] + 1);\n    }\n    return new_list;\n}\n", "    var\
    \ new_list = [];\n    for(var i = 0; i < l.length; i++){\n        new_list.push(l[i]\
    \ + 1);\n    }\n    return new_list;\n}\n", "\tvar new_list = [];\n\tfor(var i\
    \ = 0; i < l.length; i++){\n\t\tnew_list.push(l[i] + 1);\n\t}\n\treturn new_list;\n\
    }\n", "\tvar new_list = [];\n\tfor(var i = 0; i < l.length; i++){\n\t\tnew_list.push(l[i]\
    \ + 1);\n\t}\n\treturn new_list;\n}\n", "    return l.map(function(x){return x+1;});\n\
    }\n", "    return l.map(x => x + 1);\n}\n", "    return map(function(x){return\
    \ x+1;},l);\n}\n", "\tvar new_list = [];\n\tfor(var i = 0; i < l.length; i++){\n\
    \t\tnew_list.push(l[i] + 1);\n\t}\n\treturn new_list;\n}\n", "    var r = [];\n\
    \    for(var i = 0; i < l.length; i++){\n        r.push(l[i] + 1);\n    }\n  \
    \  return r;\n}\n", "  return l.map(function(x){return x+1;});\n}\n", "  return\
    \ map(function(x){return x+1;},l);\n}\n", "    return l.map(function(x){return\
    \ x+1});\n}\n", "    return map(l, function(x){return x+1;});\n}\n", "    return\
    \ l.map(function(x){return x+1;});\n}\n", "    return l.map(function(x){return\
    \ x+1;});\n}\n", "  return l.map(function(x){return x+1;});\n}\n", "  return l.map(function(x){return\
    \ x+1;});\n}\n", "    return l.map(function(x){return x+1;});\n}\n", "\tvar new_list\
    \ = [];\n\tfor(var i = 0; i < l.length; i++){\n\t\tnew_list.push(l[i] + 1);\n\t\
    }\n\treturn new_list;\n}\n", "    return l.map(function(x){return x+1;});\n}\n",
  "    return map(incr, l);\n}\n", "    return l.map(function(x){return x+1;});\n\
    }\n", "    return map(l, function(x){return x+1;});\n}\n", "  return map(function(x){return\
    \ x+1;},l);\n}\n", "  return map(function(x){return x+1;},l);\n}\n", "    return\
    \ l.map(function(x){return x+1;});\n}\n", "    return map(function(x){return x+1;},l);\n\
    }\n", "    return l.map(function(x){return x+1;});\n}\n", "  var i;\n  var new_list\
    \ = [];\n  for(i=0; i<l.length; i++){\n    new_list.push(l[i]+1);\n  }\n  return\
    \ new_list;\n}\n", "    return l.map(function(x){return x+1;});\n}\n", "    return\
    \ l.map(x => x + 1);\n}\n", "    return map(incr, l);\n}\n", "  return l.map(function(x){return\
    \ x+1;});\n}\n", "    return l.map(function(x){return x+1;});\n}\n", "    return\
    \ l.map(function(x){\n        return x+1;\n    });\n}\n", "    return l.map(function(x){return\
    \ x+1;});\n}\n", "    return l.map(function(x){return x+1;});\n}\n", "    return\
    \ map(incr, l);\n}\n", "\treturn l.map(function(x){return x+1;});\n}\n", "   \
    \ return l.map(function(x){return x+1;});\n}\n", "  return l.map(function(x){return\
    \ x+1;});\n}\n", "  return l.map(x => x + 1);\n}\n", "    return l.map(function(e){return\
    \ e+1;});\n}\n", "  return map(l, function(x){return x+1;});\n}\n", "    return\
    \ l.map(function(x){return x+1;});\n}\n", "    return l.map(function(x){return\
    \ x+1;});\n}\n", "    return l.map(function(x){return x+1;});\n}\n", "    return\
    \ l.map(function(x){return x+1;});\n}\n", "    return map(function(x){return x+1;},\
    \ l);\n}\n", "    return l.map(function(x){return x+1;});\n}\n", "    return l.map(function(x){return\
    \ x+1;});\n}\n", "    return map(incr, l);\n}\n", "    return l.map(function(x){return\
    \ x+1;});\n}\n", "  return l.map(function(x){return x+1;});\n}\n", "    return\
    \ l.map(function(x){return x+1;});\n}\n", "  return map(function(x){return x+1;},\
    \ l);\n}\n", "    return l.map(function(x){return x+1;});\n}\n", "    return l.map(function(x){\n\
    \        return x+1;\n    });\n}\n", "    return map(incr, l);\n}\n", "    return\
    \ l.map(function(x){return x+1;});\n}\n", "    return l.map(function(x){return\
    \ x+1;});\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
