name: HumanEval_157_right_angle_triangle
language: js
prompt: "//Given the lengths of the three sides of a triangle. Return True if the\
  \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
  // Example:\nfunction right_angle_triangle(a, b, c){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
  \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
  \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
  \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
  \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
  \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
completions: ["    return a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a;\n\
    }", "    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 +\
    \ arr[1] ** 2 === arr[2] ** 2;\n}", "    return a*a + b*b == c*c\n}\n", "  if(a*a\
    \ + b*b == c*c){\n    return true;\n  }\n  else if(a*a + c*c == b*b){\n    return\
    \ true;\n  }\n  else if(b*b + c*c == a*a){\n    return true;\n  }\n  else{\n \
    \   return false;\n  }\n}\n", "    let arr = [a, b, c].sort((a, b) => a - b);\n\
    \    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n", "    if (a*a + b*b\
    \ == c*c || a*a + c*c == b*b || b*b + c*c == a*a) {\n        return true;\n  \
    \  } else {\n        return false;\n    }\n}\n", "    if (a > b && a > c){\n \
    \       return (a*a) === (b*b) + (c*c);\n    } else if (b > a && b > c){\n   \
    \     return (b*b) === (a*a) + (c*c);\n    } else if (c > a && c > b){\n     \
    \   return (c*c) === (a*a) + (b*b);\n    } else {\n        return false;\n   \
    \ }\n}\n", "    return (a**2 + b**2 == c**2) || (a**2 + c**2 == b**2) || (b**2\
    \ + c**2 == a**2)\n}", "    if(a > b && a > c){\n        return a*a == b*b + c*c;\n\
    \    }\n    if(b > a && b > c){\n        return b*b == a*a + c*c;\n    }\n   \
    \ if(c > a && c > b){\n        return c*c == a*a + b*b;\n    }\n}", "    let arr\
    \ = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1]\
    \ ** 2 === arr[2] ** 2;\n}\n", "    if(a > b && a > c){\n        return a*a ==\
    \ b*b + c*c;\n    }\n    if(b > a && b > c){\n        return b*b == a*a + c*c;\n\
    \    }\n    if(c > a && c > b){\n        return c*c == a*a + b*b;\n    }\n}",
  "    return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2)\n}\n", "    let arr\
    \ = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 ===\
    \ arr[2] ** 2;\n}", "    if(a**2 + b**2 == c**2){\n        return true;\n    }\n\
    \    else if(a**2 + c**2 == b**2){\n        return true;\n    }\n    else if(b**2\
    \ + c**2 == a**2){\n        return true;\n    }\n    else{\n        return false;\n\
    \    }\n}", "    if(a > b && a > c){\n        return a*a == b*b + c*c\n    }\n\
    \    if(b > a && b > c){\n        return b*b == a*a + c*c\n    }\n    if(c > a\
    \ && c > b){\n        return c*c == a*a + b*b\n    }\n}", "    return (a**2 +\
    \ b**2 == c**2) || (a**2 + c**2 == b**2) || (b**2 + c**2 == a**2)\n}", "    if\
    \ (a > b && a > c) {\n        return a*a === b*b + c*c;\n    } else if (b > a\
    \ && b > c) {\n        return b*b === a*a + c*c;\n    } else {\n        return\
    \ c*c === a*a + b*b;\n    }\n}\n", "    return a**2 + b**2 === c**2\n}", "   \
    \ if (a > b && a > c){\n        return Math.pow(a, 2) == Math.pow(b, 2) + Math.pow(c,\
    \ 2);\n    }\n    else if (b > a && b > c){\n        return Math.pow(b, 2) ==\
    \ Math.pow(a, 2) + Math.pow(c, 2);\n    }\n    else if (c > a && c > b){\n   \
    \     return Math.pow(c, 2) == Math.pow(a, 2) + Math.pow(b, 2);\n    }\n    else{\n\
    \        return false;\n    }\n}", "    return (a**2 + b**2 === c**2) || (a**2\
    \ + c**2 === b**2) || (b**2 + c**2 === a**2)\n}\n", "    let arr = [a, b, c].sort((a,\
    \ b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}", " \
    \   if(a > b && a > c){\n        return a*a == b*b + c*c;\n    }\n    if(b > a\
    \ && b > c){\n        return b*b == a*a + c*c;\n    }\n    if(c > a && c > b){\n\
    \        return c*c == a*a + b*b;\n    }\n}\n", "    if(a > b && a > c){\n   \
    \     return a*a == b*b + c*c;\n    }\n    if(b > a && b > c){\n        return\
    \ b*b == a*a + c*c;\n    }\n    if(c > a && c > b){\n        return c*c == a*a\
    \ + b*b;\n    }\n}\n", "    var sides = [a, b, c];\n    sides.sort(function(a,\
    \ b){return a-b});\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) ===\
    \ Math.pow(sides[2], 2);\n}\n", "    if(a*a + b*b == c*c){\n        return true;\n\
    \    }\n    else if(a*a + c*c == b*b){\n        return true;\n    }\n    else\
    \ if(b*b + c*c == a*a){\n        return true;\n    }\n    else{\n        return\
    \ false;\n    }\n}", "    if (a > b && a > c){\n        return a*a === b*b + c*c;\n\
    \    } else if (b > a && b > c){\n        return b*b === a*a + c*c;\n    } else\
    \ {\n        return c*c === a*a + b*b;\n    }\n}\n", "    if(a**2 + b**2 == c**2){\n\
    \        return true;\n    }\n    else if(a**2 + c**2 == b**2){\n        return\
    \ true;\n    }\n    else if(b**2 + c**2 == a**2){\n        return true;\n    }\n\
    \    else{\n        return false;\n    }\n}", "    let arr = [a, b, c].sort((a,\
    \ b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}", " \
    \   if (a > b && a > c){\n        if (a * a == b * b + c * c){\n            return\
    \ true;\n        }\n    } else if (b > a && b > c){\n        if (b * b == a *\
    \ a + c * c){\n            return true;\n        }\n    } else if (c > a && c\
    \ > b){\n        if (c * c == a * a + b * b){\n            return true;\n    \
    \    }\n    }\n    return false;\n}\n", "    if(a*a + b*b == c*c){\n        return\
    \ true;\n    }\n    else if(a*a + c*c == b*b){\n        return true;\n    }\n\
    \    else if(b*b + c*c == a*a){\n        return true;\n    }\n    else{\n    \
    \    return false;\n    }\n}", "    if (a*a + b*b == c*c) {\n        return true;\n\
    \    } else if (a*a + c*c == b*b) {\n        return true;\n    } else if (b*b\
    \ + c*c == a*a) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n", "    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return\
    \ Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n", " \
    \   return (a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a)\n}", " \
    \   return (a**2 + b**2 === c**2) || (a**2 + c**2 === b**2) || (b**2 + c**2 ===\
    \ a**2)\n}", "    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}", "    var arr = [a, b, c];\n    arr.sort(function(a,\
    \ b){return a-b});\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2],\
    \ 2);\n}\n", "    let sides = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(sides[0],\
    \ 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}", "    if(a*a + b*b\
    \ == c*c){\n        return true;\n    }\n    if(a*a + c*c == b*b){\n        return\
    \ true;\n    }\n    if(b*b + c*c == a*a){\n        return true;\n    }\n    return\
    \ false;\n}\n", "    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b +\
    \ c*c == a*a)\n}", "    let arr = [a, b, c].sort((a, b) => a - b);\n    return\
    \ arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}", "    if(a > b && a > c){\n \
    \       return a*a == b*b + c*c;\n    }\n    if(b > a && b > c){\n        return\
    \ b*b == a*a + c*c;\n    }\n    if(c > a && c > b){\n        return c*c == a*a\
    \ + b*b;\n    }\n}\n", "    if (a === 90 || b === 90 || c === 90) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n", "    let arr = [a,\
    \ b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2\
    \ === arr[2] ** 2;\n}", "    return (a*a + b*b == c*c) || (a*a + c*c == b*b) ||\
    \ (b*b + c*c == a*a)\n}\n", "    return (a*a + b*b === c*c) || (a*a + c*c ===\
    \ b*b) || (b*b + c*c === a*a)\n}", "    return (a*a + b*b == c*c) || (a*a + c*c\
    \ == b*b) || (b*b + c*c == a*a)\n}", "    if(a*a + b*b == c*c || a*a + c*c ==\
    \ b*b || b*b + c*c == a*a){\n        return true;\n    }\n    return false;\n}",
  "    if(a*a + b*b == c*c){\n        return true;\n    }\n    else if(a*a + c*c ==\
    \ b*b){\n        return true;\n    }\n    else if(b*b + c*c == a*a){\n       \
    \ return true;\n    }\n    else{\n        return false;\n    }\n}", "    if(a*a\
    \ + b*b == c*c){\n        return true;\n    }\n    if(a*a + c*c == b*b){\n   \
    \     return true;\n    }\n    if(b*b + c*c == a*a){\n        return true;\n \
    \   }\n    return false;\n}\n", "    return (a**2 + b**2 == c**2) || (a**2 + c**2\
    \ == b**2) || (b**2 + c**2 == a**2)\n}", "    return a**2 + b**2 === c**2;\n}",
  "    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] **\
    \ 2 + arr[1] ** 2 === arr[2] ** 2;\n}", "    return (a**2 + b**2 == c**2) || (a**2\
    \ + c**2 == b**2) || (b**2 + c**2 == a**2)\n}", "    return a**2 + b**2 === c**2;\n\
    }\n", "    if (a === 90 || b === 90 || c === 90) {\n        return true;\n   \
    \ } else {\n        return false;\n    }\n}", "    if(a > b && a > c){\n     \
    \   return (a * a) === (b * b) + (c * c);\n    } else if(b > a && b > c){\n  \
    \      return (b * b) === (a * a) + (c * c);\n    } else {\n        return (c\
    \ * c) === (a * a) + (b * b);\n    }\n}\n", "    if (a > b && a > c) {\n     \
    \   return a*a == b*b + c*c;\n    } else if (b > a && b > c) {\n        return\
    \ b*b == a*a + c*c;\n    } else {\n        return c*c == a*a + b*b;\n    }\n}",
  "    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] **\
    \ 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n", "    if (a > b && a > c) {\n       \
    \ return a * a === b * b + c * c;\n    } else if (b > a && b > c) {\n        return\
    \ b * b === a * a + c * c;\n    } else {\n        return c * c === a * a + b *\
    \ b;\n    }\n}\n", "    if(a*a + b*b == c*c){\n        return true;\n    }\n \
    \   if(a*a + c*c == b*b){\n        return true;\n    }\n    if(b*b + c*c == a*a){\n\
    \        return true;\n    }\n    return false;\n}\n", "    if(a > b && a > c){\n\
    \        return a*a == b*b + c*c;\n    }\n    if(b > a && b > c){\n        return\
    \ b*b == a*a + c*c;\n    }\n    if(c > a && c > b){\n        return c*c == a*a\
    \ + b*b;\n    }\n}\n", "    if (a*a + b*b == c*c) {\n        return true;\n  \
    \  } else if (a*a + c*c == b*b) {\n        return true;\n    } else if (b*b +\
    \ c*c == a*a) {\n        return true;\n    } else {\n        return false;\n \
    \   }\n}", "    return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2)\n}",
  "    if (a*a + b*b == c*c) {\n        return true;\n    } else if (a*a + c*c ==\
    \ b*b) {\n        return true;\n    } else if (b*b + c*c == a*a) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n", "    if(a > b && a\
    \ > c){\n        return a*a == b*b + c*c;\n    }\n    if(b > a && b > c){\n  \
    \      return b*b == a*a + c*c;\n    }\n    if(c > a && c > b){\n        return\
    \ c*c == a*a + b*b;\n    }\n}", "    let arr = [a, b, c];\n    arr.sort((a, b)\
    \ => a - b);\n    let [x, y, z] = arr;\n    return x * x + y * y === z * z;\n\
    }\n", "    return (a**2 + b**2 === c**2) || (a**2 + c**2 === b**2) || (b**2 +\
    \ c**2 === a**2)\n}\n", "    if(a === 0 || b === 0 || c === 0){\n        return\
    \ false;\n    }\n    if(a === b && b === c){\n        return false;\n    }\n \
    \   if(a === b || b === c || a === c){\n        return true;\n    }\n    if(a\
    \ > b && a > c){\n        if(a * a === b * b + c * c){\n            return true;\n\
    \        }\n    }\n    if(b > a && b > c){\n        if(b * b === a * a + c * c){\n\
    \            return true;\n        }\n    }\n    if(c > a && c > b){\n       \
    \ if(c * c === a * a + b * b){\n            return true;\n        }\n    }\n \
    \   return false;\n}\n", "    let arr = [a, b, c];\n    arr.sort((a, b) => a -\
    \ b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2],\
    \ 2);\n}\n", "    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return\
    \ Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n", " \
    \   if(a > b && a > c){\n        return a*a === b*b + c*c;\n    } else if(b >\
    \ a && b > c){\n        return b*b === a*a + c*c;\n    } else if(c > a && c >\
    \ b){\n        return c*c === a*a + b*b;\n    }\n}", "    let arr = [a, b, c].sort((a,\
    \ b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}", " \
    \   return (a**2 + b**2 == c**2) || (a**2 + c**2 == b**2) || (b**2 + c**2 == a**2)\n\
    }\n", "    if(a > b && a > c){\n        return Math.pow(a, 2) == Math.pow(b, 2)\
    \ + Math.pow(c, 2);\n    } else if(b > a && b > c){\n        return Math.pow(b,\
    \ 2) == Math.pow(a, 2) + Math.pow(c, 2);\n    } else if(c > a && c > b){\n   \
    \     return Math.pow(c, 2) == Math.pow(a, 2) + Math.pow(b, 2);\n    }\n}", " \
    \   return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a)\n}",
  "    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] **\
    \ 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n", "    let arr = [a, b, c];\n    arr.sort((a,\
    \ b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}", " \
    \   if(a > b && a > c){\n        return a*a === b*b + c*c\n    } else if(b > a\
    \ && b > c){\n        return b*b === a*a + c*c\n    } else if(c > a && c > b){\n\
    \        return c*c === a*a + b*b\n    }\n}", "    if (a * a + b * b == c * c)\
    \ {\n        return true;\n    } else if (a * a + c * c == b * b) {\n        return\
    \ true;\n    } else if (b * b + c * c == a * a) {\n        return true;\n    }\
    \ else {\n        return false;\n    }\n}", "    if(a > b && a > c){\n       \
    \ return a*a == b*b + c*c;\n    }\n    if(b > a && b > c){\n        return b*b\
    \ == a*a + c*c;\n    }\n    if(c > a && c > b){\n        return c*c == a*a + b*b;\n\
    \    }\n}\n", "    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0]\
    \ * arr[0] + arr[1] * arr[1] === arr[2] * arr[2];\n}", "    return a*a + b*b ==\
    \ c*c || a*a + c*c == b*b || b*b + c*c == a*a\n}\n", "    if(a > b && a > c){\n\
    \        return (a*a) === (b*b) + (c*c);\n    } else if(b > a && b > c){\n   \
    \     return (b*b) === (a*a) + (c*c);\n    } else {\n        return (c*c) ===\
    \ (a*a) + (b*b);\n    }\n}", "    if(a > b && a > c){\n        if(a*a == b*b +\
    \ c*c){\n            return true;\n        }\n    }\n    if(b > a && b > c){\n\
    \        if(b*b == a*a + c*c){\n            return true;\n        }\n    }\n \
    \   if(c > a && c > b){\n        if(c*c == a*a + b*b){\n            return true;\n\
    \        }\n    }\n    return false;\n}\n", "    if(a > b && a > c){\n       \
    \ if(a*a == b*b + c*c){\n            return true;\n        }\n    }\n    if(b\
    \ > a && b > c){\n        if(b*b == a*a + c*c){\n            return true;\n  \
    \      }\n    }\n    if(c > a && c > b){\n        if(c*c == a*a + b*b){\n    \
    \        return true;\n        }\n    }\n    return false;\n}\n", "    if(a ===\
    \ 0 || b === 0 || c === 0){\n        return false;\n    }\n    let arr = [a, b,\
    \ c];\n    arr.sort(function(a, b){return a-b});\n    let a2 = Math.pow(arr[0],\
    \ 2);\n    let b2 = Math.pow(arr[1], 2);\n    let c2 = Math.pow(arr[2], 2);\n\
    \    if(a2 + b2 === c2){\n        return true;\n    }\n    return false;\n}\n",
  "    if (a > b && a > c) {\n        return a * a === b * b + c * c;\n    } else\
    \ if (b > a && b > c) {\n        return b * b === a * a + c * c;\n    } else {\n\
    \        return c * c === a * a + b * b;\n    }\n}\n", "    let arr = [a, b, c].sort((a,\
    \ b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n",
  "    return (a**2 + b**2 == c**2) || (a**2 + c**2 == b**2) || (b**2 + c**2 == a**2)\n\
    }", "    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 +\
    \ arr[1] ** 2 === arr[2] ** 2;\n}", "    return Math.pow(a, 2) + Math.pow(b, 2)\
    \ === Math.pow(c, 2)\n}\n", "    return (a * a + b * b == c * c) || (a * a + c\
    \ * c == b * b) || (b * b + c * c == a * a);\n}", "    return a*a + b*b == c*c;\n\
    }\n", "    return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2)\n}", "  \
    \  let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] **\
    \ 2 + arr[1] ** 2 === arr[2] ** 2;\n}", "    let arr = [a, b, c].sort((a, b) =>\
    \ a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}", "    return\
    \ a**2 + b**2 === c**2 || a**2 + c**2 === b**2 || b**2 + c**2 === a**2\n}\n",
  "    return (a**2 + b**2 == c**2) || (a**2 + c**2 == b**2) || (b**2 + c**2 == a**2)\n\
    }", "    return a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a;\n}",
  "    if (a > b && a > c){\n        if (a * a == b * b + c * c){\n            return\
    \ true;\n        }\n    }\n    else if (b > a && b > c){\n        if (b * b ==\
    \ a * a + c * c){\n            return true;\n        }\n    }\n    else if (c\
    \ > a && c > b){\n        if (c * c == a * a + b * b){\n            return true;\n\
    \        }\n    }\n    return false;\n}", "    if(a**2 + b**2 == c**2){\n    \
    \    return true;\n    }\n    else if(a**2 + c**2 == b**2){\n        return true;\n\
    \    }\n    else if(b**2 + c**2 == a**2){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}", "    if (a*a + b*b == c*c) {\n        return\
    \ true;\n    } else if (a*a + c*c == b*b) {\n        return true;\n    } else\
    \ if (b*b + c*c == a*a) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n", "    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n\
    \    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}", "    if (a > b &&\
    \ a > c) {\n        return a * a === b * b + c * c;\n    } else if (b > a && b\
    \ > c) {\n        return b * b === a * a + c * c;\n    } else {\n        return\
    \ c * c === a * a + b * b;\n    }\n}\n", "    return a**2 + b**2 === c**2 || a**2\
    \ + c**2 === b**2 || b**2 + c**2 === a**2;\n}", "    let arr = [a, b, c];\n  \
    \  arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2]\
    \ ** 2;\n}\n", "    if(Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2)){\n \
    \       return true;\n    } else if(Math.pow(a, 2) + Math.pow(c, 2) == Math.pow(b,\
    \ 2)){\n        return true;\n    } else if(Math.pow(b, 2) + Math.pow(c, 2) ==\
    \ Math.pow(a, 2)){\n        return true;\n    } else {\n        return false;\n\
    \    }\n}", "    return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2)\n}",
  "    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] **\
    \ 2 + arr[1] ** 2 === arr[2] ** 2;\n}", "    if(a*a + b*b == c*c){\n        return\
    \ true;\n    }\n    else if(a*a + c*c == b*b){\n        return true;\n    }\n\
    \    else if(b*b + c*c == a*a){\n        return true;\n    }\n    else{\n    \
    \    return false;\n    }\n}", "    let arr = [a, b, c];\n    arr.sort((a, b)\
    \ => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}", "   \
    \ return a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a\n}", "    return\
    \ Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2)\n}\n", "    if(a > b && a\
    \ > c){\n        if(a*a == b*b + c*c){\n            return true;\n        }\n\
    \    }\n    if(b > a && b > c){\n        if(b*b == a*a + c*c){\n            return\
    \ true;\n        }\n    }\n    if(c > a && c > b){\n        if(c*c == a*a + b*b){\n\
    \            return true;\n        }\n    }\n    return false;\n}", "    if(a\
    \ > b && a > c){\n        return a*a == b*b + c*c\n    } else if(b > a && b >\
    \ c){\n        return b*b == a*a + c*c\n    } else if(c > a && c > b){\n     \
    \   return c*c == a*a + b*b\n    }\n}", "    let arr = [a, b, c];\n    arr.sort((a,\
    \ b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2],\
    \ 2);\n}", "    return (a**2 + b**2 === c**2) || (a**2 + c**2 === b**2) || (b**2\
    \ + c**2 === a**2)\n}\n", "    return a**2 + b**2 === c**2\n}", "    let arr =\
    \ [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2]\
    \ ** 2;\n}", "    if (a > b && a > c) {\n        return a * a === b * b + c *\
    \ c;\n    } else if (b > a && b > c) {\n        return b * b === a * a + c * c;\n\
    \    } else {\n        return c * c === a * a + b * b;\n    }\n}", "    if(a >\
    \ b && a > c){\n        return a * a === b * b + c * c;\n    }\n    if(b > a &&\
    \ b > c){\n        return b * b === a * a + c * c;\n    }\n    if(c > a && c >\
    \ b){\n        return c * c === a * a + b * b;\n    }\n}", "    let arr = [a,\
    \ b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2\
    \ === arr[2] ** 2;\n}", "    let arr = [a, b, c].sort((a, b) => a - b);\n    return\
    \ arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}", "    if (a === 0 || b === 0\
    \ || c === 0) {\n        return false;\n    }\n    if (a === b && b === c) {\n\
    \        return false;\n    }\n    if (a === b || b === c || a === c) {\n    \
    \    return true;\n    }\n    if (a > b && a > c) {\n        return a * a ===\
    \ b * b + c * c;\n    }\n    if (b > a && b > c) {\n        return b * b === a\
    \ * a + c * c;\n    }\n    if (c > a && c > b) {\n        return c * c === a *\
    \ a + b * b;\n    }\n}\n", "    let arr = [a, b, c];\n    arr.sort((a, b) => a\
    \ - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}", "    return\
    \ Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2)\n}", "    let arr = [a, b,\
    \ c].sort((a, b) => a - b);\n    return arr[0]**2 + arr[1]**2 === arr[2]**2;\n\
    }", "    return (a**2 + b**2 === c**2) || (a**2 + c**2 === b**2) || (b**2 + c**2\
    \ === a**2)\n}\n", "    if (a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c\
    \ == a*a) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\n", "    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a)\n\
    }\n", "    if(a > b && a > c){\n        return Math.pow(a, 2) === Math.pow(b,\
    \ 2) + Math.pow(c, 2)\n    }\n    if(b > a && b > c){\n        return Math.pow(b,\
    \ 2) === Math.pow(a, 2) + Math.pow(c, 2)\n    }\n    if(c > a && c > b){\n   \
    \     return Math.pow(c, 2) === Math.pow(a, 2) + Math.pow(b, 2)\n    }\n}", " \
    \   if(a > b && a > c){\n        return a*a == b*b + c*c;\n    }\n    if(b > a\
    \ && b > c){\n        return b*b == a*a + c*c;\n    }\n    if(c > a && c > b){\n\
    \        return c*c == a*a + b*b;\n    }\n}", "    return Math.pow(a, 2) + Math.pow(b,\
    \ 2) === Math.pow(c, 2)\n}", "    if (a > b && a > c){\n        return (a*a) ==\
    \ (b*b) + (c*c);\n    } else if (b > a && b > c){\n        return (b*b) == (a*a)\
    \ + (c*c);\n    } else {\n        return (c*c) == (a*a) + (b*b);\n    }\n}\n",
  "    return (a**2 + b**2 == c**2) || (a**2 + c**2 == b**2) || (b**2 + c**2 == a**2)\n\
    }\n", "    if (a > b && a > c){\n        if (a * a == b * b + c * c){\n      \
    \      return true;\n        }\n    } else if (b > a && b > c){\n        if (b\
    \ * b == a * a + c * c){\n            return true;\n        }\n    } else if (c\
    \ > a && c > b){\n        if (c * c == a * a + b * b){\n            return true;\n\
    \        }\n    }\n    return false;\n}\n", "    let arr = [a, b, c];\n    arr.sort((a,\
    \ b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}", " \
    \   let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] **\
    \ 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n", "    let arr = [a, b, c].sort((a, b)\
    \ => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}", "   \
    \ if (a > b && a > c) {\n        return a*a === b*b + c*c;\n    } else if (b >\
    \ a && b > c) {\n        return b*b === a*a + c*c;\n    } else {\n        return\
    \ c*c === a*a + b*b;\n    }\n}", "    if (a + b > c && a + c > b && b + c > a)\
    \ {\n        if (a * a + b * b == c * c || a * a + c * c == b * b || b * b + c\
    \ * c == a * a) {\n            return true;\n        }\n    }\n    return false;\n\
    }\n", "    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2\
    \ + arr[1] ** 2 === arr[2] ** 2;\n}", "    return Math.pow(a, 2) + Math.pow(b,\
    \ 2) === Math.pow(c, 2)\n}", "    return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c,\
    \ 2)\n}", "    return a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a\n\
    }\n", "    let arr = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}", "    let arr = [a, b,\
    \ c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 ===\
    \ arr[2] ** 2;\n}", "    if (a > b && a > c) {\n        return a * a === b * b\
    \ + c * c;\n    } else if (b > a && b > c) {\n        return b * b === a * a +\
    \ c * c;\n    } else {\n        return c * c === a * a + b * b;\n    }\n}\n",
  "    return a**2 + b**2 === c**2\n}", "    if (a > b && a > c) {\n        return\
    \ (a*a == b*b + c*c)\n    } else if (b > a && b > c) {\n        return (b*b ==\
    \ a*a + c*c)\n    } else if (c > a && c > b) {\n        return (c*c == a*a + b*b)\n\
    \    }\n}", "    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return\
    \ arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n", "    let arr = [a, b, c];\n\
    \    arr.sort(function(a, b){return a-b});\n    return Math.pow(arr[0], 2) + Math.pow(arr[1],\
    \ 2) === Math.pow(arr[2], 2);\n}", "    if(a*a + b*b == c*c){\n        return\
    \ true;\n    }\n    if(a*a + c*c == b*b){\n        return true;\n    }\n    if(b*b\
    \ + c*c == a*a){\n        return true;\n    }\n    return false;\n}", "    return\
    \ Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2)\n}\n", "    let arr = [a,\
    \ b, c].sort((a, b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1],\
    \ 2) === Math.pow(arr[2], 2);\n}", "    let arr = [a, b, c];\n    arr.sort((a,\
    \ b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}", " \
    \   let max = Math.max(a, b, c);\n    let min = Math.min(a, b, c);\n    let mid\
    \ = a + b + c - max - min;\n    return max ** 2 === mid ** 2 + min ** 2;\n}",
  "    if (a > b && a > c) {\n        return a * a === b * b + c * c;\n    } else\
    \ if (b > a && b > c) {\n        return b * b === a * a + c * c;\n    } else {\n\
    \        return c * c === a * a + b * b;\n    }\n}\n", "    if (a > b && a > c)\
    \ {\n        return a * a === b * b + c * c;\n    } else if (b > a && b > c) {\n\
    \        return b * b === a * a + c * c;\n    } else {\n        return c * c ===\
    \ a * a + b * b;\n    }\n}\n", "    if(a > b && a > c){\n        if(a*a == b*b\
    \ + c*c){\n            return true;\n        }\n    }\n    if(b > a && b > c){\n\
    \        if(b*b == a*a + c*c){\n            return true;\n        }\n    }\n \
    \   if(c > a && c > b){\n        if(c*c == a*a + b*b){\n            return true;\n\
    \        }\n    }\n    return false;\n}\n", "    if(a > b && a > c){\n       \
    \ return a*a == b*b + c*c;\n    }\n    if(b > a && b > c){\n        return b*b\
    \ == a*a + c*c;\n    }\n    if(c > a && c > b){\n        return c*c == a*a + b*b;\n\
    \    }\n}\n", "    return a**2 + b**2 === c**2;\n}", "    return Math.pow(a, 2)\
    \ + Math.pow(b, 2) === Math.pow(c, 2)\n}", "    if (a > b && a > c){\n       \
    \ if (a*a == b*b + c*c){\n            return true;\n        }\n    }\n    else\
    \ if (b > a && b > c){\n        if (b*b == a*a + c*c){\n            return true;\n\
    \        }\n    }\n    else if (c > a && c > b){\n        if (c*c == a*a + b*b){\n\
    \            return true;\n        }\n    }\n    return false;\n}", "    if (a\
    \ > b && a > c){\n        return a * a === b * b + c * c;\n    } else if (b >\
    \ a && b > c){\n        return b * b === a * a + c * c;\n    } else {\n      \
    \  return c * c === a * a + b * b;\n    }\n}", "    if(a > b && a > c){\n    \
    \    return a**2 === b**2 + c**2\n    } else if(b > a && b > c){\n        return\
    \ b**2 === a**2 + c**2\n    } else if(c > a && c > b){\n        return c**2 ===\
    \ a**2 + b**2\n    }\n}", "    return (a*a + b*b == c*c) || (a*a + c*c == b*b)\
    \ || (b*b + c*c == a*a)\n}\n", "    if(a == 90 || b == 90 || c == 90){\n     \
    \   return true;\n    }\n    else{\n        return false;\n    }\n}\n", "    return\
    \ (a**2 + b**2 == c**2) || (a**2 + c**2 == b**2) || (b**2 + c**2 == a**2)\n}\n",
  "    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a)\n}",
  "    if (a > b && a > c) {\n        return a * a === b * b + c * c;\n    } else\
    \ if (b > a && b > c) {\n        return b * b === a * a + c * c;\n    } else {\n\
    \        return c * c === a * a + b * b;\n    }\n}", "    return Math.pow(a, 2)\
    \ + Math.pow(b, 2) === Math.pow(c, 2)\n}\n", "    return (a*a + b*b == c*c) ||\
    \ (a*a + c*c == b*b) || (b*b + c*c == a*a)\n}\n", "    if(a*a + b*b == c*c){\n\
    \        return true;\n    }\n    if(a*a + c*c == b*b){\n        return true;\n\
    \    }\n    if(b*b + c*c == a*a){\n        return true;\n    }\n    return false;\n\
    }", "    if (a > b && a > c){\n        return a*a === b*b + c*c;\n    } else if\
    \ (b > a && b > c){\n        return b*b === a*a + c*c;\n    } else {\n       \
    \ return c*c === a*a + b*b;\n    }\n}\n", "    let arr = [a, b, c];\n    arr.sort((a,\
    \ b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n",
  "    if(a === 0 || b === 0 || c === 0){\n        return false;\n    }\n    if(a\
    \ === Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2))){\n        return true;\n   \
    \ }\n    if(b === Math.sqrt(Math.pow(a, 2) + Math.pow(c, 2))){\n        return\
    \ true;\n    }\n    if(c === Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2))){\n  \
    \      return true;\n    }\n    return false;\n}\n", "    return (a*a + b*b ==\
    \ c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a)\n}", "    let arr = [a, b,\
    \ c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1],\
    \ 2) === Math.pow(arr[2], 2);\n}\n", "    let arr = [a, b, c].sort((a, b) => a\
    \ - b);\n    return arr[0]**2 + arr[1]**2 === arr[2]**2;\n}", "    if(a > b &&\
    \ a > c){\n        return Math.pow(a, 2) === Math.pow(b, 2) + Math.pow(c, 2)\n\
    \    }\n    if(b > a && b > c){\n        return Math.pow(b, 2) === Math.pow(a,\
    \ 2) + Math.pow(c, 2)\n    }\n    if(c > a && c > b){\n        return Math.pow(c,\
    \ 2) === Math.pow(a, 2) + Math.pow(b, 2)\n    }\n}\n", "    return (a*a + b*b\
    \ == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a)\n}", "    if(a > b && a\
    \ > c){\n        return a*a === b*b + c*c;\n    }\n    if(b > a && b > c){\n \
    \       return b*b === a*a + c*c;\n    }\n    if(c > a && c > b){\n        return\
    \ c*c === a*a + b*b;\n    }\n}", "    return (a**2 + b**2 == c**2) || (a**2 +\
    \ c**2 == b**2) || (b**2 + c**2 == a**2)\n}\n", "    if(a*a + b*b == c*c || a*a\
    \ + c*c == b*b || b*b + c*c == a*a){\n        return true;\n    }\n    return\
    \ false;\n}", "    if(a > b && a > c){\n        return Math.pow(a, 2) === Math.pow(b,\
    \ 2) + Math.pow(c, 2)\n    } else if(b > a && b > c){\n        return Math.pow(b,\
    \ 2) === Math.pow(a, 2) + Math.pow(c, 2)\n    } else if(c > a && c > b){\n   \
    \     return Math.pow(c, 2) === Math.pow(a, 2) + Math.pow(b, 2)\n    }\n}", " \
    \   if (a > b && a > c) {\n        return a * a === b * b + c * c;\n    }\n  \
    \  if (b > a && b > c) {\n        return b * b === a * a + c * c;\n    }\n   \
    \ if (c > a && c > b) {\n        return c * c === a * a + b * b;\n    }\n}", " \
    \   let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] **\
    \ 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n", "    if(a > b && a > c){\n        return\
    \ a*a == b*b + c*c\n    }\n    if(b > a && b > c){\n        return b*b == a*a\
    \ + c*c\n    }\n    if(c > a && c > b){\n        return c*c == a*a + b*b\n   \
    \ }\n}", "    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c ==\
    \ a*a)\n}\n", "    if(a > b && a > c){\n        return Math.pow(a, 2) === Math.pow(b,\
    \ 2) + Math.pow(c, 2)\n    }\n    if(b > a && b > c){\n        return Math.pow(b,\
    \ 2) === Math.pow(a, 2) + Math.pow(c, 2)\n    }\n    if(c > a && c > b){\n   \
    \     return Math.pow(c, 2) === Math.pow(a, 2) + Math.pow(b, 2)\n    }\n}\n",
  "    if (a > b && a > c) {\n        return a*a === b*b + c*c;\n    } else if (b\
    \ > a && b > c) {\n        return b*b === a*a + c*c;\n    } else {\n        return\
    \ c*c === a*a + b*b;\n    }\n}\n", "    if (a > b && a > c){\n        return a*a\
    \ == b*b + c*c;\n    } else if (b > a && b > c){\n        return b*b == a*a +\
    \ c*c;\n    } else {\n        return c*c == a*a + b*b;\n    }\n}\n", "    let\
    \ arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1]\
    \ ** 2 === arr[2] ** 2;\n}", "    if(a*a + b*b == c*c){\n        return true;\n\
    \    }\n    if(a*a + c*c == b*b){\n        return true;\n    }\n    if(b*b + c*c\
    \ == a*a){\n        return true;\n    }\n    return false;\n}", "    if (a > b\
    \ && a > c) {\n        return a*a == b*b + c*c;\n    } else if (b > a && b > c)\
    \ {\n        return b*b == a*a + c*c;\n    } else {\n        return c*c == a*a\
    \ + b*b;\n    }\n}\n", "    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n\
    \    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}", "    return (a**2\
    \ + b**2 === c**2) || (a**2 + c**2 === b**2) || (b**2 + c**2 === a**2)\n}", " \
    \   let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n", "    let arr = [a,\
    \ b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2\
    \ === arr[2] ** 2;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
