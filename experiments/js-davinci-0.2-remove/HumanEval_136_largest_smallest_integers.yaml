name: HumanEval_136_largest_smallest_integers
language: js
prompt: "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest\
  \ of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n\
  // If there is no negative or positive integers, return them as None.\n// Examples:\n\
  function largest_smallest_integers(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined,\
  \ 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n \
  \ assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4,\
  \ 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2,\
  \ 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n\
  \  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1,\
  \ -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6,\
  \ 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3,\
  \ 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\n\
  test();"
completions: ["    let positive = lst.filter(x => x > 0);\n    let negative = lst.filter(x\
    \ => x < 0);\n    if (positive.length === 0 || negative.length === 0){\n     \
    \   return [null, null];\n    }\n    else{\n        return [Math.max(...negative),\
    \ Math.min(...positive)];\n    }\n}\n", "    let neg = null;\n    let pos = null;\n\
    \    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n         \
    \   if(neg == null || lst[i] > neg){\n                neg = lst[i];\n        \
    \    }\n        }\n        else if(lst[i] > 0){\n            if(pos == null ||\
    \ lst[i] < pos){\n                pos = lst[i];\n            }\n        }\n  \
    \  }\n    return [neg, pos];\n}", "    let neg_lst = [];\n    let pos_lst = [];\n\
    \    for (let i = 0; i < lst.length; i++){\n        if (lst[i] < 0){\n       \
    \     neg_lst.push(lst[i]);\n        }\n        else if (lst[i] > 0){\n      \
    \      pos_lst.push(lst[i]);\n        }\n    }\n    if (neg_lst.length == 0 ||\
    \ pos_lst.length == 0){\n        return [None, None];\n    }\n    else{\n    \
    \    return [Math.max(...neg_lst), Math.min(...pos_lst)];\n    }\n}\n", "    let\
    \ neg = null;\n    let pos = null;\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] < 0){\n            if(neg === null || lst[i] > neg){\n    \
    \            neg = lst[i];\n            }\n        }\n        else if(lst[i] >\
    \ 0){\n            if(pos === null || lst[i] < pos){\n                pos = lst[i];\n\
    \            }\n        }\n    }\n    return [neg, pos];\n}\n", "    var negative\
    \ = [];\n    var positive = [];\n    for(var i = 0; i < lst.length; i++){\n  \
    \      if(lst[i] < 0){\n            negative.push(lst[i]);\n        }\n      \
    \  else if(lst[i] > 0){\n            positive.push(lst[i]);\n        }\n    }\n\
    \    if(negative.length == 0 || positive.length == 0){\n        return [null,\
    \ null];\n    }\n    else{\n        return [Math.max.apply(null, negative), Math.min.apply(null,\
    \ positive)];\n    }\n}", "  let neg = [];\n  let pos = [];\n  for(let i = 0;\
    \ i < lst.length; i++){\n    if(lst[i] < 0){\n      neg.push(lst[i]);\n    }\n\
    \    else if(lst[i] > 0){\n      pos.push(lst[i]);\n    }\n  }\n  if(neg.length\
    \ === 0 || pos.length === 0){\n    return [null, null];\n  }\n  else{\n    return\
    \ [Math.max(...neg), Math.min(...pos)];\n  }\n}", "    var largest_negative =\
    \ null;\n    var smallest_positive = null;\n    for (var i = 0; i < lst.length;\
    \ i++){\n        if (lst[i] < 0){\n            if (largest_negative === null ||\
    \ lst[i] > largest_negative){\n                largest_negative = lst[i];\n  \
    \          }\n        }\n        else if (lst[i] > 0){\n            if (smallest_positive\
    \ === null || lst[i] < smallest_positive){\n                smallest_positive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n\
    }", "    let neg = [];\n    let pos = [];\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n \
    \       else if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n\
    \    if(neg.length === 0 || pos.length === 0){\n        return [null, null];\n\
    \    }\n    else{\n        return [Math.max(...neg), Math.min(...pos)];\n    }\n\
    }", "    var pos = [];\n    var neg = [];\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n \
    \       else if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n\
    \    if(neg.length == 0 || pos.length == 0){\n        return [null, null];\n \
    \   }\n    else{\n        return [Math.max.apply(null, neg), Math.min.apply(null,\
    \ pos)];\n    }\n}", "    let neg = [];\n    let pos = [];\n    for(let i = 0;\
    \ i < lst.length; i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n\
    \        }\n        else if(lst[i] > 0){\n            pos.push(lst[i]);\n    \
    \    }\n    }\n    if(neg.length == 0 || pos.length == 0){\n        return [null,\
    \ null];\n    }\n    else{\n        return [Math.max(...neg), Math.min(...pos)];\n\
    \    }\n}\n", "    var negative = [];\n    var positive = [];\n    for(var i =\
    \ 0; i < lst.length; i++){\n        if(lst[i] < 0){\n            negative.push(lst[i]);\n\
    \        }\n        else if(lst[i] > 0){\n            positive.push(lst[i]);\n\
    \        }\n    }\n    if(negative.length == 0 || positive.length == 0){\n   \
    \     return [null, null];\n    }\n    else{\n        return [Math.max.apply(null,\
    \ negative), Math.min.apply(null, positive)];\n    }\n}", "    var neg_max = null;\n\
    \    var pos_min = null;\n    for (var i = 0; i < lst.length; i++){\n        if\
    \ (lst[i] < 0){\n            if (neg_max == null){\n                neg_max =\
    \ lst[i];\n            }\n            else if (lst[i] > neg_max){\n          \
    \      neg_max = lst[i];\n            }\n        }\n        else if (lst[i] >\
    \ 0){\n            if (pos_min == null){\n                pos_min = lst[i];\n\
    \            }\n            else if (lst[i] < pos_min){\n                pos_min\
    \ = lst[i];\n            }\n        }\n    }\n    return [neg_max, pos_min];\n\
    }\n", "  let pos = [];\n  let neg = [];\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(lst[i] > 0){\n      pos.push(lst[i]);\n    }else if(lst[i] < 0){\n   \
    \   neg.push(lst[i]);\n    }\n  }\n  if(pos.length === 0 || neg.length === 0){\n\
    \    return [null, null];\n  }\n  return [Math.max(...neg), Math.min(...pos)];\n\
    }", "  var neg = [];\n  var pos = [];\n  for(var i = 0; i < lst.length; i++){\n\
    \    if(lst[i] < 0){\n      neg.push(lst[i]);\n    }\n    else if(lst[i] > 0){\n\
    \      pos.push(lst[i]);\n    }\n  }\n  if(neg.length == 0){\n    neg.push(null);\n\
    \  }\n  if(pos.length == 0){\n    pos.push(null);\n  }\n  var neg_max = Math.max.apply(null,\
    \ neg);\n  var pos_min = Math.min.apply(null, pos);\n  return [neg_max, pos_min];\n\
    }", "    var pos = [];\n    var neg = [];\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n \
    \       else if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n\
    \    if(neg.length == 0 || pos.length == 0){\n        return [null, null];\n \
    \   }\n    else{\n        return [Math.max.apply(null, neg), Math.min.apply(null,\
    \ pos)];\n    }\n}", "    var neg = [];\n    var pos = [];\n    for(var i = 0;\
    \ i < lst.length; i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n\
    \        }\n        else if(lst[i] > 0){\n            pos.push(lst[i]);\n    \
    \    }\n    }\n    if(neg.length == 0){\n        neg.push(null);\n    }\n    if(pos.length\
    \ == 0){\n        pos.push(null);\n    }\n    return [Math.max.apply(null, neg),\
    \ Math.min.apply(null, pos)];\n}", "    var a = Math.max.apply(null, lst.filter(x\
    \ => x < 0));\n    var b = Math.min.apply(null, lst.filter(x => x > 0));\n   \
    \ return [a, b];\n}", "  var a = Math.max.apply(null, lst.filter(function(x){return\
    \ x < 0}));\n  var b = Math.min.apply(null, lst.filter(function(x){return x >\
    \ 0}));\n  if(a === -Infinity || b === Infinity){\n    return [None, None];\n\
    \  }\n  return [a, b];\n}", "    var pos = [];\n    var neg = [];\n    for(var\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n\
    \        }\n        else{\n            pos.push(lst[i]);\n        }\n    }\n \
    \   if(neg.length == 0 || pos.length == 0){\n        return [null, null];\n  \
    \  }\n    else{\n        return [Math.max.apply(null, neg), Math.min.apply(null,\
    \ pos)];\n    }\n}\n", "    let a = lst.filter(x => x < 0).sort((a, b) => a -\
    \ b).reverse()[0]\n    let b = lst.filter(x => x > 0).sort((a, b) => a - b)[0]\n\
    \    return [a, b]\n}\n", "    var largest = null;\n    var smallest = null;\n\
    \    for(var i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (largest ==\
    \ null || lst[i] > largest)){\n            largest = lst[i];\n        }\n    \
    \    if(lst[i] > 0 && (smallest == null || lst[i] < smallest)){\n            smallest\
    \ = lst[i];\n        }\n    }\n    return [largest, smallest];\n}\n", "    var\
    \ pos = [];\n    var neg = [];\n    for(var i = 0; i < lst.length; i++){\n   \
    \     if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n        else\
    \ if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n    if(neg.length\
    \ == 0 || pos.length == 0){\n        return [null, null];\n    }\n    else{\n\
    \        return [Math.max.apply(null, neg), Math.min.apply(null, pos)];\n    }\n\
    }", "    var a = Math.max.apply(null, lst);\n    var b = Math.min.apply(null,\
    \ lst);\n    return [a, b];\n}", "    let a = Math.max(...lst.filter(x => x <\
    \ 0));\n    let b = Math.min(...lst.filter(x => x > 0));\n    return [a, b];\n\
    }", "    let neg = [];\n    let pos = [];\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n \
    \       else if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n\
    \    if(neg.length === 0){\n        neg.push(null);\n    }\n    if(pos.length\
    \ === 0){\n        pos.push(null);\n    }\n    return [Math.max(...neg), Math.min(...pos)];\n\
    }", "    var a = lst.filter(function(x){return x < 0}).sort(function(a,b){return\
    \ a-b}).pop();\n    var b = lst.filter(function(x){return x > 0}).sort(function(a,b){return\
    \ a-b}).shift();\n    return [a,b];\n}\n", "    let a = null;\n    let b = null;\n\
    \    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (a === null\
    \ || lst[i] > a)){\n            a = lst[i];\n        }\n        if(lst[i] > 0\
    \ && (b === null || lst[i] < b)){\n            b = lst[i];\n        }\n    }\n\
    \    return [a, b];\n}", "    let neg = [];\n    let pos = [];\n    for(let i\
    \ = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n\
    \        }\n        else if(lst[i] > 0){\n            pos.push(lst[i]);\n    \
    \    }\n    }\n    if(neg.length === 0){\n        neg.push(null);\n    }\n   \
    \ if(pos.length === 0){\n        pos.push(null);\n    }\n    return [Math.max(...neg),\
    \ Math.min(...pos)];\n}\n", "    let a = null;\n    let b = null;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (a === null || lst[i]\
    \ > a)){\n            a = lst[i];\n        }\n        if(lst[i] > 0 && (b ===\
    \ null || lst[i] < b)){\n            b = lst[i];\n        }\n    }\n    return\
    \ [a, b];\n}", "  var largest = null;\n  var smallest = null;\n  for(var i = 0;\
    \ i < lst.length; i++){\n    if(lst[i] < 0 && (largest == null || lst[i] > largest)){\n\
    \      largest = lst[i];\n    }\n    if(lst[i] > 0 && (smallest == null || lst[i]\
    \ < smallest)){\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n\
    }\n", "    let negatives = lst.filter(x => x < 0);\n    let positives = lst.filter(x\
    \ => x > 0);\n    let maxNegative = negatives.length > 0 ? Math.max(...negatives)\
    \ : null;\n    let minPositive = positives.length > 0 ? Math.min(...positives)\
    \ : null;\n    return [maxNegative, minPositive];\n}\n", "  let pos = null;\n\
    \  let neg = null;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] > 0\
    \ && (pos === null || lst[i] < pos)){\n      pos = lst[i];\n    }\n    if(lst[i]\
    \ < 0 && (neg === null || lst[i] > neg)){\n      neg = lst[i];\n    }\n  }\n \
    \ return [neg, pos];\n}", "  let negative = [];\n  let positive = [];\n  for(let\
    \ i = 0; i < lst.length; i++){\n    if(lst[i] < 0){\n      negative.push(lst[i]);\n\
    \    }\n    if(lst[i] > 0){\n      positive.push(lst[i]);\n    }\n  }\n  if(negative.length\
    \ === 0 || positive.length === 0){\n    return [null, null];\n  }\n  return [Math.max(...negative),\
    \ Math.min(...positive)];\n}", "    let negative = [];\n    let positive = [];\n\
    \    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n         \
    \   negative.push(lst[i]);\n        }\n        else if(lst[i] > 0){\n        \
    \    positive.push(lst[i]);\n        }\n    }\n    if(negative.length === 0 ||\
    \ positive.length === 0){\n        return [null, null];\n    }\n    else{\n  \
    \      return [Math.max(...negative), Math.min(...positive)];\n    }\n}", "  \
    \  let neg = [];\n    let pos = [];\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n        else\
    \ if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n    if(neg.length\
    \ == 0){\n        neg.push(null);\n    }\n    if(pos.length == 0){\n        pos.push(null);\n\
    \    }\n    return [Math.max(...neg), Math.min(...pos)];\n}", "  var a = lst.filter(function(x){return\
    \ x < 0}).sort(function(a,b){return a-b}).pop();\n  var b = lst.filter(function(x){return\
    \ x > 0}).sort(function(a,b){return a-b}).shift();\n  return [a,b];\n}\n", " \
    \   var pos = [];\n    var neg = [];\n    for(var i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n        else\
    \ if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n    }\n    var pos_min\
    \ = Math.min.apply(null, pos);\n    var neg_max = Math.max.apply(null, neg);\n\
    \    return [neg_max, pos_min];\n}\n", "    let neg = [];\n    let pos = [];\n\
    \    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n         \
    \   neg.push(lst[i]);\n        }\n        else if(lst[i] > 0){\n            pos.push(lst[i]);\n\
    \        }\n    }\n    if(neg.length === 0 || pos.length === 0){\n        return\
    \ [null, null];\n    }\n    else{\n        return [Math.max(...neg), Math.min(...pos)];\n\
    \    }\n}", "    let neg = [];\n    let pos = [];\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n \
    \       else if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n\
    \    if(neg.length == 0 || pos.length == 0){\n        return [null, null];\n \
    \   }\n    else{\n        return [Math.max(...neg), Math.min(...pos)];\n    }\n\
    }\n", "    let a = Math.max(...lst.filter(x => x < 0));\n    let b = Math.min(...lst.filter(x\
    \ => x > 0));\n    return [a, b];\n}", "    var largest_negative = null;\n   \
    \ var smallest_positive = null;\n    for (var i = 0; i < lst.length; i++){\n \
    \       if (lst[i] < 0 && (largest_negative == null || lst[i] > largest_negative)){\n\
    \            largest_negative = lst[i];\n        }\n        if (lst[i] > 0 &&\
    \ (smallest_positive == null || lst[i] < smallest_positive)){\n            smallest_positive\
    \ = lst[i];\n        }\n    }\n    return [largest_negative, smallest_positive];\n\
    }", "    let neg = lst.filter(x => x < 0);\n    let pos = lst.filter(x => x >\
    \ 0);\n    if (neg.length == 0 && pos.length == 0) return [null, null];\n    if\
    \ (neg.length == 0) return [null, Math.min(...pos)];\n    if (pos.length == 0)\
    \ return [Math.max(...neg), null];\n    return [Math.max(...neg), Math.min(...pos)];\n\
    }", "    var negative = [];\n    var positive = [];\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0){\n            negative.push(lst[i]);\n       \
    \ }\n        else if(lst[i] > 0){\n            positive.push(lst[i]);\n      \
    \  }\n    }\n    if(negative.length == 0 || positive.length == 0){\n        return\
    \ [null, null];\n    }\n    else{\n        return [Math.max.apply(null, negative),\
    \ Math.min.apply(null, positive)];\n    }\n}\n", "    let neg = null;\n    let\
    \ pos = null;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n\
    \            if(neg === null || lst[i] > neg){\n                neg = lst[i];\n\
    \            }\n        }\n        else if(lst[i] > 0){\n            if(pos ===\
    \ null || lst[i] < pos){\n                pos = lst[i];\n            }\n     \
    \   }\n    }\n    return [neg, pos];\n}\n", "    var negative = [];\n    var positive\
    \ = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n \
    \           negative.push(lst[i]);\n        }\n        else if(lst[i] > 0){\n\
    \            positive.push(lst[i]);\n        }\n    }\n    if(negative.length\
    \ == 0){\n        negative = null;\n    }\n    else{\n        negative = Math.max.apply(null,\
    \ negative);\n    }\n    if(positive.length == 0){\n        positive = null;\n\
    \    }\n    else{\n        positive = Math.min.apply(null, positive);\n    }\n\
    \    return [negative, positive];\n}", "    var neg = null;\n    var pos = null;\n\
    \    for(var i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n         \
    \   if(neg == null){\n                neg = lst[i];\n            }\n         \
    \   else if(lst[i] > neg){\n                neg = lst[i];\n            }\n   \
    \     }\n        else if(lst[i] > 0){\n            if(pos == null){\n        \
    \        pos = lst[i];\n            }\n            else if(lst[i] < pos){\n  \
    \              pos = lst[i];\n            }\n        }\n    }\n    return [neg,\
    \ pos];\n}", "    let neg = [];\n    let pos = [];\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n \
    \       else if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n\
    \    if(neg.length == 0 || pos.length == 0){\n        return [null, null];\n \
    \   }\n    else{\n        return [Math.max(...neg), Math.min(...pos)];\n    }\n\
    }", "  let a = null;\n  let b = null;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] < 0 && (a === null || lst[i] > a)) {\n      a = lst[i];\n\
    \    }\n    if (lst[i] > 0 && (b === null || lst[i] < b)) {\n      b = lst[i];\n\
    \    }\n  }\n  return [a, b];\n}", "    let neg = [];\n    let pos = [];\n   \
    \ for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n\
    \        }\n        else if(lst[i] > 0){\n            pos.push(lst[i]);\n    \
    \    }\n    }\n    if(neg.length == 0){\n        neg.push(null);\n    }\n    if(pos.length\
    \ == 0){\n        pos.push(null);\n    }\n    return [Math.max(...neg), Math.min(...pos)];\n\
    }", "    let smallest = null;\n    let largest = null;\n    for(let i = 0; i <\
    \ lst.length; i++){\n        if(lst[i] < 0 && (largest === null || lst[i] > largest)){\n\
    \            largest = lst[i];\n        }\n        if(lst[i] > 0 && (smallest\
    \ === null || lst[i] < smallest)){\n            smallest = lst[i];\n        }\n\
    \    }\n    return [largest, smallest];\n}\n", "    let pos = [];\n    let neg\
    \ = [];\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0){\n \
    \           pos.push(lst[i]);\n        }\n        else if(lst[i] < 0){\n     \
    \       neg.push(lst[i]);\n        }\n    }\n    if(pos.length === 0 || neg.length\
    \ === 0){\n        return [null, null];\n    }\n    else{\n        return [Math.max(...neg),\
    \ Math.min(...pos)];\n    }\n}", "  var pos = [];\n  var neg = [];\n  for(var\
    \ i = 0; i < lst.length; i++){\n    if(lst[i] < 0){\n      neg.push(lst[i]);\n\
    \    }\n    else if(lst[i] > 0){\n      pos.push(lst[i]);\n    }\n  }\n  if(neg.length\
    \ == 0 || pos.length == 0){\n    return [null, null];\n  }\n  else{\n    return\
    \ [Math.max.apply(null, neg), Math.min.apply(null, pos)];\n  }\n}", "    let negative\
    \ = [];\n    let positive = [];\n    for(let i = 0; i < lst.length; i++){\n  \
    \      if(lst[i] < 0){\n            negative.push(lst[i]);\n        }\n      \
    \  else if(lst[i] > 0){\n            positive.push(lst[i]);\n        }\n    }\n\
    \    if(negative.length == 0 || positive.length == 0){\n        return [null,\
    \ null];\n    }\n    else{\n        return [Math.max(...negative), Math.min(...positive)];\n\
    \    }\n}", "    let pos = [];\n    let neg = [];\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n \
    \       else if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n    }\n\
    \    if(pos.length > 0 && neg.length > 0){\n        return [Math.max(...neg),\
    \ Math.min(...pos)];\n    }\n    else{\n        return [null, null];\n    }\n}",
  "    var neg = [];\n    var pos = [];\n    for(var i = 0; i < lst.length; i++){\n\
    \        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n        else\
    \ if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n    if(neg.length\
    \ == 0){\n        neg.push(null);\n    }\n    if(pos.length == 0){\n        pos.push(null);\n\
    \    }\n    return [Math.max.apply(null, neg), Math.min.apply(null, pos)];\n}",
  "    var largest = lst[0];\n    var smallest = lst[0];\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] > largest){\n            largest = lst[i];\n      \
    \  }\n        if(lst[i] < smallest){\n            smallest = lst[i];\n       \
    \ }\n    }\n    return [largest, smallest];\n}", "    var a = 0;\n    var b =\
    \ 0;\n    var neg = [];\n    var pos = [];\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n \
    \       else if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n\
    \    if(neg.length > 0){\n        a = Math.max(...neg);\n    }\n    else{\n  \
    \      a = null;\n    }\n    if(pos.length > 0){\n        b = Math.min(...pos);\n\
    \    }\n    else{\n        b = null;\n    }\n    return [a, b];\n}", "    let\
    \ neg = [];\n    let pos = [];\n    for(let i = 0; i < lst.length; i++){\n   \
    \     if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n        else\
    \ if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n    if(neg.length\
    \ === 0 || pos.length === 0){\n        return [null, null];\n    }\n    else{\n\
    \        return [Math.max(...neg), Math.min(...pos)];\n    }\n}", "    let neg\
    \ = [];\n    let pos = [];\n    for(let i = 0; i < lst.length; i++){\n       \
    \ if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n        else if(lst[i]\
    \ > 0){\n            pos.push(lst[i]);\n        }\n    }\n    if(neg.length ===\
    \ 0 || pos.length === 0){\n        return [null, null];\n    }\n    else{\n  \
    \      return [Math.max(...neg), Math.min(...pos)];\n    }\n}", "    var a = 0;\n\
    \    var b = 0;\n    var c = 0;\n    var d = 0;\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0 && lst[i] > a){\n            a = lst[i];\n    \
    \    }\n        if(lst[i] > 0 && lst[i] < b){\n            b = lst[i];\n     \
    \   }\n        if(lst[i] > 0 && lst[i] > c){\n            c = lst[i];\n      \
    \  }\n        if(lst[i] < 0 && lst[i] < d){\n            d = lst[i];\n       \
    \ }\n    }\n    if(a == 0 && b == 0){\n        return [None, None];\n    }\n \
    \   if(a == 0){\n        return [None, b];\n    }\n    if(b == 0){\n        return\
    \ [a, None];\n    }\n    return [a, b];\n}", "    var neg = [];\n    var pos =\
    \ [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n   \
    \         neg.push(lst[i]);\n        }\n        else if(lst[i] > 0){\n       \
    \     pos.push(lst[i]);\n        }\n    }\n    if(neg.length == 0 || pos.length\
    \ == 0){\n        return [null, null];\n    }\n    else{\n        return [Math.max.apply(null,\
    \ neg), Math.min.apply(null, pos)];\n    }\n}", "    var smallest_positive = null;\n\
    \    var largest_negative = null;\n    for(var i = 0; i < lst.length; i++){\n\
    \        if(lst[i] < 0){\n            if(largest_negative == null){\n        \
    \        largest_negative = lst[i];\n            }\n            else if(lst[i]\
    \ > largest_negative){\n                largest_negative = lst[i];\n         \
    \   }\n        }\n        else if(lst[i] > 0){\n            if(smallest_positive\
    \ == null){\n                smallest_positive = lst[i];\n            }\n    \
    \        else if(lst[i] < smallest_positive){\n                smallest_positive\
    \ = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n\
    }\n", "  let neg = [];\n  let pos = [];\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(lst[i] < 0){\n      neg.push(lst[i]);\n    }\n    else if(lst[i] > 0){\n\
    \      pos.push(lst[i]);\n    }\n  }\n  if(neg.length === 0){\n    neg.push(null);\n\
    \  }\n  if(pos.length === 0){\n    pos.push(null);\n  }\n  return [Math.max(...neg),\
    \ Math.min(...pos)];\n}\n", "    let neg = [];\n    let pos = [];\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n\
    \        }\n        else if(lst[i] > 0){\n            pos.push(lst[i]);\n    \
    \    }\n    }\n    if(neg.length === 0 || pos.length === 0){\n        return [null,\
    \ null];\n    }\n    else{\n        return [Math.max(...neg), Math.min(...pos)];\n\
    \    }\n}", "    let smallest = null;\n    let largest = null;\n    for(let i\
    \ = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (smallest === null || lst[i]\
    \ > smallest)){\n            smallest = lst[i];\n        }\n        if(lst[i]\
    \ > 0 && (largest === null || lst[i] < largest)){\n            largest = lst[i];\n\
    \        }\n    }\n    return [smallest, largest];\n}", "    var a = Math.max.apply(null,\
    \ lst.filter(function(x){return x < 0}));\n    var b = Math.min.apply(null, lst.filter(function(x){return\
    \ x > 0}));\n    return [a, b];\n}\n", "    let a = 0;\n    let b = 0;\n    let\
    \ flag = false;\n    let flag2 = false;\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] < 0){\n            if(lst[i] > a){\n                a = lst[i];\n\
    \                flag = true;\n            }\n        }\n        if(lst[i] > 0){\n\
    \            if(b === 0){\n                b = lst[i];\n                flag2\
    \ = true;\n            }\n            if(lst[i] < b){\n                b = lst[i];\n\
    \                flag2 = true;\n            }\n        }\n    }\n    if(flag ===\
    \ false){\n        a = null;\n    }\n    if(flag2 === false){\n        b = null;\n\
    \    }\n    return [a, b];\n}", "    let negative = [];\n    let positive = [];\n\
    \    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n         \
    \   negative.push(lst[i]);\n        }\n        else if(lst[i] > 0){\n        \
    \    positive.push(lst[i]);\n        }\n    }\n    if(negative.length === 0 ||\
    \ positive.length === 0){\n        return [null, null];\n    }\n    else{\n  \
    \      return [Math.max(...negative), Math.min(...positive)];\n    }\n}", "  \
    \  let smallest = null;\n    let largest = null;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0 && (smallest === null || lst[i] > smallest)){\n\
    \            smallest = lst[i];\n        }\n        if(lst[i] > 0 && (largest\
    \ === null || lst[i] < largest)){\n            largest = lst[i];\n        }\n\
    \    }\n    return [smallest, largest];\n}", "    var largest = null;\n    var\
    \ smallest = null;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ < 0 && (largest == null || lst[i] > largest)){\n            largest = lst[i];\n\
    \        }\n        if(lst[i] > 0 && (smallest == null || lst[i] < smallest)){\n\
    \            smallest = lst[i];\n        }\n    }\n    return [largest, smallest];\n\
    }\n", "    let neg = [];\n    let pos = [];\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n \
    \       else if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n\
    \    if(neg.length == 0){\n        neg.push(null);\n    }\n    if(pos.length ==\
    \ 0){\n        pos.push(null);\n    }\n    return [Math.max(...neg), Math.min(...pos)];\n\
    }", "  var neg = [];\n  var pos = [];\n  for(var i = 0; i < lst.length; i++){\n\
    \    if(lst[i] < 0){\n      neg.push(lst[i]);\n    }\n    else if(lst[i] > 0){\n\
    \      pos.push(lst[i]);\n    }\n  }\n  if(neg.length === 0 || pos.length ===\
    \ 0){\n    return [null, null];\n  }\n  else{\n    return [Math.max.apply(null,\
    \ neg), Math.min.apply(null, pos)];\n  }\n}\n", "\tvar a = 0;\n\tvar b = 0;\n\t\
    var a_flag = false;\n\tvar b_flag = false;\n\tfor(var i = 0; i < lst.length; i++){\n\
    \t\tif(lst[i] < 0){\n\t\t\tif(a_flag == false){\n\t\t\t\ta = lst[i];\n\t\t\t\t\
    a_flag = true;\n\t\t\t}\n\t\t\telse if(lst[i] > a){\n\t\t\t\ta = lst[i];\n\t\t\
    \t}\n\t\t}\n\t\telse if(lst[i] > 0){\n\t\t\tif(b_flag == false){\n\t\t\t\tb =\
    \ lst[i];\n\t\t\t\tb_flag = true;\n\t\t\t}\n\t\t\telse if(lst[i] < b){\n\t\t\t\
    \tb = lst[i];\n\t\t\t}\n\t\t}\n\t}\n\tif(a_flag == false){\n\t\ta = null;\n\t\
    }\n\tif(b_flag == false){\n\t\tb = null;\n\t}\n\treturn [a, b];\n}\n", "    var\
    \ positive = [];\n    var negative = [];\n    for(var i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > 0){\n            positive.push(lst[i]);\n        }\n    \
    \    else if(lst[i] < 0){\n            negative.push(lst[i]);\n        }\n   \
    \ }\n    if(positive.length == 0 || negative.length == 0){\n        return [null,\
    \ null];\n    }\n    else{\n        return [Math.max.apply(null, negative), Math.min.apply(null,\
    \ positive)];\n    }\n}", "    var a = 0;\n    var b = 0;\n    var c = 0;\n  \
    \  var d = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n\
    \            if(lst[i] > a){\n                a = lst[i];\n            }\n   \
    \     }\n        if(lst[i] > 0){\n            if(lst[i] < b){\n              \
    \  b = lst[i];\n            }\n        }\n    }\n    if(a === 0){\n        a =\
    \ null;\n    }\n    if(b === 0){\n        b = null;\n    }\n    return [a, b];\n\
    }", "    let largest = null;\n    let smallest = null;\n    for(let i = 0; i <\
    \ lst.length; i++){\n        if(lst[i] < 0 && (largest === null || lst[i] > largest)){\n\
    \            largest = lst[i];\n        }\n        if(lst[i] > 0 && (smallest\
    \ === null || lst[i] < smallest)){\n            smallest = lst[i];\n        }\n\
    \    }\n    return [largest, smallest];\n}\n", "  var largest = null;\n  var smallest\
    \ = null;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] < 0 && (largest\
    \ == null || lst[i] > largest)){\n      largest = lst[i];\n    }\n    if(lst[i]\
    \ > 0 && (smallest == null || lst[i] < smallest)){\n      smallest = lst[i];\n\
    \    }\n  }\n  return [largest, smallest];\n}", "    var largestNegative = null;\n\
    \    var smallestPositive = null;\n    for(var i = 0; i < lst.length; i++){\n\
    \        if(lst[i] < 0 && (largestNegative == null || lst[i] > largestNegative)){\n\
    \            largestNegative = lst[i];\n        }\n        if(lst[i] > 0 && (smallestPositive\
    \ == null || lst[i] < smallestPositive)){\n            smallestPositive = lst[i];\n\
    \        }\n    }\n    return [largestNegative, smallestPositive];\n}", "    let\
    \ a = Math.max(...lst.filter(x => x < 0));\n    let b = Math.min(...lst.filter(x\
    \ => x > 0));\n    return [a, b];\n}\n", "    var pos = [];\n    var neg = [];\n\
    \    for(var i = 0; i < lst.length; i++){\n        if(lst[i] > 0){\n         \
    \   pos.push(lst[i]);\n        }\n        else{\n            neg.push(lst[i]);\n\
    \        }\n    }\n    if(pos.length == 0 || neg.length == 0){\n        return\
    \ [null, null];\n    }\n    else{\n        return [Math.max.apply(null, neg),\
    \ Math.min.apply(null, pos)];\n    }\n}", "    var neg = [];\n    var pos = [];\n\
    \    for(var i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n         \
    \   neg.push(lst[i]);\n        }\n        else if(lst[i] > 0){\n            pos.push(lst[i]);\n\
    \        }\n    }\n    if(neg.length == 0 || pos.length == 0){\n        return\
    \ [null, null];\n    }\n    else{\n        return [Math.max.apply(null, neg),\
    \ Math.min.apply(null, pos)];\n    }\n}", "  var negative = [];\n  var positive\
    \ = [];\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] < 0){\n      negative.push(lst[i]);\n\
    \    }\n    else if(lst[i] > 0){\n      positive.push(lst[i]);\n    }\n  }\n \
    \ if(negative.length === 0 || positive.length === 0){\n    return [null, null];\n\
    \  }\n  else{\n    return [Math.max.apply(null, negative), Math.min.apply(null,\
    \ positive)];\n  }\n}\n", "  let negative = [];\n  let positive = [];\n  for(let\
    \ i = 0; i < lst.length; i++){\n    if(lst[i] < 0){\n      negative.push(lst[i]);\n\
    \    }\n    if(lst[i] > 0){\n      positive.push(lst[i]);\n    }\n  }\n  if(negative.length\
    \ === 0 || positive.length === 0){\n    return [null, null];\n  }\n  return [Math.max(...negative),\
    \ Math.min(...positive)];\n}", "    var negative = [];\n    var positive = [];\n\
    \    for(var i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n         \
    \   negative.push(lst[i]);\n        }\n        else if(lst[i] > 0){\n        \
    \    positive.push(lst[i]);\n        }\n    }\n    if(negative.length === 0 ||\
    \ positive.length === 0){\n        return [null, null];\n    }\n    else{\n  \
    \      return [Math.max.apply(null, negative), Math.min.apply(null, positive)];\n\
    \    }\n}", "    let smallest = null;\n    let largest = null;\n    for(let i\
    \ = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (largest === null || lst[i]\
    \ > largest)){\n            largest = lst[i];\n        }\n        if(lst[i] >\
    \ 0 && (smallest === null || lst[i] < smallest)){\n            smallest = lst[i];\n\
    \        }\n    }\n    return [largest, smallest];\n}\n", "    var a = Math.max.apply(null,\
    \ lst.filter(function(x){return x < 0}));\n    var b = Math.min.apply(null, lst.filter(function(x){return\
    \ x > 0}));\n    return [a, b];\n}\n", "    let neg = [];\n    let pos = [];\n\
    \    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n         \
    \   neg.push(lst[i]);\n        }\n        else if(lst[i] > 0){\n            pos.push(lst[i]);\n\
    \        }\n    }\n    if(neg.length == 0 || pos.length == 0){\n        return\
    \ [null, null];\n    }\n    else{\n        return [Math.max(...neg), Math.min(...pos)];\n\
    \    }\n}\n", "    let neg = [];\n    let pos = [];\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n \
    \       else if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n\
    \    neg.sort(function(a, b){return a-b});\n    pos.sort(function(a, b){return\
    \ a-b});\n    if(neg.length === 0 || pos.length === 0){\n        return [null,\
    \ null];\n    }\n    return [neg[neg.length-1], pos[0]];\n}", "    var a = 0;\n\
    \    var b = 0;\n    var c = 0;\n    var d = 0;\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0 && lst[i] > a){\n            a = lst[i];\n    \
    \    }\n        if(lst[i] > 0 && lst[i] < b){\n            b = lst[i];\n     \
    \   }\n        if(lst[i] > c){\n            c = lst[i];\n        }\n        if(lst[i]\
    \ < d){\n            d = lst[i];\n        }\n    }\n    if(a == 0 && b == 0){\n\
    \        return [c, d];\n    }\n    return [a, b];\n}", "    let neg = [];\n \
    \   let pos = [];\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ < 0){\n            neg.push(lst[i]);\n        }\n        else if(lst[i] > 0){\n\
    \            pos.push(lst[i]);\n        }\n    }\n    if(neg.length === 0 || pos.length\
    \ === 0){\n        return [null, null];\n    }\n    else{\n        let neg_max\
    \ = Math.max(...neg);\n        let pos_min = Math.min(...pos);\n        return\
    \ [neg_max, pos_min];\n    }\n}", "  let pos = [];\n  let neg = [];\n  for(let\
    \ i = 0; i < lst.length; i++){\n    if(lst[i] > 0){\n      pos.push(lst[i]);\n\
    \    }\n    else{\n      neg.push(lst[i]);\n    }\n  }\n  if(pos.length == 0 ||\
    \ neg.length == 0){\n    return [null, null];\n  }\n  else{\n    return [Math.max(...neg),\
    \ Math.min(...pos)];\n  }\n}\n", "    var pos = [];\n    var neg = [];\n    for(var\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > 0){\n            pos.push(lst[i]);\n\
    \        }\n        else if(lst[i] < 0){\n            neg.push(lst[i]);\n    \
    \    }\n    }\n    if(pos.length === 0 || neg.length === 0){\n        return [null,\
    \ null];\n    }\n    else{\n        return [Math.max.apply(null, neg), Math.min.apply(null,\
    \ pos)];\n    }\n}\n", "  var a = 0;\n  var b = 0;\n  var neg = [];\n  var pos\
    \ = [];\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] < 0){\n      neg.push(lst[i]);\n\
    \    }else if(lst[i] > 0){\n      pos.push(lst[i]);\n    }\n  }\n  if(neg.length\
    \ > 0){\n    a = Math.max.apply(null, neg);\n  }else{\n    a = null;\n  }\n  if(pos.length\
    \ > 0){\n    b = Math.min.apply(null, pos);\n  }else{\n    b = null;\n  }\n  return\
    \ [a, b];\n}", "    var neg = [];\n    var pos = [];\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n \
    \       else if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n\
    \    if(neg.length == 0 || pos.length == 0){\n        return [null, null];\n \
    \   }\n    else{\n        return [Math.max.apply(null, neg), Math.min.apply(null,\
    \ pos)];\n    }\n}\n", "    let a = null;\n    let b = null;\n    for(let i =\
    \ 0; i < lst.length; i++){\n        if(lst[i] < 0 && (a === null || lst[i] > a)){\n\
    \            a = lst[i];\n        }\n        if(lst[i] > 0 && (b === null || lst[i]\
    \ < b)){\n            b = lst[i];\n        }\n    }\n    return [a, b];\n}\n",
  "  var pos = [];\n  var neg = [];\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i]\
    \ > 0){\n      pos.push(lst[i]);\n    }\n    else{\n      neg.push(lst[i]);\n\
    \    }\n  }\n  if(pos.length === 0 || neg.length === 0){\n    return [null, null];\n\
    \  }\n  else{\n    return [Math.max.apply(null, neg), Math.min.apply(null, pos)];\n\
    \  }\n}\n", "    let neg = [];\n    let pos = [];\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n \
    \       else if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n\
    \    if(neg.length === 0 || pos.length === 0){\n        return [null, null];\n\
    \    }\n    else{\n        return [Math.max(...neg), Math.min(...pos)];\n    }\n\
    }", "    let neg = [];\n    let pos = [];\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }else\
    \ if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n    if(neg.length\
    \ == 0){\n        neg.push(null);\n    }\n    if(pos.length == 0){\n        pos.push(null);\n\
    \    }\n    return [Math.max(...neg), Math.min(...pos)];\n}", "  var pos = [];\n\
    \  var neg = [];\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] > 0){\n\
    \      pos.push(lst[i]);\n    }\n    else if(lst[i] < 0){\n      neg.push(lst[i]);\n\
    \    }\n  }\n  if(pos.length > 0 && neg.length > 0){\n    return [Math.max.apply(null,\
    \ neg), Math.min.apply(null, pos)];\n  }\n  else{\n    return [null, null];\n\
    \  }\n}\n", "    let a = Math.max(...lst.filter(x => x < 0));\n    let b = Math.min(...lst.filter(x\
    \ => x > 0));\n    return [a, b];\n}\n", "    let neg = [];\n    let pos = [];\n\
    \    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n         \
    \   neg.push(lst[i]);\n        }\n        else if(lst[i] > 0){\n            pos.push(lst[i]);\n\
    \        }\n    }\n    if(neg.length == 0 || pos.length == 0){\n        return\
    \ [null, null];\n    }\n    return [Math.max(...neg), Math.min(...pos)];\n}",
  "    var smallest = null;\n    var largest = null;\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] > 0){\n            if(smallest == null){\n        \
    \        smallest = lst[i];\n            }\n            else if(lst[i] < smallest){\n\
    \                smallest = lst[i];\n            }\n        }\n        else if(lst[i]\
    \ < 0){\n            if(largest == null){\n                largest = lst[i];\n\
    \            }\n            else if(lst[i] > largest){\n                largest\
    \ = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n\
    }", "    let neg = [];\n    let pos = [];\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n \
    \       else if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n\
    \    if(neg.length > 0 && pos.length > 0){\n        return [Math.max(...neg),\
    \ Math.min(...pos)];\n    }\n    else{\n        return [null, null];\n    }\n}",
  "    var a = null;\n    var b = null;\n    for(var i = 0; i < lst.length; i++){\n\
    \        if(lst[i] < 0 && (a == null || lst[i] > a)){\n            a = lst[i];\n\
    \        }\n        if(lst[i] > 0 && (b == null || lst[i] < b)){\n           \
    \ b = lst[i];\n        }\n    }\n    return [a, b];\n}", "    let negative_numbers\
    \ = [];\n    let positive_numbers = [];\n    for (let i = 0; i < lst.length; i++){\n\
    \        if (lst[i] < 0){\n            negative_numbers.push(lst[i]);\n      \
    \  }\n        else if (lst[i] > 0){\n            positive_numbers.push(lst[i]);\n\
    \        }\n    }\n    if (negative_numbers.length === 0 || positive_numbers.length\
    \ === 0){\n        return [None, None];\n    }\n    else{\n        return [Math.max(...negative_numbers),\
    \ Math.min(...positive_numbers)];\n    }\n}", "    var a = 0;\n    var b = 0;\n\
    \    var c = 0;\n    var d = 0;\n    for(var i = 0; i < lst.length; i++){\n  \
    \      if(lst[i] < 0){\n            if(lst[i] > a){\n                a = lst[i];\n\
    \            }\n        }\n        if(lst[i] > 0){\n            if(lst[i] < b){\n\
    \                b = lst[i];\n            }\n        }\n    }\n    if(a === 0){\n\
    \        a = null;\n    }\n    if(b === 0){\n        b = null;\n    }\n    return\
    \ [a, b];\n}", "    let neg = [];\n    let pos = [];\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n \
    \       else if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n\
    \    if(neg.length === 0 || pos.length === 0){\n        return [null, null];\n\
    \    }\n    else{\n        return [Math.max(...neg), Math.min(...pos)];\n    }\n\
    }\n", "    let a = null;\n    let b = null;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0 && (a === null || lst[i] > a)){\n            a\
    \ = lst[i];\n        }\n        if(lst[i] > 0 && (b === null || lst[i] < b)){\n\
    \            b = lst[i];\n        }\n    }\n    return [a, b];\n}", "    let a\
    \ = Math.max(...lst.filter(x => x < 0));\n    let b = Math.min(...lst.filter(x\
    \ => x > 0));\n    return [a, b];\n}\n", "  var a = null;\n  var b = null;\n \
    \ for(var i = 0; i < lst.length; i++){\n    if(lst[i] < 0 && (a == null || lst[i]\
    \ > a)){\n      a = lst[i];\n    }\n    if(lst[i] > 0 && (b == null || lst[i]\
    \ < b)){\n      b = lst[i];\n    }\n  }\n  return [a, b];\n}\n", "    var pos\
    \ = [];\n    var neg = [];\n    for(var i = 0; i < lst.length; i++){\n       \
    \ if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n        else if(lst[i]\
    \ > 0){\n            pos.push(lst[i]);\n        }\n    }\n    if(neg.length ==\
    \ 0 || pos.length == 0){\n        return [null, null];\n    }\n    else{\n   \
    \     return [Math.max.apply(null, neg), Math.min.apply(null, pos)];\n    }\n\
    }\n", "    var neg = [];\n    var pos = [];\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n \
    \       else if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n\
    \    if(neg.length == 0 || pos.length == 0){\n        return [null, null];\n \
    \   }\n    else{\n        return [Math.max.apply(null, neg), Math.min.apply(null,\
    \ pos)];\n    }\n}\n", "    let neg = [];\n    let pos = [];\n    for(let i =\
    \ 0; i < lst.length; i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n\
    \        }\n        else if(lst[i] > 0){\n            pos.push(lst[i]);\n    \
    \    }\n    }\n    if(neg.length == 0){\n        neg.push(null);\n    }\n    if(pos.length\
    \ == 0){\n        pos.push(null);\n    }\n    return [Math.max(...neg), Math.min(...pos)];\n\
    }", "    let neg = [];\n    let pos = [];\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n \
    \       else if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n\
    \    if(neg.length === 0 || pos.length === 0){\n        return [null, null];\n\
    \    }\n    else{\n        return [Math.max(...neg), Math.min(...pos)];\n    }\n\
    }", "    var neg = [];\n    var pos = [];\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n \
    \       else if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n\
    \    if(neg.length == 0){\n        neg.push(null);\n    }\n    if(pos.length ==\
    \ 0){\n        pos.push(null);\n    }\n    return [Math.max.apply(null, neg),\
    \ Math.min.apply(null, pos)];\n}", "    var largestNegative = null;\n    var smallestPositive\
    \ = null;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] < 0 &&\
    \ (largestNegative == null || lst[i] > largestNegative)){\n            largestNegative\
    \ = lst[i];\n        }\n        if(lst[i] > 0 && (smallestPositive == null ||\
    \ lst[i] < smallestPositive)){\n            smallestPositive = lst[i];\n     \
    \   }\n    }\n    return [largestNegative, smallestPositive];\n}", "    var a\
    \ = 0;\n    var b = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ < 0){\n            if(lst[i] > a){\n                a = lst[i];\n          \
    \  }\n        }\n        if(lst[i] > 0){\n            if(lst[i] < b || b == 0){\n\
    \                b = lst[i];\n            }\n        }\n    }\n    if(a == 0 &&\
    \ b == 0){\n        return [null, null];\n    }\n    return [a, b];\n}", "   \
    \ let neg = [];\n    let pos = [];\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }else if(lst[i]\
    \ > 0){\n            pos.push(lst[i]);\n        }\n    }\n    if(neg.length ==\
    \ 0){\n        neg.push(null);\n    }\n    if(pos.length == 0){\n        pos.push(null);\n\
    \    }\n    return [Math.max(...neg), Math.min(...pos)];\n}", "    var largestNegative\
    \ = null;\n    var smallestPositive = null;\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0 && (largestNegative == null || lst[i] > largestNegative)){\n\
    \            largestNegative = lst[i];\n        }\n        if(lst[i] > 0 && (smallestPositive\
    \ == null || lst[i] < smallestPositive)){\n            smallestPositive = lst[i];\n\
    \        }\n    }\n    return [largestNegative, smallestPositive];\n}\n", "  \
    \  var neg = [];\n    var pos = [];\n    for(var i = 0; i < lst.length; i++){\n\
    \        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n        else\
    \ if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n    if(neg.length\
    \ === 0 || pos.length === 0){\n        return [null, null];\n    }\n    else{\n\
    \        return [Math.max.apply(null, neg), Math.min.apply(null, pos)];\n    }\n\
    }", "    let largestNegative = null;\n    let smallestPositive = null;\n    for\
    \ (let i = 0; i < lst.length; i++){\n        if (lst[i] < 0 && (largestNegative\
    \ === null || lst[i] > largestNegative)){\n            largestNegative = lst[i];\n\
    \        }\n        if (lst[i] > 0 && (smallestPositive === null || lst[i] < smallestPositive)){\n\
    \            smallestPositive = lst[i];\n        }\n    }\n    return [largestNegative,\
    \ smallestPositive];\n}", "    let neg = [];\n    let pos = [];\n    for(let i\
    \ = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n\
    \        }\n        else if(lst[i] > 0){\n            pos.push(lst[i]);\n    \
    \    }\n    }\n    if(neg.length == 0 || pos.length == 0){\n        return [null,\
    \ null];\n    }\n    else{\n        return [Math.max(...neg), Math.min(...pos)];\n\
    \    }\n}", "    let neg = [];\n    let pos = [];\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n \
    \       else if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n\
    \    if(neg.length == 0 || pos.length == 0){\n        return [null, null];\n \
    \   }\n    else{\n        return [Math.max(...neg), Math.min(...pos)];\n    }\n\
    }", "    var neg = [];\n    var pos = [];\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n \
    \       else if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n\
    \    if(neg.length == 0 || pos.length == 0){\n        return [null, null];\n \
    \   }\n    else{\n        return [Math.max.apply(null, neg), Math.min.apply(null,\
    \ pos)];\n    }\n}\n", "    let negative = [];\n    let positive = [];\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n            negative.push(lst[i]);\n\
    \        }\n        else if(lst[i] > 0){\n            positive.push(lst[i]);\n\
    \        }\n    }\n    if(negative.length === 0 || positive.length === 0){\n \
    \       return [null, null];\n    }\n    return [Math.max(...negative), Math.min(...positive)];\n\
    }", "    var largest = null;\n    var smallest = null;\n    for(var i = 0; i <\
    \ lst.length; i++){\n        if(lst[i] < 0 && (largest == null || lst[i] > largest)){\n\
    \            largest = lst[i];\n        }\n        if(lst[i] > 0 && (smallest\
    \ == null || lst[i] < smallest)){\n            smallest = lst[i];\n        }\n\
    \    }\n    return [largest, smallest];\n}\n", "    var neg = [];\n    var pos\
    \ = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n \
    \           neg.push(lst[i]);\n        }\n        else if(lst[i] > 0){\n     \
    \       pos.push(lst[i]);\n        }\n    }\n    if(neg.length == 0 || pos.length\
    \ == 0){\n        return [null, null];\n    }\n    else{\n        return [Math.max.apply(null,\
    \ neg), Math.min.apply(null, pos)];\n    }\n}", "    var negatives = [];\n   \
    \ var positives = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ < 0){\n            negatives.push(lst[i]);\n        }\n        else if(lst[i]\
    \ > 0){\n            positives.push(lst[i]);\n        }\n    }\n    if(negatives.length\
    \ == 0 || positives.length == 0){\n        return [null, null];\n    }\n    else{\n\
    \        return [Math.max.apply(null, negatives), Math.min.apply(null, positives)];\n\
    \    }\n}", "    var pos = [];\n    var neg = [];\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n \
    \       else if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n    }\n\
    \    if(pos.length == 0 || neg.length == 0){\n        return [null, null];\n \
    \   }\n    else{\n        return [Math.max.apply(null, neg), Math.min.apply(null,\
    \ pos)];\n    }\n}", "    let neg = [];\n    let pos = [];\n    for(let i = 0;\
    \ i < lst.length; i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n\
    \        }\n        else if(lst[i] > 0){\n            pos.push(lst[i]);\n    \
    \    }\n    }\n    if(neg.length === 0 || pos.length === 0){\n        return [null,\
    \ null];\n    }\n    else{\n        return [Math.max(...neg), Math.min(...pos)];\n\
    \    }\n}", "  var neg = [];\n  var pos = [];\n  for(var i = 0; i < lst.length;\
    \ i++){\n    if(lst[i] < 0){\n      neg.push(lst[i]);\n    }\n    else{\n    \
    \  pos.push(lst[i]);\n    }\n  }\n  if(neg.length === 0 || pos.length === 0){\n\
    \    return [null, null];\n  }\n  else{\n    var neg_max = Math.max.apply(null,\
    \ neg);\n    var pos_min = Math.min.apply(null, pos);\n    return [neg_max, pos_min];\n\
    \  }\n}\n", "    let pos = [];\n    let neg = [];\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n \
    \       else{\n            pos.push(lst[i]);\n        }\n    }\n    if(neg.length\
    \ > 0 && pos.length > 0){\n        return [Math.max(...neg), Math.min(...pos)];\n\
    \    }\n    else{\n        return [null, null];\n    }\n}", "  var smallest =\
    \ null;\n  var largest = null;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i]\
    \ > 0 && (smallest == null || lst[i] < smallest)){\n      smallest = lst[i];\n\
    \    }\n    if(lst[i] < 0 && (largest == null || lst[i] > largest)){\n      largest\
    \ = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n", "  var neg = [];\n\
    \  var pos = [];\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] < 0){\n\
    \      neg.push(lst[i]);\n    }\n    else if(lst[i] > 0){\n      pos.push(lst[i]);\n\
    \    }\n  }\n  if(neg.length === 0 || pos.length === 0){\n    return [null, null];\n\
    \  }\n  else{\n    return [Math.max.apply(null, neg), Math.min.apply(null, pos)];\n\
    \  }\n}", "    var negatives = [];\n    var positives = [];\n    for(var i = 0;\
    \ i < lst.length; i++){\n        if(lst[i] < 0){\n            negatives.push(lst[i]);\n\
    \        }\n        else if(lst[i] > 0){\n            positives.push(lst[i]);\n\
    \        }\n    }\n    if(negatives.length == 0 || positives.length == 0){\n \
    \       return [null, null];\n    }\n    else{\n        return [Math.max.apply(null,\
    \ negatives), Math.min.apply(null, positives)];\n    }\n}", "    let neg = [];\n\
    \    let pos = [];\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ < 0){\n            neg.push(lst[i]);\n        }\n        else if(lst[i] > 0){\n\
    \            pos.push(lst[i]);\n        }\n    }\n    if(neg.length == 0 || pos.length\
    \ == 0){\n        return [null, null];\n    }\n    else{\n        return [Math.max(...neg),\
    \ Math.min(...pos)];\n    }\n}", "    var neg = [];\n    var pos = [];\n    for(var\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n\
    \        }\n        else if(lst[i] > 0){\n            pos.push(lst[i]);\n    \
    \    }\n    }\n    if(neg.length === 0 || pos.length === 0){\n        return [null,\
    \ null];\n    }\n    else{\n        var neg_max = Math.max.apply(null, neg);\n\
    \        var pos_min = Math.min.apply(null, pos);\n        return [neg_max, pos_min];\n\
    \    }\n}", "    var neg = [];\n    var pos = [];\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n \
    \       else if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n\
    \    neg.sort(function(a, b){return a-b});\n    pos.sort(function(a, b){return\
    \ a-b});\n    if(neg.length > 0 && pos.length > 0){\n        return [neg[neg.length-1],\
    \ pos[0]];\n    }\n    else if(neg.length > 0 && pos.length == 0){\n        return\
    \ [neg[neg.length-1], null];\n    }\n    else if(neg.length == 0 && pos.length\
    \ > 0){\n        return [null, pos[0]];\n    }\n    else{\n        return [null,\
    \ null];\n    }\n}\n", "    let neg = [];\n    let pos = [];\n    for(let i =\
    \ 0; i < lst.length; i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n\
    \        }\n        else if(lst[i] > 0){\n            pos.push(lst[i]);\n    \
    \    }\n    }\n    if(neg.length === 0 || pos.length === 0){\n        return [null,\
    \ null];\n    }\n    else{\n        return [Math.max(...neg), Math.min(...pos)];\n\
    \    }\n}\n", "    let neg = [];\n    let pos = [];\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n \
    \       else if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n\
    \    if(neg.length == 0 || pos.length == 0){\n        return [null, null];\n \
    \   }\n    else{\n        return [Math.max(...neg), Math.min(...pos)];\n    }\n\
    }", "    var neg = [];\n    var pos = [];\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n \
    \       else if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n\
    \    if(neg.length == 0 || pos.length == 0){\n        return [null, null];\n \
    \   }\n    return [Math.max.apply(null, neg), Math.min.apply(null, pos)];\n}\n",
  "    var largest = null;\n    var smallest = null;\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0 && (largest == null || lst[i] > largest)){\n  \
    \          largest = lst[i];\n        }\n        if(lst[i] > 0 && (smallest ==\
    \ null || lst[i] < smallest)){\n            smallest = lst[i];\n        }\n  \
    \  }\n    return [largest, smallest];\n}\n", "    let neg = [];\n    let pos =\
    \ [];\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n   \
    \         neg.push(lst[i]);\n        }\n        else if(lst[i] > 0){\n       \
    \     pos.push(lst[i]);\n        }\n    }\n    if(neg.length === 0 || pos.length\
    \ === 0){\n        return [null, null];\n    }\n    else{\n        return [Math.max(...neg),\
    \ Math.min(...pos)];\n    }\n}", "    var a = null;\n    var b = null;\n    for(var\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (a == null || lst[i]\
    \ > a)){\n            a = lst[i];\n        }\n        if(lst[i] > 0 && (b == null\
    \ || lst[i] < b)){\n            b = lst[i];\n        }\n    }\n    return [a,\
    \ b];\n}\n", "    let a = null;\n    let b = null;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0 && (a === null || lst[i] > a)){\n            a\
    \ = lst[i];\n        }\n        if(lst[i] > 0 && (b === null || lst[i] < b)){\n\
    \            b = lst[i];\n        }\n    }\n    return [a, b];\n}", "    let neg\
    \ = [];\n    let pos = [];\n    for(let i = 0; i < lst.length; i++){\n       \
    \ if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n        else if(lst[i]\
    \ > 0){\n            pos.push(lst[i]);\n        }\n    }\n    if(neg.length ==\
    \ 0 || pos.length == 0){\n        return [null, null];\n    }\n    else{\n   \
    \     return [Math.max(...neg), Math.min(...pos)];\n    }\n}", "    var a = 0;\n\
    \    var b = 0;\n    var neg = [];\n    var pos = [];\n    for(var i = 0; i <\
    \ lst.length; i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n\
    \        }\n        else if(lst[i] > 0){\n            pos.push(lst[i]);\n    \
    \    }\n    }\n    if(neg.length == 0){\n        a = null;\n    }\n    else{\n\
    \        a = Math.max(...neg);\n    }\n    if(pos.length == 0){\n        b = null;\n\
    \    }\n    else{\n        b = Math.min(...pos);\n    }\n    return [a, b];\n}",
  "    let neg = [];\n    let pos = [];\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n        else\
    \ if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n    if(neg.length\
    \ > 0 && pos.length > 0){\n        return [Math.max(...neg), Math.min(...pos)];\n\
    \    }\n    else{\n        return [null, null];\n    }\n}", "    let neg = [];\n\
    \    let pos = [];\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ < 0){\n            neg.push(lst[i]);\n        }\n        else if(lst[i] > 0){\n\
    \            pos.push(lst[i]);\n        }\n    }\n    if(neg.length === 0 || pos.length\
    \ === 0){\n        return [null, null];\n    }\n    else{\n        return [Math.max(...neg),\
    \ Math.min(...pos)];\n    }\n}", "    var positives = [];\n    var negatives =\
    \ [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n   \
    \         negatives.push(lst[i]);\n        }\n        else if(lst[i] > 0){\n \
    \           positives.push(lst[i]);\n        }\n    }\n    var largest_negative\
    \ = Math.max.apply(null, negatives);\n    var smallest_positive = Math.min.apply(null,\
    \ positives);\n    return [largest_negative, smallest_positive];\n}\n", "    var\
    \ a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    for(var i = 0; i\
    \ < lst.length; i++){\n        if(lst[i] < 0 && lst[i] > a){\n            a =\
    \ lst[i];\n        }\n        if(lst[i] > 0 && lst[i] < b){\n            b = lst[i];\n\
    \        }\n        if(lst[i] > 0 && lst[i] > c){\n            c = lst[i];\n \
    \       }\n        if(lst[i] < 0 && lst[i] < d){\n            d = lst[i];\n  \
    \      }\n    }\n    if(a === 0 && b === 0){\n        return [None, None];\n \
    \   }\n    if(a === 0){\n        return [None, c];\n    }\n    if(b === 0){\n\
    \        return [d, None];\n    }\n    return [a, b];\n}", "    var a = Math.max.apply(null,\
    \ lst.filter(function(x){ return x < 0; }));\n    var b = Math.min.apply(null,\
    \ lst.filter(function(x){ return x > 0; }));\n    return [a, b];\n}\n", "    let\
    \ a = null;\n    let b = null;\n    for(let i = 0; i < lst.length; i++){\n   \
    \     if(lst[i] < 0 && (a === null || lst[i] > a)){\n            a = lst[i];\n\
    \        }\n        if(lst[i] > 0 && (b === null || lst[i] < b)){\n          \
    \  b = lst[i];\n        }\n    }\n    return [a, b];\n}", "    let positive =\
    \ [];\n    let negative = [];\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if(lst[i] > 0){\n            positive.push(lst[i]);\n        }\n        else\
    \ if(lst[i] < 0){\n            negative.push(lst[i]);\n        }\n    }\n    if(positive.length\
    \ === 0 || negative.length === 0){\n        return [null, null];\n    }\n    else{\n\
    \        return [Math.max(...negative), Math.min(...positive)];\n    }\n}", " \
    \   var a = 0;\n    var b = 0;\n    var neg = [];\n    var pos = [];\n    for(var\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n\
    \        }\n        else if(lst[i] > 0){\n            pos.push(lst[i]);\n    \
    \    }\n    }\n    if(neg.length == 0){\n        a = null;\n    }\n    else{\n\
    \        a = Math.max(...neg);\n    }\n    if(pos.length == 0){\n        b = null;\n\
    \    }\n    else{\n        b = Math.min(...pos);\n    }\n    return [a, b];\n}",
  "    var pos = [];\n    var neg = [];\n    for(var i = 0; i < lst.length; i++){\n\
    \        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n        else\
    \ if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n    if(neg.length\
    \ == 0 || pos.length == 0){\n        return [null, null];\n    }\n    else{\n\
    \        return [Math.max.apply(null, neg), Math.min.apply(null, pos)];\n    }\n\
    }", "    let neg = [];\n    let pos = [];\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n \
    \       else if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n\
    \    if(neg.length > 0 && pos.length > 0){\n        return [Math.max(...neg),\
    \ Math.min(...pos)];\n    }\n    else{\n        return [null, null];\n    }\n}",
  "    let neg = [];\n    let pos = [];\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n        else\
    \ if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n    if(neg.length\
    \ == 0 || pos.length == 0){\n        return [null, null];\n    }\n    else{\n\
    \        return [Math.max(...neg), Math.min(...pos)];\n    }\n}", "    var a =\
    \ 0;\n    var b = 0;\n    var neg = [];\n    var pos = [];\n    for(var i = 0;\
    \ i < lst.length; i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n\
    \        }\n        else if(lst[i] > 0){\n            pos.push(lst[i]);\n    \
    \    }\n    }\n    if(neg.length > 0){\n        a = Math.max(...neg);\n    }\n\
    \    else{\n        a = null;\n    }\n    if(pos.length > 0){\n        b = Math.min(...pos);\n\
    \    }\n    else{\n        b = null;\n    }\n    return [a, b];\n}", "    let\
    \ a = Math.max(...lst.filter(x => x < 0));\n    let b = Math.min(...lst.filter(x\
    \ => x > 0));\n    return [a, b];\n}\n", "  var pos = [];\n  var neg = [];\n \
    \ for(var i = 0; i < lst.length; i++){\n    if(lst[i] > 0){\n      pos.push(lst[i]);\n\
    \    }\n    else if(lst[i] < 0){\n      neg.push(lst[i]);\n    }\n  }\n  if(pos.length\
    \ === 0 || neg.length === 0){\n    return [null, null];\n  }\n  else{\n    return\
    \ [Math.max.apply(null, neg), Math.min.apply(null, pos)];\n  }\n}\n", "    var\
    \ a = null;\n    var b = null;\n    for(var i = 0; i < lst.length; i++){\n   \
    \     if(lst[i] < 0){\n            if(a == null){\n                a = lst[i];\n\
    \            }\n            else if(lst[i] > a){\n                a = lst[i];\n\
    \            }\n        }\n        else if(lst[i] > 0){\n            if(b == null){\n\
    \                b = lst[i];\n            }\n            else if(lst[i] < b){\n\
    \                b = lst[i];\n            }\n        }\n    }\n    return [a,\
    \ b];\n}\n", "  var largest_neg = null;\n  var smallest_pos = null;\n  for (var\
    \ i = 0; i < lst.length; i++){\n    if (lst[i] < 0 && (largest_neg == null ||\
    \ lst[i] > largest_neg)){\n      largest_neg = lst[i];\n    }\n    if (lst[i]\
    \ > 0 && (smallest_pos == null || lst[i] < smallest_pos)){\n      smallest_pos\
    \ = lst[i];\n    }\n  }\n  return [largest_neg, smallest_pos];\n}\n", "    var\
    \ a = null;\n    var b = null;\n    for(var i = 0; i < lst.length; i++){\n   \
    \     if(lst[i] < 0){\n            if(a == null){\n                a = lst[i];\n\
    \            }\n            else if(lst[i] > a){\n                a = lst[i];\n\
    \            }\n        }\n        else if(lst[i] > 0){\n            if(b == null){\n\
    \                b = lst[i];\n            }\n            else if(lst[i] < b){\n\
    \                b = lst[i];\n            }\n        }\n    }\n    return [a,\
    \ b];\n}\n", "    var neg = [];\n    var pos = [];\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n \
    \       else if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n\
    \    if(neg.length == 0 || pos.length == 0){\n        return [null, null];\n \
    \   }\n    return [Math.max.apply(null, neg), Math.min.apply(null, pos)];\n}",
  "    var neg = [];\n    var pos = [];\n    for(var i = 0; i < lst.length; i++){\n\
    \        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n        else\
    \ if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n    if(neg.length\
    \ == 0){\n        neg.push(null);\n    }\n    if(pos.length == 0){\n        pos.push(null);\n\
    \    }\n    return [Math.max.apply(null, neg), Math.min.apply(null, pos)];\n}",
  "    let neg = [];\n    let pos = [];\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n        else\
    \ if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n    if(neg.length\
    \ === 0 || pos.length === 0){\n        return [null, null];\n    }\n    else{\n\
    \        return [Math.max(...neg), Math.min(...pos)];\n    }\n}", "    var pos\
    \ = [];\n    var neg = [];\n    for(var i = 0; i < lst.length; i++){\n       \
    \ if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n        else if(lst[i]\
    \ < 0){\n            neg.push(lst[i]);\n        }\n    }\n    if(pos.length ===\
    \ 0 || neg.length === 0){\n        return [null, null];\n    }\n    else{\n  \
    \      return [Math.max.apply(null, neg), Math.min.apply(null, pos)];\n    }\n\
    }", "    let negative = [];\n    let positive = [];\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0){\n            negative.push(lst[i]);\n       \
    \ }\n        else if(lst[i] > 0){\n            positive.push(lst[i]);\n      \
    \  }\n    }\n    if(negative.length === 0){\n        negative = null;\n    }\n\
    \    else{\n        negative = Math.max(...negative);\n    }\n    if(positive.length\
    \ === 0){\n        positive = null;\n    }\n    else{\n        positive = Math.min(...positive);\n\
    \    }\n    return [negative, positive];\n}", "  let neg = null;\n  let pos =\
    \ null;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] < 0 && (neg ===\
    \ null || lst[i] > neg)){\n      neg = lst[i];\n    }\n    if(lst[i] > 0 && (pos\
    \ === null || lst[i] < pos)){\n      pos = lst[i];\n    }\n  }\n  return [neg,\
    \ pos];\n}\n", "    let neg = null;\n    let pos = null;\n    for(let i = 0; i\
    \ < lst.length; i++){\n        if(lst[i] < 0){\n            if(neg === null ||\
    \ lst[i] > neg){\n                neg = lst[i];\n            }\n        }else{\n\
    \            if(pos === null || lst[i] < pos){\n                pos = lst[i];\n\
    \            }\n        }\n    }\n    return [neg, pos];\n}", "    let smallest\
    \ = null;\n    let largest = null;\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] < 0 && (smallest === null || lst[i] > smallest)){\n       \
    \     smallest = lst[i];\n        }\n        if(lst[i] > 0 && (largest === null\
    \ || lst[i] < largest)){\n            largest = lst[i];\n        }\n    }\n  \
    \  return [smallest, largest];\n}\n", "    var largestNegative = null;\n    var\
    \ smallestPositive = null;\n    for(var i = 0; i < lst.length; i++){\n       \
    \ if(lst[i] < 0 && (largestNegative == null || lst[i] > largestNegative)){\n \
    \           largestNegative = lst[i];\n        }\n        if(lst[i] > 0 && (smallestPositive\
    \ == null || lst[i] < smallestPositive)){\n            smallestPositive = lst[i];\n\
    \        }\n    }\n    return [largestNegative, smallestPositive];\n}\n", "  \
    \  var neg = [];\n    var pos = [];\n    for(var i = 0; i < lst.length; i++){\n\
    \        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n        else\
    \ if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n    if(neg.length\
    \ == 0 || pos.length == 0){\n        return [null, null];\n    }\n    else{\n\
    \        var neg_max = Math.max.apply(null, neg);\n        var pos_min = Math.min.apply(null,\
    \ pos);\n        return [neg_max, pos_min];\n    }\n}", "    var smallest = null;\n\
    \    var largest = null;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ > 0){\n            if(smallest == null){\n                smallest = lst[i];\n\
    \            }\n            else if(lst[i] < smallest){\n                smallest\
    \ = lst[i];\n            }\n        }\n        else if(lst[i] < 0){\n        \
    \    if(largest == null){\n                largest = lst[i];\n            }\n\
    \            else if(lst[i] > largest){\n                largest = lst[i];\n \
    \           }\n        }\n    }\n    return [largest, smallest];\n}\n", "    let\
    \ a = Math.max(...lst.filter(x => x < 0));\n    let b = Math.min(...lst.filter(x\
    \ => x > 0));\n    return [a, b];\n}\n", "    var neg = [];\n    var pos = [];\n\
    \    for(var i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n         \
    \   neg.push(lst[i]);\n        }\n        else if(lst[i] > 0){\n            pos.push(lst[i]);\n\
    \        }\n    }\n    if(neg.length == 0 || pos.length == 0){\n        return\
    \ [null, null];\n    }\n    else{\n        return [Math.max.apply(null, neg),\
    \ Math.min.apply(null, pos)];\n    }\n}", "    var lst_neg = [];\n    var lst_pos\
    \ = [];\n    for (var i = 0; i < lst.length; i++){\n        if (lst[i] < 0){\n\
    \            lst_neg.push(lst[i]);\n        }\n        else if (lst[i] > 0){\n\
    \            lst_pos.push(lst[i]);\n        }\n    }\n    if (lst_neg.length ==\
    \ 0 || lst_pos.length == 0){\n        return [None, None];\n    }\n    else{\n\
    \        return [Math.max(...lst_neg), Math.min(...lst_pos)];\n    }\n}", "  let\
    \ neg = [];\n  let pos = [];\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i]\
    \ < 0){\n      neg.push(lst[i]);\n    }\n    else{\n      pos.push(lst[i]);\n\
    \    }\n  }\n  if(neg.length > 0 && pos.length > 0){\n    return [Math.max(...neg),\
    \ Math.min(...pos)];\n  }\n  else{\n    return [null, null];\n  }\n}\n", "   \
    \ let negative = [];\n    let positive = [];\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0){\n            negative.push(lst[i]);\n       \
    \ }\n        else if(lst[i] > 0){\n            positive.push(lst[i]);\n      \
    \  }\n    }\n    if(negative.length === 0 || positive.length === 0){\n       \
    \ return [None, None];\n    }\n    else{\n        return [Math.max(...negative),\
    \ Math.min(...positive)];\n    }\n}\n", "    let neg = [];\n    let pos = [];\n\
    \    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n         \
    \   neg.push(lst[i]);\n        }\n        else if(lst[i] > 0){\n            pos.push(lst[i]);\n\
    \        }\n    }\n    if(neg.length == 0){\n        neg.push(null);\n    }\n\
    \    if(pos.length == 0){\n        pos.push(null);\n    }\n    return [Math.max(...neg),\
    \ Math.min(...pos)];\n}", "    var a = 0;\n    var b = 0;\n    var neg = [];\n\
    \    var pos = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ < 0){\n            neg.push(lst[i]);\n        }\n        else if(lst[i] > 0){\n\
    \            pos.push(lst[i]);\n        }\n    }\n    if(neg.length > 0){\n  \
    \      a = Math.max(...neg);\n    }\n    else{\n        a = null;\n    }\n   \
    \ if(pos.length > 0){\n        b = Math.min(...pos);\n    }\n    else{\n     \
    \   b = null;\n    }\n    return [a, b];\n}", "  var neg = [];\n  var pos = [];\n\
    \  for(var i = 0; i < lst.length; i++){\n    if(lst[i] < 0){\n      neg.push(lst[i]);\n\
    \    }\n    else if(lst[i] > 0){\n      pos.push(lst[i]);\n    }\n  }\n  if(neg.length\
    \ === 0 || pos.length === 0){\n    return [null, null];\n  }\n  else{\n    return\
    \ [Math.max.apply(null, neg), Math.min.apply(null, pos)];\n  }\n}\n", "    var\
    \ neg = [];\n    var pos = [];\n    for(var i = 0; i < lst.length; i++){\n   \
    \     if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n        else\
    \ if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n    if(neg.length\
    \ == 0 || pos.length == 0){\n        return [null, null];\n    }\n    else{\n\
    \        return [Math.max.apply(null, neg), Math.min.apply(null, pos)];\n    }\n\
    }\n", "    let smallest = null;\n    let largest = null;\n    for(let i = 0; i\
    \ < lst.length; i++){\n        if(lst[i] < 0 && (largest === null || lst[i] >\
    \ largest)){\n            largest = lst[i];\n        }\n        if(lst[i] > 0\
    \ && (smallest === null || lst[i] < smallest)){\n            smallest = lst[i];\n\
    \        }\n    }\n    return [largest, smallest];\n}\n", "    let negative =\
    \ [];\n    let positive = [];\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if(lst[i] < 0){\n            negative.push(lst[i]);\n        }\n        else\
    \ if(lst[i] > 0){\n            positive.push(lst[i]);\n        }\n    }\n    if(negative.length\
    \ === 0 || positive.length === 0){\n        return [null, null];\n    }\n    else{\n\
    \        return [Math.max(...negative), Math.min(...positive)];\n    }\n}\n",
  "    let neg = [];\n    let pos = [];\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n        else\
    \ if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n    neg.sort(function(a,\
    \ b){return a-b});\n    pos.sort(function(a, b){return a-b});\n    if(neg.length\
    \ == 0){\n        neg.push(null);\n    }\n    if(pos.length == 0){\n        pos.push(null);\n\
    \    }\n    return [neg[neg.length-1], pos[0]];\n}", "    var pos = [];\n    var\
    \ neg = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] > 0){\n\
    \            pos.push(lst[i]);\n        }\n        else if(lst[i] < 0){\n    \
    \        neg.push(lst[i]);\n        }\n    }\n    if(neg.length == 0 || pos.length\
    \ == 0){\n        return [null, null];\n    }\n    else{\n        return [Math.max.apply(null,\
    \ neg), Math.min.apply(null, pos)];\n    }\n}", "    let a = null;\n    let b\
    \ = null;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 &&\
    \ (a === null || lst[i] > a)){\n            a = lst[i];\n        }\n        if(lst[i]\
    \ > 0 && (b === null || lst[i] < b)){\n            b = lst[i];\n        }\n  \
    \  }\n    return [a, b];\n}", "    let neg = [];\n    let pos = [];\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n\
    \        }\n        else if(lst[i] > 0){\n            pos.push(lst[i]);\n    \
    \    }\n    }\n    if(neg.length == 0 || pos.length == 0){\n        return [null,\
    \ null];\n    }\n    else{\n        return [Math.max(...neg), Math.min(...pos)];\n\
    \    }\n}\n", "    var smallest = null;\n    var largest = null;\n    for(var\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (smallest == null ||\
    \ lst[i] > smallest)){\n            smallest = lst[i];\n        }\n        if(lst[i]\
    \ > 0 && (largest == null || lst[i] < largest)){\n            largest = lst[i];\n\
    \        }\n    }\n    return [smallest, largest];\n}", "  let smallest = null;\n\
    \  let largest = null;\n  for (let i = 0; i < lst.length; i++){\n    if (lst[i]\
    \ > 0 && (smallest === null || lst[i] < smallest)){\n      smallest = lst[i];\n\
    \    }\n    if (lst[i] < 0 && (largest === null || lst[i] > largest)){\n     \
    \ largest = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n", "    let\
    \ neg = null;\n    let pos = null;\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] < 0){\n            if(neg == null || lst[i] > neg){\n     \
    \           neg = lst[i];\n            }\n        }\n        else if(lst[i] >\
    \ 0){\n            if(pos == null || lst[i] < pos){\n                pos = lst[i];\n\
    \            }\n        }\n    }\n    return [neg, pos];\n}", "    var largestNegative\
    \ = null;\n    var smallestPositive = null;\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0 && (largestNegative == null || lst[i] > largestNegative)){\n\
    \            largestNegative = lst[i];\n        }\n        if(lst[i] > 0 && (smallestPositive\
    \ == null || lst[i] < smallestPositive)){\n            smallestPositive = lst[i];\n\
    \        }\n    }\n    return [largestNegative, smallestPositive];\n}\n", "  \
    \  let smallest = null;\n    let largest = null;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] > 0){\n            if(smallest === null){\n       \
    \         smallest = lst[i];\n            }\n            else if(lst[i] < smallest){\n\
    \                smallest = lst[i];\n            }\n        }\n        else if(lst[i]\
    \ < 0){\n            if(largest === null){\n                largest = lst[i];\n\
    \            }\n            else if(lst[i] > largest){\n                largest\
    \ = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n\
    }", "    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e\
    \ = 0;\n    var f = 0;\n    for (var i = 0; i < lst.length; i++){\n        if\
    \ (lst[i] < 0 && lst[i] > a){\n            a = lst[i];\n            c = 1;\n \
    \       }\n        if (lst[i] > 0 && lst[i] < b){\n            b = lst[i];\n \
    \           d = 1;\n        }\n        if (lst[i] > 0 && lst[i] > e){\n      \
    \      e = lst[i];\n            f = 1;\n        }\n    }\n    if (c == 1 && d\
    \ == 1){\n        return [a, b];\n    }\n    else if (c == 1 && d == 0){\n   \
    \     return [a, null];\n    }\n    else if (c == 0 && d == 1){\n        return\
    \ [null, b];\n    }\n    else if (c == 0 && d == 0){\n        return [null, null];\n\
    \    }\n}", "    let neg = [];\n    let pos = [];\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n \
    \       else if(lst[i] > 0){\n            pos.push(lst[i]);\n        }\n    }\n\
    \    if(neg.length === 0 || pos.length === 0){\n        return [null, null];\n\
    \    }\n    else{\n        return [Math.max(...neg), Math.min(...pos)];\n    }\n\
    }", "    var min = null;\n    var max = null;\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < 0 && (min == null || lst[i] > min)){\n          \
    \  min = lst[i];\n        }\n        if(lst[i] > 0 && (max == null || lst[i] <\
    \ max)){\n            max = lst[i];\n        }\n    }\n    return [min, max];\n\
    }\n", "    let a = Math.max(...lst.filter(x => x < 0));\n    let b = Math.min(...lst.filter(x\
    \ => x > 0));\n    return [a, b];\n}\n", "  var largest_neg = null;\n  var smallest_pos\
    \ = null;\n  for (var i = 0; i < lst.length; i++){\n    if (lst[i] < 0 && (largest_neg\
    \ == null || lst[i] > largest_neg)){\n      largest_neg = lst[i];\n    }\n   \
    \ if (lst[i] > 0 && (smallest_pos == null || lst[i] < smallest_pos)){\n      smallest_pos\
    \ = lst[i];\n    }\n  }\n  return [largest_neg, smallest_pos];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
