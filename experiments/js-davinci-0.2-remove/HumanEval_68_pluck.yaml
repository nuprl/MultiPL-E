name: HumanEval_68_pluck
language: js
prompt: "//\"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n// your task is to pluck one of the nodes and return it.\n// The\
  \ plucked node should be the node with the smallest even value.\n// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n// If there are no even values or the given array is empty, return [].\n\
  // Example 1:\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index.\n// Example 2:\n// Explanation: 2 has the smallest even value, and 2 has\
  \ the smallest index.\n// Example 3:\n// Example 4:\n// Explanation: 0 is the smallest\
  \ value, but  there are two zeros,\n// so we will choose the first zero, which has\
  \ the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0\
  \ <= node.value\nfunction pluck(arr){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
  \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
  \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
  \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
completions: ["    let evens = arr.filter(num => num % 2 === 0);\n    if(evens.length\
    \ === 0) return [];\n    let smallest = evens.reduce((acc, curr) => acc < curr\
    \ ? acc : curr);\n    let index = arr.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n", "  let min = Infinity;\n  let minIndex = Infinity;\n  for(let\
    \ i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0 && arr[i] < min){\n  \
    \    min = arr[i];\n      minIndex = i;\n    }\n  }\n  if(min === Infinity){\n\
    \    return [];\n  }\n  return [min, minIndex];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if(evens.length === 0) return [];\n    let smallest =\
    \ evens.reduce((a, b) => Math.min(a, b));\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let evens = arr.filter(x => x % 2 ===\
    \ 0);\n    if(evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    return [min, arr.indexOf(min)];\n}\n", "    let evens = arr.filter(x => x\
    \ % 2 === 0);\n    let evensIndex = arr.map((x, i) => x % 2 === 0 ? i : null).filter(x\
    \ => x !== null);\n    if (evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    let minIndex = evensIndex[evens.indexOf(min)];\n    return [min, minIndex];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length ===\
    \ 0) return [];\n    let smallest = evens.reduce((a, b) => Math.min(a, b));\n\
    \    let index = arr.indexOf(smallest);\n    return [smallest, index];\n}\n",
  "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return\
    \ [];\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if(evens.length === 0) return [];\n    let min = Math.min(...evens);\n  \
    \  let index = arr.indexOf(min);\n    return [min, index];\n}", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return [];\n  \
    \  let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n}\n", " \
    \   let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length === 0) return\
    \ [];\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    let even = [];\n    let odd = [];\n    let\
    \ result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] %\
    \ 2 === 0){\n            even.push(arr[i]);\n        } else {\n            odd.push(arr[i]);\n\
    \        }\n    }\n    if(even.length === 0){\n        return [];\n    } else\
    \ {\n        let min = Math.min(...even);\n        let index = arr.indexOf(min);\n\
    \        result.push(min, index);\n        return result;\n    }\n}", "    let\
    \ evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return [];\n\
    \    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}", "    let evens = arr.filter(x => x % 2 === 0);\n    let min\
    \ = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return [min, index];\n\
    }\n", "    let even = [];\n    let index = [];\n    let result = [];\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n\
    \            index.push(i);\n        }\n    }\n    if(even.length === 0){\n  \
    \      return [];\n    }\n    let min = Math.min(...even);\n    let minIndex =\
    \ index[even.indexOf(min)];\n    result.push(min);\n    result.push(minIndex);\n\
    \    return result;\n}", "    let evens = arr.filter(x => x % 2 === 0);\n    if\
    \ (evens.length === 0) return [];\n    let min = Math.min(...evens);\n    let\
    \ index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let even = [];\n\
    \    let index = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            even.push(arr[i]);\n            index.push(i);\n  \
    \      }\n    }\n    if(even.length === 0){\n        return [];\n    }\n    let\
    \ min = Math.min(...even);\n    let minIndex = index[even.indexOf(min)];\n   \
    \ return [min, minIndex];\n}\n", "    let even = [];\n    let index = [];\n  \
    \  for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n     \
    \       even.push(arr[i]);\n            index.push(i);\n        }\n    }\n   \
    \ if(even.length === 0){\n        return [];\n    }\n    let min = Math.min(...even);\n\
    \    let minIndex = index[even.indexOf(min)];\n    return [min, minIndex];\n}",
  "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return\
    \ [];\n    let smallest = evens.reduce((a, b) => Math.min(a, b));\n    let index\
    \ = arr.indexOf(smallest);\n    return [smallest, index];\n}", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return [];\n  \
    \  let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n}\n", " \
    \   let minEven = Infinity;\n    let minEvenIndex = Infinity;\n    for(let i =\
    \ 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < minEven){\n\
    \            minEven = arr[i];\n            minEvenIndex = i;\n        }\n   \
    \ }\n    if(minEven === Infinity){\n        return [];\n    }\n    return [minEven,\
    \ minEvenIndex];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if\
    \ (evens.length === 0) return [];\n    let min = Math.min(...evens);\n    let\
    \ index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens =\
    \ arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return [];\n    let\
    \ smallest = evens.reduce((a, b) => a < b ? a : b);\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let evens = arr.filter(x => x % 2 ===\
    \ 0);\n    if(evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    return [min, arr.indexOf(min)];\n}\n", "  let smallest = Infinity;\n  let\
    \ smallestIndex = Infinity;\n  let smallestEven = Infinity;\n  let smallestEvenIndex\
    \ = Infinity;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] < smallest){\n\
    \      smallest = arr[i];\n      smallestIndex = i;\n    }\n    if(arr[i] % 2\
    \ === 0 && arr[i] < smallestEven){\n      smallestEven = arr[i];\n      smallestEvenIndex\
    \ = i;\n    }\n  }\n  if(smallestEven === Infinity){\n    return [];\n  }\n  return\
    \ [smallestEven, smallestEvenIndex];\n}\n", "    let min = Infinity;\n    let\
    \ index = -1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2\
    \ === 0 && arr[i] < min){\n            min = arr[i];\n            index = i;\n\
    \        }\n    }\n    return index === -1 ? [] : [min, index];\n}\n", "    let\
    \ min = Infinity;\n    let minIndex = Infinity;\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0 && arr[i] < min){\n            min = arr[i];\n\
    \            minIndex = i;\n        }\n    }\n    if(min === Infinity){\n    \
    \    return [];\n    }\n    return [min, minIndex];\n}", "  let evens = arr.filter(num\
    \ => num % 2 === 0);\n  if (evens.length === 0) return [];\n  let smallest = evens.reduce((a,\
    \ b) => Math.min(a, b));\n  let index = arr.indexOf(smallest);\n  return [smallest,\
    \ index];\n}\n", "    let evens = arr.filter(num => num % 2 === 0);\n    if (evens.length\
    \ === 0) return [];\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    let even = [];\n    let index = [];\n  \
    \  let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            even.push(arr[i]);\n            index.push(i);\n  \
    \      }\n    }\n    if(even.length === 0){\n        return [];\n    }\n    let\
    \ smallest = Math.min(...even);\n    let smallestIndex = index[even.indexOf(smallest)];\n\
    \    result.push(smallest);\n    result.push(smallestIndex);\n    return result;\n\
    }", "    if(arr.length === 0) return [];\n    let evens = arr.filter(e => e %\
    \ 2 === 0);\n    if(evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens\
    \ = arr.filter(n => n % 2 === 0);\n    let min = Math.min(...evens);\n    if(min\
    \ === Infinity){\n        return [];\n    }\n    return [min, arr.indexOf(min)];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length ===\
    \ 0) return [];\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if(evens.length === 0) return [];\n    let min = Math.min(...evens);\n  \
    \  let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    if(evens.length === 0) return [];\n   \
    \ let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if\
    \ (evens.length === 0) return [];\n    let min = Math.min(...evens);\n    let\
    \ index = arr.indexOf(min);\n    return [min, index];\n}\n", "    if(arr.length\
    \ === 0) return [];\n    let smallestEven = Infinity;\n    let smallestEvenIndex\
    \ = Infinity;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2\
    \ === 0 && arr[i] < smallestEven){\n            smallestEven = arr[i];\n     \
    \       smallestEvenIndex = i;\n        }\n    }\n    if(smallestEven === Infinity)\
    \ return [];\n    return [smallestEven, smallestEvenIndex];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return [];\n  \
    \  let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n}\n", " \
    \   let even = [];\n    let index = [];\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n            index.push(i);\n\
    \        }\n    }\n    if(even.length === 0){\n        return [];\n    }\n   \
    \ let min = Math.min(...even);\n    let minIndex = index[even.indexOf(min)];\n\
    \    return [min, minIndex];\n}", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if (evens.length === 0) return [];\n    let smallest = evens.reduce((a, b)\
    \ => Math.min(a, b));\n    let index = arr.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n", "    let even = [];\n    let odd = [];\n    let result = [];\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n   \
    \         even.push(arr[i]);\n        } else {\n            odd.push(arr[i]);\n\
    \        }\n    }\n    if(even.length === 0){\n        return [];\n    } else\
    \ {\n        let min = Math.min(...even);\n        let index = arr.indexOf(min);\n\
    \        result.push(min, index);\n        return result;\n    }\n}", "    let\
    \ evens = arr.filter(num => num % 2 === 0);\n    if(evens.length === 0) return\
    \ [];\n    let smallest = evens.reduce((acc, curr) => acc < curr ? acc : curr);\n\
    \    let index = arr.indexOf(smallest);\n    return [smallest, index];\n}\n",
  "    let evens = arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return evens.length === 0 ? [] : [min,\
    \ index];\n}\n", "  let evens = arr.filter(x => x % 2 === 0);\n  let min = Math.min(...evens);\n\
    \  if(evens.length === 0) return [];\n  let index = arr.indexOf(min);\n  return\
    \ [min, index];\n}\n", "    let even = [];\n    let index = [];\n    let result\
    \ = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            even.push(arr[i]);\n            index.push(i);\n        }\n    }\n\
    \    if(even.length === 0){\n        return [];\n    }\n    let min = Math.min(...even);\n\
    \    let minIndex = index[even.indexOf(min)];\n    result.push(min);\n    result.push(minIndex);\n\
    \    return result;\n}", "    let evens = arr.filter(x => x % 2 === 0);\n    let\
    \ min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return evens.length\
    \ > 0 ? [min, index] : [];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ evens.length > 0 ? [min, index] : [];\n}\n", "    let min = Infinity;\n    let\
    \ index = -1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2\
    \ === 0 && arr[i] < min){\n            min = arr[i];\n            index = i;\n\
    \        }\n    }\n    return index === -1 ? [] : [min, index];\n}\n", "    let\
    \ evens = [];\n    let evensIndex = [];\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i] % 2 === 0){\n            evens.push(arr[i]);\n            evensIndex.push(i);\n\
    \        }\n    }\n    if(evens.length === 0){\n        return [];\n    }\n  \
    \  let smallestEven = evens[0];\n    let smallestEvenIndex = evensIndex[0];\n\
    \    for(let i = 0; i < evens.length; i++){\n        if(evens[i] < smallestEven){\n\
    \            smallestEven = evens[i];\n            smallestEvenIndex = evensIndex[i];\n\
    \        }\n    }\n    return [smallestEven, smallestEvenIndex];\n}", "    let\
    \ evens = arr.filter(x => x % 2 === 0);\n    if(evens.length === 0){\n       \
    \ return [];\n    }\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if (evens.length === 0) return [];\n    let min = Math.min(...evens);\n \
    \   let index = arr.indexOf(min);\n    return [min, index];\n}\n", "  let evens\
    \ = arr.filter(x => x % 2 === 0);\n  let smallestEven = Math.min(...evens);\n\
    \  let index = arr.indexOf(smallestEven);\n  return evens.length ? [smallestEven,\
    \ index] : [];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length\
    \ === 0) return [];\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    let min = Infinity;\n    let minIndex =\
    \ -1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 &&\
    \ arr[i] < min){\n            min = arr[i];\n            minIndex = i;\n     \
    \   }\n    }\n    return minIndex === -1 ? [] : [min, minIndex];\n}\n", "    let\
    \ evens = arr.filter(x => x % 2 === 0);\n    if(evens.length === 0) return [];\n\
    \    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n", "  var evens = [];\n  var evenIndexes = [];\n  for(var\
    \ i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0){\n      evens.push(arr[i]);\n\
    \      evenIndexes.push(i);\n    }\n  }\n  if(evens.length === 0){\n    return\
    \ [];\n  }\n  var min = evens[0];\n  var minIndex = evenIndexes[0];\n  for(var\
    \ j = 1; j < evens.length; j++){\n    if(evens[j] < min){\n      min = evens[j];\n\
    \      minIndex = evenIndexes[j];\n    }\n  }\n  return [min, minIndex];\n}\n",
  "    let smallestEven = Infinity;\n    let smallestEvenIndex = Infinity;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < smallestEven){\n\
    \            smallestEven = arr[i];\n            smallestEvenIndex = i;\n    \
    \    }\n    }\n    if(smallestEven === Infinity){\n        return [];\n    }\n\
    \    return [smallestEven, smallestEvenIndex];\n}\n", "  let evens = [];\n  let\
    \ evensIndex = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2\
    \ === 0){\n      evens.push(arr[i]);\n      evensIndex.push(i);\n    }\n  }\n\
    \  if(evens.length === 0){\n    return [];\n  }\n  let smallest = evens[0];\n\
    \  let smallestIndex = evensIndex[0];\n  for(let i = 0; i < evens.length; i++){\n\
    \    if(evens[i] < smallest){\n      smallest = evens[i];\n      smallestIndex\
    \ = evensIndex[i];\n    }\n  }\n  return [smallest, smallestIndex];\n}\n", " \
    \   let even = arr.filter(x => x % 2 === 0);\n    let min = Math.min(...even);\n\
    \    let index = arr.indexOf(min);\n    return even.length === 0 ? [] : [min,\
    \ index];\n}\n", "    let min = Infinity;\n    let minIndex = -1;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < min){\n\
    \            min = arr[i];\n            minIndex = i;\n        }\n    }\n    return\
    \ min === Infinity ? [] : [min, minIndex];\n}\n", "    let even = arr.filter(x\
    \ => x % 2 === 0);\n    let min = Math.min(...even);\n    let index = arr.indexOf(min);\n\
    \    return even.length === 0 ? [] : [min, index];\n}", "    let even = arr.filter(x\
    \ => x % 2 === 0);\n    let min = Math.min(...even);\n    let index = arr.indexOf(min);\n\
    \    return even.length === 0 ? [] : [min, index];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    return [min, arr.indexOf(min)];\n}\n", "  let evens = arr.filter(x => x %\
    \ 2 === 0);\n  if (evens.length === 0) return [];\n  let smallest = evens.reduce((a,\
    \ b) => Math.min(a, b));\n  let index = arr.indexOf(smallest);\n  return [smallest,\
    \ index];\n}\n", "  let evens = arr.filter(x => x % 2 === 0);\n  if (evens.length\
    \ === 0) return [];\n  let min = Math.min(...evens);\n  let index = arr.indexOf(min);\n\
    \  return [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if(evens.length === 0) return [];\n    let min = Math.min(...evens);\n  \
    \  let index = arr.indexOf(min);\n    return [min, index];\n}", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return [];\n  \
    \  let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length\
    \ === 0) return [];\n    let smallest = evens.reduce((a,b) => Math.min(a,b));\n\
    \    let index = arr.indexOf(smallest);\n    return [smallest, index];\n}\n",
  "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return\
    \ [];\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    if(arr.length === 0) return [];\n    let\
    \ min = Infinity;\n    let index = 0;\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i] % 2 === 0 && arr[i] < min){\n            min = arr[i];\n  \
    \          index = i;\n        }\n    }\n    if(min === Infinity) return [];\n\
    \    return [min, index];\n}\n", "  if(arr.length === 0){\n    return [];\n  }\n\
    \  let evens = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2\
    \ === 0){\n      evens.push([arr[i], i]);\n    }\n  }\n  if(evens.length === 0){\n\
    \    return [];\n  }\n  evens.sort((a, b) => a[0] - b[0]);\n  return evens[0];\n\
    }\n", "    let min = Infinity;\n    let minIndex = -1;\n    for(let i = 0; i <\
    \ arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < min){\n         \
    \   min = arr[i];\n            minIndex = i;\n        }\n    }\n    return minIndex\
    \ === -1 ? [] : [min, minIndex];\n}\n", "    let evenArr = arr.filter(num => num\
    \ % 2 === 0);\n    let minEven = Math.min(...evenArr);\n    let index = arr.indexOf(minEven);\n\
    \    return evenArr.length === 0 ? [] : [minEven, index];\n}\n", "  let evens\
    \ = arr.filter(x => x % 2 === 0);\n  let min = Math.min(...evens);\n  let index\
    \ = arr.indexOf(min);\n  return evens.length === 0 ? [] : [min, index];\n}\n",
  "    let min = Infinity;\n    let index = -1;\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0 && arr[i] < min){\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    return index === -1 ? [] : [min,\
    \ index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length\
    \ === 0) return [];\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if(evens.length === 0) return [];\n    let smallest = evens.reduce((a, b)\
    \ => Math.min(a, b));\n    let index = arr.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let evensIndex\
    \ = arr.map((x, i) => x % 2 === 0 ? i : null).filter(x => x !== null);\n    if\
    \ (evens.length === 0) return [];\n    let smallestEven = evens.reduce((a, b)\
    \ => a < b ? a : b);\n    let smallestEvenIndex = evensIndex[evens.indexOf(smallestEven)];\n\
    \    return [smallestEven, smallestEvenIndex];\n}\n", "    let min = Infinity;\n\
    \    let index = -1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0 && arr[i] < min){\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    return index === -1 ? [] : [min, index];\n}\n", " \
    \   let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length === 0){\n \
    \       return [];\n    }\n    let min = Math.min(...evens);\n    let index =\
    \ arr.indexOf(min);\n    return [min, index];\n}\n", "    let evenArr = arr.filter(x\
    \ => x % 2 === 0);\n    if(evenArr.length === 0) return [];\n    let min = Math.min(...evenArr);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    if(evens.length === 0){\n        return\
    \ [];\n    }\n    let smallestEven = evens.reduce((a,b) => a < b ? a : b);\n \
    \   let index = arr.indexOf(smallestEven);\n    return [smallestEven, index];\n\
    }\n", "    let even = arr.filter(x => x % 2 === 0);\n    let min = Math.min(...even);\n\
    \    let index = arr.indexOf(min);\n    return even.length === 0 ? [] : [min,\
    \ index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length\
    \ === 0) return [];\n    let smallest = evens.reduce((a, b) => Math.min(a, b));\n\
    \    let index = arr.indexOf(smallest);\n    return [smallest, index];\n}\n",
  "    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length === 0) return\
    \ [];\n    let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n\
    }\n", "    let min = Infinity;\n    let index = -1;\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0 && arr[i] < min){\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    return index === -1 ? [] : [min,\
    \ index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let min =\
    \ Math.min(...evens);\n    let index = arr.indexOf(min);\n    if(evens.length\
    \ === 0){\n        return [];\n    }\n    return [min, index];\n}", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    if(evens.length === 0) return [];\n   \
    \ let smallest = evens.reduce((a,b) => Math.min(a,b));\n    return [smallest,\
    \ arr.indexOf(smallest)];\n}", "    let smallestEven = Infinity;\n    let index\
    \ = -1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0\
    \ && arr[i] < smallestEven){\n            smallestEven = arr[i];\n           \
    \ index = i;\n        }\n    }\n    return index === -1 ? [] : [smallestEven,\
    \ index];\n}", "    if(arr.length === 0){\n        return [];\n    }\n    let\
    \ evens = arr.filter(x => x % 2 === 0);\n    if(evens.length === 0){\n       \
    \ return [];\n    }\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    let min = Infinity;\n    let minIndex =\
    \ Infinity;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 ===\
    \ 0 && arr[i] < min){\n            min = arr[i];\n            minIndex = i;\n\
    \        }\n    }\n    if(min === Infinity){\n        return [];\n    }\n    return\
    \ [min, minIndex];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n   \
    \ let smallest = evens.sort((a, b) => a - b)[0];\n    if (smallest === undefined)\
    \ {\n        return [];\n    }\n    let index = arr.indexOf(smallest);\n    return\
    \ [smallest, index];\n}\n", "    let even = [];\n    let index = [];\n    let\
    \ result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] %\
    \ 2 === 0){\n            even.push(arr[i]);\n            index.push(i);\n    \
    \    }\n    }\n    if(even.length === 0){\n        return [];\n    }\n    let\
    \ min = Math.min(...even);\n    let minIndex = index[even.indexOf(min)];\n   \
    \ result.push(min);\n    result.push(minIndex);\n    return result;\n}", "  let\
    \ even = [];\n  let index = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i]\
    \ % 2 === 0){\n      even.push(arr[i]);\n      index.push(i);\n    }\n  }\n  if(even.length\
    \ === 0){\n    return [];\n  }\n  let min = Math.min(...even);\n  let minIndex\
    \ = index[even.indexOf(min)];\n  return [min, minIndex];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    let smallestEven = evens.length > 0 ? Math.min(...evens)\
    \ : null;\n    let index = arr.indexOf(smallestEven);\n    return smallestEven\
    \ !== null ? [smallestEven, index] : [];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if(evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    return [min, arr.indexOf(min)];\n}\n", "    let evens = arr.filter(x => x\
    \ % 2 === 0);\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return evens.length === 0 ? [] : [min, index];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    if(evens.length === 0) return [];\n   \
    \ let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n", "    let evens = [];\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            evens.push([arr[i], i]);\n\
    \        }\n    }\n    if(evens.length === 0){\n        return [];\n    }\n  \
    \  let smallest = evens[0];\n    for(let i = 1; i < evens.length; i++){\n    \
    \    if(evens[i][0] < smallest[0]){\n            smallest = evens[i];\n      \
    \  }\n    }\n    return smallest;\n}\n", "    let evens = arr.filter(x => x %\
    \ 2 === 0);\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return evens.length > 0 ? [min, index] : [];\n}\n", "    let even = [];\n\
    \    let odd = [];\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n        }else{\n\
    \            odd.push(arr[i]);\n        }\n    }\n    if(even.length === 0){\n\
    \        return [];\n    }else{\n        let min = even[0];\n        for(let i\
    \ = 0; i < even.length; i++){\n            if(even[i] < min){\n              \
    \  min = even[i];\n            }\n        }\n        result.push(min);\n     \
    \   for(let i = 0; i < arr.length; i++){\n            if(arr[i] === min){\n  \
    \              result.push(i);\n                break;\n            }\n      \
    \  }\n        return result;\n    }\n}", "    let evens = arr.filter(x => x %\
    \ 2 === 0);\n    if(evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    let idx = arr.indexOf(min);\n    return [min, idx];\n}\n", "    let evens\
    \ = arr.filter(num => num % 2 === 0);\n    if(evens.length === 0) return [];\n\
    \    let smallest = evens.reduce((a, b) => a < b ? a : b);\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}", "    let evens = arr.filter(x => x % 2 ===\
    \ 0);\n    let smallestEven = Math.min(...evens);\n    let index = arr.indexOf(smallestEven);\n\
    \    return [smallestEven, index];\n}\n", "    let evens = arr.filter(x => x %\
    \ 2 === 0);\n    if(evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let even\
    \ = [];\n    let index = [];\n    let result = [];\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n     \
    \       index.push(i);\n        }\n    }\n    if(even.length === 0){\n       \
    \ return [];\n    }\n    let min = Math.min(...even);\n    let minIndex = index[even.indexOf(min)];\n\
    \    result.push(min);\n    result.push(minIndex);\n    return result;\n}\n",
  "    let min = Infinity;\n    let minIndex = Infinity;\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0 && arr[i] < min){\n            min = arr[i];\n\
    \            minIndex = i;\n        }\n    }\n    if(min === Infinity){\n    \
    \    return [];\n    }\n    return [min, minIndex];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "  let even\
    \ = [];\n  let odd = [];\n  let result = [];\n  for(let i = 0; i < arr.length;\
    \ i++){\n    if(arr[i] % 2 === 0){\n      even.push(arr[i]);\n    } else {\n \
    \     odd.push(arr[i]);\n    }\n  }\n  if(even.length === 0){\n    return [];\n\
    \  } else {\n    let smallest = Math.min(...even);\n    let index = arr.indexOf(smallest);\n\
    \    result.push(smallest, index);\n    return result;\n  }\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    let smallestEven = evens.length > 0 ? Math.min(...evens)\
    \ : null;\n    let smallestEvenIndex = smallestEven !== null ? arr.indexOf(smallestEven)\
    \ : null;\n    return smallestEvenIndex !== null ? [smallestEven, smallestEvenIndex]\
    \ : [];\n}\n", "  let evens = arr.filter(x => x % 2 === 0);\n  let smallestEven\
    \ = evens.length > 0 ? Math.min(...evens) : null;\n  let index = arr.indexOf(smallestEven);\n\
    \  return smallestEven === null ? [] : [smallestEven, index];\n}\n", "    let\
    \ evens = [];\n    let index = [];\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i] % 2 === 0){\n            evens.push(arr[i]);\n            index.push(i);\n\
    \        }\n    }\n    if(evens.length === 0){\n        return [];\n    }\n  \
    \  let min = Math.min(...evens);\n    let minIndex = index[evens.indexOf(min)];\n\
    \    return [min, minIndex];\n}", "    let smallestEven = null;\n    let smallestEvenIndex\
    \ = null;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 ===\
    \ 0){\n            if(smallestEven === null || arr[i] < smallestEven){\n     \
    \           smallestEven = arr[i];\n                smallestEvenIndex = i;\n \
    \           }\n        }\n    }\n    if(smallestEven === null){\n        return\
    \ [];\n    }\n    return [smallestEven, smallestEvenIndex];\n}", "    let even\
    \ = [];\n    let index = [];\n    let result = [];\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n     \
    \       index.push(i);\n        }\n    }\n    if(even.length === 0){\n       \
    \ return [];\n    }\n    let min = Math.min(...even);\n    let minIndex = index[even.indexOf(min)];\n\
    \    result.push(min);\n    result.push(minIndex);\n    return result;\n}", " \
    \   let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return\
    \ [];\n    let smallest = evens.reduce((a, b) => Math.min(a, b));\n    let index\
    \ = arr.indexOf(smallest);\n    return [smallest, index];\n}\n", "    let even\
    \ = [];\n    let odd = [];\n    let result = [];\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n     \
    \   }else{\n            odd.push(arr[i]);\n        }\n    }\n    if(even.length\
    \ === 0){\n        return [];\n    }else{\n        let min = Math.min(...even);\n\
    \        result.push(min);\n        result.push(arr.indexOf(min));\n        return\
    \ result;\n    }\n}\n", "    if(arr.length === 0){\n        return [];\n    }\n\
    \    let evens = [];\n    let evensIndex = [];\n    let smallestEven = null;\n\
    \    let smallestEvenIndex = null;\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i] % 2 === 0){\n            evens.push(arr[i]);\n            evensIndex.push(i);\n\
    \        }\n    }\n    if(evens.length === 0){\n        return [];\n    }\n  \
    \  smallestEven = evens[0];\n    smallestEvenIndex = evensIndex[0];\n    for(let\
    \ i = 0; i < evens.length; i++){\n        if(evens[i] < smallestEven){\n     \
    \       smallestEven = evens[i];\n            smallestEvenIndex = evensIndex[i];\n\
    \        }\n    }\n    return [smallestEven, smallestEvenIndex];\n}", "  let evens\
    \ = [];\n  let evensIndex = [];\n  let evensIndexes = [];\n  let evensValues =\
    \ [];\n  let evensValuesIndexes = [];\n  let evensValuesIndexesSorted = [];\n\
    \  let evensValuesSorted = [];\n  let evensIndexesSorted = [];\n  let evensSorted\
    \ = [];\n  let evensSortedIndexes = [];\n  let evensSortedIndexesSorted = [];\n\
    \  let evensSortedSorted = [];\n  let evensSortedSortedIndexes = [];\n  let evensSortedSortedIndexesSorted\
    \ = [];\n  let evensSortedSortedSorted = [];\n  let evensSortedSortedSortedIndexes\
    \ = [];\n  let evensSortedSortedSortedIndexesSorted = [];\n  let evensSortedSortedSortedSorted\
    \ = [];\n  let evensSortedSortedSortedSortedIndexes = [];\n  let evensSortedSortedSortedSortedIndexesSorted\
    \ = [];\n  let evensSortedSortedSortedSortedSorted = [];\n  let evensSortedSortedSortedSortedSortedIndexes\
    \ = [];\n  let evensSortedSortedSortedSortedSortedIndexesSorted = [];\n  let evensSortedSortedSortedSortedSortedSorted\
    \ = [];\n  let evensSortedSortedSortedSortedSortedSortedIndexes = [];\n  let evensSortedSortedSortedSortedSortedSortedIndexesSorted\
    \ = [];\n  let evensSortedSortedSortedSortedSortedSortedSorted = [];\n  let evensSortedSortedSortedSortedSortedSortedSortedIndexes\
    \ = [];\n  let evensSortedSortedSortedSortedSortedSortedSortedIndexesSorted =\
    \ [];\n  let evensSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let\
    \ evensSortedSortedSortedSortedSortedSortedSortedSortedIndexes = [];\n  let evensSortedSortedSortedSortedSortedSortedSortedSortedIndexesSorted\
    \ = [];\n  let evens", "    let evens = arr.filter(e => e % 2 === 0);\n    if(evens.length\
    \ === 0) return [];\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if(evens.length === 0) return [];\n    let min = Math.min(...evens);\n  \
    \  let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let minEven\
    \ = Infinity;\n    let minEvenIndex = -1;\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0 && arr[i] < minEven){\n            minEven\
    \ = arr[i];\n            minEvenIndex = i;\n        }\n    }\n    if(minEvenIndex\
    \ === -1){\n        return [];\n    }\n    return [minEven, minEvenIndex];\n}\n",
  "    let even = [];\n    let index = [];\n    let result = [];\n    for(let i =\
    \ 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n\
    \            index.push(i);\n        }\n    }\n    if(even.length === 0){\n  \
    \      return [];\n    }\n    let min = Math.min(...even);\n    let minIndex =\
    \ index[even.indexOf(min)];\n    result.push(min);\n    result.push(minIndex);\n\
    \    return result;\n}", "    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length\
    \ === 0) return [];\n    let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length ===\
    \ 0) return [];\n    let smallestEven = Math.min(...evens);\n    let index = arr.indexOf(smallestEven);\n\
    \    return [smallestEven, index];\n}\n", "    let evens = arr.filter(x => x %\
    \ 2 === 0);\n    if(evens.length === 0) return [];\n    let smallest = evens.reduce((a,b)\
    \ => a < b ? a : b);\n    let index = arr.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length\
    \ === 0) return [];\n    let smallest = evens.reduce((a,b) => a < b ? a : b);\n\
    \    let index = arr.indexOf(smallest);\n    return [smallest, index];\n}\n",
  "  let smallestEven = Infinity;\n  let smallestEvenIndex = Infinity;\n  for(let\
    \ i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0 && arr[i] < smallestEven){\n\
    \      smallestEven = arr[i];\n      smallestEvenIndex = i;\n    }\n  }\n  if(smallestEven\
    \ === Infinity){\n    return [];\n  }\n  return [smallestEven, smallestEvenIndex];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return evens.length ? [min, index] : [];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length ===\
    \ 0) return [];\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    let evens = [];\n    let evensIndex = [];\n\
    \    let evensIndexes = [];\n    for(let i = 0; i < arr.length; i++){\n      \
    \  if(arr[i] % 2 === 0){\n            evens.push(arr[i]);\n            evensIndex.push(i);\n\
    \        }\n    }\n    if(evens.length === 0){\n        return [];\n    }\n  \
    \  let smallestEven = Math.min(...evens);\n    for(let i = 0; i < evens.length;\
    \ i++){\n        if(evens[i] === smallestEven){\n            evensIndexes.push(evensIndex[i]);\n\
    \        }\n    }\n    return [smallestEven, Math.min(...evensIndexes)];\n}\n",
  "    let even = [];\n    let odd = [];\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n        } else\
    \ {\n            odd.push(arr[i]);\n        }\n    }\n    if(even.length === 0){\n\
    \        return [];\n    }\n    let smallestEven = even[0];\n    let index = 0;\n\
    \    for(let i = 0; i < even.length; i++){\n        if(even[i] < smallestEven){\n\
    \            smallestEven = even[i];\n            index = i;\n        }\n    }\n\
    \    return [smallestEven, index];\n}", "    let evens = arr.filter(num => num\
    \ % 2 === 0);\n    if(evens.length === 0) return [];\n    let smallest = evens.reduce((a,\
    \ b) => a < b ? a : b);\n    let index = arr.indexOf(smallest);\n    return [smallest,\
    \ index];\n}", "    let even = [];\n    let odd = [];\n    let result = [];\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n   \
    \         even.push(arr[i]);\n        }else{\n            odd.push(arr[i]);\n\
    \        }\n    }\n    if(even.length === 0){\n        return [];\n    }else{\n\
    \        let min = Math.min(...even);\n        let index = arr.indexOf(min);\n\
    \        result.push(min);\n        result.push(index);\n        return result;\n\
    \    }\n}", "    let evenArr = arr.filter(x => x % 2 === 0);\n    if (evenArr.length\
    \ === 0) return [];\n    let smallestEven = Math.min(...evenArr);\n    let index\
    \ = arr.indexOf(smallestEven);\n    return [smallestEven, index];\n}\n", "   \
    \ let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return\
    \ [];\n    let minEven = Math.min(...evens);\n    let index = arr.indexOf(minEven);\n\
    \    return [minEven, index];\n}\n", "    let evens = arr.filter(x => x % 2 ===\
    \ 0);\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return evens.length > 0 ? [min, index] : [];\n}\n", "  let evens = [];\n\
    \  let evenIndexes = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i]\
    \ % 2 === 0){\n      evens.push(arr[i]);\n      evenIndexes.push(i);\n    }\n\
    \  }\n  if(evens.length === 0){\n    return [];\n  }\n  let min = Math.min(...evens);\n\
    \  let minIndex = evenIndexes[evens.indexOf(min)];\n  return [min, minIndex];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length ===\
    \ 0) return [];\n    let smallest = evens.reduce((a, b) => Math.min(a, b));\n\
    \    let index = arr.indexOf(smallest);\n    return [smallest, index];\n}\n",
  "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return\
    \ [];\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "  let evens = arr.filter(x => x % 2 === 0);\n\
    \  if(evens.length === 0) return [];\n  let min = Math.min(...evens);\n  let index\
    \ = arr.indexOf(min);\n  return [min, index];\n}\n", "    let even = [];\n   \
    \ let odd = [];\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n        }else{\n\
    \            odd.push(arr[i]);\n        }\n    }\n    if(even.length === 0){\n\
    \        return [];\n    }else{\n        let min = Math.min(...even);\n      \
    \  result.push(min);\n        result.push(arr.indexOf(min));\n        return result;\n\
    \    }\n}", "    let smallest = Infinity;\n    let index = -1;\n    for(let i\
    \ = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < smallest){\n\
    \            smallest = arr[i];\n            index = i;\n        }\n    }\n  \
    \  return index === -1 ? [] : [smallest, index];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) return [];\n    let smallest =\
    \ evens.reduce((a, b) => Math.min(a, b));\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let evens = arr.filter(x => x % 2 ===\
    \ 0);\n    if(evens.length === 0) return [];\n    let smallest = evens.reduce((a,\
    \ b) => Math.min(a, b));\n    let index = arr.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length\
    \ === 0) return [];\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}", "    let even = [];\n    let index = [];\n    let\
    \ result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] %\
    \ 2 === 0){\n            even.push(arr[i]);\n            index.push(i);\n    \
    \    }\n    }\n    if(even.length === 0){\n        return [];\n    }\n    let\
    \ min = Math.min(...even);\n    let minIndex = index[even.indexOf(min)];\n   \
    \ result.push(min);\n    result.push(minIndex);\n    return result;\n}", "   \
    \ let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length === 0) return\
    \ [];\n    let smallest = evens.reduce((acc, curr) => acc < curr ? acc : curr);\n\
    \    let index = arr.indexOf(smallest);\n    return [smallest, index];\n}\n",
  "    let evens = [];\n    let evensIndex = [];\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            evens.push(arr[i]);\n    \
    \        evensIndex.push(i);\n        }\n    }\n    if(evens.length === 0){\n\
    \        return [];\n    }\n    let smallestEven = Math.min(...evens);\n    let\
    \ smallestEvenIndex = evensIndex[evens.indexOf(smallestEven)];\n    return [smallestEven,\
    \ smallestEvenIndex];\n}\n", "    let even = [];\n    let index = [];\n    let\
    \ result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] %\
    \ 2 === 0){\n            even.push(arr[i]);\n            index.push(i);\n    \
    \    }\n    }\n    if(even.length === 0){\n        return [];\n    }\n    let\
    \ min = Math.min(...even);\n    let minIndex = index[even.indexOf(min)];\n   \
    \ result.push(min);\n    result.push(minIndex);\n    return result;\n}\n", " \
    \   let evens = [];\n    let evensIndex = [];\n    let evensMin = [];\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            evens.push(arr[i]);\n\
    \            evensIndex.push(i);\n        }\n    }\n    if(evens.length === 0){\n\
    \        return [];\n    }\n    let min = Math.min(...evens);\n    for(let i =\
    \ 0; i < evens.length; i++){\n        if(evens[i] === min){\n            evensMin.push(evens[i]);\n\
    \        }\n    }\n    if(evensMin.length === 1){\n        return [evensMin[0],\
    \ evensIndex[evens.indexOf(evensMin[0])]];\n    }\n    let minIndex = Math.min(...evensIndex);\n\
    \    return [evens[evensIndex.indexOf(minIndex)], minIndex];\n}", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    if(evens.length === 0){\n        return\
    \ [];\n    }\n    let min = Math.min(...evens);\n    let minIndex = arr.indexOf(min);\n\
    \    return [min, minIndex];\n}\n", "    if(arr.length === 0) return [];\n   \
    \ let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length === 0) return\
    \ [];\n    let smallestEven = evens.reduce((a,b) => a < b ? a : b);\n    let index\
    \ = arr.indexOf(smallestEven);\n    return [smallestEven, index];\n}\n", "  let\
    \ evens = arr.filter(num => num % 2 === 0);\n  if (evens.length === 0) return\
    \ [];\n  let smallestEven = evens.reduce((a, b) => Math.min(a, b));\n  let index\
    \ = arr.indexOf(smallestEven);\n  return [smallestEven, index];\n}\n", "    let\
    \ evens = arr.filter(n => n % 2 === 0);\n    if (evens.length === 0) return [];\n\
    \    let smallest = evens.reduce((a, b) => a < b ? a : b);\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}", "    let even = [];\n    let index = [];\n\
    \    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            even.push(arr[i]);\n            index.push(i);\n  \
    \      }\n    }\n    if(even.length === 0){\n        return result;\n    }\n \
    \   let min = Math.min(...even);\n    let minIndex = index[even.indexOf(min)];\n\
    \    result.push(min);\n    result.push(minIndex);\n    return result;\n}", " \
    \   let even = [];\n    let index = [];\n    let result = [];\n    for(let i =\
    \ 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n\
    \            index.push(i);\n        }\n    }\n    if(even.length === 0){\n  \
    \      return result;\n    }\n    let min = Math.min(...even);\n    let minIndex\
    \ = index[even.indexOf(min)];\n    result.push(min);\n    result.push(minIndex);\n\
    \    return result;\n}", "  let evens = arr.filter(x => x % 2 === 0);\n  if(evens.length\
    \ === 0) return [];\n  let min = Math.min(...evens);\n  let index = arr.indexOf(min);\n\
    \  return [min, index];\n}\n", "  if(arr.length === 0) return [];\n  let evens\
    \ = arr.filter(x => x % 2 === 0);\n  if(evens.length === 0) return [];\n  let\
    \ min = Math.min(...evens);\n  let index = arr.indexOf(min);\n  return [min, index];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let evensIndex = arr.map((x,\
    \ i) => x % 2 === 0 ? i : null).filter(x => x !== null);\n    if (evens.length\
    \ === 0) return [];\n    let minEven = Math.min(...evens);\n    let minEvenIndex\
    \ = evensIndex[evens.indexOf(minEven)];\n    return [minEven, minEvenIndex];\n\
    }\n", "    let evens = [];\n    let evenIndexes = [];\n    for(let i = 0; i <\
    \ arr.length; i++){\n        if(arr[i] % 2 === 0){\n            evens.push(arr[i]);\n\
    \            evenIndexes.push(i);\n        }\n    }\n    if(evens.length === 0){\n\
    \        return [];\n    }\n    let smallestEven = Math.min(...evens);\n    let\
    \ smallestEvenIndex = evenIndexes[evens.indexOf(smallestEven)];\n    return [smallestEven,\
    \ smallestEvenIndex];\n}", "    let evens = arr.filter(x => x % 2 === 0);\n  \
    \  if (evens.length === 0) return [];\n    let min = Math.min(...evens);\n   \
    \ let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens\
    \ = arr.filter(num => num % 2 === 0);\n    if(evens.length === 0){\n        return\
    \ [];\n    }\n    let smallestEven = evens.reduce((a,b) => Math.min(a,b));\n \
    \   let index = arr.indexOf(smallestEven);\n    return [smallestEven, index];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return evens.length === 0 ? [] : [min,\
    \ index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length\
    \ === 0){\n        return [];\n    }\n    let min = Math.min(...evens);\n    let\
    \ index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens =\
    \ [];\n    let evensIndex = [];\n    for(let i = 0; i < arr.length; i++){\n  \
    \      if(arr[i] % 2 === 0){\n            evens.push(arr[i]);\n            evensIndex.push(i);\n\
    \        }\n    }\n    if(evens.length === 0){\n        return [];\n    }\n  \
    \  let smallest = evens[0];\n    let smallestIndex = evensIndex[0];\n    for(let\
    \ i = 0; i < evens.length; i++){\n        if(evens[i] < smallest){\n         \
    \   smallest = evens[i];\n            smallestIndex = evensIndex[i];\n       \
    \ }\n    }\n    return [smallest, smallestIndex];\n}", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) return [];\n    let smallest =\
    \ evens.reduce((a,b) => a < b ? a : b);\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let evens = arr.filter(x => x % 2 ===\
    \ 0);\n    if (evens.length === 0) return [];\n    let smallest = evens.reduce((a,\
    \ b) => Math.min(a, b));\n    let index = arr.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length\
    \ === 0) return [];\n    let smallest = evens.reduce((a, b) => Math.min(a, b));\n\
    \    let index = arr.indexOf(smallest);\n    return [smallest, index];\n}\n",
  "    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length === 0){\n  \
    \      return [];\n    }\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    let evens = arr.filter(a => a % 2 === 0);\n\
    \    if (evens.length === 0) return [];\n    let smallest = Math.min(...evens);\n\
    \    let index = arr.indexOf(smallest);\n    return [smallest, index];\n}\n",
  "    let smallestEven = Infinity;\n    let smallestEvenIndex = Infinity;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < smallestEven){\n\
    \            smallestEven = arr[i];\n            smallestEvenIndex = i;\n    \
    \    }\n    }\n    if(smallestEven === Infinity){\n        return [];\n    }\n\
    \    return [smallestEven, smallestEvenIndex];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return evens.length === 0 ? [] : [min, index];\n}\n", "    let even = [];\n\
    \    let index = [];\n    let result = [];\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n     \
    \       index.push(i);\n        }\n    }\n    if(even.length === 0){\n       \
    \ return [];\n    }\n    let min = Math.min(...even);\n    let minIndex = index[even.indexOf(min)];\n\
    \    result.push(min);\n    result.push(minIndex);\n    return result;\n}", " \
    \   if(arr.length === 0){\n        return [];\n    }\n    let evens = [];\n  \
    \  for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n     \
    \       evens.push(arr[i]);\n        }\n    }\n    if(evens.length === 0){\n \
    \       return [];\n    }\n    let smallest = evens[0];\n    let smallestIndex\
    \ = 0;\n    for(let i = 0; i < evens.length; i++){\n        if(evens[i] < smallest){\n\
    \            smallest = evens[i];\n            smallestIndex = i;\n        }\n\
    \    }\n    return [smallest, smallestIndex];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) return [];\n    let smallestEven\
    \ = Math.min(...evens);\n    let index = arr.indexOf(smallestEven);\n    return\
    \ [smallestEven, index];\n}\n", "    let evens = arr.filter(num => num % 2 ===\
    \ 0);\n    if (evens.length === 0) return [];\n    let smallestEven = evens.reduce((a,\
    \ b) => Math.min(a, b));\n    let index = arr.indexOf(smallestEven);\n    return\
    \ [smallestEven, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if (evens.length === 0) return [];\n    let smallest = evens.reduce((a, b)\
    \ => Math.min(a, b));\n    let index = arr.indexOf(smallest);\n    return [smallest,\
    \ index];\n}", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length\
    \ === 0) return [];\n    let smallest = evens.reduce((a,b) => Math.min(a,b));\n\
    \    let index = arr.indexOf(smallest);\n    return [smallest, index];\n}\n",
  "    let evens = arr.filter(num => num % 2 === 0)\n    if(evens.length === 0) return\
    \ []\n    let smallest = evens.reduce((a,b) => a < b ? a : b)\n    let index =\
    \ arr.indexOf(smallest)\n    return [smallest, index]\n}\n", "    let even = [];\n\
    \    let odd = [];\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n        } else\
    \ {\n            odd.push(arr[i]);\n        }\n    }\n    if(even.length === 0){\n\
    \        return [];\n    } else {\n        let min = Math.min(...even);\n    \
    \    let index = arr.indexOf(min);\n        result.push(min, index);\n       \
    \ return result;\n    }\n}", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if (evens.length === 0) return [];\n    let min = Math.min(...evens);\n \
    \   return [min, arr.indexOf(min)];\n}\n", "    let even = [];\n    let index\
    \ = [];\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n    \
    \    if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n            index.push(i);\n\
    \        }\n    }\n    if(even.length === 0){\n        return [];\n    }\n   \
    \ let min = Math.min(...even);\n    let minIndex = index[even.indexOf(min)];\n\
    \    result.push(min);\n    result.push(minIndex);\n    return result;\n}", " \
    \   let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length === 0) return\
    \ [];\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    let min = Math.min(...evens);\n    if (min === Infinity) return [];\n   \
    \ let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let min\
    \ = Infinity;\n    let index = -1;\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i] % 2 === 0 && arr[i] < min){\n            min = arr[i];\n  \
    \          index = i;\n        }\n    }\n    return index === -1 ? [] : [min,\
    \ index];\n}\n", "    let min = Infinity;\n    let index = -1;\n    for(let i\
    \ = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < min){\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    return\
    \ index === -1 ? [] : [min, index];\n}", "    let evens = arr.filter(el => el\
    \ % 2 === 0);\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return evens.length === 0 ? [] : [min, index];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) return [];\n    let smallest =\
    \ evens.reduce((a, b) => Math.min(a, b));\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    var min = Infinity;\n    var minIndex\
    \ = -1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0\
    \ && arr[i] < min){\n            min = arr[i];\n            minIndex = i;\n  \
    \      }\n    }\n    if(minIndex === -1){\n        return [];\n    }\n    return\
    \ [min, minIndex];\n}\n", "    let min = Infinity;\n    let index = -1;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < min){\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    return\
    \ index === -1 ? [] : [min, index];\n}\n", "    let evens = arr.filter(x => x\
    \ % 2 === 0);\n    if(evens.length === 0){\n        return [];\n    }\n    let\
    \ smallestEven = evens.reduce((acc, curr) => acc < curr ? acc : curr);\n    let\
    \ index = arr.indexOf(smallestEven);\n    return [smallestEven, index];\n}\n",
  "    let smallestEven = Infinity;\n    let smallestEvenIndex = Infinity;\n    let\
    \ smallestEvenValue = Infinity;\n    for(let i = 0; i < arr.length; i++){\n  \
    \      if(arr[i] % 2 === 0 && arr[i] < smallestEven){\n            smallestEven\
    \ = arr[i];\n            smallestEvenIndex = i;\n            smallestEvenValue\
    \ = arr[i];\n        }\n    }\n    if(smallestEven === Infinity){\n        return\
    \ [];\n    }\n    return [smallestEvenValue, smallestEvenIndex];\n}\n", "    let\
    \ min = Infinity;\n    let minIndex = Infinity;\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0 && arr[i] < min){\n            min = arr[i];\n\
    \            minIndex = i;\n        }\n    }\n    if(min === Infinity){\n    \
    \    return [];\n    }\n    return [min, minIndex];\n}", "  let min = Infinity;\n\
    \  let index = -1;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2\
    \ === 0 && arr[i] < min){\n      min = arr[i];\n      index = i;\n    }\n  }\n\
    \  return index === -1 ? [] : [min, index];\n}\n", "  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let min = Math.min(...evens);\n  let index = arr.indexOf(min);\n\
    \  return evens.length === 0 ? [] : [min, index];\n}\n", "    if(arr.length ===\
    \ 0) return [];\n    let evens = arr.filter(el => el % 2 === 0);\n    if(evens.length\
    \ === 0) return [];\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if (evens.length === 0) return [];\n    let smallest = evens.reduce((a, b)\
    \ => Math.min(a, b));\n    let index = arr.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n", "    let even = [];\n    let odd = [];\n    let result = [];\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n   \
    \         even.push(arr[i]);\n        } else {\n            odd.push(arr[i]);\n\
    \        }\n    }\n    if(even.length === 0){\n        return [];\n    } else\
    \ {\n        let min = Math.min(...even);\n        result.push(min);\n       \
    \ result.push(arr.indexOf(min));\n        return result;\n    }\n}", "    let\
    \ min = Infinity;\n    let minIndex = Infinity;\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0 && arr[i] < min){\n            min = arr[i];\n\
    \            minIndex = i;\n        }\n    }\n    if(min === Infinity){\n    \
    \    return [];\n    }\n    return [min, minIndex];\n}\n", "    var even = [];\n\
    \    var index = [];\n    var result = [];\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n     \
    \       index.push(i);\n        }\n    }\n    if(even.length === 0){\n       \
    \ return [];\n    }\n    var min = Math.min(...even);\n    var minIndex = index[even.indexOf(min)];\n\
    \    result.push(min);\n    result.push(minIndex);\n    return result;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
