name: HumanEval_68_pluck
language: js
prompt: "//\"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n// your task is to pluck one of the nodes and return it.\n// The\
  \ plucked node should be the node with the smallest even value.\n// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n// If there are no even values or the given array is empty, return [].\n\
  // Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction\
  \ pluck(arr){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
  \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
  \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
  \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
completions: ["    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length\
    \ === 0) return [];\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    let even = [];\n    let index = [];\n  \
    \  for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n     \
    \       even.push(arr[i]);\n            index.push(i);\n        }\n    }\n   \
    \ if(even.length === 0){\n        return [];\n    }\n    let min = even[0];\n\
    \    let minIndex = 0;\n    for(let i = 0; i < even.length; i++){\n        if(even[i]\
    \ < min){\n            min = even[i];\n            minIndex = i;\n        }\n\
    \    }\n    return [min, index[minIndex]];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if(evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens\
    \ = arr.filter(num => num % 2 === 0);\n    if(evens.length === 0) return [];\n\
    \    let smallest = evens.reduce((a,b) => Math.min(a,b));\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let evens = arr.filter(x => x % 2 ===\
    \ 0);\n    if(evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return [];\n  \
    \  let smallest = evens.reduce((a,b) => a < b ? a : b);\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let evens = arr.filter(x => x % 2 ===\
    \ 0);\n    if (evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    let smallestEven = evens.length > 0 ? evens.reduce((a,\
    \ b) => Math.min(a, b)) : null;\n    let smallestEvenIndex = smallestEven ? arr.indexOf(smallestEven)\
    \ : null;\n    return smallestEvenIndex !== null ? [smallestEven, smallestEvenIndex]\
    \ : [];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let smallest\
    \ = evens.length > 0 ? evens.reduce((a,b) => Math.min(a,b)) : 0;\n    let index\
    \ = arr.indexOf(smallest);\n    return index > -1 ? [smallest, index] : [];\n\
    }\n", "    if(arr.length === 0){\n        return [];\n    }\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if(evens.length === 0){\n        return [];\n    }\n \
    \   let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n", "    var even = [];\n    var index = [];\n    var result\
    \ = [];\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            even.push(arr[i]);\n            index.push(i);\n        }\n    }\n\
    \    if(even.length === 0){\n        return [];\n    }\n    var min = even[0];\n\
    \    var minIndex = index[0];\n    for(var j = 0; j < even.length; j++){\n   \
    \     if(even[j] < min){\n            min = even[j];\n            minIndex = index[j];\n\
    \        }\n    }\n    result.push(min);\n    result.push(minIndex);\n    return\
    \ result;\n}\n", "    if(arr.length === 0){\n        return [];\n    }\n    let\
    \ evens = arr.filter(function(num){\n        return num % 2 === 0;\n    });\n\
    \    if(evens.length === 0){\n        return [];\n    }\n    let smallestEven\
    \ = evens.reduce(function(a,b){\n        return Math.min(a,b);\n    });\n    let\
    \ index = arr.indexOf(smallestEven);\n    return [smallestEven, index];\n}\n",
  "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return\
    \ [];\n    let smallestEven = evens.reduce((a, b) => Math.min(a, b));\n    return\
    \ [smallestEven, arr.indexOf(smallestEven)];\n}\n", "  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0){\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  let index = arr.indexOf(min);\n  return [min, index];\n\
    }\n", "  let evens = [];\n  let evensIndex = [];\n  let evensMin = [];\n  for\
    \ (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      evens.push(arr[i]);\n\
    \      evensIndex.push(i);\n    }\n  }\n  if (evens.length === 0) {\n    return\
    \ [];\n  }\n  evensMin.push(Math.min(...evens));\n  evensMin.push(evensIndex[evens.indexOf(Math.min(...evens))]);\n\
    \  return evensMin;\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n  \
    \  let min = Math.min(...evens);\n    if (min === Infinity) return [];\n    return\
    \ [min, arr.indexOf(min)];\n}\n", "    let evens = arr.filter(num => num % 2 ===\
    \ 0);\n    let smallestEven = evens.length > 0 ? evens.reduce((a, b) => Math.min(a,\
    \ b)) : null;\n    let index = arr.indexOf(smallestEven);\n    return smallestEven\
    \ ? [smallestEven, index] : [];\n}\n", "    let evens = arr.filter(x => x % 2\
    \ === 0);\n    if(evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let even\
    \ = [];\n    let index = [];\n    let result = [];\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n     \
    \       index.push(i);\n        }\n    }\n    if(even.length === 0){\n       \
    \ return [];\n    }\n    let min = Math.min(...even);\n    let minIndex = index[even.indexOf(min)];\n\
    \    result.push(min);\n    result.push(minIndex);\n    return result;\n}", " \
    \ var even = [];\n  var index = [];\n  for(var i = 0; i < arr.length; i++){\n\
    \    if(arr[i] % 2 === 0){\n      even.push(arr[i]);\n      index.push(i);\n \
    \   }\n  }\n  if(even.length === 0){\n    return [];\n  }\n  var min = Math.min.apply(null,\
    \ even);\n  var minIndex = index[even.indexOf(min)];\n  return [min, minIndex];\n\
    }\n", "    if(arr.length === 0) return [];\n    let evens = arr.filter(x => x\
    \ % 2 === 0);\n    if(evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "  let evens\
    \ = arr.filter(x => x % 2 === 0);\n  if (evens.length === 0) return [];\n  let\
    \ smallest = evens.reduce((a, b) => Math.min(a, b));\n  return [smallest, arr.indexOf(smallest)];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length ===\
    \ 0) return [];\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if(evens.length === 0){\n        return [];\n    }\n    let smallestEven\
    \ = evens.reduce((a, b) => Math.min(a, b));\n    let index = arr.indexOf(smallestEven);\n\
    \    return [smallestEven, index];\n}\n", "    let evens = arr.filter(x => x %\
    \ 2 === 0);\n    let min = Math.min(...evens);\n    if(min === Infinity){\n  \
    \      return [];\n    }\n    let index = arr.indexOf(min);\n    return [min,\
    \ index];\n}\n", "    let evens = arr.filter(num => num % 2 === 0);\n    if (evens.length\
    \ === 0) return [];\n    let smallest = evens.reduce((a,b) => a < b ? a : b);\n\
    \    let index = arr.indexOf(smallest);\n    return [smallest, index];\n}\n",
  "  let evens = arr.filter(x => x % 2 === 0);\n  if (evens.length === 0) return [];\n\
    \  let smallest = evens.reduce((a,b) => a < b ? a : b);\n  let index = arr.indexOf(smallest);\n\
    \  return [smallest, index];\n}\n", "    let evens = arr.filter(x => x % 2 ===\
    \ 0);\n    if(evens.length === 0) return [];\n    let smallest = evens.reduce((a,b)\
    \ => a < b ? a : b);\n    let index = arr.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let smallest\
    \ = evens.sort((a, b) => a - b)[0];\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let evens = arr.filter(x => x % 2 ===\
    \ 0);\n    let smallestEven = evens.length > 0 ? evens.reduce((a, b) => Math.min(a,\
    \ b)) : -1;\n    let index = arr.indexOf(smallestEven);\n    return smallestEven\
    \ === -1 ? [] : [smallestEven, index];\n}\n", "    let evens = arr.filter(x =>\
    \ x % 2 === 0);\n    if(evens.length === 0) return [];\n    let smallest = Math.min(...evens);\n\
    \    return [smallest, arr.indexOf(smallest)];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if(evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "  let evens\
    \ = [];\n  let evensIndex = [];\n  for (let i = 0; i < arr.length; i++) {\n  \
    \  if (arr[i] % 2 === 0) {\n      evens.push(arr[i]);\n      evensIndex.push(i);\n\
    \    }\n  }\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallestEven\
    \ = evens[0];\n  let smallestEvenIndex = evensIndex[0];\n  for (let i = 0; i <\
    \ evens.length; i++) {\n    if (evens[i] < smallestEven) {\n      smallestEven\
    \ = evens[i];\n      smallestEvenIndex = evensIndex[i];\n    }\n  }\n  return\
    \ [smallestEven, smallestEvenIndex];\n}\n", "    let evens = arr.filter(x => x\
    \ % 2 === 0);\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if(evens.length === 0) return [];\n    let minEven = Math.min(...evens);\n\
    \    let index = arr.indexOf(minEven);\n    return [minEven, index];\n}\n", " \
    \   let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return\
    \ [];\n    let smallest = evens.reduce((a, b) => Math.min(a, b));\n    let index\
    \ = arr.indexOf(smallest);\n    return [smallest, index];\n}\n", "    var evenArr\
    \ = [];\n    var evenIndex = [];\n    var smallestEven = 0;\n    var smallestEvenIndex\
    \ = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            evenArr.push(arr[i]);\n            evenIndex.push(i);\n        }\n\
    \    }\n    if(evenArr.length === 0){\n        return [];\n    }\n    smallestEven\
    \ = evenArr[0];\n    smallestEvenIndex = evenIndex[0];\n    for(var j = 0; j <\
    \ evenArr.length; j++){\n        if(evenArr[j] < smallestEven){\n            smallestEven\
    \ = evenArr[j];\n            smallestEvenIndex = evenIndex[j];\n        }\n  \
    \  }\n    return [smallestEven, smallestEvenIndex];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return evens.length === 0 ? [] : [min, index];\n}", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if(evens.length === 0) return [];\n    let smallest =\
    \ evens.reduce((a, b) => Math.min(a, b));\n    return [smallest, arr.indexOf(smallest)];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length ===\
    \ 0){\n        return [];\n    }\n    let smallest = evens.reduce((a, b) => Math.min(a,\
    \ b));\n    return [smallest, arr.indexOf(smallest)];\n}\n", "  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if(evens.length === 0) return [];\n  let smallest = evens.reduce((a,b)\
    \ => a < b ? a : b);\n  return [smallest, arr.indexOf(smallest)];\n}\n", "  let\
    \ evens = [];\n  let evensIndex = [];\n  let evensValue = [];\n  let evensIndexValue\
    \ = [];\n  let evensIndexValueSorted = [];\n  let evensIndexValueSortedIndex =\
    \ [];\n  let evensIndexValueSortedIndexSorted = [];\n  let evensIndexValueSortedIndexSortedValue\
    \ = [];\n  let evensIndexValueSortedIndexSortedValueSorted = [];\n  let evensIndexValueSortedIndexSortedValueSortedIndex\
    \ = [];\n  let evensIndexValueSortedIndexSortedValueSortedIndexSorted = [];\n\
    \  let evensIndexValueSortedIndexSortedValueSortedIndexSortedValue = [];\n  let\
    \ evensIndexValueSortedIndexSortedValueSortedIndexSortedValueSorted = [];\n  let\
    \ evensIndexValueSortedIndexSortedValueSortedIndexSortedValueSortedIndex = [];\n\
    \  let evensIndexValueSortedIndexSortedValueSortedIndexSortedValueSortedIndexSorted\
    \ = [];\n  let evensIndexValueSortedIndexSortedValueSortedIndexSortedValueSortedIndexSortedValue\
    \ = [];\n  let evensIndexValueSortedIndexSortedValueSortedIndexSortedValueSortedIndexSortedValueSorted\
    \ = [];\n  let evensIndexValueSortedIndexSortedValueSortedIndexSortedValueSortedIndexSortedValueSortedIndex\
    \ = [];\n  let evensIndexValueSortedIndexSortedValueSortedIndexSortedValueSortedIndexSortedValueSortedIndexSorted\
    \ = [];\n  let evensIndexValueSortedIndexSortedValueSortedIndexSortedValueSortedIndexSortedValueSortedIndexSortedValue\
    \ = [];\n  let evensIndexValueSortedIndexSortedValueSortedIndexSortedValueSortedIndexSortedValueSortedIndexSortedValueSorted\
    \ = [];\n  let evensIndexValueSortedIndexSortedValueSortedIndexSortedValueSortedIndexSortedValueSortedIndexSortedValueSortedIndex\
    \ = [];\n  let evensIndexValueSortedIndexSortedValueSortedIndexSortedValueSortedIndexSortedValueSortedIndexSortedValueSortedIndexSorted\
    \ = [];\n  let evensIndexValueSortedIndexSortedValueSortedIndexSortedValue", " \
    \   let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return\
    \ [];\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    if(arr.length === 0) return [];\n    let\
    \ evens = arr.filter(x => x % 2 === 0);\n    if(evens.length === 0) return [];\n\
    \    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length\
    \ === 0) return [];\n    let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length ===\
    \ 0) return [];\n    let smallest = evens.reduce((a, b) => a < b ? a : b);\n \
    \   let index = arr.indexOf(smallest);\n    return [smallest, index];\n}\n", " \
    \ if(arr.length === 0) return [];\n  let evens = arr.filter(x => x % 2 === 0);\n\
    \  if(evens.length === 0) return [];\n  let smallest = evens.reduce((a,b) => Math.min(a,b));\n\
    \  return [smallest, arr.indexOf(smallest)];\n}\n", "  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) return [];\n  let smallest = evens.reduce((a,\
    \ b) => Math.min(a, b));\n  let index = arr.indexOf(smallest);\n  return [smallest,\
    \ index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length\
    \ === 0) return [];\n    let smallestEven = evens.reduce((a,b) => a < b ? a :\
    \ b);\n    let index = arr.indexOf(smallestEven);\n    return [smallestEven, index];\n\
    }\n", "  var evens = arr.filter(function(val){\n    return val % 2 === 0;\n  });\n\
    \  if(evens.length === 0) return [];\n  var smallest = evens.reduce(function(a,b){\n\
    \    return a < b ? a : b;\n  });\n  var index = arr.indexOf(smallest);\n  return\
    \ [smallest, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n \
    \   let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ evens.length === 0 ? [] : [min, index];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) return [];\n    let smallest =\
    \ evens.reduce((a, b) => Math.min(a, b));\n    return [smallest, arr.indexOf(smallest)];\n\
    }\n", "  if(!arr.length) return [];\n  let evens = arr.filter(e => e % 2 === 0);\n\
    \  if(!evens.length) return [];\n  let smallest = evens.reduce((a, b) => Math.min(a,\
    \ b));\n  return [smallest, arr.indexOf(smallest)];\n}\n", "    let evens = arr.filter(n\
    \ => n % 2 === 0);\n    if(evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    var even\
    \ = [];\n    var index = [];\n    for(var i = 0; i < arr.length; i++){\n     \
    \   if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n            index.push(i);\n\
    \        }\n    }\n    if(even.length === 0){\n        return [];\n    }\n   \
    \ var min = even[0];\n    var minIndex = 0;\n    for(var i = 0; i < even.length;\
    \ i++){\n        if(even[i] < min){\n            min = even[i];\n            minIndex\
    \ = i;\n        }\n    }\n    return [min, index[minIndex]];\n}", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    let smallest = evens.length > 0 ? evens.reduce((a,\
    \ b) => Math.min(a, b)) : 0;\n    let index = arr.indexOf(smallest);\n    return\
    \ [smallest, index];\n}\n", "  let evens = arr.filter(x => x % 2 === 0);\n  if\
    \ (evens.length === 0) return [];\n  let smallest = evens.reduce((acc, curr) =>\
    \ acc < curr ? acc : curr);\n  let index = arr.indexOf(smallest);\n  return [smallest,\
    \ index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length\
    \ === 0) {\n        return [];\n    }\n    let smallest = evens.reduce((a, b)\
    \ => Math.min(a, b));\n    let index = arr.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n", "  let evens = arr.filter(x => x % 2 === 0);\n  if(evens.length\
    \ === 0) return [];\n  let min = Math.min(...evens);\n  let index = arr.indexOf(min);\n\
    \  return [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if(evens.length === 0){\n        return [];\n    }\n    let smallest = evens.reduce((a,b)\
    \ => Math.min(a,b));\n    let index = arr.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length\
    \ === 0) return [];\n    let smallest = evens.reduce((a, b) => Math.min(a, b));\n\
    \    return [smallest, arr.indexOf(smallest)];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if(evens.length === 0){\n        return [];\n    }\n \
    \   let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n}\n",
  "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return\
    \ [];\n    let smallest = evens.reduce((a,b) => Math.min(a,b));\n    let index\
    \ = arr.indexOf(smallest);\n    return [smallest, index];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n    let\
    \ index = arr.indexOf(min);\n    return evens.length > 0 ? [min, index] : [];\n\
    }\n", "    if(arr.length === 0) return [];\n    let evens = arr.filter(x => x\
    \ % 2 === 0);\n    if(evens.length === 0) return [];\n    let smallest = evens.reduce((a,b)\
    \ => Math.min(a,b));\n    return [smallest, arr.indexOf(smallest)];\n}\n", " \
    \   let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return\
    \ [];\n    let smallest = evens.reduce((a, b) => Math.min(a, b));\n    return\
    \ [smallest, arr.indexOf(smallest)];\n}\n", "    let evens = arr.filter(x => x\
    \ % 2 === 0);\n    if (evens.length === 0) return [];\n    let smallest = evens.reduce((a,\
    \ b) => Math.min(a, b));\n    return [smallest, arr.indexOf(smallest)];\n}\n",
  "    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length === 0) return\
    \ [];\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    let evens = [];\n    let evensIndex = [];\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n   \
    \         evens.push(arr[i]);\n            evensIndex.push(i);\n        }\n  \
    \  }\n    if(evens.length === 0){\n        return [];\n    }\n    let min = Math.min(...evens);\n\
    \    let minIndex = evensIndex[evens.indexOf(min)];\n    return [min, minIndex];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length ===\
    \ 0) {\n        return [];\n    }\n    let min = Math.min(...evens);\n    let\
    \ index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evenArr\
    \ = arr.filter(num => num % 2 === 0);\n    let smallestEven = evenArr.length >\
    \ 0 ? evenArr.reduce((a,b) => Math.min(a,b)) : null;\n    let index = smallestEven\
    \ ? arr.indexOf(smallestEven) : null;\n    return smallestEven ? [smallestEven,\
    \ index] : [];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length\
    \ === 0) return [];\n    let smallest = evens.reduce((a, b) => Math.min(a, b));\n\
    \    return [smallest, arr.indexOf(smallest)];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return evens.length === 0 ? [] : [min, index];\n}", "  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) return [];\n  let smallest = evens.reduce((a,\
    \ b) => Math.min(a, b));\n  let index = arr.indexOf(smallest);\n  return [smallest,\
    \ index];\n}\n", "  if(arr.length === 0){\n    return [];\n  }\n  let evens =\
    \ arr.filter(x => x % 2 === 0);\n  if(evens.length === 0){\n    return [];\n \
    \ }\n  let min = Math.min(...evens);\n  let index = arr.indexOf(min);\n  return\
    \ [min, index];\n}\n", "    if(arr.length === 0) return [];\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if(evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "  let evens\
    \ = arr.filter(x => x % 2 === 0);\n  if (evens.length === 0) return [];\n  let\
    \ smallest = evens.reduce((a, b) => Math.min(a, b));\n  return [smallest, arr.indexOf(smallest)];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length ===\
    \ 0) return [];\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    let evens = [];\n    let evensIndex = [];\n\
    \    let smallestEven = 0;\n    let smallestEvenIndex = 0;\n    for(let i = 0;\
    \ i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            evens.push(arr[i]);\n\
    \            evensIndex.push(i);\n        }\n    }\n    if(evens.length === 0){\n\
    \        return [];\n    }\n    smallestEven = evens[0];\n    smallestEvenIndex\
    \ = evensIndex[0];\n    for(let i = 0; i < evens.length; i++){\n        if(evens[i]\
    \ < smallestEven){\n            smallestEven = evens[i];\n            smallestEvenIndex\
    \ = evensIndex[i];\n        }\n    }\n    return [smallestEven, smallestEvenIndex];\n\
    }\n", "  let evens = arr.filter(x => x % 2 === 0);\n  if (evens.length === 0)\
    \ return [];\n  let min = Math.min(...evens);\n  let index = arr.indexOf(min);\n\
    \  return [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ evens.length > 0 ? [min, index] : [];\n}\n", "  let evens = arr.filter(x =>\
    \ x % 2 === 0);\n  if (evens.length === 0) return [];\n  let smallestEven = evens.reduce((a,\
    \ b) => a < b ? a : b);\n  let index = arr.indexOf(smallestEven);\n  return [smallestEven,\
    \ index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length\
    \ === 0){\n        return [];\n    }\n    let smallest = evens.reduce((a, b) =>\
    \ Math.min(a, b));\n    let index = arr.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length\
    \ === 0) return [];\n    let smallest = evens.reduce((a, b) => a < b ? a : b);\n\
    \    let index = arr.indexOf(smallest);\n    return [smallest, index];\n}\n",
  "    var even = [];\n    var evenIndex = [];\n    var evenValue = [];\n    var evenValueIndex\
    \ = [];\n    var result = [];\n    for(var i = 0; i < arr.length; i++){\n    \
    \    if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n            evenIndex.push(i);\n\
    \        }\n    }\n    if(even.length === 0){\n        return [];\n    }\n   \
    \ evenValue = even.sort(function(a, b){return a - b});\n    evenValueIndex = evenIndex.sort(function(a,\
    \ b){return a - b});\n    result.push(evenValue[0]);\n    result.push(evenValueIndex[0]);\n\
    \    return result;\n}", "  let evens = arr.filter(num => num % 2 === 0);\n  let\
    \ smallestEven = evens.length > 0 ? evens.sort((a, b) => a - b)[0] : null;\n \
    \ return smallestEven ? [smallestEven, arr.indexOf(smallestEven)] : [];\n}\n",
  "  let evens = arr.filter(x => x % 2 === 0);\n  let smallest = evens.length > 0\
    \ ? evens.reduce((a, b) => Math.min(a, b)) : null;\n  let index = smallest !==\
    \ null ? arr.indexOf(smallest) : null;\n  return smallest !== null ? [smallest,\
    \ index] : [];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length\
    \ === 0) return [];\n    let smallest = evens.reduce((a,b) => Math.min(a,b));\n\
    \    let index = arr.indexOf(smallest);\n    return [smallest, index];\n}\n",
  "    let evens = arr.filter(n => n % 2 === 0);\n    if(evens.length === 0) return\
    \ [];\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "  let evens = arr.filter(n => n % 2 === 0);\n\
    \  let smallest = evens.length > 0 ? evens.reduce((a, b) => a < b ? a : b) : null;\n\
    \  let index = arr.indexOf(smallest);\n  return smallest === null ? [] : [smallest,\
    \ index];\n}\n", "  let evens = arr.filter(x => x % 2 === 0);\n  if (evens.length\
    \ === 0) return [];\n  let smallestEven = evens.reduce((a,b) => Math.min(a,b));\n\
    \  let index = arr.indexOf(smallestEven);\n  return [smallestEven, index];\n}\n",
  "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return\
    \ [];\n    let smallest = evens.reduce((a, b) => Math.min(a, b));\n    let index\
    \ = arr.indexOf(smallest);\n    return [smallest, index];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return [];\n  \
    \  let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n}\n", " \
    \   let evens = arr.filter(x => x % 2 === 0);\n    let smallest = evens.length\
    \ > 0 ? evens.reduce((a, b) => Math.min(a, b)) : [];\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let evens = arr.filter(n => n % 2 ===\
    \ 0);\n    if (evens.length === 0) {\n        return [];\n    }\n    let smallest\
    \ = evens.reduce((a, b) => Math.min(a, b));\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let evens = arr.filter(x => x % 2 ===\
    \ 0);\n    if (evens.length === 0) return [];\n    let smallest = evens.reduce((a,\
    \ b) => a < b ? a : b);\n    return [smallest, arr.indexOf(smallest)];\n}\n",
  "    var evens = arr.filter(function(x){\n        return x % 2 === 0;\n    });\n\
    \    if(evens.length === 0){\n        return [];\n    }\n    var smallest = evens.reduce(function(a,b){\n\
    \        return a < b ? a : b;\n    });\n    var index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let evens = arr.filter(e => e % 2 ===\
    \ 0);\n    let smallestEven = evens.length ? evens.reduce((a, b) => a < b ? a\
    \ : b) : null;\n    let index = arr.indexOf(smallestEven);\n    return smallestEven\
    \ ? [smallestEven, index] : [];\n}\n", "    let evens = arr.filter(n => n % 2\
    \ === 0);\n    let min = evens.length > 0 ? Math.min(...evens) : 0;\n    let index\
    \ = arr.indexOf(min);\n    return [min, index];\n}\n", "    let minEven = Infinity;\n\
    \    let minEvenIndex = -1;\n    for(let i = 0; i < arr.length; i++){\n      \
    \  if(arr[i] % 2 === 0 && arr[i] < minEven){\n            minEven = arr[i];\n\
    \            minEvenIndex = i;\n        }\n    }\n    if(minEvenIndex === -1){\n\
    \        return [];\n    }\n    return [minEven, minEvenIndex];\n}\n", "    let\
    \ evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return [];\n\
    \    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let\
    \ min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return evens.length\
    \ === 0 ? [] : [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 ===\
    \ 0);\n    if (evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    return [min, arr.indexOf(min)];\n}\n", "    let evens = arr.filter(x => x\
    \ % 2 === 0);\n    let smallestEven = evens.length > 0 ? evens.reduce((a,b) =>\
    \ a < b ? a : b) : null;\n    return smallestEven ? [smallestEven, arr.indexOf(smallestEven)]\
    \ : [];\n}\n", "  let evens = arr.filter(x => x % 2 === 0);\n  if (evens.length\
    \ === 0) return [];\n  let smallest = evens.reduce((a, b) => Math.min(a, b));\n\
    \  return [smallest, arr.indexOf(smallest)];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens\
    \ = [];\n    let evensIndex = [];\n    let evensValue = [];\n    for(let i = 0;\
    \ i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            evens.push(arr[i]);\n\
    \            evensIndex.push(i);\n            evensValue.push(arr[i]);\n     \
    \   }\n    }\n    if(evens.length === 0){\n        return [];\n    }\n    let\
    \ min = Math.min(...evensValue);\n    let minIndex = evensIndex[evensValue.indexOf(min)];\n\
    \    return [min, minIndex];\n}\n", "    if(arr.length === 0) return [];\n   \
    \ let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length === 0) return\
    \ [];\n    let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length ===\
    \ 0) return [];\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    let even = arr.filter(x => x % 2 === 0);\n\
    \    let min = Math.min(...even);\n    let index = arr.indexOf(min);\n    return\
    \ even.length === 0 ? [] : [min, index];\n}\n", "    if(arr.length === 0) return\
    \ [];\n    let evens = arr.filter(num => num % 2 === 0);\n    if(evens.length\
    \ === 0) return [];\n    let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n\
    }\n", "    let evens = arr.filter(n => n % 2 === 0);\n    if(evens.length ===\
    \ 0) return [];\n    let smallestEven = evens.reduce((a, b) => a < b ? a : b);\n\
    \    let index = arr.indexOf(smallestEven);\n    return [smallestEven, index];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length ===\
    \ 0) return [];\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    let evens = arr.filter(num => num % 2 ===\
    \ 0);\n    if (evens.length === 0) return [];\n    let smallestEven = evens.reduce((a,b)\
    \ => Math.min(a,b));\n    let index = arr.indexOf(smallestEven);\n    return [smallestEven,\
    \ index];\n}\n", "    if(arr.length === 0) return [];\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if(evens.length === 0) return [];\n    let smallestEven\
    \ = evens.reduce((a, b) => a < b ? a : b);\n    let index = arr.indexOf(smallestEven);\n\
    \    return [smallestEven, index];\n}\n", "    let min = Infinity;\n    let index\
    \ = -1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0\
    \ && arr[i] < min){\n            min = arr[i];\n            index = i;\n     \
    \   }\n    }\n    return index === -1 ? [] : [min, index];\n}\n", "  let smallestEven\
    \ = Infinity;\n  let smallestEvenIndex = Infinity;\n  for(let i = 0; i < arr.length;\
    \ i++){\n    if(arr[i] % 2 === 0 && arr[i] < smallestEven){\n      smallestEven\
    \ = arr[i];\n      smallestEvenIndex = i;\n    }\n  }\n  if(smallestEven === Infinity){\n\
    \    return [];\n  }\n  return [smallestEven, smallestEvenIndex];\n}\n", "  let\
    \ evens = arr.filter(x => x % 2 === 0);\n  if (evens.length === 0) return [];\n\
    \  let smallest = evens.reduce((a,b) => a < b ? a : b);\n  let index = arr.indexOf(smallest);\n\
    \  return [smallest, index];\n}\n", "  let evens = arr.filter(x => x % 2 === 0);\n\
    \  if (evens.length === 0) return [];\n  let min = Math.min(...evens);\n  return\
    \ [min, arr.indexOf(min)];\n}\n", "    let result = [];\n    let evens = [];\n\
    \    let evensIndex = [];\n    let minEven = Infinity;\n    for(let i = 0; i <\
    \ arr.length; i++){\n        if(arr[i] % 2 === 0){\n            evens.push(arr[i]);\n\
    \            evensIndex.push(i);\n        }\n    }\n    if(evens.length === 0){\n\
    \        return result;\n    }\n    for(let i = 0; i < evens.length; i++){\n \
    \       if(evens[i] < minEven){\n            minEven = evens[i];\n        }\n\
    \    }\n    for(let i = 0; i < evens.length; i++){\n        if(evens[i] === minEven){\n\
    \            result.push(minEven);\n            result.push(evensIndex[i]);\n\
    \            return result;\n        }\n    }\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) return [];\n    let smallest =\
    \ evens.reduce((a, b) => Math.min(a, b));\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let evens = arr.filter(x => x % 2 ===\
    \ 0);\n    if(evens.length === 0){\n        return [];\n    }\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return [];\n  \
    \  let smallest = evens.reduce((a, b) => a < b ? a : b);\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let evens = arr.filter(x => x % 2 ===\
    \ 0);\n    if(evens.length === 0){\n        return [];\n    }\n    let smallestEven\
    \ = evens.reduce((a, b) => Math.min(a, b));\n    let index = arr.indexOf(smallestEven);\n\
    \    return [smallestEven, index];\n}\n", "  let evens = arr.filter(x => x % 2\
    \ === 0);\n  if (evens.length === 0) return [];\n  let min = Math.min(...evens);\n\
    \  let index = arr.indexOf(min);\n  return [min, index];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n    if (min\
    \ === Infinity) return [];\n    return [min, arr.indexOf(min)];\n}\n", "  if(arr.length\
    \ === 0) return [];\n  let evens = arr.filter(x => x % 2 === 0);\n  if(evens.length\
    \ === 0) return [];\n  let min = Math.min(...evens);\n  return [min, arr.indexOf(min)];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length ===\
    \ 0) return [];\n    let smallest = evens.reduce((a, b) => Math.min(a, b));\n\
    \    return [smallest, arr.indexOf(smallest)];\n}\n", "    var evens = arr.filter(function(e){\n\
    \        return e % 2 === 0;\n    });\n    if(evens.length === 0){\n        return\
    \ [];\n    }\n    var min = evens.reduce(function(a, b){\n        return Math.min(a,\
    \ b);\n    });\n    var index = arr.indexOf(min);\n    return [min, index];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length ===\
    \ 0) {\n        return [];\n    }\n    let min = Math.min(...evens);\n    let\
    \ index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens =\
    \ arr.filter(x => x % 2 === 0);\n    if(evens.length === 0) return [];\n    let\
    \ min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n}\n", "  let\
    \ evens = arr.filter(x => x % 2 === 0);\n  if (evens.length === 0) return [];\n\
    \  let smallestEven = evens.reduce((a, b) => Math.min(a, b));\n  let index = arr.indexOf(smallestEven);\n\
    \  return [smallestEven, index];\n}\n", "    let evens = arr.filter(x => x % 2\
    \ === 0);\n    if (evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n    let\
    \ index = arr.indexOf(min);\n    return evens.length === 0 ? [] : [min, index];\n\
    }\n", "    let evens = [];\n    let evensIndex = [];\n    let evensValue = [];\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n   \
    \         evens.push(arr[i]);\n            evensIndex.push(i);\n            evensValue.push(arr[i]);\n\
    \        }\n    }\n    if(evens.length === 0){\n        return [];\n    }\n  \
    \  let min = Math.min(...evensValue);\n    let minIndex = evensIndex[evensValue.indexOf(min)];\n\
    \    return [min, minIndex];\n}", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    let smallestEven = evens.length > 0 ? evens.reduce((a, b) => Math.min(a,\
    \ b)) : null;\n    let index = smallestEven !== null ? arr.indexOf(smallestEven)\
    \ : null;\n    return smallestEven !== null ? [smallestEven, index] : [];\n}\n",
  "  let evens = arr.filter(x => x % 2 === 0);\n  if(evens.length === 0){\n    return\
    \ [];\n  }\n  let min = Math.min(...evens);\n  let index = arr.indexOf(min);\n\
    \  return [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if(evens.length === 0) return [];\n    let smallest = evens.reduce((a, b)\
    \ => Math.min(a, b));\n    let index = arr.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n", "    if(arr.length === 0) return [];\n    let evens = [];\n \
    \   for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0) evens.push([arr[i],\
    \ i]);\n    }\n    if(evens.length === 0) return [];\n    evens.sort((a, b) =>\
    \ a[0] - b[0]);\n    return evens[0];\n}", "    let evens = arr.filter(x => x\
    \ % 2 === 0);\n    if (evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    if(evens.length === 0) return [];\n   \
    \ let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n", "  let evens = arr.filter(x => x % 2 === 0);\n  if (evens.length\
    \ === 0) return [];\n  let smallest = evens.reduce((a, b) => Math.min(a, b));\n\
    \  let index = arr.indexOf(smallest);\n  return [smallest, index];\n}\n", "  \
    \  let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return\
    \ [];\n    let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n\
    }\n", "    let smallestEven = Infinity;\n    let smallestEvenIndex = Infinity;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i]\
    \ < smallestEven){\n            smallestEven = arr[i];\n            smallestEvenIndex\
    \ = i;\n        }\n    }\n    if(smallestEven === Infinity){\n        return [];\n\
    \    }\n    return [smallestEven, smallestEvenIndex];\n}\n", "    let evens =\
    \ arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n    let index\
    \ = arr.indexOf(min);\n    return evens.length === 0 ? [] : [min, index];\n}\n",
  "    var evens = arr.filter(function(val){\n        return val % 2 === 0;\n    });\n\
    \    if(evens.length === 0){\n        return [];\n    }\n    var min = Math.min.apply(null,\
    \ evens);\n    var index = arr.indexOf(min);\n    return [min, index];\n}\n",
  "  let evens = arr.filter(x => x % 2 === 0);\n  let min = Math.min(...evens);\n\
    \  let index = arr.indexOf(min);\n  return evens.length ? [min, index] : [];\n\
    }\n", "    if(arr.length === 0) return [];\n    let evens = arr.filter(x => x\
    \ % 2 === 0);\n    if(evens.length === 0) return [];\n    let smallest = evens.reduce((a,b)\
    \ => a < b ? a : b);\n    return [smallest, arr.indexOf(smallest)];\n}\n", " \
    \   let evens = arr.filter(num => num % 2 === 0);\n    if(evens.length === 0)\
    \ return [];\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}", "    let evens = arr.filter(num => num % 2 ===\
    \ 0);\n    let smallest = evens.length > 0 ? evens.reduce((a, b) => Math.min(a,\
    \ b)) : 0;\n    return [smallest, arr.indexOf(smallest)];\n}\n", "  let evens\
    \ = arr.filter(x => x % 2 === 0);\n  let smallestEven = evens.length ? evens.reduce((a,\
    \ b) => a < b ? a : b) : null;\n  return smallestEven ? [smallestEven, arr.indexOf(smallestEven)]\
    \ : [];\n}\n", "  let evens = [];\n  let evensIndex = [];\n  for (let i = 0; i\
    \ < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      evens.push(arr[i]);\n\
    \      evensIndex.push(i);\n    }\n  }\n  if (evens.length === 0) {\n    return\
    \ [];\n  }\n  let smallestEven = evens[0];\n  let smallestEvenIndex = evensIndex[0];\n\
    \  for (let i = 0; i < evens.length; i++) {\n    if (evens[i] < smallestEven)\
    \ {\n      smallestEven = evens[i];\n      smallestEvenIndex = evensIndex[i];\n\
    \    }\n  }\n  return [smallestEven, smallestEvenIndex];\n}\n", "  if(arr.length\
    \ === 0) return [];\n  let evens = arr.filter(x => x % 2 === 0);\n  if(evens.length\
    \ === 0) return [];\n  let smallest = evens.reduce((a,b) => a < b ? a : b);\n\
    \  let index = arr.indexOf(smallest);\n  return [smallest, index];\n}\n", "  if(arr.length\
    \ === 0){\n    return [];\n  }\n  let evens = arr.filter(x => x % 2 === 0);\n\
    \  if(evens.length === 0){\n    return [];\n  }\n  let smallestEven = evens.reduce((a,b)\
    \ => a < b ? a : b);\n  let index = arr.indexOf(smallestEven);\n  return [smallestEven,\
    \ index];\n}\n", "    var even = [];\n    var evenIndex = [];\n    for(var i =\
    \ 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n\
    \            evenIndex.push(i);\n        }\n    }\n    if(even.length === 0){\n\
    \        return [];\n    }\n    var min = even[0];\n    var minIndex = evenIndex[0];\n\
    \    for(var j = 0; j < even.length; j++){\n        if(even[j] < min){\n     \
    \       min = even[j];\n            minIndex = evenIndex[j];\n        }\n    }\n\
    \    return [min, minIndex];\n}\n", "    var evens = arr.filter(function(x){\n\
    \        return x % 2 === 0;\n    });\n    if(evens.length === 0){\n        return\
    \ [];\n    }\n    var smallestEven = evens.reduce(function(a,b){\n        return\
    \ Math.min(a,b);\n    });\n    var index = arr.indexOf(smallestEven);\n    return\
    \ [smallestEven, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if (evens.length === 0) return [];\n    let smallest = evens.reduce((a, b)\
    \ => Math.min(a, b));\n    return [smallest, arr.indexOf(smallest)];\n}\n", " \
    \   let smallestEven = Infinity;\n    let smallestEvenIndex = -1;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < smallestEven){\n\
    \            smallestEven = arr[i];\n            smallestEvenIndex = i;\n    \
    \    }\n    }\n    if(smallestEvenIndex === -1){\n        return [];\n    }\n\
    \    return [smallestEven, smallestEvenIndex];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if(evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    return [min, arr.indexOf(min)];\n}\n", "    let evens = arr.filter(x => x\
    \ % 2 === 0);\n    if (evens.length === 0) return [];\n    let smallestEven =\
    \ evens.reduce((a, b) => a < b ? a : b);\n    let index = arr.indexOf(smallestEven);\n\
    \    return [smallestEven, index];\n}\n", "  let evens = arr.filter(x => x % 2\
    \ === 0);\n  if (evens.length === 0) return [];\n  let min = Math.min(...evens);\n\
    \  let index = arr.indexOf(min);\n  return [min, index];\n}\n", "    let evenArr\
    \ = arr.filter(x => x % 2 === 0);\n    let minEven = Math.min(...evenArr);\n \
    \   let index = arr.indexOf(minEven);\n    return [minEven, index];\n}\n", " \
    \   let evens = arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return evens.length === 0 ? [] : [min,\
    \ index];\n}\n", "    if(arr.length === 0){\n        return [];\n    }\n    let\
    \ evens = arr.filter(x => x % 2 === 0);\n    if(evens.length === 0){\n       \
    \ return [];\n    }\n    let smallestEven = Math.min(...evens);\n    let index\
    \ = arr.indexOf(smallestEven);\n    return [smallestEven, index];\n}\n", "   \
    \ let evens = arr.filter(x => x % 2 === 0);\n    let smallest = evens.length ?\
    \ evens.reduce((a,b) => a < b ? a : b) : null;\n    let index = smallest ? arr.indexOf(smallest)\
    \ : null;\n    return smallest ? [smallest, index] : [];\n}\n", "  if(arr.length\
    \ === 0){\n    return [];\n  }\n  let evens = arr.filter(x => x % 2 === 0);\n\
    \  if(evens.length === 0){\n    return [];\n  }\n  let min = Math.min(...evens);\n\
    \  return [min, arr.indexOf(min)];\n}\n", "    let evens = arr.filter(x => x %\
    \ 2 === 0);\n    if(evens.length === 0) return [];\n    let smallest = evens.reduce((a,\
    \ b) => a < b ? a : b);\n    let index = arr.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length\
    \ === 0){\n        return [];\n    }\n    let min = Math.min(...evens);\n    let\
    \ index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evenArr\
    \ = arr.filter(el => el % 2 === 0);\n    let evenMin = Math.min(...evenArr);\n\
    \    let index = arr.indexOf(evenMin);\n    return evenArr.length > 0 ? [evenMin,\
    \ index] : [];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length\
    \ === 0) return [];\n    let smallest = evens.reduce((a, b) => Math.min(a, b));\n\
    \    return [smallest, arr.indexOf(smallest)];\n}\n", "    if(arr.length === 0)\
    \ return [];\n    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length\
    \ === 0) return [];\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    let evens = [];\n    for(let i = 0; i <\
    \ arr.length; i++){\n        if(arr[i] % 2 === 0){\n            evens.push(arr[i]);\n\
    \        }\n    }\n    if(evens.length === 0){\n        return [];\n    }\n  \
    \  let smallest = evens[0];\n    let index = 0;\n    for(let i = 0; i < evens.length;\
    \ i++){\n        if(evens[i] < smallest){\n            smallest = evens[i];\n\
    \            index = i;\n        }\n    }\n    return [smallest, index];\n}\n",
  "    let evens = arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n\
    \    return arr.indexOf(min) === -1 ? [] : [min, arr.indexOf(min)];\n}\n", " \
    \   let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return\
    \ [];\n    let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length ===\
    \ 0) return [];\n    let smallest = evens.reduce((a, b) => Math.min(a, b));\n\
    \    let index = arr.indexOf(smallest);\n    return [smallest, index];\n}\n",
  "    let evens = arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    if(evens.length === 0) return [];\n   \
    \ let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n", "  let evens = arr.filter(x => x % 2 === 0);\n  if(evens.length\
    \ === 0){\n    return [];\n  }\n  let min = Math.min(...evens);\n  let index =\
    \ arr.indexOf(min);\n  return [min, index];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) return [];\n    let smallest =\
    \ evens.reduce((a, b) => Math.min(a, b));\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let evens = arr.filter(x => x % 2 ===\
    \ 0);\n    if (evens.length === 0) return [];\n    let smallest = evens.reduce((a,\
    \ b) => Math.min(a, b));\n    return [smallest, arr.indexOf(smallest)];\n}\n",
  "    let evens = arr.filter(n => n % 2 === 0);\n    if (evens.length === 0) return\
    \ [];\n    let smallest = evens.reduce((a,b) => Math.min(a,b));\n    return [smallest,\
    \ arr.indexOf(smallest)];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if(evens.length === 0) return [];\n    let smallest = evens.reduce((a, b)\
    \ => a < b ? a : b);\n    let index = arr.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n", "    if(arr.length === 0) return [];\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if(evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return [];\n  \
    \  let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n", "    if (arr.length === 0) return [];\n    let evens =\
    \ arr.filter(num => num % 2 === 0);\n    if (evens.length === 0) return [];\n\
    \    let smallestEven = evens.reduce((acc, curr) => acc < curr ? acc : curr);\n\
    \    let index = arr.indexOf(smallestEven);\n    return [smallestEven, index];\n\
    }\n", "  let evens = arr.filter(x => x % 2 === 0);\n  if (evens.length === 0)\
    \ return [];\n  let min = Math.min(...evens);\n  let index = arr.indexOf(min);\n\
    \  return [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if (evens.length === 0) return [];\n    let smallest = evens.reduce((a,b)\
    \ => a < b ? a : b);\n    let index = arr.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n", "    if(arr.length === 0) return [];\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if(evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens\
    \ = arr.filter(n => n % 2 === 0);\n    let min = Math.min(...evens);\n    let\
    \ index = arr.indexOf(min);\n    return evens.length > 0 ? [min, index] : [];\n\
    }\n", "  let evens = arr.filter(x => x % 2 === 0);\n  if (evens.length === 0)\
    \ return [];\n  let smallest = evens.reduce((a, b) => Math.min(a, b));\n  let\
    \ index = arr.indexOf(smallest);\n  return [smallest, index];\n}\n", "  if(arr.length\
    \ === 0) return [];\n  let evens = arr.filter(n => n % 2 === 0);\n  if(evens.length\
    \ === 0) return [];\n  let smallest = evens.reduce((a,b) => Math.min(a,b));\n\
    \  return [smallest, arr.indexOf(smallest)];\n}\n", "    if(arr.length === 0){\n\
    \        return [];\n    }\n    let evens = arr.filter(x => x % 2 === 0);\n  \
    \  if(evens.length === 0){\n        return [];\n    }\n    let min = evens.reduce((a,b)\
    \ => Math.min(a,b));\n    let index = arr.indexOf(min);\n    return [min, index];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length ===\
    \ 0) return [];\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if (evens.length === 0) return [];\n    let min = Math.min(...evens);\n \
    \   let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return [];\n  \
    \  let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n}\n", " \
    \   let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return\
    \ [];\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "  if(arr.length === 0) return [];\n  let evens\
    \ = arr.filter(x => x % 2 === 0);\n  if(evens.length === 0) return [];\n  let\
    \ smallest = evens.reduce((a,b) => a < b ? a : b);\n  return [smallest, arr.indexOf(smallest)];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length ===\
    \ 0) return [];\n    let smallest = evens.reduce((a,b) => Math.min(a,b));\n  \
    \  return [smallest, arr.indexOf(smallest)];\n}\n", "  if(arr.length === 0) return\
    \ [];\n  let evens = arr.filter(x => x % 2 === 0);\n  if(evens.length === 0) return\
    \ [];\n  let smallest = evens.reduce((a, b) => Math.min(a, b));\n  return [smallest,\
    \ arr.indexOf(smallest)];\n}\n", "  let evens = arr.filter(x => x % 2 === 0);\n\
    \  if (evens.length === 0) return [];\n  let smallest = evens.reduce((a, b) =>\
    \ Math.min(a, b));\n  let index = arr.indexOf(smallest);\n  return [smallest,\
    \ index];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
