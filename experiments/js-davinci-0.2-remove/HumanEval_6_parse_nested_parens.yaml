name: HumanEval_6_parse_nested_parens
language: js
prompt: "//Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n// For each of the group, output the deepest\
  \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\nfunction parse_nested_parens(paren_string){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
  ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
  \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
completions: ["    var paren_array = paren_string.split(\" \");\n    var max_depth\
    \ = 0;\n    var current_depth = 0;\n    var max_depth_index = 0;\n    for(var\
    \ i = 0; i < paren_array.length; i++){\n        current_depth = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                current_depth++;\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                current_depth--;\n            }\n        }\n   \
    \     if(current_depth > max_depth){\n            max_depth = current_depth;\n\
    \            max_depth_index = i;\n        }\n    }\n    return max_depth_index;\n\
    }\n", "    var stack = [];\n    var max_depth = 0;\n    var current_depth = 0;\n\
    \    var paren_array = paren_string.split(\" \");\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        for(var j = 0; j <\
    \ paren_group.length; j++){\n            var paren = paren_group[j];\n       \
    \     if(paren == \"(\"){\n                stack.push(paren);\n              \
    \  current_depth++;\n                if(current_depth > max_depth){\n        \
    \            max_depth = current_depth;\n                }\n            }\n  \
    \          else if(paren == \")\"){\n                stack.pop();\n          \
    \      current_depth--;\n            }\n        }\n        current_depth = 0;\n\
    \    }\n    return max_depth;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var max_depth = 0;\n    var current_depth = 0;\n    for(var i = 0;\
    \ i < paren_array.length; i++){\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                current_depth++;\n\
    \            }\n            else if(paren_array[i][j] == \")\"){\n           \
    \     current_depth--;\n            }\n            if(current_depth > max_depth){\n\
    \                max_depth = current_depth;\n            }\n        }\n      \
    \  current_depth = 0;\n    }\n    return max_depth;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var paren_depth = [];\n    for(var i = 0;\
    \ i < paren_array.length; i++){\n        var paren_count = 0;\n        var max_paren_count\
    \ = 0;\n        for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        paren_depth.push(max_paren_count);\n\
    \    }\n    return paren_depth;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var max_depth = 0;\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_depth = 0;\n        var paren_count = 0;\n        for(var j\
    \ = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] == \"\
    (\"){\n                paren_count++;\n                if(paren_count > paren_depth){\n\
    \                    paren_depth = paren_count;\n                }\n         \
    \   }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        if(paren_depth > max_depth){\n            max_depth\
    \ = paren_depth;\n        }\n    }\n    return max_depth;\n}\n", "    let max_depth\
    \ = 0;\n    let curr_depth = 0;\n    for(let i = 0; i < paren_string.length; i++){\n\
    \        if(paren_string[i] === '('){\n            curr_depth++;\n           \
    \ if(curr_depth > max_depth){\n                max_depth = curr_depth;\n     \
    \       }\n        }\n        else if(paren_string[i] === ')'){\n            curr_depth--;\n\
    \        }\n    }\n    return max_depth;\n}\n", "    var max_depth = 0;\n    var\
    \ current_depth = 0;\n    var paren_array = paren_string.split(\" \");\n    for(var\
    \ i = 0; i < paren_array.length; i++){\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                current_depth++;\n\
    \            }\n            else if(paren_array[i][j] == \")\"){\n           \
    \     current_depth--;\n            }\n            if(current_depth > max_depth){\n\
    \                max_depth = current_depth;\n            }\n        }\n      \
    \  current_depth = 0;\n    }\n    return max_depth;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var max_depth = 0;\n    for(var i = 0; i <\
    \ paren_array.length; i++){\n        var paren_depth = 0;\n        var paren_count\
    \ = 0;\n        for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ paren_depth){\n                    paren_depth = paren_count;\n            \
    \    }\n            }\n            else if(paren_array[i][j] == \")\"){\n    \
    \            paren_count--;\n            }\n        }\n        if(paren_depth\
    \ > max_depth){\n            max_depth = paren_depth;\n        }\n    }\n    return\
    \ max_depth;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var\
    \ max_nesting = 0;\n    for(var i = 0; i < paren_array.length; i++){\n       \
    \ var curr_nesting = 0;\n        var curr_paren = paren_array[i];\n        for(var\
    \ j = 0; j < curr_paren.length; j++){\n            if(curr_paren[j] == \"(\"){\n\
    \                curr_nesting++;\n            }\n            else if(curr_paren[j]\
    \ == \")\"){\n                curr_nesting--;\n            }\n        }\n    \
    \    if(curr_nesting > max_nesting){\n            max_nesting = curr_nesting;\n\
    \        }\n    }\n    return max_nesting;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_count = 0;\n        var max_paren_count = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        if(max_paren_count > max_nesting){\n      \
    \      max_nesting = max_paren_count;\n        }\n    }\n    return max_nesting;\n\
    }\n", "  var paren_array = paren_string.split(\" \");\n  var max_levels = [];\n\
    \  for(var i = 0; i < paren_array.length; i++){\n    var paren_group = paren_array[i];\n\
    \    var level = 0;\n    var max_level = 0;\n    for(var j = 0; j < paren_group.length;\
    \ j++){\n      if(paren_group[j] == \"(\"){\n        level++;\n        if(level\
    \ > max_level){\n          max_level = level;\n        }\n      }\n      else\
    \ if(paren_group[j] == \")\"){\n        level--;\n      }\n    }\n    max_levels.push(max_level);\n\
    \  }\n  return max_levels;\n}\n", "    var paren_array = paren_string.split('\
    \ ');\n    var max_nesting = 0;\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var current_nesting = 0;\n        var current_paren = paren_array[i];\n\
    \        for(var j = 0; j < current_paren.length; j++){\n            if(current_paren[j]\
    \ == '('){\n                current_nesting++;\n            }\n            else\
    \ if(current_paren[j] == ')'){\n                current_nesting--;\n         \
    \   }\n        }\n        if(current_nesting > max_nesting){\n            max_nesting\
    \ = current_nesting;\n        }\n    }\n    return max_nesting;\n}\n", "    var\
    \ paren_array = paren_string.split(\" \");\n    var max_depth = 0;\n    for(var\
    \ i = 0; i < paren_array.length; i++){\n        var current_paren = paren_array[i];\n\
    \        var current_depth = 0;\n        for(var j = 0; j < current_paren.length;\
    \ j++){\n            if(current_paren[j] == \"(\"){\n                current_depth++;\n\
    \            }\n            else if(current_paren[j] == \")\"){\n            \
    \    current_depth--;\n            }\n        }\n        if(current_depth > max_depth){\n\
    \            max_depth = current_depth;\n        }\n    }\n    return max_depth;\n\
    }\n", "    var paren_array = paren_string.split(\" \");\n    var max_level = 0;\n\
    \    for(var i = 0; i < paren_array.length; i++){\n        var paren_level = 0;\n\
    \        for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_level++;\n            }\n            else\
    \ if(paren_array[i][j] == \")\"){\n                paren_level--;\n          \
    \  }\n        }\n        if(paren_level > max_level){\n            max_level =\
    \ paren_level;\n        }\n    }\n    return max_level;\n}\n", "    var max_nesting\
    \ = 0;\n    var curr_nesting = 0;\n    for(var i = 0; i < paren_string.length;\
    \ i++){\n        if(paren_string[i] == '('){\n            curr_nesting++;\n  \
    \          if(curr_nesting > max_nesting){\n                max_nesting = curr_nesting;\n\
    \            }\n        }\n        else if(paren_string[i] == ')'){\n        \
    \    curr_nesting--;\n        }\n    }\n    return max_nesting;\n}\n", "    var\
    \ paren_array = paren_string.split(\" \");\n    var max_depth = 0;\n    for(var\
    \ i = 0; i < paren_array.length; i++){\n        var depth = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ '('){\n                depth++;\n            }\n            else if(paren_array[i][j]\
    \ == ')'){\n                depth--;\n            }\n        }\n        if(depth\
    \ > max_depth){\n            max_depth = depth;\n        }\n    }\n    return\
    \ max_depth;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var\
    \ max_depth = 0;\n    for(var i = 0; i < paren_array.length; i++){\n        var\
    \ depth = 0;\n        for(var j = 0; j < paren_array[i].length; j++){\n      \
    \      if(paren_array[i][j] == '('){\n                depth++;\n            }\n\
    \            else if(paren_array[i][j] == ')'){\n                depth--;\n  \
    \          }\n        }\n        if(depth > max_depth){\n            max_depth\
    \ = depth;\n        }\n    }\n    return max_depth;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var max_depth = 0;\n    for(var i = 0; i <\
    \ paren_array.length; i++){\n        var curr_depth = 0;\n        var curr_paren\
    \ = paren_array[i];\n        for(var j = 0; j < curr_paren.length; j++){\n   \
    \         if(curr_paren[j] == \"(\"){\n                curr_depth++;\n       \
    \     }\n            else if(curr_paren[j] == \")\"){\n                curr_depth--;\n\
    \            }\n        }\n        if(curr_depth > max_depth){\n            max_depth\
    \ = curr_depth;\n        }\n    }\n    return max_depth;\n}\n", "    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        var max_depth = 0;\n\
    \        var depth = 0;\n        for(var j = 0; j < paren_group.length; j++){\n\
    \            if(paren_group[j] == '('){\n                depth++;\n          \
    \      if(depth > max_depth){\n                    max_depth = depth;\n      \
    \          }\n            }else if(paren_group[j] == ')'){\n                depth--;\n\
    \            }\n        }\n        result.push(max_depth);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var max_depth\
    \ = 0;\n    for(var i = 0; i < paren_array.length; i++){\n        var depth =\
    \ 0;\n        for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                depth++;\n            }\n            else if(paren_array[i][j]\
    \ == ')'){\n                depth--;\n            }\n        }\n        if(depth\
    \ > max_depth){\n            max_depth = depth;\n        }\n    }\n    return\
    \ max_depth;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var\
    \ max_depth = 0;\n    for(var i = 0; i < paren_array.length; i++){\n        var\
    \ paren_depth = 0;\n        var current_paren = paren_array[i];\n        for(var\
    \ j = 0; j < current_paren.length; j++){\n            if(current_paren[j] == \"\
    (\"){\n                paren_depth++;\n            }\n            else if(current_paren[j]\
    \ == \")\"){\n                paren_depth--;\n            }\n        }\n     \
    \   if(paren_depth > max_depth){\n            max_depth = paren_depth;\n     \
    \   }\n    }\n    return max_depth;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var max_depth = 0;\n    var current_depth = 0;\n    var output_array\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var paren_group\
    \ = paren_array[i];\n        for(var j = 0; j < paren_group.length; j++){\n  \
    \          if(paren_group[j] == \"(\"){\n                current_depth++;\n  \
    \          }\n            else if(paren_group[j] == \")\"){\n                current_depth--;\n\
    \            }\n            if(current_depth > max_depth){\n                max_depth\
    \ = current_depth;\n            }\n        }\n        output_array.push(max_depth);\n\
    \        max_depth = 0;\n        current_depth = 0;\n    }\n    return output_array;\n\
    }\n", "    var paren_array = paren_string.split(\" \");\n    var max_depth = 0;\n\
    \    for(var i = 0; i < paren_array.length; i++){\n        var depth = 0;\n  \
    \      for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                depth++;\n            }\n            else if(paren_array[i][j]\
    \ == ')'){\n                depth--;\n            }\n        }\n        if(depth\
    \ > max_depth){\n            max_depth = depth;\n        }\n    }\n    return\
    \ max_depth;\n}\n", "    var max_depth = 0;\n    var depth = 0;\n    for(var i\
    \ = 0; i < paren_string.length; i++){\n        if(paren_string[i] == '('){\n \
    \           depth++;\n            if(depth > max_depth){\n                max_depth\
    \ = depth;\n            }\n        }\n        else if(paren_string[i] == ')'){\n\
    \            depth--;\n        }\n    }\n    return max_depth;\n}\n", "    var\
    \ paren_array = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var\
    \ i = 0; i < paren_array.length; i++){\n        var current_nesting = 0;\n   \
    \     var current_paren = paren_array[i];\n        for(var j = 0; j < current_paren.length;\
    \ j++){\n            if(current_paren[j] == \"(\"){\n                current_nesting++;\n\
    \            }\n            else if(current_paren[j] == \")\"){\n            \
    \    current_nesting--;\n            }\n        }\n        if(current_nesting\
    \ > max_nesting){\n            max_nesting = current_nesting;\n        }\n   \
    \ }\n    return max_nesting;\n}\n", "    var paren_array = paren_string.split('\
    \ ');\n    var max_depth = 0;\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var depth = 0;\n        for(var j = 0; j < paren_array[i].length; j++){\n\
    \            if(paren_array[i][j] == '('){\n                depth++;\n       \
    \     }\n            else if(paren_array[i][j] == ')'){\n                depth--;\n\
    \            }\n        }\n        if(depth > max_depth){\n            max_depth\
    \ = depth;\n        }\n    }\n    return max_depth;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var max_depth = 0;\n    for(var i = 0; i <\
    \ paren_array.length; i++){\n        var curr_paren = paren_array[i];\n      \
    \  var curr_depth = 0;\n        for(var j = 0; j < curr_paren.length; j++){\n\
    \            if(curr_paren[j] == \"(\"){\n                curr_depth++;\n    \
    \        }\n            else if(curr_paren[j] == \")\"){\n                curr_depth--;\n\
    \            }\n        }\n        if(curr_depth > max_depth){\n            max_depth\
    \ = curr_depth;\n        }\n    }\n    return max_depth;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var output_array = [];\n    for(var i = 0;\
    \ i < paren_array.length; i++){\n        var paren_group = paren_array[i];\n \
    \       var max_nesting = 0;\n        var current_nesting = 0;\n        for(var\
    \ j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"\
    ){\n                current_nesting++;\n                if(current_nesting > max_nesting){\n\
    \                    max_nesting = current_nesting;\n                }\n     \
    \       }\n            else if(paren_group[j] == \")\"){\n                current_nesting--;\n\
    \            }\n        }\n        output_array.push(max_nesting);\n    }\n  \
    \  return output_array;\n}\n", "    var paren_array = paren_string.split(\" \"\
    );\n    var paren_levels = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_level = 0;\n        var paren_count = 0;\n        for(var j\
    \ = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] == \"\
    (\"){\n                paren_count++;\n                if(paren_count > paren_level){\n\
    \                    paren_level = paren_count;\n                }\n         \
    \   }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        paren_levels.push(paren_level);\n    }\n  \
    \  return paren_levels;\n}\n", "    var paren_array = paren_string.split(\" \"\
    );\n    var max_depth = 0;\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var depth = 0;\n        for(var j = 0; j < paren_array[i].length; j++){\n\
    \            if(paren_array[i][j] == '('){\n                depth++;\n       \
    \     }\n            else if(paren_array[i][j] == ')'){\n                depth--;\n\
    \            }\n        }\n        if(depth > max_depth){\n            max_depth\
    \ = depth;\n        }\n    }\n    return max_depth;\n}\n", "    var max_nesting\
    \ = 0;\n    var current_nesting = 0;\n    for(var i = 0; i < paren_string.length;\
    \ i++){\n        if(paren_string[i] == '('){\n            current_nesting++;\n\
    \            if(current_nesting > max_nesting){\n                max_nesting =\
    \ current_nesting;\n            }\n        }\n        else if(paren_string[i]\
    \ == ')'){\n            current_nesting--;\n        }\n    }\n    return max_nesting;\n\
    }\n", "    var paren_array = paren_string.split(\" \");\n    var max_nesting =\
    \ 0;\n    for(var i = 0; i < paren_array.length; i++){\n        var current_nesting\
    \ = 0;\n        var current_paren = paren_array[i];\n        for(var j = 0; j\
    \ < current_paren.length; j++){\n            if(current_paren[j] == \"(\"){\n\
    \                current_nesting++;\n            }\n            else if(current_paren[j]\
    \ == \")\"){\n                current_nesting--;\n            }\n        }\n \
    \       if(current_nesting > max_nesting){\n            max_nesting = current_nesting;\n\
    \        }\n    }\n    return max_nesting;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var current_paren = paren_array[i];\n        var max_level = 0;\n   \
    \     var current_level = 0;\n        for(var j = 0; j < current_paren.length;\
    \ j++){\n            if(current_paren[j] == \"(\"){\n                current_level++;\n\
    \                if(current_level > max_level){\n                    max_level\
    \ = current_level;\n                }\n            }\n            else if(current_paren[j]\
    \ == \")\"){\n                current_level--;\n            }\n        }\n   \
    \     result.push(max_level);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var max_depth = 0;\n    for(var i = 0; i <\
    \ paren_array.length; i++){\n        var depth = 0;\n        for(var j = 0; j\
    \ < paren_array[i].length; j++){\n            if(paren_array[i][j] == '('){\n\
    \                depth++;\n            }\n            else if(paren_array[i][j]\
    \ == ')'){\n                depth--;\n            }\n        }\n        if(depth\
    \ > max_depth){\n            max_depth = depth;\n        }\n    }\n    return\
    \ max_depth;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var\
    \ max_depth = 0;\n    for(var i = 0; i < paren_array.length; i++){\n        var\
    \ depth = 0;\n        for(var j = 0; j < paren_array[i].length; j++){\n      \
    \      if(paren_array[i][j] == '('){\n                depth++;\n            }\n\
    \            else if(paren_array[i][j] == ')'){\n                depth--;\n  \
    \          }\n        }\n        if(depth > max_depth){\n            max_depth\
    \ = depth;\n        }\n    }\n    return max_depth;\n}\n", "    var max_depth\
    \ = 0;\n    var current_depth = 0;\n    for(var i = 0; i < paren_string.length;\
    \ i++){\n        if(paren_string[i] == '('){\n            current_depth++;\n \
    \           if(current_depth > max_depth){\n                max_depth = current_depth;\n\
    \            }\n        }\n        else if(paren_string[i] == ')'){\n        \
    \    current_depth--;\n        }\n    }\n    return max_depth;\n}\n", "    var\
    \ paren_groups = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var\
    \ i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n\
    \        var current_nesting = 0;\n        var max_nesting_in_group = 0;\n   \
    \     for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j]\
    \ == \"(\"){\n                current_nesting++;\n            }\n            else\
    \ if(paren_group[j] == \")\"){\n                current_nesting--;\n         \
    \   }\n            if(current_nesting > max_nesting_in_group){\n             \
    \   max_nesting_in_group = current_nesting;\n            }\n        }\n      \
    \  if(max_nesting_in_group > max_nesting){\n            max_nesting = max_nesting_in_group;\n\
    \        }\n    }\n    return max_nesting;\n}\n", "    var paren_array = paren_string.split('\
    \ ');\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_group = paren_array[i];\n        var max_nesting = 0;\n   \
    \     var current_nesting = 0;\n        for(var j = 0; j < paren_group.length;\
    \ j++){\n            if(paren_group[j] == '('){\n                current_nesting++;\n\
    \                if(current_nesting > max_nesting){\n                    max_nesting\
    \ = current_nesting;\n                }\n            }\n            else if(paren_group[j]\
    \ == ')'){\n                current_nesting--;\n            }\n        }\n   \
    \     result.push(max_nesting);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var max_depth = 0;\n    for(var i = 0; i <\
    \ paren_array.length; i++){\n        var depth = 0;\n        for(var j = 0; j\
    \ < paren_array[i].length; j++){\n            if(paren_array[i][j] == '('){\n\
    \                depth++;\n            }\n            else if(paren_array[i][j]\
    \ == ')'){\n                depth--;\n            }\n        }\n        if(depth\
    \ > max_depth){\n            max_depth = depth;\n        }\n    }\n    return\
    \ max_depth;\n}\n", "    var paren_groups = paren_string.split(\" \");\n    var\
    \ max_depth = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var\
    \ depth = 0;\n        var paren_group = paren_groups[i];\n        for(var j =\
    \ 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n\
    \                depth++;\n            }\n            else if(paren_group[j] ==\
    \ \")\"){\n                depth--;\n            }\n        }\n        if(depth\
    \ > max_depth){\n            max_depth = depth;\n        }\n    }\n    return\
    \ max_depth;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var\
    \ result = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var\
    \ paren_group = paren_array[i];\n        var paren_stack = [];\n        var max_depth\
    \ = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            var\
    \ paren = paren_group[j];\n            if(paren == \"(\"){\n                paren_stack.push(paren);\n\
    \                if(paren_stack.length > max_depth){\n                    max_depth\
    \ = paren_stack.length;\n                }\n            }\n            else if(paren\
    \ == \")\"){\n                paren_stack.pop();\n            }\n        }\n \
    \       result.push(max_depth);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var max_depth = 0;\n    for(var i = 0; i <\
    \ paren_array.length; i++){\n        var current_depth = 0;\n        var current_paren\
    \ = paren_array[i];\n        for(var j = 0; j < current_paren.length; j++){\n\
    \            if(current_paren[j] == \"(\"){\n                current_depth++;\n\
    \            }\n            else if(current_paren[j] == \")\"){\n            \
    \    current_depth--;\n            }\n        }\n        if(current_depth > max_depth){\n\
    \            max_depth = current_depth;\n        }\n    }\n    return max_depth;\n\
    }\n", "    var paren_array = paren_string.split(\" \");\n    var max_nesting =\
    \ 0;\n    for(var i = 0; i < paren_array.length; i++){\n        var paren_count\
    \ = 0;\n        var paren_string = paren_array[i];\n        for(var j = 0; j <\
    \ paren_string.length; j++){\n            if(paren_string[j] == \"(\"){\n    \
    \            paren_count++;\n            }\n            else if(paren_string[j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   if(paren_count > max_nesting){\n            max_nesting = paren_count;\n \
    \       }\n    }\n    return max_nesting;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var max_depth = 0;\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var current_depth = 0;\n        var current_paren = paren_array[i];\n\
    \        for(var j = 0; j < current_paren.length; j++){\n            if(current_paren[j]\
    \ == \"(\"){\n                current_depth++;\n            }\n            else\
    \ if(current_paren[j] == \")\"){\n                current_depth--;\n         \
    \   }\n        }\n        if(current_depth > max_depth){\n            max_depth\
    \ = current_depth;\n        }\n    }\n    return max_depth;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var max_depth = 0;\n    var current_depth\
    \ = 0;\n    var paren_stack = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        for(var j = 0; j <\
    \ paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n      \
    \          current_depth++;\n                paren_stack.push(paren_group[j]);\n\
    \            }\n            else if(paren_group[j] == \")\"){\n              \
    \  current_depth--;\n                paren_stack.pop();\n            }\n     \
    \       if(current_depth > max_depth){\n                max_depth = current_depth;\n\
    \            }\n        }\n        current_depth = 0;\n    }\n    return max_depth;\n\
    }\n", "    var paren_array = paren_string.split(\" \");\n    var max_nesting =\
    \ 0;\n    for(var i = 0; i < paren_array.length; i++){\n        var current_paren\
    \ = paren_array[i];\n        var current_nesting = 0;\n        var current_max_nesting\
    \ = 0;\n        for(var j = 0; j < current_paren.length; j++){\n            if(current_paren[j]\
    \ == \"(\"){\n                current_nesting++;\n                if(current_nesting\
    \ > current_max_nesting){\n                    current_max_nesting = current_nesting;\n\
    \                }\n            }\n            else if(current_paren[j] == \"\
    )\"){\n                current_nesting--;\n            }\n        }\n        if(current_max_nesting\
    \ > max_nesting){\n            max_nesting = current_max_nesting;\n        }\n\
    \    }\n    return max_nesting;\n}\n", "    var paren_groups = paren_string.split(\"\
    \ \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length;\
    \ i++){\n        var current_nesting = 0;\n        var current_group = paren_groups[i];\n\
    \        for(var j = 0; j < current_group.length; j++){\n            if(current_group[j]\
    \ == \"(\"){\n                current_nesting++;\n            }\n            else\
    \ if(current_group[j] == \")\"){\n                current_nesting--;\n       \
    \     }\n        }\n        if(current_nesting > max_nesting){\n            max_nesting\
    \ = current_nesting;\n        }\n    }\n    return max_nesting;\n}\n", "  var\
    \ paren_array = paren_string.split(\" \");\n  var max_nesting = 0;\n  var current_nesting\
    \ = 0;\n  for(var i = 0; i < paren_array.length; i++){\n    for(var j = 0; j <\
    \ paren_array[i].length; j++){\n      if(paren_array[i][j] == \"(\"){\n      \
    \  current_nesting++;\n      }\n      else if(paren_array[i][j] == \")\"){\n \
    \       current_nesting--;\n      }\n      if(current_nesting > max_nesting){\n\
    \        max_nesting = current_nesting;\n      }\n    }\n    current_nesting =\
    \ 0;\n  }\n  return max_nesting;\n}\n", "    let max_depth = 0;\n    let current_depth\
    \ = 0;\n    for(let i = 0; i < paren_string.length; i++){\n        if(paren_string[i]\
    \ === '('){\n            current_depth += 1;\n            if(current_depth > max_depth){\n\
    \                max_depth = current_depth;\n            }\n        }\n      \
    \  else if(paren_string[i] === ')'){\n            current_depth -= 1;\n      \
    \  }\n    }\n    return max_depth;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var max_depth = 0;\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var current_depth = 0;\n        var current_paren = paren_array[i];\n\
    \        for(var j = 0; j < current_paren.length; j++){\n            if(current_paren[j]\
    \ == \"(\"){\n                current_depth++;\n            }\n            else\
    \ if(current_paren[j] == \")\"){\n                current_depth--;\n         \
    \   }\n        }\n        if(current_depth > max_depth){\n            max_depth\
    \ = current_depth;\n        }\n    }\n    return max_depth;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var max_depth = 0;\n    for(var i = 0; i <\
    \ paren_array.length; i++){\n        var current_depth = 0;\n        var current_paren\
    \ = paren_array[i];\n        for(var j = 0; j < current_paren.length; j++){\n\
    \            if(current_paren[j] == \"(\"){\n                current_depth++;\n\
    \            }\n            else if(current_paren[j] == \")\"){\n            \
    \    current_depth--;\n            }\n        }\n        if(current_depth > max_depth){\n\
    \            max_depth = current_depth;\n        }\n    }\n    return max_depth;\n\
    }\n", "    var paren_array = paren_string.split(\" \");\n    var result = [];\n\
    \    for(var i = 0; i < paren_array.length; i++){\n        var count = 0;\n  \
    \      var max = 0;\n        for(var j = 0; j < paren_array[i].length; j++){\n\
    \            if(paren_array[i][j] == \"(\"){\n                count++;\n     \
    \           if(count > max){\n                    max = count;\n             \
    \   }\n            }\n            else if(paren_array[i][j] == \")\"){\n     \
    \           count--;\n            }\n        }\n        result.push(max);\n  \
    \  }\n    return result;\n}\n", "    var paren_groups = paren_string.split(\"\
    \ \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length;\
    \ i++){\n        var paren_group = paren_groups[i];\n        var current_nesting\
    \ = 0;\n        var max_nesting_for_group = 0;\n        for(var j = 0; j < paren_group.length;\
    \ j++){\n            if(paren_group[j] == \"(\"){\n                current_nesting++;\n\
    \                if(current_nesting > max_nesting_for_group){\n              \
    \      max_nesting_for_group = current_nesting;\n                }\n         \
    \   }\n            else if(paren_group[j] == \")\"){\n                current_nesting--;\n\
    \            }\n        }\n        if(max_nesting_for_group > max_nesting){\n\
    \            max_nesting = max_nesting_for_group;\n        }\n    }\n    return\
    \ max_nesting;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var\
    \ result = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var\
    \ paren_count = 0;\n        var max_paren_count = 0;\n        for(var j = 0; j\
    \ < paren_array[i].length; j++){\n            if(paren_array[i][j] == \"(\"){\n\
    \                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var max_depth\
    \ = 0;\n    for(var i = 0; i < paren_array.length; i++){\n        var depth =\
    \ 0;\n        for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                depth++;\n            }\n            else if(paren_array[i][j]\
    \ == ')'){\n                depth--;\n            }\n        }\n        if(depth\
    \ > max_depth){\n            max_depth = depth;\n        }\n    }\n    return\
    \ max_depth;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var\
    \ max_nesting = 0;\n    for(var i = 0; i < paren_array.length; i++){\n       \
    \ var current_paren = paren_array[i];\n        var current_nesting = 0;\n    \
    \    for(var j = 0; j < current_paren.length; j++){\n            if(current_paren[j]\
    \ == \"(\"){\n                current_nesting++;\n            }\n            else\
    \ if(current_paren[j] == \")\"){\n                current_nesting--;\n       \
    \     }\n        }\n        if(current_nesting > max_nesting){\n            max_nesting\
    \ = current_nesting;\n        }\n    }\n    return max_nesting;\n}\n", "    var\
    \ paren_array = paren_string.split(' ');\n    var result = [];\n    for(var i\
    \ = 0; i < paren_array.length; i++){\n        var paren = paren_array[i];\n  \
    \      var count = 0;\n        var max_count = 0;\n        for(var j = 0; j <\
    \ paren.length; j++){\n            if(paren[j] == '('){\n                count++;\n\
    \                if(count > max_count){\n                    max_count = count;\n\
    \                }\n            }\n            else if(paren[j] == ')'){\n   \
    \             count--;\n            }\n        }\n        result.push(max_count);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_count = 0;\n        var max_paren_count = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var paren_levels\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var paren_level\
    \ = 0;\n        var paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > paren_level){\n                    paren_level\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   paren_levels.push(paren_level);\n    }\n    return paren_levels;\n}\n", " \
    \   var paren_array = paren_string.split(\" \");\n    var max_depth = 0;\n   \
    \ for(var i = 0; i < paren_array.length; i++){\n        var depth = 0;\n     \
    \   for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                depth++;\n            }\n            else if(paren_array[i][j]\
    \ == ')'){\n                depth--;\n            }\n        }\n        if(depth\
    \ > max_depth){\n            max_depth = depth;\n        }\n    }\n    return\
    \ max_depth;\n}\n", "    let paren_array = paren_string.split(\" \");\n    let\
    \ max_level = 0;\n    for(let i = 0; i < paren_array.length; i++){\n        let\
    \ level = 0;\n        for(let j = 0; j < paren_array[i].length; j++){\n      \
    \      if(paren_array[i][j] === \"(\"){\n                level++;\n          \
    \  }\n            else if(paren_array[i][j] === \")\"){\n                level--;\n\
    \            }\n        }\n        if(level > max_level){\n            max_level\
    \ = level;\n        }\n    }\n    return max_level;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var max_depth = 0;\n    var current_depth\
    \ = 0;\n    var paren_stack = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        for(var j = 0; j <\
    \ paren_group.length; j++){\n            if(paren_group[j] == '('){\n        \
    \        current_depth++;\n                paren_stack.push('(');\n          \
    \  }\n            else if(paren_group[j] == ')'){\n                current_depth--;\n\
    \                paren_stack.pop();\n            }\n            if(current_depth\
    \ > max_depth){\n                max_depth = current_depth;\n            }\n \
    \       }\n        if(paren_stack.length != 0){\n            console.log(\"Invalid\
    \ parens\");\n            return;\n        }\n        current_depth = 0;\n   \
    \ }\n    console.log(max_depth);\n}\n", "    let paren_array = paren_string.split(\"\
    \ \");\n    let max_depth = 0;\n    for(let i = 0; i < paren_array.length; i++){\n\
    \        let depth = 0;\n        for(let j = 0; j < paren_array[i].length; j++){\n\
    \            if(paren_array[i][j] === \"(\"){\n                depth++;\n    \
    \        }\n            else if(paren_array[i][j] === \")\"){\n              \
    \  depth--;\n            }\n        }\n        if(depth > max_depth){\n      \
    \      max_depth = depth;\n        }\n    }\n    return max_depth;\n}\n", "  let\
    \ paren_array = paren_string.split(' ');\n  let max_depth = 0;\n  for(let i =\
    \ 0; i < paren_array.length; i++){\n    let depth = 0;\n    for(let j = 0; j <\
    \ paren_array[i].length; j++){\n      if(paren_array[i][j] === '('){\n       \
    \ depth++;\n      }\n      else if(paren_array[i][j] === ')'){\n        depth--;\n\
    \      }\n    }\n    if(depth > max_depth){\n      max_depth = depth;\n    }\n\
    \  }\n  return max_depth;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var max_paren_depth = 0;\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var current_paren_depth = 0;\n        var current_paren_string\
    \ = paren_array[i];\n        for(var j = 0; j < current_paren_string.length; j++){\n\
    \            if(current_paren_string[j] == \"(\"){\n                current_paren_depth++;\n\
    \            }\n            else if(current_paren_string[j] == \")\"){\n     \
    \           current_paren_depth--;\n            }\n        }\n        if(current_paren_depth\
    \ > max_paren_depth){\n            max_paren_depth = current_paren_depth;\n  \
    \      }\n    }\n    return max_paren_depth;\n}\n", "    var max_depth = 0;\n\
    \    var depth = 0;\n    for(var i = 0; i < paren_string.length; i++){\n     \
    \   if(paren_string[i] == '('){\n            depth++;\n            if(depth >\
    \ max_depth){\n                max_depth = depth;\n            }\n        }\n\
    \        else if(paren_string[i] == ')'){\n            depth--;\n        }\n \
    \   }\n    return max_depth;\n}\n", "  var paren_arr = paren_string.split(' ');\n\
    \  var max_level = 0;\n  for(var i = 0; i < paren_arr.length; i++){\n    var level\
    \ = 0;\n    for(var j = 0; j < paren_arr[i].length; j++){\n      if(paren_arr[i][j]\
    \ == '('){\n        level++;\n      }\n      else if(paren_arr[i][j] == ')'){\n\
    \        level--;\n      }\n    }\n    if(level > max_level){\n      max_level\
    \ = level;\n    }\n  }\n  return max_level;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_group = paren_array[i];\n        var current_nesting = 0;\n\
    \        var max_nesting_group = 0;\n        for(var j = 0; j < paren_group.length;\
    \ j++){\n            if(paren_group[j] == \"(\"){\n                current_nesting++;\n\
    \                if(current_nesting > max_nesting_group){\n                  \
    \  max_nesting_group = current_nesting;\n                }\n            }\n  \
    \          else if(paren_group[j] == \")\"){\n                current_nesting--;\n\
    \            }\n        }\n        if(max_nesting_group > max_nesting){\n    \
    \        max_nesting = max_nesting_group;\n        }\n    }\n    return max_nesting;\n\
    }\n", "  var paren_array = paren_string.split(\" \");\n  var paren_levels = [];\n\
    \  for(var i = 0; i < paren_array.length; i++){\n    var paren_level = 0;\n  \
    \  var current_paren_string = paren_array[i];\n    for(var j = 0; j < current_paren_string.length;\
    \ j++){\n      if(current_paren_string[j] == \"(\"){\n        paren_level++;\n\
    \      }\n      else if(current_paren_string[j] == \")\"){\n        paren_level--;\n\
    \      }\n    }\n    paren_levels.push(paren_level);\n  }\n  return paren_levels;\n\
    }\n", "    var paren_array = paren_string.split(\" \");\n    var result = [];\n\
    \    for(var i = 0; i < paren_array.length; i++){\n        var paren_count = 0;\n\
    \        var max_paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   result.push(max_paren_count);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var paren_count = [];\n    for(var i = 0;\
    \ i < paren_array.length; i++){\n        var paren_count_temp = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                paren_count_temp++;\n            }\n        }\n   \
    \     paren_count.push(paren_count_temp);\n    }\n    return paren_count;\n}\n",
  "    var paren_array = paren_string.split(\" \");\n    var max_depth = 0;\n    for(var\
    \ i = 0; i < paren_array.length; i++){\n        var depth = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ '('){\n                depth++;\n            }\n            else if(paren_array[i][j]\
    \ == ')'){\n                depth--;\n            }\n        }\n        if(depth\
    \ > max_depth){\n            max_depth = depth;\n        }\n    }\n    return\
    \ max_depth;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var\
    \ paren_levels = [];\n    for(var i = 0; i < paren_array.length; i++){\n     \
    \   var paren_level = 0;\n        var paren_count = 0;\n        for(var j = 0;\
    \ j < paren_array[i].length; j++){\n            if(paren_array[i][j] == \"(\"\
    ){\n                paren_count++;\n                if(paren_count > paren_level){\n\
    \                    paren_level = paren_count;\n                }\n         \
    \   }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        paren_levels.push(paren_level);\n    }\n  \
    \  return paren_levels;\n}\n", "    var paren_array = paren_string.split(\" \"\
    );\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n \
    \       result.push(parse_parens(paren_array[i]));\n    }\n    return result;\n\
    }\n", "    var paren_arr = paren_string.split(' ');\n    var max_level = 0;\n\
    \    for(var i=0; i<paren_arr.length; i++){\n        var paren_level = 0;\n  \
    \      for(var j=0; j<paren_arr[i].length; j++){\n            if(paren_arr[i][j]\
    \ == '('){\n                paren_level++;\n            }\n            else if(paren_arr[i][j]\
    \ == ')'){\n                paren_level--;\n            }\n        }\n       \
    \ if(paren_level > max_level){\n            max_level = paren_level;\n       \
    \ }\n    }\n    return max_level;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var current_nesting = 0;\n        var current_paren = paren_array[i];\n\
    \        for(var j = 0; j < current_paren.length; j++){\n            if(current_paren[j]\
    \ == \"(\"){\n                current_nesting++;\n            }\n            else\
    \ if(current_paren[j] == \")\"){\n                current_nesting--;\n       \
    \     }\n        }\n        if(current_nesting > max_nesting){\n            max_nesting\
    \ = current_nesting;\n        }\n    }\n    return max_nesting;\n}\n", "    var\
    \ paren_array = paren_string.split(\" \");\n    var max_depth = 0;\n    for(var\
    \ i = 0; i < paren_array.length; i++){\n        var depth = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ '('){\n                depth++;\n            }\n            else if(paren_array[i][j]\
    \ == ')'){\n                depth--;\n            }\n        }\n        if(depth\
    \ > max_depth){\n            max_depth = depth;\n        }\n    }\n    return\
    \ max_depth;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var\
    \ max_depth = 0;\n    for(var i = 0; i < paren_array.length; i++){\n        var\
    \ depth = 0;\n        for(var j = 0; j < paren_array[i].length; j++){\n      \
    \      if(paren_array[i][j] == '('){\n                depth++;\n            }\n\
    \            else if(paren_array[i][j] == ')'){\n                depth--;\n  \
    \          }\n        }\n        if(depth > max_depth){\n            max_depth\
    \ = depth;\n        }\n    }\n    return max_depth;\n}\n", "    let paren_array\
    \ = paren_string.split(\" \");\n    let max_depth = 0;\n    for(let i = 0; i <\
    \ paren_array.length; i++){\n        let current_depth = 0;\n        for(let j\
    \ = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ===\
    \ \"(\"){\n                current_depth++;\n            }\n            else if(paren_array[i][j]\
    \ === \")\"){\n                current_depth--;\n            }\n        }\n  \
    \      if(current_depth > max_depth){\n            max_depth = current_depth;\n\
    \        }\n    }\n    return max_depth;\n}\n", "  var max_depth = 0;\n  var current_depth\
    \ = 0;\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i]\
    \ == '('){\n      current_depth++;\n      if(current_depth > max_depth){\n   \
    \     max_depth = current_depth;\n      }\n    }\n    else if(paren_string[i]\
    \ == ')'){\n      current_depth--;\n    }\n  }\n  return max_depth;\n}\n", " \
    \   var max_nesting = 0;\n    var current_nesting = 0;\n    for(var i = 0; i <\
    \ paren_string.length; i++){\n        if(paren_string[i] == '('){\n          \
    \  current_nesting++;\n            if(current_nesting > max_nesting){\n      \
    \          max_nesting = current_nesting;\n            }\n        }\n        else\
    \ if(paren_string[i] == ')'){\n            current_nesting--;\n        }\n   \
    \ }\n    return max_nesting;\n}\n", "    var paren_arr = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_arr.length; i++){\n\
    \        var paren_count = 0;\n        var max_count = 0;\n        for(var j =\
    \ 0; j < paren_arr[i].length; j++){\n            if(paren_arr[i][j] == \"(\"){\n\
    \                paren_count++;\n                if(paren_count > max_count){\n\
    \                    max_count = paren_count;\n                }\n           \
    \ }\n            else if(paren_arr[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_count);\n    }\n    return\
    \ result;\n}\n", "  var paren_array = paren_string.split(\" \");\n  var result\
    \ = [];\n  for(var i = 0; i < paren_array.length; i++){\n    var paren_group =\
    \ paren_array[i];\n    var stack = [];\n    var max_depth = 0;\n    for(var j\
    \ = 0; j < paren_group.length; j++){\n      var paren = paren_group[j];\n    \
    \  if(paren == \"(\"){\n        stack.push(paren);\n        max_depth = Math.max(max_depth,\
    \ stack.length);\n      }else if(paren == \")\"){\n        stack.pop();\n    \
    \  }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n", "    var\
    \ paren_array = paren_string.split(\" \");\n    var max_depth = 0;\n    for(var\
    \ i = 0; i < paren_array.length; i++){\n        var depth = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ '('){\n                depth++;\n            }\n            else if(paren_array[i][j]\
    \ == ')'){\n                depth--;\n            }\n        }\n        if(depth\
    \ > max_depth){\n            max_depth = depth;\n        }\n    }\n    return\
    \ max_depth;\n}\n", "    var max_depth = 0;\n    var current_depth = 0;\n    var\
    \ i;\n    for(i=0; i<paren_string.length; i++){\n        if(paren_string[i] ===\
    \ '('){\n            current_depth++;\n            if(current_depth > max_depth){\n\
    \                max_depth = current_depth;\n            }\n        }\n      \
    \  else if(paren_string[i] === ')'){\n            current_depth--;\n        }\n\
    \    }\n    return max_depth;\n}\n", "    var paren_list = paren_string.split('\
    \ ');\n    var max_depth = 0;\n    for(var i=0; i<paren_list.length; i++){\n \
    \       var current_depth = 0;\n        var current_paren = paren_list[i];\n \
    \       for(var j=0; j<current_paren.length; j++){\n            if(current_paren[j]\
    \ == '('){\n                current_depth++;\n            }\n            else\
    \ if(current_paren[j] == ')'){\n                current_depth--;\n           \
    \ }\n        }\n        if(current_depth > max_depth){\n            max_depth\
    \ = current_depth;\n        }\n    }\n    return max_depth;\n}\n", "    var paren_groups\
    \ = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i\
    \ < paren_groups.length; i++){\n        var curr_nesting = 0;\n        var curr_paren_group\
    \ = paren_groups[i];\n        for(var j = 0; j < curr_paren_group.length; j++){\n\
    \            if(curr_paren_group[j] == \"(\"){\n                curr_nesting++;\n\
    \            }\n            else if(curr_paren_group[j] == \")\"){\n         \
    \       curr_nesting--;\n            }\n        }\n        if(curr_nesting > max_nesting){\n\
    \            max_nesting = curr_nesting;\n        }\n    }\n    return max_nesting;\n\
    }\n", "    var paren_array = paren_string.split(\" \");\n    var result = [];\n\
    \    for(var i = 0; i < paren_array.length; i++){\n        var paren = paren_array[i];\n\
    \        var max_level = 0;\n        var level = 0;\n        for(var j = 0; j\
    \ < paren.length; j++){\n            if(paren[j] == '('){\n                level++;\n\
    \                if(level > max_level){\n                    max_level = level;\n\
    \                }\n            }\n            else if(paren[j] == ')'){\n   \
    \             level--;\n            }\n        }\n        result.push(max_level);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split('\
    \ ');\n    var max_nesting = 0;\n    var nesting = 0;\n    for(var i = 0; i <\
    \ paren_array.length; i++){\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == '('){\n                nesting++;\n\
    \            }\n            else if(paren_array[i][j] == ')'){\n             \
    \   nesting--;\n            }\n            if(nesting > max_nesting){\n      \
    \          max_nesting = nesting;\n            }\n        }\n        nesting =\
    \ 0;\n    }\n    return max_nesting;\n}\n", "    var paren_array = paren_string.split('\
    \ ');\n    var max_depth = 0;\n    var current_depth = 0;\n    var max_depth_array\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var current_paren\
    \ = paren_array[i];\n        for(var j = 0; j < current_paren.length; j++){\n\
    \            if(current_paren[j] == '('){\n                current_depth++;\n\
    \            }\n            else if(current_paren[j] == ')'){\n              \
    \  current_depth--;\n            }\n            if(current_depth > max_depth){\n\
    \                max_depth = current_depth;\n            }\n        }\n      \
    \  max_depth_array.push(max_depth);\n        max_depth = 0;\n        current_depth\
    \ = 0;\n    }\n    return max_depth_array;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var max_depth = 0;\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var depth = 0;\n        for(var j = 0; j < paren_array[i].length; j++){\n\
    \            if(paren_array[i][j] == '('){\n                depth++;\n       \
    \     }\n            else if(paren_array[i][j] == ')'){\n                depth--;\n\
    \            }\n        }\n        if(depth > max_depth){\n            max_depth\
    \ = depth;\n        }\n    }\n    return max_depth;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var max_depth = 0;\n    for(var i = 0; i <\
    \ paren_array.length; i++){\n        var current_depth = 0;\n        var current_paren\
    \ = paren_array[i];\n        for(var j = 0; j < current_paren.length; j++){\n\
    \            if(current_paren[j] == \"(\"){\n                current_depth++;\n\
    \            }\n            else if(current_paren[j] == \")\"){\n            \
    \    current_depth--;\n            }\n        }\n        if(current_depth > max_depth){\n\
    \            max_depth = current_depth;\n        }\n    }\n    return max_depth;\n\
    }\n", "    var paren_array = paren_string.split(\" \");\n    var max_depth = 0;\n\
    \    for(var i = 0; i < paren_array.length; i++){\n        var paren_depth = 0;\n\
    \        var paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > paren_depth){\n                    paren_depth\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   if(paren_depth > max_depth){\n            max_depth = paren_depth;\n     \
    \   }\n    }\n    return max_depth;\n}\n", "    var paren_groups = paren_string.split(\"\
    \ \");\n    var max_levels = [];\n    for(var i = 0; i < paren_groups.length;\
    \ i++){\n        var paren_group = paren_groups[i];\n        var level = 0;\n\
    \        var max_level = 0;\n        for(var j = 0; j < paren_group.length; j++){\n\
    \            if(paren_group[j] == \"(\"){\n                level++;\n        \
    \        if(level > max_level){\n                    max_level = level;\n    \
    \            }\n            }\n            else if(paren_group[j] == \")\"){\n\
    \                level--;\n            }\n        }\n        max_levels.push(max_level);\n\
    \    }\n    return max_levels;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var paren_count = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count_temp = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == '('){\n                paren_count_temp++;\n\
    \            }\n        }\n        paren_count.push(paren_count_temp);\n    }\n\
    \    return paren_count;\n}\n", "    var paren_array = paren_string.split(\" \"\
    );\n    var max_levels = 0;\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_count = 0;\n        var max_count = 0;\n        for(var j =\
    \ 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] == '('){\n\
    \                paren_count++;\n                if(paren_count > max_count){\n\
    \                    max_count = paren_count;\n                }\n           \
    \ }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        if(max_count > max_levels){\n            max_levels\
    \ = max_count;\n        }\n    }\n    return max_levels;\n}\n", "    let paren_array\
    \ = paren_string.split(' ');\n    let paren_levels = [];\n    for(let i = 0; i\
    \ < paren_array.length; i++){\n        let paren_level = 0;\n        let paren_count\
    \ = 0;\n        for(let j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ === '('){\n                paren_count++;\n                if(paren_count >\
    \ paren_level){\n                    paren_level = paren_count;\n            \
    \    }\n            }\n            else if(paren_array[i][j] === ')'){\n     \
    \           paren_count--;\n            }\n        }\n        paren_levels.push(paren_level);\n\
    \    }\n    return paren_levels;\n}\n", "    let paren_array = paren_string.split('\
    \ ');\n    let max_depth = 0;\n    for(let i = 0; i < paren_array.length; i++){\n\
    \        let depth = 0;\n        for(let j = 0; j < paren_array[i].length; j++){\n\
    \            if(paren_array[i][j] === '('){\n                depth++;\n      \
    \      }\n            else if(paren_array[i][j] === ')'){\n                depth--;\n\
    \            }\n        }\n        if(depth > max_depth){\n            max_depth\
    \ = depth;\n        }\n    }\n    return max_depth;\n}\n", "    var parens = paren_string.split(\"\
    \ \");\n    var max_levels = [];\n    for(var i = 0; i < parens.length; i++){\n\
    \        var paren = parens[i];\n        var level = 0;\n        var max_level\
    \ = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                level++;\n                if(level > max_level){\n\
    \                    max_level = level;\n                }\n            }\n  \
    \          else if(paren[j] == \")\"){\n                level--;\n           \
    \ }\n        }\n        max_levels.push(max_level);\n    }\n    return max_levels;\n\
    }\n", "    let max_depth = 0;\n    let current_depth = 0;\n    for(let i = 0;\
    \ i < paren_string.length; i++){\n        if(paren_string[i] === '('){\n     \
    \       current_depth++;\n            if(current_depth > max_depth){\n       \
    \         max_depth = current_depth;\n            }\n        }\n        else if(paren_string[i]\
    \ === ')'){\n            current_depth--;\n        }\n    }\n    return max_depth;\n\
    }\n", "    var paren_array = paren_string.split(\" \");\n    var result = [];\n\
    \    for(var i = 0; i < paren_array.length; i++){\n        var paren = paren_array[i];\n\
    \        var max_level = 0;\n        var level = 0;\n        for(var j = 0; j\
    \ < paren.length; j++){\n            if(paren[j] == '('){\n                level++;\n\
    \                if(level > max_level){\n                    max_level = level;\n\
    \                }\n            }\n            else if(paren[j] == ')'){\n   \
    \             level--;\n            }\n        }\n        result.push(max_level);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var max_depth = 0;\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var depth = 0;\n        for(var j = 0; j < paren_array[i].length; j++){\n\
    \            if(paren_array[i][j] == '('){\n                depth++;\n       \
    \     }\n            else if(paren_array[i][j] == ')'){\n                depth--;\n\
    \            }\n        }\n        if(depth > max_depth){\n            max_depth\
    \ = depth;\n        }\n    }\n    return max_depth;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var max_depth = 0;\n    for(var i = 0; i <\
    \ paren_array.length; i++){\n        var depth = 0;\n        for(var j = 0; j\
    \ < paren_array[i].length; j++){\n            if(paren_array[i][j] == '('){\n\
    \                depth++;\n            }\n            else if(paren_array[i][j]\
    \ == ')'){\n                depth--;\n            }\n        }\n        if(depth\
    \ > max_depth){\n            max_depth = depth;\n        }\n    }\n    return\
    \ max_depth;\n}\n", "    var paren_array = paren_string.split(' ');\n    var max_depth\
    \ = 0;\n    for(var i = 0; i < paren_array.length; i++){\n        var current_depth\
    \ = 0;\n        var current_paren = paren_array[i];\n        for(var j = 0; j\
    \ < current_paren.length; j++){\n            if(current_paren[j] == '('){\n  \
    \              current_depth++;\n            }\n            else if(current_paren[j]\
    \ == ')'){\n                current_depth--;\n            }\n        }\n     \
    \   if(current_depth > max_depth){\n            max_depth = current_depth;\n \
    \       }\n    }\n    return max_depth;\n}\n", "    var max_depth = 0;\n    var\
    \ current_depth = 0;\n    for(var i = 0; i < paren_string.length; i++){\n    \
    \    if(paren_string[i] == '('){\n            current_depth++;\n            if(current_depth\
    \ > max_depth){\n                max_depth = current_depth;\n            }\n \
    \       }\n        else if(paren_string[i] == ')'){\n            current_depth--;\n\
    \        }\n    }\n    return max_depth;\n}\n", "  var paren_array = paren_string.split(\"\
    \ \");\n  var max_nesting = 0;\n  for(var i = 0; i < paren_array.length; i++){\n\
    \    var paren_count = 0;\n    var max_count = 0;\n    for(var j = 0; j < paren_array[i].length;\
    \ j++){\n      if(paren_array[i][j] == \"(\"){\n        paren_count++;\n     \
    \   if(paren_count > max_count){\n          max_count = paren_count;\n       \
    \ }\n      }\n      else if(paren_array[i][j] == \")\"){\n        paren_count--;\n\
    \      }\n    }\n    if(max_count > max_nesting){\n      max_nesting = max_count;\n\
    \    }\n  }\n  return max_nesting;\n}\n", "    let paren_groups = paren_string.split('\
    \ ');\n    let max_nesting = 0;\n    for(let i = 0; i < paren_groups.length; i++){\n\
    \        let curr_nesting = 0;\n        let curr_group = paren_groups[i];\n  \
    \      for(let j = 0; j < curr_group.length; j++){\n            if(curr_group[j]\
    \ === '('){\n                curr_nesting++;\n            }\n            else\
    \ if(curr_group[j] === ')'){\n                curr_nesting--;\n            }\n\
    \        }\n        if(curr_nesting > max_nesting){\n            max_nesting =\
    \ curr_nesting;\n        }\n    }\n    return max_nesting;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var max_depth = 0;\n    for(var i = 0; i <\
    \ paren_array.length; i++){\n        var paren_depth = 0;\n        var paren_count\
    \ = 0;\n        for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ paren_depth){\n                    paren_depth = paren_count;\n            \
    \    }\n            }\n            else if(paren_array[i][j] == \")\"){\n    \
    \            paren_count--;\n            }\n        }\n        if(paren_depth\
    \ > max_depth){\n            max_depth = paren_depth;\n        }\n    }\n    return\
    \ max_depth;\n}\n", "    var paren_array = paren_string.split(' ');\n    var max_depth\
    \ = 0;\n    for(var i = 0; i < paren_array.length; i++){\n        var depth =\
    \ 0;\n        for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                depth++;\n            }\n            else if(paren_array[i][j]\
    \ == ')'){\n                depth--;\n            }\n        }\n        if(depth\
    \ > max_depth){\n            max_depth = depth;\n        }\n    }\n    return\
    \ max_depth;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var\
    \ max_depth = 0;\n    for(var i = 0; i < paren_array.length; i++){\n        var\
    \ depth = 0;\n        for(var j = 0; j < paren_array[i].length; j++){\n      \
    \      if(paren_array[i][j] == '('){\n                depth++;\n            }\n\
    \            else if(paren_array[i][j] == ')'){\n                depth--;\n  \
    \          }\n        }\n        if(depth > max_depth){\n            max_depth\
    \ = depth;\n        }\n    }\n    return max_depth;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var max_depth = 0;\n    for(var i = 0; i <\
    \ paren_array.length; i++){\n        var depth = 0;\n        for(var j = 0; j\
    \ < paren_array[i].length; j++){\n            if(paren_array[i][j] == '('){\n\
    \                depth++;\n            }\n            else if(paren_array[i][j]\
    \ == ')'){\n                depth--;\n            }\n        }\n        if(depth\
    \ > max_depth){\n            max_depth = depth;\n        }\n    }\n    return\
    \ max_depth;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var\
    \ max_levels = [];\n    for(var i = 0; i < paren_array.length; i++){\n       \
    \ var paren_group = paren_array[i];\n        var level = 0;\n        var max_level\
    \ = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j]\
    \ == \"(\"){\n                level++;\n                if(level > max_level){\n\
    \                    max_level = level;\n                }\n            }\n  \
    \          else if(paren_group[j] == \")\"){\n                level--;\n     \
    \       }\n        }\n        max_levels.push(max_level);\n    }\n    return max_levels;\n\
    }\n", "    var paren_array = paren_string.split(\" \");\n    var paren_count =\
    \ [];\n    for(var i = 0; i < paren_array.length; i++){\n        var paren_count_temp\
    \ = 0;\n        for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count_temp++;\n            }\n        }\n\
    \        paren_count.push(paren_count_temp);\n    }\n    return paren_count;\n\
    }\n", "    var paren_array = paren_string.split(\" \");\n    var max_levels =\
    \ 0;\n    for(var i = 0; i < paren_array.length; i++){\n        var curr_paren\
    \ = paren_array[i];\n        var curr_levels = 0;\n        for(var j = 0; j <\
    \ curr_paren.length; j++){\n            if(curr_paren[j] == \"(\"){\n        \
    \        curr_levels++;\n            }\n            else if(curr_paren[j] == \"\
    )\"){\n                curr_levels--;\n            }\n        }\n        if(curr_levels\
    \ > max_levels){\n            max_levels = curr_levels;\n        }\n    }\n  \
    \  return max_levels;\n}\n", "    var paren_array = paren_string.split(' ');\n\
    \    var max_nesting = 0;\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_group = paren_array[i];\n        var current_nesting = 0;\n\
    \        var max_current_nesting = 0;\n        for(var j = 0; j < paren_group.length;\
    \ j++){\n            if(paren_group[j] == '('){\n                current_nesting++;\n\
    \                if(current_nesting > max_current_nesting){\n                \
    \    max_current_nesting = current_nesting;\n                }\n            }\n\
    \            else if(paren_group[j] == ')'){\n                current_nesting--;\n\
    \            }\n        }\n        if(max_current_nesting > max_nesting){\n  \
    \          max_nesting = max_current_nesting;\n        }\n    }\n    return max_nesting;\n\
    }\n", "    var paren_array = paren_string.split(\" \");\n    var max_depth = 0;\n\
    \    for(var i = 0; i < paren_array.length; i++){\n        var depth = 0;\n  \
    \      for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                depth++;\n            }\n            else if(paren_array[i][j]\
    \ == ')'){\n                depth--;\n            }\n        }\n        if(depth\
    \ > max_depth){\n            max_depth = depth;\n        }\n    }\n    return\
    \ max_depth;\n}\n", "    var max_depth = 0;\n    var depth = 0;\n    for(var i\
    \ = 0; i < paren_string.length; i++){\n        if(paren_string[i] == '('){\n \
    \           depth++;\n            if(depth > max_depth){\n                max_depth\
    \ = depth;\n            }\n        }\n        else if(paren_string[i] == ')'){\n\
    \            depth--;\n        }\n    }\n    return max_depth;\n}\n", "    var\
    \ paren_array = paren_string.split(' ');\n    var max_depth = 0;\n    var current_depth\
    \ = 0;\n    var max_depth_array = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        for(var j = 0; j <\
    \ paren_group.length; j++){\n            if(paren_group[j] == '('){\n        \
    \        current_depth++;\n            }\n            else if(paren_group[j] ==\
    \ ')'){\n                current_depth--;\n            }\n            if(current_depth\
    \ > max_depth){\n                max_depth = current_depth;\n            }\n \
    \       }\n        max_depth_array.push(max_depth);\n        max_depth = 0;\n\
    \        current_depth = 0;\n    }\n    return max_depth_array;\n}\n", "    var\
    \ max_depth = 0;\n    var depth = 0;\n    var i;\n    for(i=0; i<paren_string.length;\
    \ i++){\n        if(paren_string[i] == '('){\n            depth++;\n         \
    \   if(depth > max_depth){\n                max_depth = depth;\n            }\n\
    \        }\n        else if(paren_string[i] == ')'){\n            depth--;\n \
    \       }\n    }\n    return max_depth;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var max_depth = 0;\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var current_depth = 0;\n        var current_paren = paren_array[i];\n\
    \        for(var j = 0; j < current_paren.length; j++){\n            if(current_paren[j]\
    \ == \"(\"){\n                current_depth++;\n            }\n            else\
    \ if(current_paren[j] == \")\"){\n                current_depth--;\n         \
    \   }\n        }\n        if(current_depth > max_depth){\n            max_depth\
    \ = current_depth;\n        }\n    }\n    return max_depth;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var output_array = [];\n    for(var i = 0;\
    \ i < paren_array.length; i++){\n        output_array.push(parse_parens(paren_array[i]));\n\
    \    }\n    return output_array;\n}\n", "    var paren_array = paren_string.split('\
    \ ');\n    var max_depth = 0;\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var depth = 0;\n        for(var j = 0; j < paren_array[i].length; j++){\n\
    \            if(paren_array[i][j] == '('){\n                depth++;\n       \
    \     }\n            else if(paren_array[i][j] == ')'){\n                depth--;\n\
    \            }\n        }\n        if(depth > max_depth){\n            max_depth\
    \ = depth;\n        }\n    }\n    return max_depth;\n}\n", "    var max_depth\
    \ = 0;\n    var depth = 0;\n    var paren_array = paren_string.split('');\n  \
    \  for(var i = 0; i < paren_array.length; i++){\n        if(paren_array[i] ==\
    \ '('){\n            depth++;\n            if(depth > max_depth){\n          \
    \      max_depth = depth;\n            }\n        }\n        else if(paren_array[i]\
    \ == ')'){\n            depth--;\n        }\n    }\n    return max_depth;\n}\n",
  "  var paren_array = paren_string.split(\" \");\n  var max_nesting = 0;\n  for(var\
    \ i = 0; i < paren_array.length; i++){\n    var paren_group = paren_array[i];\n\
    \    var current_nesting = 0;\n    var max_nesting_for_group = 0;\n    for(var\
    \ j = 0; j < paren_group.length; j++){\n      if(paren_group[j] == \"(\"){\n \
    \       current_nesting++;\n        if(current_nesting > max_nesting_for_group){\n\
    \          max_nesting_for_group = current_nesting;\n        }\n      }\n    \
    \  else if(paren_group[j] == \")\"){\n        current_nesting--;\n      }\n  \
    \  }\n    if(max_nesting_for_group > max_nesting){\n      max_nesting = max_nesting_for_group;\n\
    \    }\n  }\n  return max_nesting;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_group = paren_array[i];\n        var max_depth = 0;\n     \
    \   var depth = 0;\n        for(var j = 0; j < paren_group.length; j++){\n   \
    \         if(paren_group[j] == \"(\"){\n                depth++;\n           \
    \     if(depth > max_depth){\n                    max_depth = depth;\n       \
    \         }\n            }\n            else if(paren_group[j] == \")\"){\n  \
    \              depth--;\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n", "  var max_depth = 0;\n  var curr_depth = 0;\n\
    \  var paren_array = paren_string.split(\"\");\n  for(var i = 0; i < paren_array.length;\
    \ i++){\n    if(paren_array[i] == \"(\"){\n      curr_depth++;\n      if(curr_depth\
    \ > max_depth){\n        max_depth = curr_depth;\n      }\n    }\n    else if(paren_array[i]\
    \ == \")\"){\n      curr_depth--;\n    }\n  }\n  return max_depth;\n}\n", "  \
    \  var paren_array = paren_string.split(' ');\n    var max_depth = 0;\n    for(var\
    \ i = 0; i < paren_array.length; i++){\n        var depth = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ '('){\n                depth++;\n            }\n            else if(paren_array[i][j]\
    \ == ')'){\n                depth--;\n            }\n        }\n        if(depth\
    \ > max_depth){\n            max_depth = depth;\n        }\n    }\n    return\
    \ max_depth;\n}\n", "\tvar paren_groups = paren_string.split(\" \");\n\tvar max_nesting\
    \ = 0;\n\tfor(var i = 0; i < paren_groups.length; i++){\n\t\tvar current_nesting\
    \ = 0;\n\t\tvar current_group = paren_groups[i];\n\t\tfor(var j = 0; j < current_group.length;\
    \ j++){\n\t\t\tif(current_group[j] == \"(\"){\n\t\t\t\tcurrent_nesting++;\n\t\t\
    \t}\n\t\t\telse if(current_group[j] == \")\"){\n\t\t\t\tcurrent_nesting--;\n\t\
    \t\t}\n\t\t}\n\t\tif(current_nesting > max_nesting){\n\t\t\tmax_nesting = current_nesting;\n\
    \t\t}\n\t}\n\treturn max_nesting;\n}\n", "\tvar paren_groups = paren_string.split(\"\
    \ \");\n\tvar max_nesting = 0;\n\tfor(var i = 0; i < paren_groups.length; i++){\n\
    \t\tvar curr_nesting = 0;\n\t\tvar curr_group = paren_groups[i];\n\t\tfor(var\
    \ j = 0; j < curr_group.length; j++){\n\t\t\tif(curr_group[j] == \"(\"){\n\t\t\
    \t\tcurr_nesting++;\n\t\t\t}\n\t\t\telse if(curr_group[j] == \")\"){\n\t\t\t\t\
    curr_nesting--;\n\t\t\t}\n\t\t}\n\t\tif(curr_nesting > max_nesting){\n\t\t\tmax_nesting\
    \ = curr_nesting;\n\t\t}\n\t}\n\treturn max_nesting;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var max_depth = 0;\n    for(var i = 0; i <\
    \ paren_array.length; i++){\n        var depth = 0;\n        for(var j = 0; j\
    \ < paren_array[i].length; j++){\n            if(paren_array[i][j] == '('){\n\
    \                depth++;\n            }\n            else if(paren_array[i][j]\
    \ == ')'){\n                depth--;\n            }\n        }\n        if(depth\
    \ > max_depth){\n            max_depth = depth;\n        }\n    }\n    return\
    \ max_depth;\n}\n", "    var paren_stack = [];\n    var max_depth = 0;\n    var\
    \ current_depth = 0;\n    for(var i = 0; i < paren_string.length; i++){\n    \
    \    if(paren_string[i] == '('){\n            paren_stack.push(paren_string[i]);\n\
    \            current_depth++;\n            if(current_depth > max_depth){\n  \
    \              max_depth = current_depth;\n            }\n        }\n        else\
    \ if(paren_string[i] == ')'){\n            paren_stack.pop();\n            current_depth--;\n\
    \        }\n    }\n    return max_depth;\n}\n", "  var paren_array = paren_string.split('\
    \ ');\n  var max_nesting = 0;\n  for(var i = 0; i < paren_array.length; i++){\n\
    \    var curr_nesting = 0;\n    var curr_paren = paren_array[i];\n    for(var\
    \ j = 0; j < curr_paren.length; j++){\n      if(curr_paren[j] == '('){\n     \
    \   curr_nesting++;\n      }\n      else if(curr_paren[j] == ')'){\n        curr_nesting--;\n\
    \      }\n    }\n    if(curr_nesting > max_nesting){\n      max_nesting = curr_nesting;\n\
    \    }\n  }\n  return max_nesting;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_count = 0;\n        var max_paren_count = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        if(max_paren_count > max_nesting){\n      \
    \      max_nesting = max_paren_count;\n        }\n    }\n    return max_nesting;\n\
    }\n", "    var paren_array = paren_string.split(\" \");\n    var paren_stack =\
    \ [];\n    var max_depth = 0;\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_group = paren_array[i];\n        for(var j = 0; j < paren_group.length;\
    \ j++){\n            if(paren_group[j] == \"(\"){\n                paren_stack.push(paren_group[j]);\n\
    \            }\n            else if(paren_group[j] == \")\"){\n              \
    \  paren_stack.pop();\n            }\n            if(paren_stack.length > max_depth){\n\
    \                max_depth = paren_stack.length;\n            }\n        }\n \
    \       paren_stack = [];\n    }\n    return max_depth;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var max_depth = 0;\n    for(var i = 0; i <\
    \ paren_array.length; i++){\n        var paren_depth = 0;\n        var paren_count\
    \ = 0;\n        for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > paren_depth){\n\
    \                    paren_depth = paren_count;\n                }\n         \
    \   }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        if(paren_depth > max_depth){\n            max_depth\
    \ = paren_depth;\n        }\n    }\n    return max_depth;\n}\n", "    var paren_array\
    \ = paren_string.split(' ');\n    var paren_levels = [];\n    for(var i = 0; i\
    \ < paren_array.length; i++){\n        var paren_level = 0;\n        var paren_count\
    \ = 0;\n        for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > paren_level){\n\
    \                    paren_level = paren_count;\n                }\n         \
    \   }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        paren_levels.push(paren_level);\n    }\n  \
    \  return paren_levels;\n}\n", "    var paren_array = paren_string.split(\" \"\
    );\n    var max_depth = 0;\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var depth = 0;\n        for(var j = 0; j < paren_array[i].length; j++){\n\
    \            if(paren_array[i][j] == '('){\n                depth++;\n       \
    \     }\n            else if(paren_array[i][j] == ')'){\n                depth--;\n\
    \            }\n        }\n        if(depth > max_depth){\n            max_depth\
    \ = depth;\n        }\n    }\n    return max_depth;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var max_depth = 0;\n    for(var i = 0; i <\
    \ paren_array.length; i++){\n        var paren_depth = 0;\n        var paren_count\
    \ = 0;\n        for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > paren_depth){\n\
    \                    paren_depth = paren_count;\n                }\n         \
    \   }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        if(paren_depth > max_depth){\n            max_depth\
    \ = paren_depth;\n        }\n    }\n    return max_depth;\n}\n", "    var max_depth\
    \ = 0;\n    var depth = 0;\n    for(var i = 0; i < paren_string.length; i++){\n\
    \        if(paren_string[i] == '('){\n            depth++;\n            if(depth\
    \ > max_depth){\n                max_depth = depth;\n            }\n        }\n\
    \        else if(paren_string[i] == ')'){\n            depth--;\n        }\n \
    \   }\n    return max_depth;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var max_depth = 0;\n    var current_depth = 0;\n    for(var i = 0;\
    \ i < paren_array.length; i++){\n        current_depth = 0;\n        for(var j\
    \ = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] == \"\
    (\"){\n                current_depth++;\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                current_depth--;\n            }\n        }\n   \
    \     if(current_depth > max_depth){\n            max_depth = current_depth;\n\
    \        }\n    }\n    return max_depth;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_group = paren_array[i];\n        var max_level = 0;\n     \
    \   var current_level = 0;\n        for(var j = 0; j < paren_group.length; j++){\n\
    \            if(paren_group[j] == \"(\"){\n                current_level++;\n\
    \                if(current_level > max_level){\n                    max_level\
    \ = current_level;\n                }\n            }\n            else if(paren_group[j]\
    \ == \")\"){\n                current_level--;\n            }\n        }\n   \
    \     result.push(max_level);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var max_depth = 0;\n    for(var i = 0; i <\
    \ paren_array.length; i++){\n        var paren_depth = 0;\n        var paren_count\
    \ = 0;\n        for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ paren_depth){\n                    paren_depth = paren_count;\n            \
    \    }\n            }\n            else if(paren_array[i][j] == \")\"){\n    \
    \            paren_count--;\n            }\n        }\n        if(paren_depth\
    \ > max_depth){\n            max_depth = paren_depth;\n        }\n    }\n    return\
    \ max_depth;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var\
    \ max_depth = 0;\n    for(var i = 0; i < paren_array.length; i++){\n        var\
    \ paren_depth = 0;\n        var paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > paren_depth){\n                    paren_depth\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   if(paren_depth > max_depth){\n            max_depth = paren_depth;\n     \
    \   }\n    }\n    return max_depth;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        result.push(parse_parens(paren_array[i]));\n    }\n    return result;\n\
    }\n", "    var paren_array = paren_string.split(\" \");\n    var max_nesting =\
    \ 0;\n    for(var i = 0; i < paren_array.length; i++){\n        var paren_group\
    \ = paren_array[i];\n        var current_nesting = 0;\n        var max_current_nesting\
    \ = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j]\
    \ == \"(\"){\n                current_nesting++;\n                if(current_nesting\
    \ > max_current_nesting){\n                    max_current_nesting = current_nesting;\n\
    \                }\n            }\n            else if(paren_group[j] == \")\"\
    ){\n                current_nesting--;\n            }\n        }\n        if(max_current_nesting\
    \ > max_nesting){\n            max_nesting = max_current_nesting;\n        }\n\
    \    }\n    return max_nesting;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var max_depth = 0;\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var depth = 0;\n        for(var j = 0; j < paren_array[i].length; j++){\n\
    \            if(paren_array[i][j] == '('){\n                depth++;\n       \
    \     }\n            else if(paren_array[i][j] == ')'){\n                depth--;\n\
    \            }\n        }\n        if(depth > max_depth){\n            max_depth\
    \ = depth;\n        }\n    }\n    return max_depth;\n}\n", "    let max_depth\
    \ = 0;\n    let current_depth = 0;\n    for(let i = 0; i < paren_string.length;\
    \ i++){\n        if(paren_string[i] === '('){\n            current_depth++;\n\
    \            if(current_depth > max_depth){\n                max_depth = current_depth;\n\
    \            }\n        }\n        else if(paren_string[i] === ')'){\n       \
    \     current_depth--;\n        }\n    }\n    return max_depth;\n}\n", "\tvar\
    \ paren_array = paren_string.split(\" \");\n\tvar max_depth = 0;\n\tfor(var i\
    \ = 0; i < paren_array.length; i++){\n\t\tvar current_depth = 0;\n\t\tvar current_paren\
    \ = paren_array[i];\n\t\tfor(var j = 0; j < current_paren.length; j++){\n\t\t\t\
    if(current_paren[j] == '('){\n\t\t\t\tcurrent_depth++;\n\t\t\t}\n\t\t\telse if(current_paren[j]\
    \ == ')'){\n\t\t\t\tcurrent_depth--;\n\t\t\t}\n\t\t}\n\t\tif(current_depth > max_depth){\n\
    \t\t\tmax_depth = current_depth;\n\t\t}\n\t}\n\treturn max_depth;\n}\n", "   \
    \ var paren_array = paren_string.split(' ');\n    var result = [];\n    for(var\
    \ i = 0; i < paren_array.length; i++){\n        var paren_group = paren_array[i];\n\
    \        var paren_stack = [];\n        var max_depth = 0;\n        for(var j\
    \ = 0; j < paren_group.length; j++){\n            var paren = paren_group[j];\n\
    \            if(paren == '('){\n                paren_stack.push(paren);\n   \
    \             if(paren_stack.length > max_depth){\n                    max_depth\
    \ = paren_stack.length;\n                }\n            }\n            else if(paren\
    \ == ')'){\n                paren_stack.pop();\n            }\n        }\n   \
    \     result.push(max_depth);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var max_depth = 0;\n    for(var i = 0; i <\
    \ paren_array.length; i++){\n        var current_depth = 0;\n        var current_paren\
    \ = paren_array[i];\n        for(var j = 0; j < current_paren.length; j++){\n\
    \            if(current_paren[j] == \"(\"){\n                current_depth++;\n\
    \            }\n            else if(current_paren[j] == \")\"){\n            \
    \    current_depth--;\n            }\n        }\n        if(current_depth > max_depth){\n\
    \            max_depth = current_depth;\n        }\n    }\n    return max_depth;\n\
    }\n", "    var max_depth = 0;\n    var current_depth = 0;\n    for(var i = 0;\
    \ i < paren_string.length; i++){\n        if(paren_string[i] == \"(\"){\n    \
    \        current_depth++;\n            if(current_depth > max_depth){\n      \
    \          max_depth = current_depth;\n            }\n        }\n        else\
    \ if(paren_string[i] == \")\"){\n            current_depth--;\n        }\n   \
    \ }\n    return max_depth;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var max_depth = 0;\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var depth = 0;\n        for(var j = 0; j < paren_array[i].length; j++){\n\
    \            if(paren_array[i][j] == '('){\n                depth++;\n       \
    \     }\n            else if(paren_array[i][j] == ')'){\n                depth--;\n\
    \            }\n        }\n        if(depth > max_depth){\n            max_depth\
    \ = depth;\n        }\n    }\n    return max_depth;\n}\n", "    var max_depth\
    \ = 0;\n    var current_depth = 0;\n    for(var i = 0; i < paren_string.length;\
    \ i++){\n        if(paren_string[i] == '('){\n            current_depth++;\n \
    \           if(current_depth > max_depth){\n                max_depth = current_depth;\n\
    \            }\n        }\n        else if(paren_string[i] == ')'){\n        \
    \    current_depth--;\n        }\n    }\n    return max_depth;\n}\n", "    var\
    \ max_depth = 0;\n    var current_depth = 0;\n    for(var i = 0; i < paren_string.length;\
    \ i++){\n        if(paren_string[i] == '('){\n            current_depth++;\n \
    \           if(current_depth > max_depth){\n                max_depth = current_depth;\n\
    \            }\n        }\n        else if(paren_string[i] == ')'){\n        \
    \    current_depth--;\n        }\n    }\n    return max_depth;\n}\n", "    var\
    \ paren_array = paren_string.split(\" \");\n    var max_level = 0;\n    for(var\
    \ i = 0; i < paren_array.length; i++){\n        var current_level = 0;\n     \
    \   var current_paren = paren_array[i];\n        for(var j = 0; j < current_paren.length;\
    \ j++){\n            if(current_paren[j] == \"(\"){\n                current_level++;\n\
    \            }\n            else if(current_paren[j] == \")\"){\n            \
    \    current_level--;\n            }\n        }\n        if(current_level > max_level){\n\
    \            max_level = current_level;\n        }\n    }\n    return max_level;\n\
    }\n", "    var paren_groups = paren_string.split(\" \");\n    var max_nesting\
    \ = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group\
    \ = paren_groups[i];\n        var curr_nesting = 0;\n        var max_curr_nesting\
    \ = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j]\
    \ == \"(\"){\n                curr_nesting++;\n            }\n            else\
    \ if(paren_group[j] == \")\"){\n                curr_nesting--;\n            }\n\
    \            if(curr_nesting > max_curr_nesting){\n                max_curr_nesting\
    \ = curr_nesting;\n            }\n        }\n        if(max_curr_nesting > max_nesting){\n\
    \            max_nesting = max_curr_nesting;\n        }\n    }\n    return max_nesting;\n\
    }\n", "    var paren_array = paren_string.split(\" \");\n    var max_depth = 0;\n\
    \    for(var i = 0; i < paren_array.length; i++){\n        var paren_depth = 0;\n\
    \        var paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == '('){\n                paren_count++;\n\
    \                if(paren_count > paren_depth){\n                    paren_depth\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == ')'){\n                paren_count--;\n            }\n        }\n       \
    \ if(paren_depth > max_depth){\n            max_depth = paren_depth;\n       \
    \ }\n    }\n    return max_depth;\n}\n", "    var paren_arr = paren_string.split('\
    \ ');\n    var max_depth = 0;\n    for(var i = 0; i < paren_arr.length; i++){\n\
    \        var depth = 0;\n        for(var j = 0; j < paren_arr[i].length; j++){\n\
    \            if(paren_arr[i][j] == '('){\n                depth++;\n         \
    \   }\n            else if(paren_arr[i][j] == ')'){\n                depth--;\n\
    \            }\n        }\n        if(depth > max_depth){\n            max_depth\
    \ = depth;\n        }\n    }\n    return max_depth;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var paren_count_array = [];\n    for(var i\
    \ = 0; i < paren_array.length; i++){\n        var paren_count = 0;\n        var\
    \ paren_string = paren_array[i];\n        for(var j = 0; j < paren_string.length;\
    \ j++){\n            if(paren_string[j] == \"(\"){\n                paren_count++;\n\
    \            }\n        }\n        paren_count_array.push(paren_count);\n    }\n\
    \    return paren_count_array;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var max_depth = 0;\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var depth = 0;\n        for(var j = 0; j < paren_array[i].length; j++){\n\
    \            if(paren_array[i][j] == '('){\n                depth++;\n       \
    \     }\n            else if(paren_array[i][j] == ')'){\n                depth--;\n\
    \            }\n        }\n        if(depth > max_depth){\n            max_depth\
    \ = depth;\n        }\n    }\n    return max_depth;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var max_levels = 0;\n    for(var i = 0; i\
    \ < paren_array.length; i++){\n        var paren_count = 0;\n        var max_paren_count\
    \ = 0;\n        for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        if(max_paren_count\
    \ > max_levels){\n            max_levels = max_paren_count;\n        }\n    }\n\
    \    return max_levels;\n}\n", "    var max_depth = 0;\n    var depth = 0;\n \
    \   for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i]\
    \ == '('){\n            depth++;\n            if(depth > max_depth){\n       \
    \         max_depth = depth;\n            }\n        }\n        else if(paren_string[i]\
    \ == ')'){\n            depth--;\n        }\n    }\n    return max_depth;\n}\n",
  "    var parens = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var\
    \ i = 0; i < parens.length; i++){\n        var paren = parens[i];\n        var\
    \ nesting = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                nesting++;\n            }\n            else if(paren[j]\
    \ == \")\"){\n                nesting--;\n            }\n        }\n        if(nesting\
    \ > max_nesting){\n            max_nesting = nesting;\n        }\n    }\n    return\
    \ max_nesting;\n}\n", "    let paren_array = paren_string.split(\" \");\n    let\
    \ max_depth = 0;\n    for(let i = 0; i < paren_array.length; i++){\n        let\
    \ current_depth = 0;\n        for(let j = 0; j < paren_array[i].length; j++){\n\
    \            if(paren_array[i][j] === \"(\"){\n                current_depth++;\n\
    \            }\n            else if(paren_array[i][j] === \")\"){\n          \
    \      current_depth--;\n            }\n        }\n        if(current_depth >\
    \ max_depth){\n            max_depth = current_depth;\n        }\n    }\n    return\
    \ max_depth;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var\
    \ max_depth = 0;\n    for(var i = 0; i < paren_array.length; i++){\n        var\
    \ depth = 0;\n        for(var j = 0; j < paren_array[i].length; j++){\n      \
    \      if(paren_array[i][j] == '('){\n                depth++;\n            }\n\
    \            else if(paren_array[i][j] == ')'){\n                depth--;\n  \
    \          }\n        }\n        if(depth > max_depth){\n            max_depth\
    \ = depth;\n        }\n    }\n    return max_depth;\n}\n", "    var paren_groups\
    \ = paren_string.split(\" \");\n    var max_depth = 0;\n    for(var i = 0; i <\
    \ paren_groups.length; i++){\n        var depth = 0;\n        var paren_group\
    \ = paren_groups[i];\n        for(var j = 0; j < paren_group.length; j++){\n \
    \           if(paren_group[j] == \"(\"){\n                depth++;\n         \
    \   }\n            else if(paren_group[j] == \")\"){\n                depth--;\n\
    \            }\n        }\n        if(depth > max_depth){\n            max_depth\
    \ = depth;\n        }\n    }\n    return max_depth;\n}\n", "    var paren_groups\
    \ = paren_string.split(\" \");\n    var max_depth = 0;\n    for(var i = 0; i <\
    \ paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n   \
    \     var depth = 0;\n        for(var j = 0; j < paren_group.length; j++){\n \
    \           if(paren_group[j] == \"(\"){\n                depth++;\n         \
    \   }\n            else if(paren_group[j] == \")\"){\n                depth--;\n\
    \            }\n        }\n        if(depth > max_depth){\n            max_depth\
    \ = depth;\n        }\n    }\n    return max_depth;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        var count = 0;\n \
    \       var max = 0;\n        for(var j = 0; j < paren_group.length; j++){\n \
    \           if(paren_group[j] == \"(\"){\n                count++;\n         \
    \       if(count > max){\n                    max = count;\n                }\n\
    \            }\n            else if(paren_group[j] == \")\"){\n              \
    \  count--;\n            }\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var result\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var paren_count\
    \ = 0;\n        var max_paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   result.push(max_paren_count);\n    }\n    return result;\n}\n", "    var paren_groups\
    \ = paren_string.split(\" \");\n    var max_nesting = 0;\n    for(var i = 0; i\
    \ < paren_groups.length; i++){\n        var curr_nesting = 0;\n        var curr_paren_group\
    \ = paren_groups[i];\n        for(var j = 0; j < curr_paren_group.length; j++){\n\
    \            if(curr_paren_group[j] == \"(\"){\n                curr_nesting++;\n\
    \            }\n            else if(curr_paren_group[j] == \")\"){\n         \
    \       curr_nesting--;\n            }\n        }\n        if(curr_nesting > max_nesting){\n\
    \            max_nesting = curr_nesting;\n        }\n    }\n    return max_nesting;\n\
    }\n", "    let paren_array = paren_string.split(' ');\n    let max_depth = 0;\n\
    \    let current_depth = 0;\n    for(let i = 0; i < paren_array.length; i++){\n\
    \        for(let j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ === '('){\n                current_depth++;\n            }\n            else\
    \ if(paren_array[i][j] === ')'){\n                current_depth--;\n         \
    \   }\n            if(current_depth > max_depth){\n                max_depth =\
    \ current_depth;\n            }\n        }\n        console.log(max_depth);\n\
    \        max_depth = 0;\n        current_depth = 0;\n    }\n}\n", "  var paren_array\
    \ = paren_string.split(\" \");\n  var max_nesting = 0;\n  for(var i = 0; i < paren_array.length;\
    \ i++){\n    var paren_count = 0;\n    var max_paren_count = 0;\n    for(var j\
    \ = 0; j < paren_array[i].length; j++){\n      if(paren_array[i][j] == \"(\"){\n\
    \        paren_count++;\n        if(paren_count > max_paren_count){\n        \
    \  max_paren_count = paren_count;\n        }\n      }\n      else if(paren_array[i][j]\
    \ == \")\"){\n        paren_count--;\n      }\n    }\n    if(max_paren_count >\
    \ max_nesting){\n      max_nesting = max_paren_count;\n    }\n  }\n  return max_nesting;\n\
    }\n", "    var paren_groups = paren_string.split(\" \");\n    var max_nesting\
    \ = 0;\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group\
    \ = paren_groups[i];\n        var current_nesting = 0;\n        var max_nesting_for_group\
    \ = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j]\
    \ == \"(\"){\n                current_nesting++;\n                if(current_nesting\
    \ > max_nesting_for_group){\n                    max_nesting_for_group = current_nesting;\n\
    \                }\n            }\n            else if(paren_group[j] == \")\"\
    ){\n                current_nesting--;\n            }\n        }\n        if(max_nesting_for_group\
    \ > max_nesting){\n            max_nesting = max_nesting_for_group;\n        }\n\
    \    }\n    return max_nesting;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var max_depth = 0;\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_depth = 0;\n        var paren_count = 0;\n        for(var j\
    \ = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] == \"\
    (\"){\n                paren_count++;\n                if(paren_count > paren_depth){\n\
    \                    paren_depth = paren_count;\n                }\n         \
    \   }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        if(paren_depth > max_depth){\n            max_depth\
    \ = paren_depth;\n        }\n    }\n    return max_depth;\n}\n", "    var max_depth\
    \ = 0;\n    var current_depth = 0;\n    for(var i = 0; i < paren_string.length;\
    \ i++){\n        if(paren_string[i] == '('){\n            current_depth++;\n \
    \           if(current_depth > max_depth){\n                max_depth = current_depth;\n\
    \            }\n        }\n        else if(paren_string[i] == ')'){\n        \
    \    current_depth--;\n        }\n    }\n    return max_depth;\n}\n", "    var\
    \ paren_array = paren_string.split(' ');\n    var max_depth = 0;\n    for(var\
    \ i = 0; i < paren_array.length; i++){\n        var depth = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ '('){\n                depth++;\n            }\n            else if(paren_array[i][j]\
    \ == ')'){\n                depth--;\n            }\n        }\n        if(depth\
    \ > max_depth){\n            max_depth = depth;\n        }\n    }\n    return\
    \ max_depth;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var\
    \ result = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var\
    \ paren_count = 0;\n        var max_paren_count = 0;\n        for(var j = 0; j\
    \ < paren_array[i].length; j++){\n            if(paren_array[i][j] == \"(\"){\n\
    \                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var max_nesting\
    \ = 0;\n    for(var i = 0; i < paren_array.length; i++){\n        var paren_group\
    \ = paren_array[i];\n        var current_nesting = 0;\n        var max_nesting_for_group\
    \ = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j]\
    \ == \"(\"){\n                current_nesting++;\n                if(current_nesting\
    \ > max_nesting_for_group){\n                    max_nesting_for_group = current_nesting;\n\
    \                }\n            }\n            else if(paren_group[j] == \")\"\
    ){\n                current_nesting--;\n            }\n        }\n        if(max_nesting_for_group\
    \ > max_nesting){\n            max_nesting = max_nesting_for_group;\n        }\n\
    \    }\n    return max_nesting;\n}\n", "    var max_depth = 0;\n    var depth\
    \ = 0;\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i]\
    \ == '('){\n            depth++;\n            if(depth > max_depth){\n       \
    \         max_depth = depth;\n            }\n        }\n        else if(paren_string[i]\
    \ == ')'){\n            depth--;\n        }\n    }\n    return max_depth;\n}\n",
  "    var paren_array = paren_string.split(\" \");\n    var max_nesting = 0;\n  \
    \  for(var i = 0; i < paren_array.length; i++){\n        var current_paren = paren_array[i];\n\
    \        var current_nesting = 0;\n        for(var j = 0; j < current_paren.length;\
    \ j++){\n            if(current_paren[j] == \"(\"){\n                current_nesting++;\n\
    \            }\n            else if(current_paren[j] == \")\"){\n            \
    \    current_nesting--;\n            }\n        }\n        if(current_nesting\
    \ > max_nesting){\n            max_nesting = current_nesting;\n        }\n   \
    \ }\n    return max_nesting;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var max_depth = 0;\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var curr_depth = 0;\n        var curr_paren = paren_array[i];\n     \
    \   for(var j = 0; j < curr_paren.length; j++){\n            if(curr_paren[j]\
    \ == \"(\"){\n                curr_depth++;\n            }\n            else if(curr_paren[j]\
    \ == \")\"){\n                curr_depth--;\n            }\n        }\n      \
    \  if(curr_depth > max_depth){\n            max_depth = curr_depth;\n        }\n\
    \    }\n    return max_depth;\n}\n", "    //TODO: Implement this function\n  \
    \  var paren_array = paren_string.split(\" \");\n    var result = [];\n    for\
    \ (var i = 0; i < paren_array.length; i++) {\n        var paren = paren_array[i];\n\
    \        var count = 0;\n        var max = 0;\n        for (var j = 0; j < paren.length;\
    \ j++) {\n            if (paren[j] == \"(\") {\n                count++;\n   \
    \             if (count > max) {\n                    max = count;\n         \
    \       }\n            } else if (paren[j] == \")\") {\n                count--;\n\
    \            }\n        }\n        result.push(max);\n    }\n    return result;\n\
    }\n", "    var paren_array = paren_string.split(\" \");\n    var paren_levels\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var paren_level\
    \ = 0;\n        var paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > paren_level){\n                    paren_level\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   paren_levels.push(paren_level);\n    }\n    return paren_levels;\n}\n", " \
    \   let paren_arr = paren_string.split(\" \");\n    let max_depth = 0;\n    for(let\
    \ i = 0; i < paren_arr.length; i++){\n        let depth = 0;\n        for(let\
    \ j = 0; j < paren_arr[i].length; j++){\n            if(paren_arr[i][j] === \"\
    (\"){\n                depth++;\n            }\n            else if(paren_arr[i][j]\
    \ === \")\"){\n                depth--;\n            }\n        }\n        if(depth\
    \ > max_depth){\n            max_depth = depth;\n        }\n    }\n    return\
    \ max_depth;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var\
    \ max_depth = 0;\n    for(var i = 0; i < paren_array.length; i++){\n        var\
    \ paren_depth = 0;\n        var paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > paren_depth){\n                    paren_depth\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   if(paren_depth > max_depth){\n            max_depth = paren_depth;\n     \
    \   }\n    }\n    return max_depth;\n}\n", "    let paren_array = paren_string.split(\"\
    \ \");\n    let paren_levels = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let paren_level = 0;\n        let current_paren = paren_array[i];\n\
    \        for(let j = 0; j < current_paren.length; j++){\n            if(current_paren[j]\
    \ === \"(\"){\n                paren_level++;\n            }\n        }\n    \
    \    paren_levels.push(paren_level);\n    }\n    return paren_levels;\n}\n", " \
    \   var paren_array = paren_string.split(\" \");\n    var max_depth = 0;\n   \
    \ var current_depth = 0;\n    for(var i = 0; i < paren_array.length; i++){\n \
    \       for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                current_depth++;\n            }\n            else\
    \ if(paren_array[i][j] == \")\"){\n                current_depth--;\n        \
    \    }\n            if(current_depth > max_depth){\n                max_depth\
    \ = current_depth;\n            }\n        }\n        current_depth = 0;\n   \
    \ }\n    return max_depth;\n}\n", "  var paren_array = paren_string.split(' ');\n\
    \  var max_depth = 0;\n  for(var i = 0; i < paren_array.length; i++){\n    var\
    \ depth = 0;\n    for(var j = 0; j < paren_array[i].length; j++){\n      if(paren_array[i][j]\
    \ == '('){\n        depth++;\n      }\n      else if(paren_array[i][j] == ')'){\n\
    \        depth--;\n      }\n    }\n    if(depth > max_depth){\n      max_depth\
    \ = depth;\n    }\n  }\n  return max_depth;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var max_depth = 0;\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var current_depth = 0;\n        var current_paren = paren_array[i];\n\
    \        for(var j = 0; j < current_paren.length; j++){\n            if(current_paren[j]\
    \ == \"(\"){\n                current_depth++;\n            }\n            else\
    \ if(current_paren[j] == \")\"){\n                current_depth--;\n         \
    \   }\n        }\n        if(current_depth > max_depth){\n            max_depth\
    \ = current_depth;\n        }\n    }\n    return max_depth;\n}\n", "    let paren_arr\
    \ = paren_string.split(\" \");\n    let result = [];\n    for(let i = 0; i < paren_arr.length;\
    \ i++){\n        let count = 0;\n        let max = 0;\n        for(let j = 0;\
    \ j < paren_arr[i].length; j++){\n            if(paren_arr[i][j] === \"(\"){\n\
    \                count++;\n                if(count > max){\n                \
    \    max = count;\n                }\n            }\n            else if(paren_arr[i][j]\
    \ === \")\"){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var current_nesting = 0;\n        var current_paren = paren_array[i];\n\
    \        for(var j = 0; j < current_paren.length; j++){\n            if(current_paren[j]\
    \ == \"(\"){\n                current_nesting++;\n            }\n            else\
    \ if(current_paren[j] == \")\"){\n                current_nesting--;\n       \
    \     }\n        }\n        if(current_nesting > max_nesting){\n            max_nesting\
    \ = current_nesting;\n        }\n    }\n    return max_nesting;\n}\n", "  var\
    \ paren_array = paren_string.split(\" \");\n  var max_depth = 0;\n  for(var i\
    \ = 0; i < paren_array.length; i++){\n    var depth = 0;\n    var paren_group\
    \ = paren_array[i];\n    for(var j = 0; j < paren_group.length; j++){\n      if(paren_group[j]\
    \ == '('){\n        depth++;\n      }\n      else if(paren_group[j] == ')'){\n\
    \        depth--;\n      }\n    }\n    if(depth > max_depth){\n      max_depth\
    \ = depth;\n    }\n  }\n  return max_depth;\n}\n", "    var paren_array = paren_string.split('\
    \ ');\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_group = paren_array[i];\n        var paren_count = 0;\n   \
    \     var max_paren_count = 0;\n        for(var j = 0; j < paren_group.length;\
    \ j++){\n            if(paren_group[j] == '('){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_group[j]\
    \ == ')'){\n                paren_count--;\n            }\n        }\n       \
    \ result.push(max_paren_count);\n    }\n    return result;\n}\n", "    let paren_array\
    \ = paren_string.split(\" \");\n    let max_depth = 0;\n    let current_depth\
    \ = 0;\n    let max_depth_array = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        current_depth = 0;\n        for(let j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] === \"(\"){\n                current_depth++;\n\
    \            }\n            else if(paren_array[i][j] === \")\"){\n          \
    \      current_depth--;\n            }\n        }\n        max_depth_array.push(current_depth);\n\
    \    }\n    return max_depth_array;\n}\n", "    var parens = paren_string.split('\
    \ ');\n    var max_nesting = 0;\n    for(var i = 0; i < parens.length; i++){\n\
    \        var paren = parens[i];\n        var curr_nesting = 0;\n        var max_curr_nesting\
    \ = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == '('){\n                curr_nesting++;\n                if(curr_nesting >\
    \ max_curr_nesting){\n                    max_curr_nesting = curr_nesting;\n \
    \               }\n            }\n            else if(paren[j] == ')'){\n    \
    \            curr_nesting--;\n            }\n        }\n        if(max_curr_nesting\
    \ > max_nesting){\n            max_nesting = max_curr_nesting;\n        }\n  \
    \  }\n    return max_nesting;\n}\n", "    var paren_groups = paren_string.split(\"\
    \ \");\n    var max_nesting = 0;\n    for(var i = 0; i < paren_groups.length;\
    \ i++){\n        var curr_nesting = 0;\n        var curr_paren_group = paren_groups[i];\n\
    \        for(var j = 0; j < curr_paren_group.length; j++){\n            if(curr_paren_group[j]\
    \ == \"(\"){\n                curr_nesting++;\n            }\n            else\
    \ if(curr_paren_group[j] == \")\"){\n                curr_nesting--;\n       \
    \     }\n        }\n        if(curr_nesting > max_nesting){\n            max_nesting\
    \ = curr_nesting;\n        }\n    }\n    return max_nesting;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var max_depth = 0;\n    for(var i = 0; i <\
    \ paren_array.length; i++){\n        var depth = 0;\n        for(var j = 0; j\
    \ < paren_array[i].length; j++){\n            if(paren_array[i][j] == '('){\n\
    \                depth++;\n            }\n            else if(paren_array[i][j]\
    \ == ')'){\n                depth--;\n            }\n        }\n        if(depth\
    \ > max_depth){\n            max_depth = depth;\n        }\n    }\n    return\
    \ max_depth;\n}\n", "    var max_level = 0;\n    var curr_level = 0;\n    for(var\
    \ i = 0; i < paren_string.length; i++){\n        if(paren_string[i] == '('){\n\
    \            curr_level++;\n            if(curr_level > max_level){\n        \
    \        max_level = curr_level;\n            }\n        }\n        else if(paren_string[i]\
    \ == ')'){\n            curr_level--;\n        }\n    }\n    return max_level;\n\
    }\n", "    let max_depth = 0;\n    let current_depth = 0;\n    for(let i = 0;\
    \ i < paren_string.length; i++){\n        if(paren_string[i] === '('){\n     \
    \       current_depth++;\n            if(current_depth > max_depth){\n       \
    \         max_depth = current_depth;\n            }\n        }\n        else if(paren_string[i]\
    \ === ')'){\n            current_depth--;\n        }\n    }\n    return max_depth;\n\
    }\n", "    let paren_groups = paren_string.split(' ');\n    let max_depth = 0;\n\
    \    for(let i = 0; i < paren_groups.length; i++){\n        let paren_group =\
    \ paren_groups[i];\n        let depth = 0;\n        for(let j = 0; j < paren_group.length;\
    \ j++){\n            let char = paren_group[j];\n            if(char === '('){\n\
    \                depth++;\n            }\n            else if(char === ')'){\n\
    \                depth--;\n            }\n        }\n        if(depth > max_depth){\n\
    \            max_depth = depth;\n        }\n    }\n    return max_depth;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
