name: HumanEval_115_max_fill
language: js
prompt: "//You are given a rectangular grid of wells. Each row represents a single\
  \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
  \ has a corresponding bucket that can be used to extract water from it, \n// and\
  \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
  \ the wells.\n// Output the number of times you need to lower the buckets.\n// Example\
  \ 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have the same\
  \ length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n//\
  \ * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1,\
  \ 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1,\
  \ 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0,\
  \ 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n\
  \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
completions: ["    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n   \
    \         if(grid[i][j] == 1){\n                fill++;\n            }\n     \
    \   }\n        if(fill > max_fill){\n            max_fill = fill;\n        }\n\
    \    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                fill++;\n        \
    \    }\n        }\n        if(fill > max_fill){\n            max_fill = fill;\n\
    \        }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        let row_fill = 0;\n        for(let j\
    \ = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n        \
    \        row_fill++;\n            }\n        }\n        max_fill = Math.max(max_fill,\
    \ row_fill);\n    }\n    return Math.ceil(max_fill / capacity);\n}\n", "    let\
    \ max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j\
    \ = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n        \
    \        max_fill += capacity;\n            }\n        }\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n         \
    \   if(grid[i][j] == 1){\n                fill++;\n            }\n        }\n\
    \        if(fill > max_fill){\n            max_fill = fill;\n        }\n    }\n\
    \    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                fill++;\n            }\n \
    \       }\n        if(fill > max_fill){\n            max_fill = fill;\n      \
    \  }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i =\
    \ 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] === 1){\n                fill++;\n\
    \            }\n        }\n        if(fill > max_fill){\n            max_fill\
    \ = fill;\n        }\n    }\n    return max_fill;\n}\n", "    let max_fill = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n       \
    \         fill++;\n            }\n        }\n        if(fill > max_fill){\n  \
    \          max_fill = fill;\n        }\n    }\n    return max_fill;\n}", "   \
    \ let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let row_fill\
    \ = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                row_fill++;\n            }\n        }\n        if(row_fill\
    \ > max_fill){\n            max_fill = row_fill;\n        }\n    }\n    return\
    \ max_fill;\n}\n", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                fill++;\n            }\n \
    \       }\n        if(fill > max_fill){\n            max_fill = fill;\n      \
    \  }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i =\
    \ 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] == 1){\n                fill++;\n\
    \            }\n        }\n        if(fill > max_fill){\n            max_fill\
    \ = fill;\n        }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n       \
    \         fill++;\n            }\n        }\n        if(fill > max_fill){\n  \
    \          max_fill = fill;\n        }\n    }\n    return max_fill;\n}", "   \
    \ let max = 0;\n    for(let i = 0; i < grid.length; i++){\n        let row = grid[i];\n\
    \        let sum = 0;\n        for(let j = 0; j < row.length; j++){\n        \
    \    sum += row[j];\n        }\n        if(sum > max){\n            max = sum;\n\
    \        }\n    }\n    return Math.ceil(max / capacity);\n}\n", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n   \
    \     for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n\
    \                fill++;\n            }\n        }\n        if(fill > max_fill){\n\
    \            max_fill = fill;\n        }\n    }\n    return max_fill;\n}", " \
    \   let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let\
    \ fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ == 1){\n                fill++;\n            }\n        }\n        if(fill >\
    \ max_fill){\n            max_fill = fill;\n        }\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n         \
    \   if(grid[i][j] == 1){\n                fill++;\n            }\n        }\n\
    \        if(fill > max_fill){\n            max_fill = fill;\n        }\n    }\n\
    \    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] == 1){\n                fill++;\n            }\n  \
    \      }\n        if(fill > max_fill){\n            max_fill = fill;\n       \
    \ }\n    }\n    return max_fill;\n}", "    let count = 0;\n    for(let i = 0;\
    \ i < grid.length; i++){\n        let sum = 0;\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            sum += grid[i][j];\n        }\n        count += Math.ceil(sum\
    \ / capacity);\n    }\n    return count;\n}", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0;\
    \ j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n              \
    \  fill++;\n            }\n        }\n        if(fill > max_fill){\n         \
    \   max_fill = fill;\n        }\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n   \
    \     for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                fill++;\n            }\n        }\n        if(fill > max_fill){\n\
    \            max_fill = fill;\n        }\n    }\n    return max_fill;\n}", " \
    \   let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let\
    \ row_fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n          \
    \  if(grid[i][j] === 1){\n                row_fill++;\n            }\n       \
    \ }\n        if(row_fill > max_fill){\n            max_fill = row_fill;\n    \
    \    }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i\
    \ = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j\
    \ < grid[i].length; j++){\n            if(grid[i][j] == 1){\n                fill++;\n\
    \            }\n        }\n        if(fill > max_fill){\n            max_fill\
    \ = fill;\n        }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n       \
    \         fill++;\n            }\n        }\n        if(fill > max_fill){\n  \
    \          max_fill = fill;\n        }\n    }\n    return max_fill;\n}", "   \
    \ let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill\
    \ = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                fill++;\n            }\n        }\n        if(fill\
    \ > max_fill){\n            max_fill = fill;\n        }\n    }\n    return max_fill;\n\
    }", "    let max = 0;\n    for(let i = 0; i < grid.length; i++){\n        let\
    \ count = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ == 1){\n                count++;\n            }\n        }\n        if(count\
    \ > max){\n            max = count;\n        }\n    }\n    return max * capacity;\n\
    }", "    let max = 0;\n    for(let i = 0; i < grid.length; i++){\n        let\
    \ sum = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            sum\
    \ += grid[i][j];\n        }\n        max = Math.max(max, sum);\n    }\n    return\
    \ Math.ceil(max / capacity);\n}\n", "    let result = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        let row = grid[i];\n        let row_sum = row.reduce((acc,\
    \ curr) => acc + curr, 0);\n        let row_fill = Math.ceil(row_sum / capacity);\n\
    \        result += row_fill;\n    }\n    return result;\n}\n", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n   \
    \     for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                fill++;\n            }\n        }\n        if(fill > max_fill){\n\
    \            max_fill = fill;\n        }\n    }\n    return max_fill;\n}", " \
    \   let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let\
    \ fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ == 1){\n                fill++;\n            }\n        }\n        if(fill >\
    \ max_fill){\n            max_fill = fill;\n        }\n    }\n    return max_fill;\n\
    }\n", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n    \
    \    let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n       \
    \     if(grid[i][j] === 1){\n                fill++;\n            }\n        }\n\
    \        if(fill > max_fill){\n            max_fill = fill;\n        }\n    }\n\
    \    return max_fill;\n}\n", "    let fill_count = 0;\n    let row_count = grid.length;\n\
    \    let col_count = grid[0].length;\n    let row_index = 0;\n    let col_index\
    \ = 0;\n    let row_sum = 0;\n    let col_sum = 0;\n    let row_max = 0;\n   \
    \ let col_max = 0;\n    let row_max_index = 0;\n    let col_max_index = 0;\n \
    \   let row_max_sum = 0;\n    let col_max_sum = 0;\n    let row_max_count = 0;\n\
    \    let col_max_count = 0;\n    let row_max_count_index = 0;\n    let col_max_count_index\
    \ = 0;\n    let row_max_count_sum = 0;\n    let col_max_count_sum = 0;\n    let\
    \ row_max_count_max = 0;\n    let col_max_count_max = 0;\n    let row_max_count_max_index\
    \ = 0;\n    let col_max_count_max_index = 0;\n    let row_max_count_max_sum =\
    \ 0;\n    let col_max_count_max_sum = 0;\n    let row_max_count_max_count = 0;\n\
    \    let col_max_count_max_count = 0;\n    let row_max_count_max_count_index =\
    \ 0;\n    let col_max_count_max_count_index = 0;\n    let row_max_count_max_count_sum\
    \ = 0;\n    let col_max_count_max_count_sum = 0;\n    let row_max_count_max_count_max\
    \ = 0;\n    let col_max_count_max_count_max = 0;\n    let row_max_count_max_count_max_index\
    \ = 0;\n    let col_max_count_max_count_max_index = 0;\n    let row_max_count_max_count_max_sum\
    \ = 0;\n    let col_max_count_max_count_max_sum = 0;\n    let row_max_count_max_count_",
  "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill\
    \ = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                fill++;\n            }\n        }\n        if(fill\
    \ > max_fill){\n            max_fill = fill;\n        }\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n         \
    \   if(grid[i][j] == 1){\n                fill++;\n            }\n        }\n\
    \        if(fill > max_fill){\n            max_fill = fill;\n        }\n    }\n\
    \    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] == 1){\n                fill++;\n            }\n  \
    \      }\n        if(fill > max_fill){\n            max_fill = fill;\n       \
    \ }\n    }\n    return max_fill;\n}", "    let n = grid.length;\n    let m = grid[0].length;\n\
    \    let max_fill = 0;\n    for(let i = 0; i < n; i++){\n        let fill = 0;\n\
    \        for(let j = 0; j < m; j++){\n            fill += grid[i][j];\n      \
    \  }\n        max_fill = Math.max(max_fill, fill);\n    }\n    return Math.ceil(max_fill\
    \ / capacity);\n}\n", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                fill++;\n            }\n \
    \       }\n        if(fill > max_fill){\n            max_fill = fill;\n      \
    \  }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i =\
    \ 0; i < grid.length; i++){\n        let current_fill = 0;\n        for(let j\
    \ = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n        \
    \        current_fill++;\n            }\n        }\n        if(current_fill >\
    \ max_fill){\n            max_fill = current_fill;\n        }\n    }\n    return\
    \ max_fill;\n}\n", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                fill++;\n            }\n \
    \       }\n        if(fill > max_fill){\n            max_fill = fill;\n      \
    \  }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i =\
    \ 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] === 1){\n                fill++;\n\
    \            }\n        }\n        if(fill > max_fill){\n            max_fill\
    \ = fill;\n        }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          fill++;\n            }\n        }\n        if(fill > max_fill){\n \
    \           max_fill = fill;\n        }\n    }\n    return max_fill;\n}", "  \
    \  let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill\
    \ = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ == 1){\n                fill++;\n            }\n        }\n        if(fill >\
    \ max_fill){\n            max_fill = fill;\n        }\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n         \
    \   if(grid[i][j] === 1){\n                fill++;\n            }\n        }\n\
    \        if(fill > max_fill){\n            max_fill = fill;\n        }\n    }\n\
    \    return max_fill;\n}", "    let fill_count = 0;\n    let max_fill = 0;\n \
    \   for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] == 1){\n                fill_count++;\n   \
    \         }\n        }\n        if(fill_count > max_fill){\n            max_fill\
    \ = fill_count;\n        }\n        fill_count = 0;\n    }\n    return max_fill;\n\
    }\n", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n    \
    \    let row_fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n   \
    \         if(grid[i][j] === 1){\n                row_fill++;\n            }\n\
    \        }\n        max_fill = Math.max(max_fill, row_fill);\n    }\n    return\
    \ max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n   \
    \         if(grid[i][j] == 1){\n                fill++;\n            }\n     \
    \   }\n        if(fill > max_fill){\n            max_fill = fill;\n        }\n\
    \    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                fill++;\n        \
    \    }\n        }\n        if(fill > max_fill){\n            max_fill = fill;\n\
    \        }\n    }\n    return max_fill;\n}\n", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0;\
    \ j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n             \
    \   fill++;\n            }\n        }\n        if(fill > max_fill){\n        \
    \    max_fill = fill;\n        }\n    }\n    return max_fill;\n}\n", "    var\
    \ max_fill = 0;\n    for(var i = 0; i < grid.length; i++){\n        var row =\
    \ grid[i];\n        var row_fill = 0;\n        for(var j = 0; j < row.length;\
    \ j++){\n            if(row[j] == 1){\n                row_fill++;\n         \
    \   }\n        }\n        if(row_fill > max_fill){\n            max_fill = row_fill;\n\
    \        }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0;\
    \ j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n              \
    \  fill++;\n            }\n        }\n        if(fill > max_fill){\n         \
    \   max_fill = fill;\n        }\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n   \
    \     for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n\
    \                fill++;\n            }\n        }\n        if(fill > max_fill){\n\
    \            max_fill = fill;\n        }\n    }\n    return max_fill;\n}", " \
    \   let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let\
    \ fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ == 1){\n                fill++;\n            }\n        }\n        if(fill >\
    \ max_fill){\n            max_fill = fill;\n        }\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n         \
    \   if(grid[i][j] == 1){\n                fill++;\n            }\n        }\n\
    \        if(fill > max_fill){\n            max_fill = fill;\n        }\n    }\n\
    \    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] == 1){\n                fill++;\n            }\n  \
    \      }\n        if(fill > max_fill){\n            max_fill = fill;\n       \
    \ }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i =\
    \ 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                max_fill++;\n            }\n\
    \        }\n    }\n    return Math.ceil(max_fill / capacity);\n}\n", "    let\
    \ max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill =\
    \ 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ == 1){\n                fill++;\n            }\n        }\n        if(fill >\
    \ max_fill){\n            max_fill = fill;\n        }\n    }\n    return max_fill;\n\
    }\n", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n    \
    \    let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n       \
    \     if(grid[i][j] === 1){\n                fill++;\n            }\n        }\n\
    \        if(fill > max_fill){\n            max_fill = fill;\n        }\n    }\n\
    \    return max_fill;\n}", "    let max = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let count = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                count++;\n            }\n\
    \        }\n        if(count > max){\n            max = count;\n        }\n  \
    \  }\n    return Math.ceil(max / capacity);\n}\n", "    let max_fill = 0;\n  \
    \  for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          fill++;\n            }\n        }\n        if(fill > max_fill){\n \
    \           max_fill = fill;\n        }\n    }\n    return max_fill;\n}", "  \
    \  let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill\
    \ = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ == 1){\n                fill++;\n            }\n        }\n        if(fill >\
    \ max_fill){\n            max_fill = fill;\n        }\n    }\n    return max_fill;\n\
    }\n", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n    \
    \    let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n       \
    \     if(grid[i][j] === 1){\n                fill++;\n            }\n        }\n\
    \        if(fill > max_fill){\n            max_fill = fill;\n        }\n    }\n\
    \    return max_fill;\n}\n", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                fill++;\n            }\n \
    \       }\n        if(fill > max_fill){\n            max_fill = fill;\n      \
    \  }\n    }\n    return Math.ceil(max_fill / capacity);\n}\n", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let row_fill = 0;\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            row_fill += grid[i][j];\n\
    \        }\n        max_fill = Math.max(max_fill, row_fill);\n    }\n    return\
    \ max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n   \
    \         if(grid[i][j] == 1){\n                fill++;\n            }\n     \
    \   }\n        if(fill > max_fill){\n            max_fill = fill;\n        }\n\
    \    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                fill++;\n        \
    \    }\n        }\n        if(fill > max_fill){\n            max_fill = fill;\n\
    \        }\n    }\n    return max_fill;\n}", "    let max = 0;\n    for(let i\
    \ = 0; i < grid.length; i++){\n        let sum = 0;\n        for(let j = 0; j\
    \ < grid[i].length; j++){\n            sum += grid[i][j];\n        }\n       \
    \ if(sum > max){\n            max = sum;\n        }\n    }\n    return Math.ceil(max\
    \ / capacity);\n}\n\nlet grid = [\n    [1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1],\n\
    \    [1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1]\n];\nlet capacity\
    \ = 3;", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n \
    \       let curr_fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] == 1){\n                curr_fill++;\n            }\n\
    \        }\n        if(curr_fill > max_fill){\n            max_fill = curr_fill;\n\
    \        }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0;\
    \ j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n              \
    \  fill++;\n            }\n        }\n        if(fill > max_fill){\n         \
    \   max_fill = fill;\n        }\n    }\n    return max_fill;\n}\n", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n   \
    \     for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                fill++;\n            }\n        }\n        if(fill > max_fill){\n\
    \            max_fill = fill;\n        }\n    }\n    return max_fill;\n}", " \
    \   let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let\
    \ fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ == 1){\n                fill++;\n            }\n        }\n        if(fill >\
    \ max_fill){\n            max_fill = fill;\n        }\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n         \
    \   if(grid[i][j] === 1){\n                fill++;\n            }\n        }\n\
    \        if(fill > max_fill){\n            max_fill = fill;\n        }\n    }\n\
    \    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                fill++;\n            }\n \
    \       }\n        if(fill > max_fill){\n            max_fill = fill;\n      \
    \  }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i =\
    \ 0; i < grid.length; i++){\n        let sum = 0;\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            sum += grid[i][j];\n        }\n        if(sum\
    \ > max_fill){\n            max_fill = sum;\n        }\n    }\n    return Math.ceil(max_fill\
    \ / capacity);\n}\n\nlet grid = [[1,1,1,1,1,1,1,1,1,1],\n            [1,1,1,1,1,1,1,1,1,1],\n\
    \            [1,1,1,1,1,1,1,1,1,1],\n            [1,1,1,1,1,1,1,1,1,1],\n    \
    \        [1,1,1,1,1,1,1,1,1,1],\n            [1,1,1,1,1,1,1,1,1,1],\n        \
    \    [1,1,1,1,1,1,1,1,1,1],\n            [1,1,1,1,1,1,1,1,1,1],\n            [1,1,1,1,1,1,1,1,1,1],\n\
    \            [1,1,1,1,1,1,1,1,1,1]];\nlet capacity = 1;", "    var max_fill =\
    \ 0;\n    for(var i = 0; i < grid.length; i++){\n        var sum = 0;\n      \
    \  for(var j = 0; j < grid[i].length; j++){\n            sum += grid[i][j];\n\
    \        }\n        max_fill = Math.max(max_fill, sum);\n    }\n    return Math.ceil(max_fill\
    \ / capacity);\n}\n", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                fill++;\n            }\n \
    \       }\n        if(fill > max_fill){\n            max_fill = fill;\n      \
    \  }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i =\
    \ 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] == 1){\n                fill++;\n\
    \            }\n        }\n        if(fill > max_fill){\n            max_fill\
    \ = fill;\n        }\n    }\n    return max_fill;\n}", "    let max = 0;\n   \
    \ for(let i = 0; i < grid.length; i++){\n        let sum = 0;\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            sum += grid[i][j];\n        }\n\
    \        max = Math.max(max, sum);\n    }\n    return Math.ceil(max / capacity);\n\
    }\n", "    // your code here\n}\n", "    let max_fill = 0;\n    for(let i = 0;\
    \ i < grid.length; i++){\n        let curr_fill = 0;\n        for(let j = 0; j\
    \ < grid[i].length; j++){\n            curr_fill += grid[i][j];\n        }\n \
    \       max_fill = Math.max(max_fill, curr_fill);\n    }\n    return max_fill;\n\
    }\n", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n    \
    \    let row_fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n   \
    \         if(grid[i][j] == 1){\n                row_fill++;\n            }\n \
    \       }\n        if(row_fill > max_fill){\n            max_fill = row_fill;\n\
    \        }\n    }\n    return max_fill;\n}", "    let max = 0;\n    for(let i\
    \ = 0; i < grid.length; i++){\n        let current = 0;\n        for(let j = 0;\
    \ j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n              \
    \  current++;\n            }\n        }\n        if(current > max){\n        \
    \    max = current;\n        }\n    }\n    return max;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n   \
    \     for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n\
    \                fill++;\n            }\n        }\n        if(fill > max_fill){\n\
    \            max_fill = fill;\n        }\n    }\n    return max_fill;\n}", " \
    \   let max = 0;\n    for(let i = 0; i < grid.length; i++){\n        let sum =\
    \ 0;\n        for(let j = 0; j < grid[i].length; j++){\n            sum += grid[i][j];\n\
    \        }\n        if(sum > max){\n            max = sum;\n        }\n    }\n\
    \    return Math.ceil(max / capacity);\n}\n", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0;\
    \ j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n              \
    \  fill++;\n            }\n        }\n        if(fill > max_fill){\n         \
    \   max_fill = fill;\n        }\n    }\n    return max_fill;\n}\n", "    let count\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let row = grid[i];\n\
    \        let sum = 0;\n        for(let j = 0; j < row.length; j++){\n        \
    \    sum += row[j];\n        }\n        count += Math.ceil(sum / capacity);\n\
    \    }\n    return count;\n}\n", "    let max_fill = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                fill++;\n        \
    \    }\n        }\n        if(fill > max_fill){\n            max_fill = fill;\n\
    \        }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0;\
    \ j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n             \
    \   fill++;\n            }\n        }\n        if(fill > max_fill){\n        \
    \    max_fill = fill;\n        }\n    }\n    return max_fill;\n}", "    let count\
    \ = 0;\n    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n   \
    \     for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n\
    \                count++;\n            }\n        }\n        if(count > max_fill){\n\
    \            max_fill = count;\n        }\n        count = 0;\n    }\n    return\
    \ max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n   \
    \         if(grid[i][j] === 1){\n                fill++;\n            }\n    \
    \    }\n        if(fill > max_fill){\n            max_fill = fill;\n        }\n\
    \    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] == 1){\n                fill++;\n         \
    \   }\n        }\n        if(fill > max_fill){\n            max_fill = fill;\n\
    \        }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        let current_fill = 0;\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          current_fill++;\n            }\n        }\n        if(current_fill\
    \ > max_fill){\n            max_fill = current_fill;\n        }\n    }\n    return\
    \ Math.ceil(max_fill / capacity);\n}\n", "    let max_fill = 0;\n    for(let i\
    \ = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j\
    \ < grid[i].length; j++){\n            if(grid[i][j] === 1){\n               \
    \ fill++;\n            }\n        }\n        if(fill > max_fill){\n          \
    \  max_fill = fill;\n        }\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n   \
    \     for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n\
    \                fill++;\n            }\n        }\n        if(fill > max_fill){\n\
    \            max_fill = fill;\n        }\n    }\n    return max_fill;\n}", " \
    \   let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let\
    \ row_fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n          \
    \  if(grid[i][j] == 1){\n                row_fill++;\n            }\n        }\n\
    \        if(row_fill > max_fill){\n            max_fill = row_fill;\n        }\n\
    \    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                fill++;\n        \
    \    }\n        }\n        if(fill > max_fill){\n            max_fill = fill;\n\
    \        }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0;\
    \ j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n             \
    \   fill++;\n            }\n        }\n        if(fill > max_fill){\n        \
    \    max_fill = fill;\n        }\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n   \
    \     for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n\
    \                fill++;\n            }\n        }\n        if(fill > max_fill){\n\
    \            max_fill = fill;\n        }\n    }\n    return max_fill;\n}", " \
    \   let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let\
    \ fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                fill++;\n            }\n        }\n        if(fill\
    \ > max_fill){\n            max_fill = fill;\n        }\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n         \
    \   if(grid[i][j] == 1){\n                fill++;\n            }\n        }\n\
    \        if(fill > max_fill){\n            max_fill = fill;\n        }\n    }\n\
    \    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                fill++;\n            }\n \
    \       }\n        if(fill > max_fill){\n            max_fill = fill;\n      \
    \  }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i =\
    \ 0; i < grid.length; i++){\n        max_fill = Math.max(max_fill, grid[i].reduce((a,\
    \ b) => a + b, 0));\n    }\n    return max_fill;\n}\n", "    let max = 0;\n  \
    \  for(let i = 0; i < grid.length; i++){\n        let count = 0;\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          count++;\n            }\n        }\n        if(count > max){\n    \
    \        max = count;\n        }\n    }\n    return max;\n}\n", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n   \
    \     for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                fill++;\n            }\n        }\n        if(fill > max_fill){\n\
    \            max_fill = fill;\n        }\n    }\n    return max_fill;\n}", " \
    \   let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let\
    \ fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ == 1){\n                fill++;\n            }\n        }\n        if(fill >\
    \ max_fill){\n            max_fill = fill;\n        }\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n         \
    \   if(grid[i][j] == 1){\n                fill++;\n            }\n        }\n\
    \        if(fill > max_fill){\n            max_fill = fill;\n        }\n    }\n\
    \    return Math.ceil(max_fill / capacity);\n}\n", "    let max_fill = 0;\n  \
    \  for(let i = 0; i < grid.length; i++){\n        let row_fill = 0;\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          row_fill++;\n            }\n        }\n        max_fill = Math.max(max_fill,\
    \ row_fill);\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        let row_fill = 0;\n        for(let j\
    \ = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n         \
    \       row_fill++;\n            }\n        }\n        max_fill = Math.max(max_fill,\
    \ row_fill);\n    }\n    return max_fill;\n}\n", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0;\
    \ j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n             \
    \   fill++;\n            }\n        }\n        if(fill > max_fill){\n        \
    \    max_fill = fill;\n        }\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let row_fill = 0;\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ==\
    \ 1){\n                row_fill += 1;\n            }\n        }\n        if(row_fill\
    \ > max_fill){\n            max_fill = row_fill;\n        }\n    }\n    return\
    \ max_fill;\n}\n", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                fill++;\n            }\n \
    \       }\n        if(fill > max_fill){\n            max_fill = fill;\n      \
    \  }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i =\
    \ 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] === 1){\n                fill++;\n\
    \            }\n        }\n        if(fill > max_fill){\n            max_fill\
    \ = fill;\n        }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        let row_fill = 0;\n      \
    \  for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n\
    \                row_fill++;\n            }\n        }\n        max_fill = Math.max(max_fill,\
    \ row_fill);\n    }\n    return Math.ceil(max_fill / capacity);\n}\n", "    let\
    \ max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill =\
    \ 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                fill++;\n            }\n        }\n        if(fill\
    \ > max_fill){\n            max_fill = fill;\n        }\n    }\n    return max_fill;\n\
    }", "    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        let\
    \ row = grid[i];\n        let sum = 0;\n        for(let j = 0; j < row.length;\
    \ j++){\n            sum += row[j];\n        }\n        if(sum > capacity){\n\
    \            count += Math.ceil(sum / capacity);\n        }\n    }\n    return\
    \ count;\n}\n", "    let max = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        let count = 0;\n        for(let j = 0; j < grid[i].length; j++){\n  \
    \          if(grid[i][j] === 1){\n                count++;\n            }\n  \
    \      }\n        if(count > max){\n            max = count;\n        }\n    }\n\
    \    return max * capacity;\n}", "    let max_fill = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] == 1){\n                fill++;\n         \
    \   }\n        }\n        if(fill > max_fill){\n            max_fill = fill;\n\
    \        }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        let count = 0;\n        for(let j = 0;\
    \ j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n             \
    \   count++;\n            }\n        }\n        if(count > max_fill){\n      \
    \      max_fill = count;\n        }\n    }\n    return max_fill;\n}", "    let\
    \ max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill =\
    \ 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ == 1){\n                fill++;\n            }\n        }\n        if(fill >\
    \ max_fill){\n            max_fill = fill;\n        }\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n         \
    \   if(grid[i][j] === 1){\n                fill++;\n            }\n        }\n\
    \        if(fill > max_fill){\n            max_fill = fill;\n        }\n    }\n\
    \    return max_fill;\n}\n", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] == 1){\n                fill++;\n            }\n  \
    \      }\n        if(fill > max_fill){\n            max_fill = fill;\n       \
    \ }\n    }\n    return max_fill;\n}\n", "    let max_fill = 0;\n    for(let i\
    \ = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j\
    \ < grid[i].length; j++){\n            if(grid[i][j] === 1){\n               \
    \ fill++;\n            }\n        }\n        if(fill > max_fill){\n          \
    \  max_fill = fill;\n        }\n    }\n    return max_fill;\n}\n", "    let count\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let row = grid[i];\n\
    \        let sum = row.reduce((a,b) => a + b);\n        if(sum > capacity){\n\
    \            count += Math.ceil(sum / capacity);\n        }\n    }\n    return\
    \ count;\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        let row = grid[i];\n        let sum = 0;\n        for(let j = 0; j <\
    \ row.length; j++){\n            sum += row[j];\n        }\n        if(sum > capacity){\n\
    \            count += Math.ceil(sum / capacity);\n        }\n    }\n    return\
    \ count;\n}\n", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n   \
    \         if(grid[i][j] === 1){\n                fill++;\n            }\n    \
    \    }\n        if(fill > max_fill){\n            max_fill = fill;\n        }\n\
    \    }\n    return max_fill;\n}\n", "    let buckets = new Array(grid[0].length).fill(0);\n\
    \    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          buckets[j]++;\n            }\n        }\n        count += fill_buckets(buckets,\
    \ capacity);\n    }\n    return count;\n}\n", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0;\
    \ j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n             \
    \   fill++;\n            }\n        }\n        if(fill > max_fill){\n        \
    \    max_fill = fill;\n        }\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n   \
    \     for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                fill++;\n            }\n        }\n        if(fill > max_fill){\n\
    \            max_fill = fill;\n        }\n    }\n    return max_fill;\n}", " \
    \   let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let\
    \ fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ == 1){\n                fill++;\n            }\n        }\n        if(fill >\
    \ max_fill){\n            max_fill = fill;\n        }\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n         \
    \   if(grid[i][j] === 1){\n                fill++;\n            }\n        }\n\
    \        if(fill > max_fill){\n            max_fill = fill;\n        }\n    }\n\
    \    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                fill++;\n            }\n \
    \       }\n        if(fill > max_fill){\n            max_fill = fill;\n      \
    \  }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i =\
    \ 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] === 1){\n                fill++;\n\
    \            }\n        }\n        if(fill > max_fill){\n            max_fill\
    \ = fill;\n        }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          fill++;\n            }\n        }\n        if(fill > max_fill){\n \
    \           max_fill = fill;\n        }\n    }\n    return max_fill;\n}", "  \
    \  let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill\
    \ = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ == 1){\n                fill++;\n            }\n        }\n        if(fill >\
    \ max_fill){\n            max_fill = fill;\n        }\n    }\n    return max_fill;\n\
    }\n", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n    \
    \    let current_fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                current_fill++;\n        \
    \    }\n        }\n        if(current_fill > max_fill){\n            max_fill\
    \ = current_fill;\n        }\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n   \
    \     for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                fill++;\n            }\n        }\n        if(fill > max_fill){\n\
    \            max_fill = fill;\n        }\n    }\n    return max_fill;\n}", " \
    \   let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let\
    \ fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ == 1){\n                fill++;\n            }\n        }\n        if(fill >\
    \ max_fill){\n            max_fill = fill;\n        }\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  let current_fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n \
    \           if(grid[i][j] === 1){\n                current_fill++;\n         \
    \   }\n        }\n        if(current_fill > max_fill){\n            max_fill =\
    \ current_fill;\n        }\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let count = 0;\n  \
    \      for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                count++;\n            }\n        }\n        if(count >\
    \ max_fill){\n            max_fill = count;\n        }\n    }\n    return max_fill;\n\
    }\n", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n    \
    \    let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n       \
    \     if(grid[i][j] == 1){\n                fill += 1;\n            }\n      \
    \  }\n        if(fill > max_fill){\n            max_fill = fill;\n        }\n\
    \    }\n    return max_fill;\n}\n", "    let max_fill = 0;\n    for(let i = 0;\
    \ i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] == 1){\n                fill++;\n         \
    \   }\n        }\n        if(fill > max_fill){\n            max_fill = fill;\n\
    \        }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0;\
    \ j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n              \
    \  fill++;\n            }\n        }\n        if(fill > max_fill){\n         \
    \   max_fill = fill;\n        }\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n   \
    \     for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n\
    \                fill++;\n            }\n        }\n        if(fill > max_fill){\n\
    \            max_fill = fill;\n        }\n    }\n    return max_fill;\n}\n", " \
    \   let max = 0;\n    for(let i = 0; i < grid.length; i++){\n        let sum =\
    \ 0;\n        for(let j = 0; j < grid[i].length; j++){\n            sum += grid[i][j];\n\
    \        }\n        max = Math.max(max, sum);\n    }\n    return Math.ceil(max\
    \ / capacity);\n}\n", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] == 1){\n                fill++;\n            }\n  \
    \      }\n        if(fill > max_fill){\n            max_fill = fill;\n       \
    \ }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i =\
    \ 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] === 1){\n                fill++;\n\
    \            }\n        }\n        if(fill > max_fill){\n            max_fill\
    \ = fill;\n        }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          fill++;\n            }\n        }\n        if(fill > max_fill){\n \
    \           max_fill = fill;\n        }\n    }\n    return max_fill;\n}", "  \
    \  let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill\
    \ = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                fill++;\n            }\n        }\n        if(fill\
    \ > max_fill){\n            max_fill = fill;\n        }\n    }\n    return max_fill;\n\
    }\n", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n    \
    \    let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n       \
    \     if(grid[i][j] == 1){\n                fill++;\n            }\n        }\n\
    \        if(fill > max_fill){\n            max_fill = fill;\n        }\n    }\n\
    \    return max_fill;\n}", "    let max = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let sum = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            sum += grid[i][j];\n        }\n        if(sum > max){\n         \
    \   max = sum;\n        }\n    }\n    return Math.ceil(max / capacity);\n}\n\n\
    let grid = [\n    [1,1,1,1,1],\n    [1,1,1,1,1],\n    [1,1,1,1,1],\n    [1,1,1,1,1],\n\
    \    [1,1,1,1,1]\n];\nlet capacity = 3;", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        let current_fill = 0;\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          current_fill++;\n            }\n        }\n        if(current_fill\
    \ > max_fill){\n            max_fill = current_fill;\n        }\n    }\n    return\
    \ max_fill;\n}\n", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] == 1){\n                fill++;\n            }\n  \
    \      }\n        if(fill > max_fill){\n            max_fill = fill;\n       \
    \ }\n    }\n    return max_fill;\n}\n", "    // your code here\n}\n", "    let\
    \ max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        max_fill =\
    \ Math.max(max_fill, grid[i].reduce((a, b) => a + b));\n    }\n    return max_fill;\n\
    }\n", "    var max_fill = 0;\n    for(var i = 0; i < grid.length; i++){\n    \
    \    var row = grid[i];\n        var row_fill = 0;\n        for(var j = 0; j <\
    \ row.length; j++){\n            if(row[j] == 1){\n                row_fill++;\n\
    \            }\n        }\n        max_fill = Math.max(max_fill, row_fill);\n\
    \    }\n    return Math.ceil(max_fill / capacity);\n}\n\nvar grid = [\n    [1,1,1,1,1,1,1,1,1,1],\n\
    \    [1,1,1,1,1,1,1,1,1,1],\n    [1,1,1,1,1,1,1,1,1,1],\n    [1,1,1,1,1,1,1,1,1,1],\n\
    \    [1,1,1,1,1,1,1,1,1,1],\n    [1,1,1,1,1,1,1,1,1,1],\n    [1,1,1,1,1,1,1,1,1,1],\n\
    \    [1,1,1,1,1,1,1,1,1,1],\n    [1,1,1,1,1,1,1,1,1,1],\n    [1,1,1,1,1,1,1,1,1,1]\n\
    ];", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n     \
    \   let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n        \
    \    if(grid[i][j] == 1){\n                fill++;\n            }\n        }\n\
    \        if(fill > max_fill){\n            max_fill = fill;\n        }\n    }\n\
    \    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                fill++;\n            }\n \
    \       }\n        if(fill > max_fill){\n            max_fill = fill;\n      \
    \  }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i =\
    \ 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] === 1){\n                fill++;\n\
    \            }\n        }\n        if(fill > max_fill){\n            max_fill\
    \ = fill;\n        }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n       \
    \         fill++;\n            }\n        }\n        if(fill > max_fill){\n  \
    \          max_fill = fill;\n        }\n    }\n    return max_fill;\n}", "   \
    \ let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill\
    \ = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ == 1){\n                fill++;\n            }\n        }\n        if(fill >\
    \ max_fill){\n            max_fill = fill;\n        }\n    }\n    return max_fill;\n\
    }\n", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n    \
    \    let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n       \
    \     if(grid[i][j] === 1){\n                fill++;\n            }\n        }\n\
    \        if(fill > max_fill){\n            max_fill = fill;\n        }\n    }\n\
    \    return max_fill;\n}\n", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        max_fill = Math.max(max_fill, grid[i].reduce((a,b) => a + b));\n\
    \    }\n    return Math.ceil(max_fill / capacity);\n}\n", "    let max_fill =\
    \ 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n     \
    \   for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n\
    \                fill++;\n            }\n        }\n        if(fill > max_fill){\n\
    \            max_fill = fill;\n        }\n    }\n    return max_fill;\n}", " \
    \   let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let\
    \ curr_fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n         \
    \   if(grid[i][j] === 1){\n                curr_fill++;\n            }\n     \
    \   }\n        if(curr_fill > max_fill){\n            max_fill = curr_fill;\n\
    \        }\n    }\n    return Math.ceil(max_fill / capacity);\n}", "  let max_fill\
    \ = 0;\n  for(let i = 0; i < grid.length; i++){\n    let fill = 0;\n    for(let\
    \ j = 0; j < grid[i].length; j++){\n      if(grid[i][j] == 1){\n        fill++;\n\
    \      }\n    }\n    if(fill > max_fill){\n      max_fill = fill;\n    }\n  }\n\
    \  return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let row_fill = 0;\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            row_fill += grid[i][j];\n        }\n        max_fill = Math.max(max_fill,\
    \ row_fill);\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        let row_fill = 0;\n        for(let j\
    \ = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n         \
    \       row_fill++;\n            }\n        }\n        max_fill = Math.max(max_fill,\
    \ row_fill);\n    }\n    return max_fill;\n}", "    let max = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                max = Math.max(max, j);\n\
    \            }\n        }\n    }\n    return max;\n}\n", "    let max_fill = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          fill++;\n            }\n        }\n        if(fill > max_fill){\n \
    \           max_fill = fill;\n        }\n    }\n    return max_fill;\n}\n", " \
    \   let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let\
    \ fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ == 1){\n                fill++;\n            }\n        }\n        if(fill >\
    \ max_fill){\n            max_fill = fill;\n        }\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    let max_fill_index = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                fill++;\n        \
    \    }\n        }\n        if(fill > max_fill){\n            max_fill = fill;\n\
    \            max_fill_index = i;\n        }\n    }\n    return max_fill_index;\n\
    }\n", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n    \
    \    let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n       \
    \     if(grid[i][j] === 1){\n                fill++;\n            }\n        }\n\
    \        if(fill > max_fill){\n            max_fill = fill;\n        }\n    }\n\
    \    return max_fill;\n}\n", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] == 1){\n                fill++;\n            }\n  \
    \      }\n        if(fill > max_fill){\n            max_fill = fill;\n       \
    \ }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i =\
    \ 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] === 1){\n                fill++;\n\
    \            }\n        }\n        if(fill > max_fill){\n            max_fill\
    \ = fill;\n        }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          fill += 1;\n            }\n        }\n        if(fill > max_fill){\n\
    \            max_fill = fill;\n        }\n    }\n    return max_fill;\n}\n", " \
    \   let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let\
    \ fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                fill++;\n            }\n        }\n        if(fill\
    \ > max_fill){\n            max_fill = fill;\n        }\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n         \
    \   if(grid[i][j] == 1){\n                fill++;\n            }\n        }\n\
    \        if(fill > max_fill){\n            max_fill = fill;\n        }\n    }\n\
    \    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] == 1){\n                fill++;\n            }\n  \
    \      }\n        if(fill > max_fill){\n            max_fill = fill;\n       \
    \ }\n    }\n    return max_fill;\n}", "    let max = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        let sum = 0;\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            sum += grid[i][j];\n        }\n        if(sum > max){\n \
    \           max = sum;\n        }\n    }\n    return Math.ceil(max / capacity);\n\
    }\n", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n    \
    \    let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n       \
    \     if(grid[i][j] === 1){\n                fill++;\n            }\n        }\n\
    \        if(fill > max_fill){\n            max_fill = fill;\n        }\n    }\n\
    \    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                fill++;\n            }\n \
    \       }\n        if(fill > max_fill){\n            max_fill = fill;\n      \
    \  }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i =\
    \ 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] === 1){\n                fill++;\n\
    \            }\n        }\n        if(fill > max_fill){\n            max_fill\
    \ = fill;\n        }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        let row_fill = 0;\n      \
    \  for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n\
    \                row_fill++;\n            }\n        }\n        max_fill = Math.max(max_fill,\
    \ row_fill);\n    }\n    return max_fill;\n}\n", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0;\
    \ j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n             \
    \   fill++;\n            }\n        }\n        if(fill > max_fill){\n        \
    \    max_fill = fill;\n        }\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n   \
    \     for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                fill++;\n            }\n        }\n        if(fill > max_fill){\n\
    \            max_fill = fill;\n        }\n    }\n    return max_fill;\n}", " \
    \   let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let\
    \ well = grid[i];\n        let fill = 0;\n        for(let j = 0; j < well.length;\
    \ j++){\n            if(well[j] == 1){\n                fill++;\n            }\n\
    \        }\n        if(fill > max_fill){\n            max_fill = fill;\n     \
    \   }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i\
    \ = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j\
    \ < grid[i].length; j++){\n            if(grid[i][j] === 1){\n               \
    \ fill++;\n            }\n        }\n        if(fill > max_fill){\n          \
    \  max_fill = fill;\n        }\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n   \
    \     for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n\
    \                fill++;\n            }\n        }\n        if(fill > max_fill){\n\
    \            max_fill = fill;\n        }\n    }\n    return max_fill;\n}", " \
    \   let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let\
    \ fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ == 1){\n                fill++;\n            }\n        }\n        if(fill >\
    \ max_fill){\n            max_fill = fill;\n        }\n    }\n    return max_fill;\n\
    }\n", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n    \
    \    let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n       \
    \     if(grid[i][j] == 1){\n                fill++;\n            }\n        }\n\
    \        if(fill > max_fill){\n            max_fill = fill;\n        }\n    }\n\
    \    return max_fill;\n}\n", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                fill++;\n            }\n \
    \       }\n        if(fill > max_fill){\n            max_fill = fill;\n      \
    \  }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i =\
    \ 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] == 1){\n                fill++;\n\
    \            }\n        }\n        if(fill > max_fill){\n            max_fill\
    \ = fill;\n        }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n       \
    \         fill++;\n            }\n        }\n        if(fill > max_fill){\n  \
    \          max_fill = fill;\n        }\n    }\n    return max_fill;\n}", "   \
    \ let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let row_fill\
    \ = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                row_fill++;\n            }\n        }\n        max_fill\
    \ = Math.max(max_fill, row_fill);\n    }\n    return Math.ceil(max_fill / capacity);\n\
    }\n", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n    \
    \    let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n       \
    \     fill += grid[i][j];\n        }\n        max_fill = Math.max(max_fill, fill);\n\
    \    }\n    return Math.ceil(max_fill / capacity);\n}\n\nlet grid = [\n    [1,1,1,1,1],\n\
    \    [1,1,1,1,1],\n    [1,1,1,1,1],\n    [1,1,1,1,1],\n    [1,1,1,1,1]\n];\nlet\
    \ capacity = 1;", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                fill++;\n            }\n \
    \       }\n        if(fill > max_fill){\n            max_fill = fill;\n      \
    \  }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i =\
    \ 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] === 1){\n                fill++;\n\
    \            }\n        }\n        if(fill > max_fill){\n            max_fill\
    \ = fill;\n        }\n    }\n    return Math.ceil(max_fill / capacity);\n}\n",
  "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill\
    \ = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                fill++;\n            }\n        }\n        if(fill\
    \ > max_fill){\n            max_fill = fill;\n        }\n    }\n    return max_fill;\n\
    }", "    let count = 0;\n    let max = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                count++;\n            }\n        }\n        if(count\
    \ > max){\n            max = count;\n        }\n        count = 0;\n    }\n  \
    \  return max;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                fill++;\n            }\n \
    \       }\n        if(fill > max_fill){\n            max_fill = fill;\n      \
    \  }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i =\
    \ 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] == 1){\n                fill++;\n\
    \            }\n        }\n        if(fill > max_fill){\n            max_fill\
    \ = fill;\n        }\n    }\n    return max_fill;\n}", "    let max = 0;\n   \
    \ for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          fill++;\n            }\n        }\n        if(fill > max){\n      \
    \      max = fill;\n        }\n    }\n    return max * capacity;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
