name: HumanEval_159_eat
language: js
prompt: "//You're a hungry rabbit, and you already have eaten a certain number of\
  \ carrots,\n// but now you need to eat more carrots to complete the day's meals.\n\
  // you should return an array of [ total number of eaten carrots after your meals,\n\
  // the number of carrots left after your meals ]\n// if there are not enough remaining\
  \ carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n\
  // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
  // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
  \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
  // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
  // Have fun :)\nfunction eat(number, need, remaining){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = eat;\n  assert.deepEqual(candidate(5, 6, 10),[11, 4]);\n  assert.deepEqual(candidate(4,\
  \ 8, 9),[12, 1]);\n  assert.deepEqual(candidate(1, 10, 10),[11, 0]);\n  assert.deepEqual(candidate(2,\
  \ 11, 5),[7, 0]);\n  assert.deepEqual(candidate(4, 5, 7),[9, 2]);\n  assert.deepEqual(candidate(4,\
  \ 5, 1),[5, 0]);\n}\n\ntest();"
completions: ["    let total = number + remaining;\n    if(total >= need){\n     \
    \   return [need, total - need];\n    }\n    else{\n        return [total, 0];\n\
    \    }\n}\n", "  if (number + remaining < need) {\n    return [number + remaining,\
    \ 0];\n  } else {\n    return [need, number + remaining - need];\n  }\n}\n", " \
    \ let total = number + remaining;\n  if (total >= need) {\n    return [need, total\
    \ - need];\n  } else {\n    return [total, 0];\n  }\n}\n", "  return [Math.min(number\
    \ + remaining, need), Math.max(0, remaining - need + number)]\n}\n", "  if (number\
    \ + remaining >= need) {\n    return [need, number + remaining - need];\n  } else\
    \ {\n    return [number + remaining, 0];\n  }\n}\n", "    let total = number +\
    \ remaining;\n    let left = total - need;\n    if (left < 0) {\n        return\
    \ [total, 0];\n    } else {\n        return [total, left];\n    }\n}\n", "  let\
    \ eaten = number + need;\n  let left = remaining - need;\n  if (left < 0) {\n\
    \    eaten = eaten + left;\n    left = 0;\n  }\n  return [eaten, left];\n}", " \
    \ if(number + remaining < need){\n    return [number + remaining, 0];\n  }\n \
    \ return [need, number + remaining - need];\n}", "    if(number + remaining <\
    \ need){\n        return [number + remaining, 0];\n    } else {\n        return\
    \ [need, number + remaining - need];\n    }\n}\n", "  if(remaining >= need){\n\
    \    return [number + need, remaining - need];\n  } else {\n    return [number\
    \ + remaining, 0];\n  }\n}\n", "  let total = number + remaining;\n  let left\
    \ = total - need;\n  return left < 0 ? [total, 0] : [total, left];\n}\n", "  let\
    \ eaten = number + remaining;\n  let left = 0;\n  if (eaten >= need) {\n    left\
    \ = eaten - need;\n    eaten = need;\n  }\n  return [eaten, left];\n}\n", "  var\
    \ total = number + remaining;\n  var left = total - need;\n  if (left < 0) {\n\
    \    return [total, 0];\n  } else {\n    return [need, left];\n  }\n}\n", "  let\
    \ total = number + remaining;\n  let eaten = total - need;\n  let left = eaten\
    \ - remaining;\n  if (eaten > remaining) {\n    return [remaining, left];\n  }\
    \ else {\n    return [eaten, 0];\n  }\n}\n", "  let total = number + remaining;\n\
    \  if (total >= need) {\n    return [need, total - need];\n  } else {\n    return\
    \ [total, 0];\n  }\n}\n", "  let total = number + remaining;\n  let left = total\
    \ - need;\n  if (left < 0) {\n    return [total, 0];\n  } else {\n    return [total,\
    \ left];\n  }\n}\n", "    let total = number + remaining;\n    if(total >= need){\n\
    \        return [need, total - need];\n    } else {\n        return [total, 0];\n\
    \    }\n}\n", "  if (number + remaining >= need) {\n    return [need, number +\
    \ remaining - need];\n  } else {\n    return [number + remaining, 0];\n  }\n}\n",
  "  let total = number + remaining;\n  let left = total - need;\n  if (left < 0)\
    \ {\n    return [total, 0];\n  } else {\n    return [total, left];\n  }\n}\n",
  "    let total = number + remaining;\n    if(total < need){\n        return [total,\
    \ 0];\n    } else {\n        return [need, total - need];\n    }\n}\n", "  let\
    \ total = number + remaining;\n  if (total >= need) {\n    return [need, total\
    \ - need];\n  } else {\n    return [total, 0];\n  }\n}\n", "  let total = number\
    \ + remaining;\n  let left = total - need;\n  if (left >= 0) {\n    return [need,\
    \ left];\n  } else {\n    return [total, 0];\n  }\n}\n", "  if(remaining >= need){\n\
    \    return [number + need, remaining - need];\n  } else {\n    return [number\
    \ + remaining, 0];\n  }\n}\n", "  let eaten = number + need;\n  let left = remaining\
    \ - need;\n  if (left < 0) {\n    return [eaten, 0];\n  } else {\n    return [eaten,\
    \ left];\n  }\n}\n", "  let total = number + remaining;\n  let left = total -\
    \ need;\n  if (left < 0) {\n    return [total, 0];\n  } else {\n    return [total,\
    \ left];\n  }\n}\n", "    let total = number + remaining;\n    let eaten = total\
    \ - need;\n    let left = total - eaten;\n    return [eaten, left];\n}\n", " \
    \ if (number + remaining >= need) {\n    return [need, number + remaining - need];\n\
    \  } else {\n    return [number + remaining, 0];\n  }\n}\n", "    let total =\
    \ number + remaining;\n    if(total >= need){\n        return [need, total - need];\n\
    \    }\n    else{\n        return [total, 0];\n    }\n}\n", "  if(number + remaining\
    \ >= need){\n    return [need, number + remaining - need];\n  } else {\n    return\
    \ [number + remaining, 0];\n  }\n}\n", "  if (number + remaining >= need) {\n\
    \    return [need, number + remaining - need];\n  } else {\n    return [number\
    \ + remaining, 0];\n  }\n}\n", "  if(number + remaining >= need){\n    return\
    \ [need, number + remaining - need];\n  } else {\n    return [number + remaining,\
    \ 0];\n  }\n}\n", "  let eaten = number + need;\n  let left = remaining - need;\n\
    \  if (left < 0) {\n    left = 0;\n  }\n  return [eaten, left];\n}\n", "  let\
    \ total = number + remaining;\n  let left = total - need;\n  if (left < 0) {\n\
    \    return [total, 0];\n  } else {\n    return [total, left];\n  }\n}\n", " \
    \ let total = number + remaining;\n  let left = total - need;\n  if (left < 0)\
    \ {\n    return [total, 0];\n  } else {\n    return [total, left];\n  }\n}\n",
  "    let eaten = number + need;\n    let left = remaining - need;\n    if (left\
    \ < 0) {\n        return [eaten, 0];\n    } else {\n        return [eaten, left];\n\
    \    }\n}\n", "    let total = number + remaining;\n    let left = total - need;\n\
    \    if (left >= 0) {\n        return [need, left];\n    } else {\n        return\
    \ [total, 0];\n    }\n}\n", "  let eaten = number + need;\n  let left = remaining\
    \ - need;\n  if (left < 0) {\n    eaten = eaten + left;\n    left = 0;\n  }\n\
    \  return [eaten, left];\n}", "  let total = number + remaining;\n  let left =\
    \ total - need;\n  if (left < 0) {\n    return [total, 0];\n  } else {\n    return\
    \ [total, left];\n  }\n}", "  let total = number + remaining;\n  if (total >=\
    \ need) {\n    return [need, total - need];\n  } else {\n    return [total, 0];\n\
    \  }\n}\n", "  if (number + remaining < need) {\n    return [number + remaining,\
    \ 0];\n  } else {\n    return [need, number + remaining - need];\n  }\n}\n", " \
    \ if(number + remaining < need){\n    return [number + remaining, 0];\n  }\n \
    \ return [need, number + remaining - need];\n}\n", "  let total = number + remaining;\n\
    \  let left = total - need;\n  if (left >= 0) {\n    return [need, left];\n  }\
    \ else {\n    return [total, 0];\n  }\n}", "    let total = number + remaining;\n\
    \    let left = total - need;\n    if (left < 0) {\n        return [total, 0];\n\
    \    } else {\n        return [total, left];\n    }\n}\n", "  if(number + remaining\
    \ < need){\n    return [number + remaining, 0];\n  }\n  return [need, number +\
    \ remaining - need];\n}\n", "  let total = number + remaining;\n  if (total >=\
    \ need) {\n    return [need, total - need];\n  } else {\n    return [total, 0];\n\
    \  }\n}\n", "  let total = number + remaining;\n  let eaten = total - need;\n\
    \  let left = need - total;\n  if (left > 0) {\n    return [total, 0];\n  } else\
    \ {\n    return [eaten, Math.abs(left)];\n  }\n}\n", "  let total = number + remaining;\n\
    \  let left = total - need;\n  if (left >= 0) {\n    return [need, left];\n  }\
    \ else {\n    return [total, 0];\n  }\n}\n", "  if(number + remaining < need){\n\
    \    return [number + remaining, 0];\n  }\n  return [need, number + remaining\
    \ - need];\n}", "  if(number + remaining < need){\n    return [number + remaining,\
    \ 0];\n  } else {\n    return [need, number + remaining - need];\n  }\n}\n", " \
    \ let eaten = number + need;\n  let left = remaining - need;\n  if (left < 0)\
    \ {\n    return [eaten, 0];\n  } else {\n    return [eaten, left];\n  }\n}\n",
  "  if (number + remaining >= need) {\n    return [need, number + remaining - need];\n\
    \  } else {\n    return [number + remaining, 0];\n  }\n}\n", "  let total = number\
    \ + remaining;\n  let left = total - need;\n  if (left > 0) {\n    return [need,\
    \ left];\n  } else {\n    return [total, 0];\n  }\n}", "  if (number + remaining\
    \ >= need) {\n    return [need, number + remaining - need];\n  } else {\n    return\
    \ [number + remaining, 0];\n  }\n}\n", "  if (number + remaining >= need) {\n\
    \    return [need, number + remaining - need];\n  } else {\n    return [number\
    \ + remaining, 0];\n  }\n}\n", "  let total = number + remaining;\n  let left\
    \ = total - need;\n  if (left > 0) {\n    return [need, left];\n  } else {\n \
    \   return [total, 0];\n  }\n}\n", "  if (number + remaining >= need) {\n    return\
    \ [need, number + remaining - need];\n  } else {\n    return [number + remaining,\
    \ 0];\n  }\n}\n", "  let eaten = number + need;\n  let left = remaining - need;\n\
    \  if (left < 0) {\n    left = 0;\n  }\n  return [eaten, left];\n}", "  let eaten\
    \ = number + need;\n  if (eaten > remaining) {\n    eaten = remaining;\n  }\n\
    \  return [eaten, remaining - eaten];\n}", "  let eaten = number + need;\n  let\
    \ left = remaining - need;\n  if (left < 0) {\n    left = 0;\n  }\n  return [eaten,\
    \ left];\n}\n", "  let total = number + remaining;\n  let left = total - need;\n\
    \  if (left < 0) {\n    left = 0;\n  }\n  return [total, left];\n}\n", "    if\
    \ (number + remaining >= need) {\n        return [need, number + remaining - need];\n\
    \    } else {\n        return [number + remaining, 0];\n    }\n}\n", "  let eaten\
    \ = number + need;\n  let left = remaining - need;\n  if (left < 0) {\n    return\
    \ [eaten, 0];\n  } else {\n    return [eaten, left];\n  }\n}\n", "  if(number\
    \ + remaining < need){\n    return [number + remaining, 0];\n  } else {\n    return\
    \ [need, number + remaining - need];\n  }\n}", "  let total = number + remaining;\n\
    \  let left = total - need;\n  if (left < 0) {\n    return [total, 0];\n  } else\
    \ {\n    return [total, left];\n  }\n}\n", "  let total = number + remaining;\n\
    \  let left = total - need;\n  if (left >= 0) {\n    return [need, left];\n  }\
    \ else {\n    return [total, 0];\n  }\n}\n", "  let total = number + remaining;\n\
    \  if (total >= need) {\n    return [need, total - need];\n  } else {\n    return\
    \ [total, 0];\n  }\n}\n", "  let total = number + remaining;\n  let left = total\
    \ - need;\n  if (left < 0) {\n    return [total, 0];\n  } else {\n    return [total,\
    \ left];\n  }\n}\n", "  let total = number + remaining;\n  let left = total -\
    \ need;\n  if (left < 0) {\n    left = 0;\n  }\n  return [total, left];\n}\n",
  "  if(remaining >= need){\n    return [number + need, remaining - need];\n  }\n\
    \  else{\n    return [number + remaining, 0];\n  }\n}", "  if (number + remaining\
    \ >= need) {\n    return [need, number + remaining - need];\n  } else {\n    return\
    \ [number + remaining, 0];\n  }\n}", "  if (number + remaining >= need) {\n  \
    \  return [need, number + remaining - need];\n  } else {\n    return [number +\
    \ remaining, 0];\n  }\n}\n", "  let eaten = number + need;\n  let left = remaining\
    \ - need;\n  if (left < 0) {\n    return [eaten, 0];\n  } else {\n    return [eaten,\
    \ left];\n  }\n}\n", "  let total = number + remaining;\n  let left = total -\
    \ need;\n  if (left < 0) {\n    return [total, 0];\n  } else {\n    return [total,\
    \ left];\n  }\n}", "  if(remaining >= need){\n    return [number + need, remaining\
    \ - need];\n  } else {\n    return [number + remaining, 0];\n  }\n}\n", "  let\
    \ eaten = number + need;\n  if (eaten > remaining) {\n    return [remaining, 0];\n\
    \  } else {\n    return [eaten, remaining - eaten];\n  }\n}\n", "  let total =\
    \ number + remaining;\n  let left = total - need;\n  if (left < 0) {\n    return\
    \ [total, 0];\n  } else {\n    return [total, left];\n  }\n}\n", "  if (number\
    \ + remaining >= need) {\n    return [need, number + remaining - need];\n  } else\
    \ {\n    return [number + remaining, 0];\n  }\n}\n", "  let eaten = number + need;\n\
    \  let left = remaining - need;\n  if (left < 0) {\n    return [eaten, 0];\n \
    \ } else {\n    return [eaten, left];\n  }\n}\n", "  let total = number + remaining;\n\
    \  let left = total - need;\n  if (left < 0) {\n    return [total, 0];\n  } else\
    \ {\n    return [total, left];\n  }\n}\n", "  let total = number + remaining;\n\
    \  if (total >= need) {\n    return [need, total - need];\n  } else {\n    return\
    \ [total, 0];\n  }\n}\n", "  let total = number + remaining;\n  if (total >= need)\
    \ {\n    return [need, total - need];\n  } else {\n    return [total, 0];\n  }\n\
    }\n", "  var eaten = number + need;\n  if (eaten > remaining) {\n    return [remaining,\
    \ 0];\n  } else {\n    return [eaten, remaining - eaten];\n  }\n}\n", "  if(number\
    \ + remaining >= need){\n    return [need, number + remaining - need];\n  } else\
    \ {\n    return [number + remaining, 0];\n  }\n}\n", "  if(number + remaining\
    \ >= need){\n    return [need, number + remaining - need];\n  }\n  else{\n   \
    \ return [number + remaining, 0];\n  }\n}\n", "  if(number + remaining >= need){\n\
    \    return [need, number + remaining - need];\n  }\n  return [number + remaining,\
    \ 0];\n}", "  if(number + remaining >= need){\n    return [need, number + remaining\
    \ - need];\n  }\n  else{\n    return [number + remaining, 0];\n  }\n}\n", "  if\
    \ (number + remaining >= need) {\n    return [need, number + remaining - need];\n\
    \  } else {\n    return [number + remaining, 0];\n  }\n}\n", "  if (number + remaining\
    \ < need) {\n    return [number + remaining, 0];\n  } else {\n    return [need,\
    \ number + remaining - need];\n  }\n}\n", "  if(number + remaining >= need){\n\
    \    return [need, number + remaining - need];\n  } else {\n    return [number\
    \ + remaining, 0];\n  }\n}\n", "  if(remaining >= need){\n    return [number +\
    \ need, remaining - need];\n  }\n  return [number + remaining, 0];\n}\n", "  if(number\
    \ + remaining < need){\n    return [number + remaining, 0];\n  }\n  return [need,\
    \ number + remaining - need];\n}\n", "  let total = number + remaining;\n  let\
    \ left = total - need;\n  if (left < 0) {\n    return [total, 0];\n  } else {\n\
    \    return [total, left];\n  }\n}\n", "  if(number + remaining >= need){\n  \
    \  return [need, number + remaining - need];\n  } else {\n    return [number +\
    \ remaining, 0];\n  }\n}\n", "  let total = number + remaining;\n  let left =\
    \ total - need;\n  if (left < 0) {\n    return [total, 0];\n  } else {\n    return\
    \ [total, left];\n  }\n}", "  let total = number + remaining;\n  let left = total\
    \ - need;\n  if (left < 0) {\n    left = 0;\n  }\n  return [total, left];\n}",
  "  let total = number + remaining;\n  let left = total - need;\n  if (left < 0)\
    \ {\n    return [total, 0];\n  } else {\n    return [total, left];\n  }\n}\n",
  "  if(number + remaining >= need){\n    return [need, number + remaining - need];\n\
    \  } else {\n    return [number + remaining, 0];\n  }\n}\n", "  let total = number\
    \ + remaining;\n  let left = 0;\n  if (total >= need) {\n    left = total - need;\n\
    \    total = need;\n  }\n  return [total, left];\n}", "    let total = number\
    \ + remaining;\n    let left = 0;\n    if(total >= need){\n        left = total\
    \ - need;\n        return [need, left];\n    } else {\n        return [total,\
    \ left];\n    }\n}\n", "    let total = number + remaining;\n    if(total >= need){\n\
    \        return [need, total - need];\n    }\n    return [total, 0];\n}\n", " \
    \ if (number + remaining < need) {\n    return [number + remaining, 0];\n  } else\
    \ {\n    return [need, number + remaining - need];\n  }\n}", "  let total = number\
    \ + remaining;\n  let left = total - need;\n  if (left < 0) {\n    return [total,\
    \ 0];\n  } else {\n    return [total, left];\n  }\n}\n", "  let total = number\
    \ + remaining;\n  let left = total - need;\n  if (left < 0) {\n    return [total,\
    \ 0];\n  } else {\n    return [total, left];\n  }\n}\n", "    let carrots = number\
    \ + remaining;\n    let eaten = carrots - remaining;\n    let left = carrots -\
    \ need;\n    if (left < 0) {\n        return [carrots, 0];\n    } else {\n   \
    \     return [eaten, left];\n    }\n}\n", "  let eaten = number + need;\n  if\
    \ (eaten > remaining) {\n    eaten = remaining;\n  }\n  return [eaten, remaining\
    \ - eaten];\n}\n", "  if (number + remaining >= need) {\n    return [need, number\
    \ + remaining - need];\n  } else {\n    return [number + remaining, 0];\n  }\n\
    }\n", "  let total = number + remaining;\n  if (total >= need) {\n    return [need,\
    \ total - need];\n  } else {\n    return [total, 0];\n  }\n}\n", "  if (number\
    \ + remaining >= need) {\n    return [need, number + remaining - need];\n  } else\
    \ {\n    return [number + remaining, 0];\n  }\n}\n", "  let eaten = number + need;\n\
    \  let left = remaining - need;\n  if (left < 0) {\n    left = 0;\n  }\n  return\
    \ [eaten, left];\n}\n", "  let eaten = number + need;\n  let left = remaining\
    \ - need;\n  if (left < 0) {\n    return [eaten, 0];\n  } else {\n    return [eaten,\
    \ left];\n  }\n}", "  if(number + remaining < need){\n    return [number + remaining,\
    \ 0];\n  }\n  return [need, number + remaining - need];\n}", "  if (number + remaining\
    \ >= need) {\n    return [need, number + remaining - need];\n  } else {\n    return\
    \ [number + remaining, 0];\n  }\n}\n", "  if(number + remaining < need){\n   \
    \ return [number + remaining, 0];\n  }\n  else{\n    return [need, number + remaining\
    \ - need];\n  }\n}\n", "  let eaten = number + need;\n  let left = remaining -\
    \ need;\n  if (left < 0) {\n    return [eaten, 0];\n  } else {\n    return [eaten,\
    \ left];\n  }\n}\n", "  let total = number + remaining;\n  let left = total -\
    \ need;\n  return left >= 0 ? [need, left] : [total, 0];\n}\n", "    if(number\
    \ + remaining < need){\n        return [number + remaining, 0];\n    } else {\n\
    \        return [need, number + remaining - need];\n    }\n}\n", "  let eaten\
    \ = number + need;\n  let left = remaining - need;\n  if (left < 0) {\n    left\
    \ = 0;\n  }\n  return [eaten, left];\n}\n", "  if (number + remaining >= need)\
    \ {\n    return [need, number + remaining - need];\n  } else {\n    return [number\
    \ + remaining, 0];\n  }\n}\n", "  let total = number + remaining;\n  let left\
    \ = total - need;\n  if (left < 0) {\n    return [total, 0];\n  } else {\n   \
    \ return [total, left];\n  }\n}\n", "  if (number + remaining >= need) {\n   \
    \ return [need, number + remaining - need];\n  } else {\n    return [number +\
    \ remaining, 0];\n  }\n}\n", "  let eaten = number + need;\n  let left = remaining\
    \ - need;\n  if (left < 0) {\n    eaten = number + remaining;\n    left = 0;\n\
    \  }\n  return [eaten, left];\n}\n", "  let eaten = number + need;\n  let left\
    \ = remaining - need;\n  if (left < 0) {\n    left = 0;\n  }\n  return [eaten,\
    \ left];\n}\n", "  let total = number + remaining;\n  if (total >= need) {\n \
    \   return [need, total - need];\n  } else {\n    return [total, 0];\n  }\n}\n",
  "  let total = number + remaining;\n  let left = total - need;\n  if (left < 0)\
    \ {\n    return [total, 0];\n  } else {\n    return [total, left];\n  }\n}\n",
  "  if (number + remaining >= need) {\n    return [need, number + remaining - need];\n\
    \  } else {\n    return [number + remaining, 0];\n  }\n}\n", "  if(remaining <\
    \ need){\n    return [number + remaining, 0];\n  }\n  return [number + need, remaining\
    \ - need];\n}\n", "  if (number + remaining >= need) {\n    return [need, number\
    \ + remaining - need];\n  } else {\n    return [number + remaining, 0];\n  }\n\
    }\n", "  let total = number + remaining;\n  let left = total - need;\n  if (left\
    \ < 0) {\n    return [total, 0];\n  } else {\n    return [total, left];\n  }\n\
    }\n", "  let total = number + remaining;\n  let left = total - need;\n  if (left\
    \ < 0) {\n    return [total, 0];\n  } else {\n    return [total, left];\n  }\n\
    }\n", "    let total = number + remaining;\n    let left = total - need;\n   \
    \ if (left < 0) {\n        return [total, 0];\n    } else {\n        return [need,\
    \ left];\n    }\n}\n", "  let total = number + remaining;\n  let left = total\
    \ - need;\n  if (left >= 0) {\n    return [need, left];\n  } else {\n    return\
    \ [total, 0];\n  }\n}\n", "  let result = [];\n  if (remaining < need) {\n   \
    \ result.push(remaining + number);\n    result.push(0);\n  } else {\n    result.push(number\
    \ + need);\n    result.push(remaining - need);\n  }\n  return result;\n}\n", " \
    \ let total = number + remaining;\n  if (total >= need) {\n    return [need, total\
    \ - need];\n  } else {\n    return [total, 0];\n  }\n}\n", "  let total = number\
    \ + remaining;\n  if (total >= need) {\n    return [need, total - need];\n  }\
    \ else {\n    return [total, 0];\n  }\n}\n", "  let total = number + remaining;\n\
    \  if (total >= need) {\n    return [need, total - need];\n  } else {\n    return\
    \ [total, 0];\n  }\n}\n", "  return [number + Math.min(need, remaining), Math.max(0,\
    \ remaining - need)]\n}\n", "  let total = number + remaining;\n  let left = total\
    \ - need;\n  if (left < 0) {\n    return [total, 0];\n  } else {\n    return [total,\
    \ left];\n  }\n}\n", "  let eaten = number + need;\n  let left = remaining - need;\n\
    \  if (left < 0) {\n    left = 0;\n  }\n  return [eaten, left];\n}\n", "  let\
    \ total = number + remaining;\n  let left = total - need;\n  if (left < 0) {\n\
    \    return [total, 0];\n  } else {\n    return [total, left];\n  }\n}\n", " \
    \ let total = number + remaining;\n  let left = total - need;\n  return left <\
    \ 0 ? [total, 0] : [total, left];\n}\n", "  if(number + remaining >= need){\n\
    \    return [need, number + remaining - need];\n  }\n  else{\n    return [number\
    \ + remaining, 0];\n  }\n}\n", "  let eaten = number + need;\n  let left = remaining\
    \ - need;\n  if (left < 0) {\n    return [eaten, 0];\n  } else {\n    return [eaten,\
    \ left];\n  }\n}\n", "  let eaten = number + need;\n  let left = remaining - need;\n\
    \  if (left < 0) {\n    return [eaten, 0];\n  } else {\n    return [eaten, left];\n\
    \  }\n}\n", "  let total = number + remaining;\n  if (total >= need) {\n    return\
    \ [need, total - need];\n  } else {\n    return [total, 0];\n  }\n}\n", "  if\
    \ (number + remaining > need) {\n    return [need, number + remaining - need];\n\
    \  } else {\n    return [number + remaining, 0];\n  }\n}\n", "  let total = number\
    \ + remaining;\n  if (total >= need) {\n    return [need, total - need];\n  }\
    \ else {\n    return [total, 0];\n  }\n}\n", "  let total = number + remaining;\n\
    \  if (total >= need) {\n    return [need, total - need];\n  } else {\n    return\
    \ [total, 0];\n  }\n}\n", "  if (number + remaining < need) {\n    return [number\
    \ + remaining, 0];\n  } else {\n    return [need, number + remaining - need];\n\
    \  }\n}\n", "  let total = number + remaining;\n  if (total >= need) {\n    return\
    \ [need, total - need];\n  } else {\n    return [total, 0];\n  }\n}\n", "  let\
    \ total = number + remaining;\n  let left = total - need;\n  if (left < 0) {\n\
    \    return [total, 0];\n  } else {\n    return [total, left];\n  }\n}\n", " \
    \ let total = number + remaining;\n  if (total >= need) {\n    return [need, total\
    \ - need];\n  } else {\n    return [total, 0];\n  }\n}\n", "    let eaten = number\
    \ + need;\n    let left = remaining - need;\n    if (left < 0) {\n        return\
    \ [eaten, 0];\n    } else {\n        return [eaten, left];\n    }\n}\n", "  return\
    \ [number + Math.min(need, remaining), Math.max(0, remaining - need)]\n}", " \
    \ let eaten = number + need;\n  let left = remaining - need;\n  if (eaten > remaining)\
    \ {\n    eaten = remaining;\n    left = 0;\n  }\n  return [eaten, left];\n}\n",
  "    if(number + remaining < need){\n        return [number + remaining, 0];\n \
    \   }\n    return [need, number + remaining - need];\n}\n", "  let total = number\
    \ + remaining;\n  if (total >= need) {\n    return [need, total - need];\n  }\
    \ else {\n    return [total, 0];\n  }\n}\n", "  // your code here\n  let eaten\
    \ = number + remaining;\n  let left = 0;\n  if (eaten >= need) {\n    left = eaten\
    \ - need;\n    eaten = need;\n  }\n  return [eaten, left];\n}\n", "  let total\
    \ = number + remaining;\n  let left = total - need;\n  if (left < 0) {\n    return\
    \ [total, 0];\n  } else {\n    return [total, left];\n  }\n}", "  let eaten =\
    \ number + remaining;\n  if (eaten >= need) {\n    return [need, eaten - need];\n\
    \  } else {\n    return [eaten, 0];\n  }\n}\n", "  let total = number + remaining;\n\
    \  if (total >= need) {\n    return [need, total - need];\n  } else {\n    return\
    \ [total, 0];\n  }\n}\n", "  let total = number + remaining;\n  let left = total\
    \ - need;\n  if (left < 0) {\n    return [total, 0];\n  } else {\n    return [total,\
    \ left];\n  }\n}\n", "  if (number + remaining >= need) {\n    return [need, number\
    \ + remaining - need];\n  } else {\n    return [number + remaining, 0];\n  }\n\
    }\n", "  let eaten = number + need;\n  let left = remaining - need;\n  if (left\
    \ < 0) {\n    return [eaten, 0];\n  } else {\n    return [eaten, left];\n  }\n\
    }\n", "  let total = number + remaining;\n  let left = remaining - need;\n  if\
    \ (total < need) {\n    return [total, 0];\n  } else if (left < 0) {\n    return\
    \ [total, 0];\n  } else {\n    return [total, left];\n  }\n}\n", "  if(number\
    \ + remaining >= need){\n    return [need, number + remaining - need];\n  } else\
    \ {\n    return [number + remaining, 0];\n  }\n}\n", "    if(number + remaining\
    \ >= need){\n        return [need, number + remaining - need];\n    } else {\n\
    \        return [number + remaining, 0];\n    }\n}\n", "  let total = number +\
    \ remaining;\n  let left = total - need;\n  if (left < 0) {\n    return [total,\
    \ 0];\n  } else {\n    return [total, left];\n  }\n}\n", "  var total = number\
    \ + remaining;\n  if (total >= need) {\n    return [need, total - need];\n  }\
    \ else {\n    return [total, 0];\n  }\n}\n", "    let total = number + remaining;\n\
    \    let left = total - need;\n    if (left < 0) {\n        return [total, 0];\n\
    \    } else {\n        return [total, left];\n    }\n}\n", "  let total = number\
    \ + remaining;\n  if (total >= need) {\n    return [need, total - need];\n  }\
    \ else {\n    return [total, 0];\n  }\n}\n", "  let total = number + remaining;\n\
    \  let eaten = total - need;\n  if (eaten > 0) {\n    return [eaten, need - eaten];\n\
    \  } else {\n    return [total, 0];\n  }\n}\n", "  let total = number + remaining;\n\
    \  if (total >= need) {\n    return [need, total - need];\n  } else {\n    return\
    \ [total, 0];\n  }\n}\n", "  let total = number + remaining;\n  if (total >= need)\
    \ {\n    return [need, total - need];\n  } else {\n    return [total, 0];\n  }\n\
    }\n", "  if (number + remaining < need) {\n    return [number + remaining, 0];\n\
    \  } else {\n    return [need, number + remaining - need];\n  }\n}\n", "  if(number\
    \ + remaining >= need){\n    return [need, number + remaining - need];\n  }\n\
    \  else{\n    return [number + remaining, 0];\n  }\n}\n", "  let eaten = number\
    \ + need;\n  let left = remaining - need;\n  if (left < 0) {\n    return [eaten,\
    \ 0];\n  } else {\n    return [eaten, left];\n  }\n}\n", "  let total = number\
    \ + remaining;\n  let left = total - need;\n  if (left >= 0) {\n    return [need,\
    \ left];\n  } else {\n    return [total, 0];\n  }\n}\n", "    let total = number\
    \ + remaining;\n    let left = 0;\n    if(total >= need){\n        left = total\
    \ - need;\n        total = need;\n    }\n    return [total, left];\n}\n", "  if\
    \ (number + remaining >= need) {\n    return [need, number + remaining - need];\n\
    \  } else {\n    return [number + remaining, 0];\n  }\n}\n", "    if (number +\
    \ remaining >= need) {\n        return [need, number + remaining - need];\n  \
    \  } else {\n        return [number + remaining, 0];\n    }\n}\n", "    return\
    \ [number + need, remaining - need];\n}\n", "  let total = number + remaining;\n\
    \  let left = total - need;\n  if (left < 0) {\n    return [total, 0];\n  } else\
    \ {\n    return [total, left];\n  }\n}\n", "  if (number + remaining >= need)\
    \ {\n    return [need, number + remaining - need];\n  } else {\n    return [number\
    \ + remaining, 0];\n  }\n}\n", "  if (number + remaining >= need) {\n    return\
    \ [need, number + remaining - need];\n  } else {\n    return [number + remaining,\
    \ 0];\n  }\n}\n", "    if (number + remaining >= need) {\n        return [need,\
    \ number + remaining - need];\n    } else {\n        return [number + remaining,\
    \ 0];\n    }\n}\n", "  let eaten = number + remaining;\n  let left = 0;\n  if\
    \ (eaten >= need) {\n    left = eaten - need;\n    eaten = need;\n  }\n  return\
    \ [eaten, left];\n}", "  if(number+remaining<need){\n    return [number+remaining,0]\n\
    \  }\n  return [need,number+remaining-need]\n}\n", "    let total = number + remaining;\n\
    \    if(total >= need){\n        return [need, total - need];\n    }\n    return\
    \ [total, 0];\n}\n", "    let total = number + remaining;\n    if(total >= need){\n\
    \        return [need, total - need];\n    } else {\n        return [total, 0];\n\
    \    }\n}\n", "  if (number + remaining >= need) {\n    return [need, number +\
    \ remaining - need];\n  } else {\n    return [number + remaining, 0];\n  }\n}\n",
  "  let eaten = number + need;\n  let left = remaining - need;\n  if (left < 0) {\n\
    \    return [eaten, 0];\n  } else {\n    return [eaten, left];\n  }\n}", "  let\
    \ total = number + remaining;\n  if (total >= need) {\n    return [need, total\
    \ - need];\n  } else {\n    return [total, 0];\n  }\n}\n", "    let eaten = number\
    \ + need;\n    let left = remaining - need;\n    if (left < 0) {\n        left\
    \ = 0;\n    }\n    return [eaten, left];\n}", "    if(number + remaining < need){\n\
    \        return [number + remaining, 0];\n    }\n    else{\n        return [need,\
    \ number + remaining - need];\n    }\n}\n", "  var total = number + remaining;\n\
    \  var left = total - need;\n  if (left < 0) {\n    return [total, 0];\n  } else\
    \ {\n    return [total, left];\n  }\n}\n", "  let total = number + remaining;\n\
    \  let left = total - need;\n  if (left < 0) {\n    return [total, 0];\n  } else\
    \ {\n    return [total, left];\n  }\n}\n", "    if (number + remaining < need)\
    \ {\n        return [number + remaining, 0];\n    } else {\n        return [need,\
    \ number + remaining - need];\n    }\n}", "  if (number + remaining >= need) {\n\
    \    return [need, number + remaining - need];\n  } else {\n    return [number\
    \ + remaining, 0];\n  }\n}\n", "  if (number + remaining < need) {\n    return\
    \ [number + remaining, 0];\n  } else {\n    return [need, number + remaining -\
    \ need];\n  }\n}\n", "    let eaten = number + need;\n    let left = remaining\
    \ - need;\n    if (left < 0) {\n        eaten = eaten + left;\n        left =\
    \ 0;\n    }\n    return [eaten, left];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
