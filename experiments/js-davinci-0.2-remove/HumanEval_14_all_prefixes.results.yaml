language: js
name: HumanEval_14_all_prefixes
results:
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i+1));\n   \
    \ }\n    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0,i+1));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i+1));\n   \
    \ }\n    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0,i+1));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i+1));\n   \
    \ }\n    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i + 1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i + 1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0,i+1));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i+1));\n   \
    \ }\n    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i + 1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i + 1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i+1));\n   \
    \ }\n    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i + 1));\n \
    \   }\n    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i + 1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i+1));\n   \
    \ }\n    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i + 1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0,i+1));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0,i+1));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i + 1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0,i+1));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0,i+1));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i + 1));\n \
    \   }\n    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i + 1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i+1));\n   \
    \ }\n    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i + 1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i+1));\n   \
    \ }\n    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0,i+1));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i+1));\n   \
    \ }\n    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0,i+1));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i + 1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i+1));\n   \
    \ }\n    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i+1));\n   \
    \ }\n    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i + 1));\n \
    \   }\n    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i + 1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i+1));\n   \
    \ }\n    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i+1));\n   \
    \ }\n    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i + 1));\n \
    \   }\n    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i + 1));\n \
    \   }\n    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i + 1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i+1));\n   \
    \ }\n    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i + 1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0,i+1));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0,i+1));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i + 1));\n \
    \   }\n    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i + 1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i+1));\n   \
    \ }\n    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar output = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\toutput.push(string.substring(0, i+1));\n\t}\n\treturn output;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
