language: js
name: HumanEval_49_modp
results:
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tvar t = modp(Math.floor(n/2),\
    \ p);\n\tif(n % 2 == 0) return (t*t) % p;\n\treturn (2*t*t) % p;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var x = modp(n/2, p);\n        return (x*x) % p;\n    }\n    else{\n   \
    \     var x = modp(n-1, p);\n        return (2*x) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var t = modp(n/2, p);\n        return (2*t*t) % p;\n    }\n    else{\n \
    \       var t = modp(n-1, p);\n        return (2*t) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp8f47vw4i.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8f47vw4i.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    var res = modp(Math.floor(n/2),\
    \ p);\n    res = (res*res) % p;\n    if(n % 2 == 1) res = (res*2) % p;\n    return\
    \ res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var res = 1;\n    var a = 2;\n    while (n > 0){\n        if (n % 2 == 1){\n\
    \            res = (res * a) % p;\n        }\n        a = (a * a) % p;\n     \
    \   n = Math.floor(n / 2);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n==0) return 1;\n\tif(n%2==0){\n\t\tvar t = modp(n/2, p);\n\t\treturn (2*t)%p;\n\
    \t}\n\treturn (2*modp(n-1, p))%p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n44\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpxef2tclx.js:17:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxef2tclx.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 44,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var res = 1;\n    var a = 2;\n    while (n > 0){\n        if (n % 2 == 1){\n\
    \            res = (res * a) % p;\n        }\n        a = (a * a) % p;\n     \
    \   n = Math.floor(n / 2);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  var res = 1;\n  for(var i = 0; i < n; i++){\n    res = (res * 2) % p;\n  }\n\
    \  return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2,\
    \ p);\n\t\treturn (x*x) % p;\n\t}\n\treturn (2 * modp(n-1, p)) % p;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2,\
    \ p);\n\t\treturn (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp(n-1, p);\n\t\treturn\
    \ (2*x) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n==0) return 1;\n    if(n==1) return 2;\n    var r = modp(n>>1, p);\n\
    \    r = (r*r)%p;\n    if(n%2==1) r = (r*2)%p;\n    return r;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var r = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tr = (r * 2) % p;\n\t}\n\treturn\
    \ r;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  if(n == 0) return 1;\n  if(n == 1) return 2;\n  if(n % 2 == 0){\n    var t\
    \ = modp(n/2, p);\n    return (2*t*t) % p;\n  }\n  return (2*modp(n-1, p)) % p;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmplpbl8ubk.js:17:10)\n    at Object.<anonymous>\
    \ (/tmp/tmplpbl8ubk.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tvar r = modp(Math.floor(n/2), p);\n\tr = (r*r) % p;\n\t\
    if(n % 2 == 1) r = (r*2) % p;\n\treturn r;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var result = 1;\n    for(var i = 0; i < n; i++){\n        result = (result\
    \ * 2) % p;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\t\
    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0)\n\t\treturn 1;\n\tif(n == 1)\n\t\treturn 2;\n\tif(n % 2 == 0){\n\t\t\
    var t = modp(n/2, p);\n\t\treturn (t*t) % p;\n\t}\n\telse{\n\t\tvar t = modp(n-1,\
    \ p);\n\t\treturn (2*t) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  var r = 1;\n  while(n > 0){\n    if(n & 1) r = (r * 2) % p;\n    n >>= 1;\n\
    \  }\n  return r;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpk9f9f3xf.js:16:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpk9f9f3xf.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var r = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tr = (r * 2) % p;\n\t}\n\treturn\
    \ r;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar t = modp(n/2,\
    \ p);\n\t\treturn (t*t) % p;\n\t}\n\telse{\n\t\tvar t = modp(n-1, p);\n\t\treturn\
    \ (2*t) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  if(n === 0) return 0;\n  if(n === 1) return 1;\n  if(n % 2 === 0){\n    var\
    \ z = modp(n/2, p);\n    return (2*z) % p;\n  }\n  if(n % 2 === 1){\n    var z\
    \ = modp((n-1)/2, p);\n    return (2*z + 1) % p;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp5hdyzl__.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5hdyzl__.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\treturn modp(n/2,\
    \ p) * modp(n/2, p) % p;\n\t} else {\n\t\treturn 2 * modp(n-1, p) % p;\n\t}\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\t\
    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var t = modp(n/2, p);\n        return (2*t*t) % p;\n    }\n    else{\n \
    \       var t = modp(n-1, p);\n        return (2*t) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp8f47vw4i.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8f47vw4i.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var t = modp(n/2, p);\n        return (2*t*t) % p;\n    }\n    else{\n \
    \       var t = modp(n-1, p);\n        return (2*t) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp8f47vw4i.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8f47vw4i.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar t = modp(n/2,\
    \ p);\n\t\treturn (t*t) % p;\n\t}\n\telse{\n\t\tvar t = modp(n-1, p);\n\t\treturn\
    \ (2*t) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n % 2 == 0){\n\t\tvar t = modp(n/2, p);\n\t\treturn\
    \ (t*t) % p;\n\t}\n\treturn (2*modp(n-1, p)) % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\t\
    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var result = 1;\n    for(var i = 0; i < n; i++){\n        result = (result\
    \ * 2) % p;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    var x = modp(n >> 1,\
    \ p);\n    x = (x * x) % p;\n    if(n & 1) x = (x * 2) % p;\n    return x;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\t\
    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var r = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tr = (r * 2) % p;\n\t}\n\treturn\
    \ r;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\t\
    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var t = modp(n/2, p);\n        return (2*t*t) % p;\n    }\n    else{\n \
    \       var t = modp(n-1, p);\n        return (2*t) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp8f47vw4i.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8f47vw4i.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\t\
    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var res = 1;\n    while(n > 0){\n        if(n & 1) res = (res * 2) % p;\n\
    \        n >>= 1;\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpdsz8guda.js:16:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpdsz8guda.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    var t = modp(Math.floor(n/2),\
    \ p);\n    t = (t*t) % p;\n    if(n % 2 == 1) t = (t*2) % p;\n    return t;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n == 2) return 4;\n\tif(n ==\
    \ 3) return 8;\n\tif(n == 4) return 16;\n\tif(n == 5) return 32;\n\tif(n == 6)\
    \ return 64;\n\tif(n == 7) return 128;\n\tif(n == 8) return 256;\n\tif(n == 9)\
    \ return 512;\n\tif(n == 10) return 1024;\n\tif(n == 11) return 2048;\n\tif(n\
    \ == 12) return 4096;\n\tif(n == 13) return 8192;\n\tif(n == 14) return 16384;\n\
    \tif(n == 15) return 32768;\n\tif(n == 16) return 65536;\n\tif(n == 17) return\
    \ 131072;\n\tif(n == 18) return 262144;\n\tif(n == 19) return 524288;\n\tif(n\
    \ == 20) return 1048576;\n\tif(n == 21) return 2097152;\n\tif(n == 22) return\
    \ 4194304;\n\tif(n == 23) return 8388608;\n\tif(n == 24) return 16777216;\n\t\
    if(n == 25) return 33554432;\n\tif(n == 26) return 67108864;\n\tif(n == 27) return\
    \ 134217728;\n\tif(n == 28) return 268435456;\n\tif(n == 29) return 536870912;\n\
    \tif(n == 30) return 1073741824;\n\tif(n == 31) return 2147483648;\n\tif(n ==\
    \ 32) return 4294967296;\n\tif(n == 33) return 8589934592;\n\tif(n == 34) return\
    \ 17179869184;\n\tif(n == 35) return 34359738368;\n\tif(n == 36) return 68719476736;\n\
    \tif(n == 37) return 137438953472;\n\tif(n == 38) return 274877906944;\n\tif(n\
    \ == 39) return 549\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmplfay0a4v.js:57\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n==0) return 1;\n\tif(n==1) return 2;\n\tif(n%2==0){\n\t\tvar t = modp(n/2,\
    \ p);\n\t\treturn (t*t)%p;\n\t}\n\treturn (2*modp(n-1, p))%p;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var r = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tr = (r * 2) % p;\n\t}\n\treturn\
    \ r;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  if(n == 0) return 1;\n  if(n == 1) return 2;\n  if(n % 2 == 0){\n    var tmp\
    \ = modp(n/2, p);\n    return (tmp*tmp) % p;\n  }\n  else{\n    var tmp = modp(n-1,\
    \ p);\n    return (2*tmp) % p;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var r = 1;\n\tvar b = 2;\n\twhile(n > 0){\n\t\tif(n % 2 == 1){\n\t\t\tr = (r *\
    \ b) % p;\n\t\t}\n\t\tn = Math.floor(n / 2);\n\t\tb = (b * b) % p;\n\t}\n\treturn\
    \ r;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var r = 1;\n    var b = 2;\n    while (n > 0){\n        if (n % 2 == 1){\n\
    \            r = (r * b) % p;\n        }\n        n = Math.floor(n / 2);\n   \
    \     b = (b * b) % p;\n    }\n    return r;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var result = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tresult = (result * 2) % p;\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar t = modp(n/2,\
    \ p);\n\t\treturn (t*t) % p;\n\t}\n\telse{\n\t\tvar t = modp(n-1, p);\n\t\treturn\
    \ (2*t) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar t = modp(n/2,\
    \ p);\n\t\treturn (t*t) % p;\n\t}\n\treturn (2*modp(n-1, p)) % p;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var t = modp(n/2, p);\n        return (2*t*t) % p;\n    }\n    else{\n \
    \       var t = modp(n-1, p);\n        return (2*t) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp8f47vw4i.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8f47vw4i.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var result = 1;\n    var x = 2;\n    while (n > 0){\n        var leastSignificantBit\
    \ = n % 2;\n        n = Math.floor(n/2);\n        if (leastSignificantBit == 1)\
    \ {\n            result = result * x;\n            result = result % p;\n    \
    \    }\n        x = x * x;\n        x = x % p;\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var x = modp(n/2, p);\n        return (x*x) % p;\n    }\n    else{\n   \
    \     var x = modp(n-1, p);\n        return (2*x) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var r = 1;\n\twhile(n > 0){\n\t\tif(n % 2 == 1){\n\t\t\tr = (r * 2) % p;\n\t\t\
    }\n\t\tn = Math.floor(n / 2);\n\t}\n\treturn r;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpbl0o_jph.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbl0o_jph.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\treturn modp(n/2,\
    \ p) * modp(n/2, p) % p;\n\t}\n\telse{\n\t\treturn 2 * modp(n-1, p) % p;\n\t}\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n < 0){\n        return 0;\n    }\n    if(n == 0){\n        return 1;\n\
    \    }\n    if(n == 1){\n        return 2;\n    }\n    if(n % 2 == 0){\n     \
    \   return modp(n/2, p) * modp(n/2, p) % p;\n    }\n    return modp(n-1, p) *\
    \ 2 % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var t = modp(n/2, p);\n        return (2*t*t) % p;\n    }\n    else{\n \
    \       var t = modp(n-1, p);\n        return (2*t) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp8f47vw4i.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8f47vw4i.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\t\
    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0)\n        return 1;\n    if(n == 1)\n        return 2;\n    if(n\
    \ % 2 == 0){\n        var t = modp(n/2, p);\n        return (t*t) % p;\n    }\n\
    \    else{\n        var t = modp(n-1, p);\n        return (2*t) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\t\
    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var res = 1;\n    var x = 2;\n    while(n > 0){\n        if(n % 2 == 1){\n\
    \            res = (res * x) % p;\n        }\n        x = (x * x) % p;\n     \
    \   n = Math.floor(n / 2);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var result = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tresult = (result * 2) % p;\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n % 2 == 0){\n\t\tvar t = modp(n/2, p);\n\t\treturn\
    \ (t*t) % p;\n\t}\n\treturn (2*modp(n-1, p)) % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var t = modp(n/2, p);\n        return (2*t*t) % p;\n    } else {\n     \
    \   return (2*modp(n-1, p)) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpppn7ze07.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpppn7ze07.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var x = modp(n/2, p);\n        return (x*x) % p;\n    }\n    else{\n   \
    \     var x = modp(n-1, p);\n        return (2*x) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n % 2 == 0){\n        var t = modp(n/2, p);\n\
    \        return (t*t) % p;\n    }\n    return (2*modp(n-1, p)) % p;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar t = modp(n/2,\
    \ p);\n\t\treturn (t*t) % p;\n\t}\n\telse{\n\t\tvar t = modp(n-1, p);\n\t\treturn\
    \ (2*t) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\t\
    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\t\
    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\t\
    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2,\
    \ p);\n\t\treturn (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp(n-1, p);\n\t\treturn\
    \ (2*x) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n % 2 == 0){\n\t\tvar t = modp(n/2, p);\n\t\treturn\
    \ (t*t) % p;\n\t}\n\treturn (2*modp(n-1, p)) % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\twhile(n > 0){\n\t\tif(n % 2 == 1){\n\t\t\tres = (res * 2) % p;\n\
    \t\t}\n\t\tn = Math.floor(n / 2);\n\t\tif(n > 0){\n\t\t\tres = (res * res) % p;\n\
    \t\t}\n\t}\n\treturn res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpuq1daplp.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpuq1daplp.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2,\
    \ p);\n\t\treturn (x*x) % p;\n\t} else {\n\t\treturn (2*modp(n-1, p)) % p;\n\t\
    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var t = modp(n/2, p);\n        return (2*t*t) % p;\n    } else {\n     \
    \   return (2*modp(n-1, p)) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpppn7ze07.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpppn7ze07.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\t\
    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var x = modp(n/2, p);\n        return (x*x) % p;\n    }\n    else{\n   \
    \     var x = modp(n-1, p);\n        return (2*x) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar t = modp(n/2,\
    \ p);\n\t\treturn (t*t) % p;\n\t}\n\treturn (2*modp(n-1, p)) % p;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var t = modp(n/2, p);\n        return (2*t*t) % p;\n    }\n    else{\n \
    \       var t = modp(n-1, p);\n        return (2*t) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp8f47vw4i.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8f47vw4i.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2,\
    \ p);\n\t\treturn (x*x) % p;\n\t}\n\treturn (2 * modp(n-1, p)) % p;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var t = modp(n/2, p);\n        return (2*t*t) % p;\n    }\n    else{\n \
    \       var t = modp(n-1, p);\n        return (2*t) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp8f47vw4i.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8f47vw4i.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var t = modp(n/2, p);\n        return (2*t*t) % p;\n    }\n    else{\n \
    \       var t = modp(n-1, p);\n        return (2*t) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp8f47vw4i.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8f47vw4i.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var t = modp(n/2, p);\n        return (2*t*t) % p;\n    } else {\n     \
    \   return (2*modp(n-1, p)) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpppn7ze07.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpppn7ze07.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var t = modp(n/2, p);\n        return (2*t*t) % p;\n    }\n    else{\n \
    \       var t = modp(n-1, p);\n        return (2*t) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp8f47vw4i.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8f47vw4i.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var r = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tr = (r * 2) % p;\n\t}\n\treturn\
    \ r;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n == 2) return 4;\n\
    \    if(n == 3) return 8;\n    if(n == 4) return 16;\n    if(n == 5) return 32;\n\
    \    if(n == 6) return 64;\n    if(n == 7) return 128;\n    if(n == 8) return\
    \ 256;\n    if(n == 9) return 512;\n    if(n == 10) return 1024;\n    if(n ==\
    \ 11) return 2048;\n    if(n == 12) return 4096;\n    if(n == 13) return 8192;\n\
    \    if(n == 14) return 16384;\n    if(n == 15) return 32768;\n    if(n == 16)\
    \ return 65536;\n    if(n == 17) return 131072;\n    if(n == 18) return 262144;\n\
    \    if(n == 19) return 524288;\n    if(n == 20) return 1048576;\n    if(n ==\
    \ 21) return 2097152;\n    if(n == 22) return 4194304;\n    if(n == 23) return\
    \ 8388608;\n    if(n == 24) return 16777216;\n    if(n == 25) return 33554432;\n\
    \    if(n == 26) return 67108864;\n    if(n == 27) return 134217728;\n    if(n\
    \ == 28) return 268435456;\n    if(n == 29) return 536870912;\n    if(n == 30)\
    \ return 1073741824;\n    if(n == 31) return 2147483648;\n    if(n == 32) return\
    \ 4294967296;\n    if(n == 33) return 8589934592;\n    if(n == 34) return 17179869184;\n\
    \    if(n == 35) return 34359738368;\n    if(n == 36) return 68719476736;\n  \
    \  if(n == 37) return 137438953472;\n    if(n == 38) return 274877906944;\n  \
    \  if(n == 39) return 549\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpn8t1d698.js:57\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\t\
    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var result = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tresult = (result * 2) % p;\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar t = modp(n/2,\
    \ p);\n\t\treturn (t*t) % p;\n\t}\n\treturn (2*modp(n-1, p)) % p;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var r = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tr = (r * 2) % p;\n\t}\n\treturn\
    \ r;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tvar t = modp(Math.floor(n/2),\
    \ p);\n\tif(n % 2 == 0) return (t*t) % p;\n\telse return (2*t*t) % p;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var result = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tresult = (result * 2) % p;\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n % 2 == 0){\n\t\tvar t = modp(n/2, p);\n\t\treturn\
    \ (t*t) % p;\n\t}\n\treturn (2*modp(n-1, p)) % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var r = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tr = (r * 2) % p;\n\t}\n\treturn\
    \ r;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var result = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tresult = (result * 2) % p;\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var r = 1;\n    for(var i = 0; i < n; i++){\n        r = (r * 2) % p;\n \
    \   }\n    return r;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\t\
    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var t = modp(n/2, p);\n        return (2*t*t) % p;\n    }\n    else{\n \
    \       var t = modp(n-1, p);\n        return (2*t) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp8f47vw4i.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8f47vw4i.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    var r = modp(n/2, p);\n\
    \    r = (r*r) % p;\n    if(n % 2 == 1) r = (r*2) % p;\n    return r;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp1up53wea.js:16:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1up53wea.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var r = 1;\n    while(n > 0){\n        if(n % 2 == 1){\n            r = (r\
    \ * 2) % p;\n        }\n        n = Math.floor(n/2);\n        if(n > 0){\n   \
    \         r = (r * r) % p;\n        }\n    }\n    return r;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpu1zkc43a.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpu1zkc43a.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n==0) return 1;\n    if(n==1) return 2;\n    if(n%2==0){\n        var\
    \ t = modp(n/2, p);\n        return (2*t*t)%p;\n    }\n    else{\n        var\
    \ t = modp(n-1, p);\n        return (2*t)%p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp9eow9385.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp9eow9385.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var x = modp(n/2, p);\n        return (x*x) % p;\n    }\n    else{\n   \
    \     var x = modp(n-1, p);\n        return (2*x) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tvar t = modp(Math.floor(n/2),\
    \ p);\n\tif(n % 2 == 0) return (t*t) % p;\n\treturn (2*t*t) % p;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\t\
    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var res = 1;\n    while(n > 0){\n        if(n % 2 == 1){\n            res\
    \ = (res * 2) % p;\n        }\n        n = Math.floor(n / 2);\n        if(n >\
    \ 0){\n            res = (res * res) % p;\n        }\n    }\n    return res;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmptn893wm9.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptn893wm9.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var t = modp(n/2, p);\n        return (2*t*t) % p;\n    }\n    else{\n \
    \       var t = modp(n-1, p);\n        return (2*t) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp8f47vw4i.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8f47vw4i.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2,\
    \ p);\n\t\treturn (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp(n-1, p);\n\t\treturn\
    \ (2*x) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2,\
    \ p);\n\t\treturn (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp(n-1, p);\n\t\treturn\
    \ (2*x) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n==0) return 1;\n\tif(n==1) return 2;\n\tif(n%2==0){\n\t\tvar t = modp(n/2,\
    \ p);\n\t\treturn (t*t)%p;\n\t}\n\telse{\n\t\tvar t = modp(n-1, p);\n\t\treturn\
    \ (2*t)%p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n == 2) return 4;\n\tif(n ==\
    \ 3) return 8;\n\tif(n == 4) return 16;\n\tif(n == 5) return 32;\n\tif(n == 6)\
    \ return 64;\n\tif(n == 7) return 128;\n\tif(n == 8) return 256;\n\tif(n == 9)\
    \ return 512;\n\tif(n == 10) return 1024;\n\tif(n == 11) return 2048;\n\tif(n\
    \ == 12) return 4096;\n\tif(n == 13) return 8192;\n\tif(n == 14) return 16384;\n\
    \tif(n == 15) return 32768;\n\tif(n == 16) return 65536;\n\tif(n == 17) return\
    \ 131072;\n\tif(n == 18) return 262144;\n\tif(n == 19) return 524288;\n\tif(n\
    \ == 20) return 1048576;\n\tif(n == 21) return 2097152;\n\tif(n == 22) return\
    \ 4194304;\n\tif(n == 23) return 8388608;\n\tif(n == 24) return 16777216;\n\t\
    if(n == 25) return 33554432;\n\tif(n == 26) return 67108864;\n\tif(n == 27) return\
    \ 134217728;\n\tif(n == 28) return 268435456;\n\tif(n == 29) return 536870912;\n\
    \tif(n == 30) return 1073741824;\n\tif(n == 31) return 2147483648;\n\tif(n ==\
    \ 32) return 4294967296;\n\tif(n == 33) return 8589934592;\n\tif(n == 34) return\
    \ 17179869184;\n\tif(n == 35) return 34359738368;\n\tif(n == 36) return 68719476736;\n\
    \tif(n == 37) return 137438953472;\n\tif(n == 38) return 274877906944;\n\tif(n\
    \ == 39) return 549\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmplfay0a4v.js:57\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var result = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tresult = (result * 2) % p;\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar t = modp(n/2,\
    \ p);\n\t\treturn (t*t) % p;\n\t}\n\treturn (2*modp(n-1, p)) % p;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\twhile(n > 0){\n\t\tif(n % 2 == 1){\n\t\t\tres = (res * 2) % p;\n\
    \t\t}\n\t\tn = Math.floor(n / 2);\n\t\tif(n > 0){\n\t\t\tres = (res * res) % p;\n\
    \t\t}\n\t}\n\treturn res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpuq1daplp.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpuq1daplp.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\treturn modp(n/2,\
    \ p) * modp(n/2, p) % p;\n\t}\n\treturn 2 * modp(n-1, p) % p;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar t = modp(n/2,\
    \ p);\n\t\treturn (t*t) % p;\n\t}\n\treturn (2*modp(n-1, p)) % p;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2,\
    \ p);\n\t\treturn (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp(n-1, p);\n\t\treturn\
    \ (2*x) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var x = modp(n/2, p);\n        return (x*x) % p;\n    }\n    else{\n   \
    \     var x = modp(n-1, p);\n        return (2*x) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0)\n\t\treturn 1;\n\tif(n == 1)\n\t\treturn 2;\n\tif(n % 2 == 0){\n\t\t\
    var x = modp(n/2, p);\n\t\treturn (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp(n-1,\
    \ p);\n\t\treturn (2*x) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var x = modp(n/2, p);\n        return (x*x) % p;\n    }\n    else{\n   \
    \     var x = modp(n-1, p);\n        return (2*x) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\t\
    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var t = modp(n/2, p);\n        return (2*t*t) % p;\n    }\n    else{\n \
    \       var t = modp(n-1, p);\n        return (2*t) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp8f47vw4i.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8f47vw4i.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var r = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tr = (r * 2) % p;\n\t}\n\treturn\
    \ r;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var t = modp(n/2, p);\n        return (2*t*t) % p;\n    }\n    else{\n \
    \       var t = modp(n-1, p);\n        return (2*t) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp8f47vw4i.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8f47vw4i.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n<0){\n\t\treturn modp(p-((-n)%p), p);\n\t}\n\tif(n==0){\n\t\treturn 1;\n\t\
    }\n\tif(n==1){\n\t\treturn 2;\n\t}\n\tif(n%2==0){\n\t\treturn (modp(n/2, p)*modp(n/2,\
    \ p))%p;\n\t}\n\treturn (2*modp(n-1, p))%p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0)\n\t\treturn 1;\n\tif(n == 1)\n\t\treturn 2;\n\tif(n % 2 == 0){\n\t\t\
    var m = modp(n/2, p);\n\t\treturn (m*m) % p;\n\t}\n\telse{\n\t\tvar m = modp(n-1,\
    \ p);\n\t\treturn (2*m) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var result = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tresult = (result * 2) % p;\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\tvar x = 2;\n\twhile(n > 0){\n\t\tif(n % 2 == 1){\n\t\t\tres =\
    \ (res * x) % p;\n\t\t}\n\t\tx = (x * x) % p;\n\t\tn = Math.floor(n / 2);\n\t\
    }\n\treturn res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var result = 1;\n    var x = 2;\n    while (n > 0){\n        var leastSignificantBit\
    \ = n % 2;\n        n = Math.floor(n/2);\n        if (leastSignificantBit == 1)\
    \ {\n            result = result * x;\n            result = result % p;\n    \
    \    }\n        x = x * x;\n        x = x % p;\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var res = 1;\n    while(n > 0){\n        if(n & 1) res = (res * 2) % p;\n\
    \        n >>= 1;\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpdsz8guda.js:16:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpdsz8guda.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\t\
    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\t\
    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var t = modp(n/2, p);\n        return (2*t*t) % p;\n    }\n    else{\n \
    \       var t = modp(n-1, p);\n        return (2*t) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp8f47vw4i.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8f47vw4i.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    var x = modp(Math.floor(n/2),\
    \ p);\n    x = (x*x) % p;\n    if(n % 2 == 1) x = (x*2) % p;\n    return x;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var t = modp(n/2, p);\n        return (2*t*t) % p;\n    }\n    else{\n \
    \       var t = modp(n-1, p);\n        return (2*t) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp8f47vw4i.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8f47vw4i.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0)\n\t\treturn 1;\n\telse if(n == 1)\n\t\treturn 2;\n\telse if(n % 2 ==\
    \ 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn (x*x) % p;\n\t}\n\telse{\n\t\tvar\
    \ x = modp(n-1, p);\n\t\treturn (2*x) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n%2 == 0){\n\t\tvar t = modp(n/2,\
    \ p);\n\t\treturn (t*t)%p;\n\t}\n\telse{\n\t\tvar t = modp(n-1, p);\n\t\treturn\
    \ (2*t)%p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n == 2) return 4;\n\tif(n ==\
    \ 3) return 8;\n\tif(n == 4) return 16;\n\tif(n == 5) return 32;\n\tif(n == 6)\
    \ return 64;\n\tif(n == 7) return 128;\n\tif(n == 8) return 256;\n\tif(n == 9)\
    \ return 512;\n\tif(n == 10) return 1024;\n\tif(n == 11) return 2048;\n\tif(n\
    \ == 12) return 4096;\n\tif(n == 13) return 8192;\n\tif(n == 14) return 16384;\n\
    \tif(n == 15) return 32768;\n\tif(n == 16) return 65536;\n\tif(n == 17) return\
    \ 131072;\n\tif(n == 18) return 262144;\n\tif(n == 19) return 524288;\n\tif(n\
    \ == 20) return 1048576;\n\tif(n == 21) return 2097152;\n\tif(n == 22) return\
    \ 4194304;\n\tif(n == 23) return 8388608;\n\tif(n == 24) return 16777216;\n\t\
    if(n == 25) return 33554432;\n\tif(n == 26) return 67108864;\n\tif(n == 27) return\
    \ 134217728;\n\tif(n == 28) return 268435456;\n\tif(n == 29) return 536870912;\n\
    \tif(n == 30) return 1073741824;\n\tif(n == 31) return 2147483648;\n\tif(n ==\
    \ 32) return 4294967296;\n\tif(n == 33) return 8589934592;\n\tif(n == 34) return\
    \ 17179869184;\n\tif(n == 35) return 34359738368;\n\tif(n == 36) return 68719476736;\n\
    \tif(n == 37) return 137438953472;\n\tif(n == 38) return 274877906944;\n\tif(n\
    \ == 39) return 549\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmplfay0a4v.js:57\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\t\
    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var res = 1;\n    var a = 2;\n    while (n > 0){\n        if (n % 2 == 1){\n\
    \            res = (res * a) % p;\n        }\n        a = (a * a) % p;\n     \
    \   n = Math.floor(n / 2);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\t\
    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar t = modp(n/2,\
    \ p);\n\t\treturn (t*t) % p;\n\t}\n\telse{\n\t\tvar t = modp(n-1, p);\n\t\treturn\
    \ (2*t) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var r = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tr = (r * 2) % p;\n\t}\n\treturn\
    \ r;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var r = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tr = (r * 2) % p;\n\t}\n\treturn\
    \ r;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var result = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tresult = (result * 2) % p;\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var r = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tr = (r * 2) % p;\n\t}\n\treturn\
    \ r;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var t = modp(n/2, p);\n        return (2*t*t) % p;\n    } else {\n     \
    \   return (2*modp(n-1, p)) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpppn7ze07.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpppn7ze07.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var result = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tresult = (result * 2) % p;\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\t\
    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\t\
    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var result = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tresult = (result * 2) % p;\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2,\
    \ p);\n\t\treturn (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp(n-1, p);\n\t\treturn\
    \ (2*x) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var t = modp(n/2, p);\n        return (2*t*t) % p;\n    }\n    else{\n \
    \       var t = modp(n-1, p);\n        return (2*t) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp8f47vw4i.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8f47vw4i.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\t\
    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var x = modp(n/2, p);\n        return (x*x) % p;\n    }\n    return (2*modp(n-1,\
    \ p)) % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\t\
    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var result = 1;\n    for(var i = 0; i < n; i++){\n        result = (result\
    \ * 2) % p;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var result = 1;\n    var x = 2;\n    while (n > 0){\n        var leastSignificantBit\
    \ = n % 2;\n        n = Math.floor(n/2);\n        if (leastSignificantBit == 1)\
    \ {\n            result = result * x;\n            result = result % p;\n    \
    \    }\n        x = x * x;\n        x = x % p;\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2,\
    \ p);\n\t\treturn (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp(n-1, p);\n\t\treturn\
    \ (2*x) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\t\
    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0)\n        return 1;\n    if(n == 1)\n        return 2;\n    if(n\
    \ % 2 == 0){\n        var t = modp(n/2, p);\n        return (t*t) % p;\n    }\n\
    \    else{\n        var t = modp(n-1, p);\n        return (2*t) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2,\
    \ p);\n\t\treturn (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp(n-1, p);\n\t\treturn\
    \ (2*x) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var t = modp(n/2, p);\n        return (2*t*t) % p;\n    }\n    else{\n \
    \       var t = modp(n-1, p);\n        return (2*t) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp8f47vw4i.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8f47vw4i.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var result = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tresult = (result * 2) % p;\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var x = modp(n/2, p);\n        return (x*x) % p;\n    }\n    else{\n   \
    \     var x = modp(n-1, p);\n        return (2*x) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\t\
    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var result = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tresult = (result * 2) % p;\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var result = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tresult = (result * 2) % p;\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var result = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tresult = (result * 2) % p;\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var t = modp(n/2, p);\n        return (2*t*t) % p;\n    }\n    else{\n \
    \       var t = modp(n-1, p);\n        return (2*t) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp8f47vw4i.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8f47vw4i.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2,\
    \ p);\n\t\treturn (x*x) % p;\n\t} else {\n\t\treturn (2*modp(n-1, p)) % p;\n\t\
    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var res = 1;\n    while(n > 0){\n        if(n % 2 == 1){\n            res\
    \ = (res * 2) % p;\n        }\n        n = Math.floor(n / 2);\n        if(n >\
    \ 0){\n            res = (res * res) % p;\n        }\n    }\n    return res;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmptn893wm9.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptn893wm9.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    var r = modp(n/2, p);\n\
    \    r = (r*r) % p;\n    if(n % 2 == 1) r = (r*2) % p;\n    return r;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp1up53wea.js:16:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1up53wea.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar t = modp(n/2,\
    \ p);\n\t\treturn (t*t) % p;\n\t}\n\telse{\n\t\tvar t = modp(n-1, p);\n\t\treturn\
    \ (2*t) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var t = modp(n/2, p);\n        return (2*t*t) % p;\n    }\n    else{\n \
    \       var t = modp(n-1, p);\n        return (2*t) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp8f47vw4i.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8f47vw4i.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var m = modp(n/2, p);\n        return (m*m) % p;\n    }\n    else{\n   \
    \     var m = modp(n-1, p);\n        return (2*m) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  var r = 1;\n  while(n > 0){\n    if(n % 2 == 1){\n      r = (r * 2) % p;\n\
    \    }\n    n = Math.floor(n/2);\n    if(n > 0){\n      r = (r * r) % p;\n   \
    \ }\n  }\n  return r;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpxsy8_lh0.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxsy8_lh0.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2,\
    \ p);\n\t\treturn (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp(n-1, p);\n\t\treturn\
    \ (2*x) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var result = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tresult = (result * 2) % p;\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var t = modp(n/2, p);\n        return (2*t*t) % p;\n    }\n    else{\n \
    \       var t = modp(n-1, p);\n        return (2*t) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp8f47vw4i.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8f47vw4i.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar t = modp(n/2,\
    \ p);\n\t\treturn (t*t) % p;\n\t}\n\telse{\n\t\tvar t = modp(n/2, p);\n\t\treturn\
    \ (2*t*t) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n34\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmphhyop_do.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphhyop_do.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 34,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2,\
    \ p);\n\t\treturn (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp(n-1, p);\n\t\treturn\
    \ (2*x) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var res = 1;\n    while(n > 0){\n        if(n % 2 == 1){\n            res\
    \ = (res * 2) % p;\n        }\n        n = Math.floor(n / 2);\n        p = (p\
    \ * p) % mod;\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpdkhf5f52.js:9\n        p = (p * p) % mod;\n                   \
    \   ^\n\nReferenceError: mod is not defined\n    at modp (/tmp/tmpdkhf5f52.js:9:23)\n\
    \    at test (/tmp/tmpdkhf5f52.js:19:20)\n    at Object.<anonymous> (/tmp/tmpdkhf5f52.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\t\
    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n === 0) return 0;\n\tif(n === 1) return 1;\n\tif(n % 2 === 0){\n\t\tvar x\
    \ = modp(n/2, p);\n\t\treturn (x * x) % p;\n\t}\n\tif(n % 2 === 1){\n\t\tvar x\
    \ = modp((n-1)/2, p);\n\t\treturn (x * x * 2) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpxmy_45yc.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxmy_45yc.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var r = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tr = (r * 2) % p;\n\t}\n\treturn\
    \ r;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var x = modp(n/2, p);\n        return (x*x) % p;\n    }\n    else{\n   \
    \     var x = modp(n-1, p);\n        return (2*x) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\t\
    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var result = 1;\n    for(var i = 0; i < n; i++){\n        result = (result\
    \ * 2) % p;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n%2 == 0){\n\t\tvar t = modp(n/2,\
    \ p);\n\t\treturn (t*t)%p;\n\t}\n\telse{\n\t\tvar t = modp(n-1, p);\n\t\treturn\
    \ (2*t)%p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var x = modp(n/2, p);\n        return (x*x) % p;\n    }\n    else{\n   \
    \     var x = modp(n-1, p);\n        return (2*x) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar t = modp(n/2,\
    \ p);\n\t\treturn (t*t) % p;\n\t}\n\telse{\n\t\tvar t = modp(n-1, p);\n\t\treturn\
    \ (2*t) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var result = 1;\n    for(var i = 0; i < n; i++){\n        result = (result\
    \ * 2) % p;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar t = modp(n/2,\
    \ p);\n\t\treturn (t*t) % p;\n\t} else {\n\t\treturn (2*modp(n-1, p)) % p;\n\t\
    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n % 2 == 0){\n        var t = modp(n/2, p);\n\
    \        return (t*t) % p;\n    }\n    else{\n        return (2*modp(n-1, p))\
    \ % p;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var t = modp(n/2, p);\n        return (2*t*t) % p;\n    }\n    else{\n \
    \       var t = modp(n-1, p);\n        return (2*t) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp8f47vw4i.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8f47vw4i.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0)\n\t\treturn 1;\n\tif(n % 2 == 0)\n\t\treturn modp(n/2, p) * modp(n/2,\
    \ p) % p;\n\telse\n\t\treturn 2 * modp(n-1, p) % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var result = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tresult = (result * 2) % p;\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar t = modp(n/2,\
    \ p);\n\t\treturn (t*t) % p;\n\t}\n\telse{\n\t\tvar t = modp(n-1, p);\n\t\treturn\
    \ (2*t) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n % 2 == 0){\n        var t = modp(n/2, p);\n\
    \        return (t*t) % p;\n    }\n    return (2*modp(n-1, p)) % p;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar t = modp(n/2,\
    \ p);\n\t\treturn (t*t) % p;\n\t}\n\telse{\n\t\tvar t = modp(n-1, p);\n\t\treturn\
    \ (2*t) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var r = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tr = (r * 2) % p;\n\t}\n\treturn\
    \ r;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n % 2 == 0){\n   \
    \     var t = modp(n/2, p);\n        return (2*t*t) % p;\n    }\n    else{\n \
    \       var t = modp(n-1, p);\n        return (2*t) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp8f47vw4i.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8f47vw4i.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var res = 1;\n    while(n > 0){\n        if(n % 2 == 1){\n            res\
    \ = (res * 2) % p;\n        }\n        n = Math.floor(n / 2);\n        if(n >\
    \ 0){\n            res = (res * res) % p;\n        }\n    }\n    return res;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmptn893wm9.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptn893wm9.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar t = modp(n/2,\
    \ p);\n\t\treturn (t*t) % p;\n\t}\n\telse{\n\t\tvar t = modp(n-1, p);\n\t\treturn\
    \ (2*t) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
