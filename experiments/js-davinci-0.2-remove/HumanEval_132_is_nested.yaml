name: HumanEval_132_is_nested
language: js
prompt: "//Create a function that takes a string as input which contains only square\
  \ brackets.\n// The function should return True if and only if there is a valid\
  \ subsequence of brackets \n// where at least one bracket in the subsequence is\
  \ nested.\nfunction is_nested(string){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
  []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
  []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
  []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
  [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
  [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
  \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
  ]]]]]]]]\"),false);\n}\n\ntest();"
completions: ["    let stack = [];\n    let open = { '{': '}', '[': ']', '(': ')'\
    \ };\n    let closed = { '}': true, ']': true, ')': true };\n  \n    for (let\
    \ i = 0; i < string.length; i++) {\n      let char = string[i];\n      if (open[char])\
    \ {\n        stack.push(char);\n      } else if (closed[char]) {\n        if (open[stack.pop()]\
    \ !== char) return false;\n      }\n    }\n    return stack.length === 0;\n  }\n\
    \  console.log(is_nested(\"{[()]}\"))\n  console.log(is_nested(\"{[(])}\"))\n\
    \  console.log(is_nested(\"{{[[(())]]}}\"))", "    let stack = [];\n    for(let\
    \ i = 0; i < string.length; i++){\n        if(string[i] === '['){\n          \
    \  stack.push(string[i]);\n        }\n        else if(string[i] === ']'){\n  \
    \          if(stack.length === 0){\n                return false;\n          \
    \  }\n            else{\n                stack.pop();\n            }\n       \
    \ }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n    let\
    \ open = {'[': ']'};\n    let closed = {']': true};\n    for(let i = 0; i < string.length;\
    \ i++){\n        let char = string[i];\n        if(open[char]){\n            stack.push(char);\n\
    \        } else if(closed[char]){\n            if(open[stack.pop()] !== char){\n\
    \                return false;\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '['){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] === ']'){\n            if(stack.length === 0){\n  \
    \              return false;\n            }\n            else{\n             \
    \   stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    let stack = [];\n    let open = {'{':'}', '[':']', '(':')'};\n\
    \    let closed = {'}':true, ']':true, ')':true};\n    for(let i = 0; i < string.length;\
    \ i++){\n        let char = string[i];\n        if(open[char]){\n            stack.push(char);\n\
    \        }else if(closed[char]){\n            if(open[stack.pop()] !== char){\n\
    \                return false;\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    var stack = [];\n    for(var i = 0; i < string.length; i++){\n\
    \        if(string[i] == '('){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] == ')'){\n            if(stack.length == 0){\n    \
    \            return false;\n            }\n            else{\n               \
    \ stack.pop();\n            }\n        }\n    }\n    if(stack.length == 0){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\n", " \
    \   let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i]\
    \ === '['){\n            stack.push(string[i]);\n        }\n        else if(string[i]\
    \ === ']'){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            else{\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n\
    \    let open = {'(': ')', '[': ']', '{': '}'};\n    let closed = {')': true,\
    \ ']': true, '}': true};\n    for (let i = 0; i < string.length; i++) {\n    \
    \    let char = string[i];\n        if (open[char]) {\n            stack.push(char);\n\
    \        } else if (closed[char]) {\n            if (open[stack.pop()] !== char)\
    \ return false;\n        }\n    }\n    return stack.length === 0;\n}\n", "   \
    \ let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i]\
    \ === '['){\n            stack.push(string[i]);\n        }\n        else if(string[i]\
    \ === ']'){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            else{\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n\
    \    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n\
    \            stack.push(string[i]);\n        }\n        else if(string[i] ===\
    \ ']'){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            else{\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n\
    \    let open = {'{':'}', '[':']', '(':')'};\n    let closed = {'}':true, ']':true,\
    \ ')':true};\n    for(let i = 0; i < string.length; i++){\n        let char =\
    \ string[i];\n        if(open[char]){\n            stack.push(char);\n       \
    \ } else if(closed[char]){\n            if(open[stack.pop()] !== char){\n    \
    \            return false;\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack = [];\n    let open = {'(':')', '[':']', '{':'}'};\n\
    \    let closed = {')':true, ']':true, '}':true};\n    for(let i = 0; i < string.length;\
    \ i++){\n        let char = string[i];\n        if(open[char]){\n            stack.push(char);\n\
    \        } else if(closed[char]){\n            if(open[stack.pop()] !== char){\n\
    \                return false;\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack = [];\n    let open = {'{':'}', '[':']', '(':')'};\n\
    \    let closed = {'}':true, ']':true, ')':true};\n    for(let i = 0; i < string.length;\
    \ i++){\n        let char = string[i];\n        if(open[char]){\n            stack.push(char);\n\
    \        } else if(closed[char]){\n            if(open[stack.pop()] !== char){\n\
    \                return false;\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack = [];\n    let map = {\n        '(': ')',\n   \
    \     '[': ']',\n        '{': '}'\n    }\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '(' || string[i] === '[' || string[i] === '{'){\n\
    \            stack.push(string[i]);\n        }else{\n            let last = stack.pop();\n\
    \            if(string[i] !== map[last]){\n                return false;\n   \
    \         }\n        }\n    }\n    if(stack.length !== 0){\n        return false;\n\
    \    }\n    return true;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] === ']'){\n            if(stack.length ===\
    \ 0){\n                return false;\n            }\n            stack.pop();\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n\
    \    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n\
    \            stack.push(string[i]);\n        }\n        else if(string[i] ===\
    \ ']'){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            else{\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n\
    \    for(let i = 0; i < string.length; i++){\n        if(string[i] === '('){\n\
    \            stack.push(string[i]);\n        }\n        else if(string[i] ===\
    \ ')'){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            stack.pop();\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === \"[\"){\n            stack.push(string[i]);\n      \
    \  }\n        else if(string[i] === \"]\"){\n            if(stack.length === 0){\n\
    \                return false;\n            }\n            stack.pop();\n    \
    \    }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n  \
    \  let open = {'{':'}', '[':']', '(':')'};\n    let closed = {'}':true, ']':true,\
    \ ')':true};\n    for(let i = 0; i < string.length; i++){\n        let char =\
    \ string[i];\n        if(open[char]){\n            stack.push(char);\n       \
    \ }else if(closed[char]){\n            if(open[stack.pop()] !== char){\n     \
    \           return false;\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '('){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] === ')'){\n            if(stack.length === 0){\n  \
    \              return false;\n            }\n            else{\n             \
    \   stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '['){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] === ']'){\n            if(stack.length === 0){\n  \
    \              return false;\n            }\n            else{\n             \
    \   stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '['){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] === ']'){\n            if(stack.length === 0){\n  \
    \              return false;\n            }\n            else{\n             \
    \   stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === \"[\"){\n            stack.push(string[i]);\n      \
    \  }\n        else if(string[i] === \"]\"){\n            if(stack.length === 0){\n\
    \                return false;\n            }\n            else{\n           \
    \     stack.pop();\n            }\n        }\n    }\n    if(stack.length === 0){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\n", " \
    \   let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i]\
    \ === '['){\n            stack.push(string[i]);\n        }\n        else if(string[i]\
    \ === ']'){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            else{\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack = []\n\
    \    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n\
    \            stack.push(string[i])\n        }\n        else if(string[i] === ']'){\n\
    \            if(stack.length === 0){\n                return false\n         \
    \   }\n            else{\n                stack.pop()\n            }\n       \
    \ }\n    }\n    if(stack.length === 0){\n        return true\n    }\n    else{\n\
    \        return false\n    }\n}\n", "  var stack = [];\n  for(var i = 0; i < string.length;\
    \ i++){\n    if(string[i] === \"[\"){\n      stack.push(string[i]);\n    }\n \
    \   else if(string[i] === \"]\"){\n      if(stack.length === 0){\n        return\
    \ false;\n      }\n      else{\n        stack.pop();\n      }\n    }\n  }\n  if(stack.length\
    \ === 0){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n", "   \
    \ let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i]\
    \ === \"[\"){\n            stack.push(string[i]);\n        }\n        else if(string[i]\
    \ === \"]\"){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            stack.pop();\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '('){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] === ')'){\n            if(stack.length === 0){\n  \
    \              return false;\n            }\n            else{\n             \
    \   stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    var stack = [];\n    for(var i = 0; i < string.length; i++){\n\
    \        if(string[i] == \"[\"){\n            stack.push(string[i]);\n       \
    \ }\n        else if(string[i] == \"]\"){\n            if(stack.length == 0){\n\
    \                return false;\n            }\n            else{\n           \
    \     stack.pop();\n            }\n        }\n    }\n    if(stack.length == 0){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\n", " \
    \   let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i]\
    \ === '['){\n            stack.push(string[i]);\n        }\n        else if(string[i]\
    \ === ']'){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            stack.pop();\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '['){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] === ']'){\n            if(stack.length === 0){\n  \
    \              return false;\n            }\n            else{\n             \
    \   stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '['){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] === ']'){\n            if(stack.length === 0){\n  \
    \              return false;\n            }\n            else{\n             \
    \   stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '['){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] === ']'){\n            if(stack.length === 0){\n  \
    \              return false;\n            }\n            else{\n             \
    \   stack.pop();\n            }\n        }\n    }\n    if(stack.length === 0){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\n", " \
    \   let stack = [];\n    let open = {'(': ')', '[': ']', '{': '}'};\n    let closed\
    \ = {')': true, ']': true, '}': true};\n    for (let i = 0; i < string.length;\
    \ i++) {\n        let char = string[i];\n        if (open[char]) {\n         \
    \   stack.push(char);\n        } else if (closed[char]) {\n            if (open[stack.pop()]\
    \ !== char) return false;\n        }\n    }\n    return stack.length === 0;\n\
    }\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n    \
    \    if(string[i] === '['){\n            stack.push(string[i]);\n        }else\
    \ if(string[i] === ']'){\n            if(stack.length === 0){\n              \
    \  return false;\n            }else{\n                stack.pop();\n         \
    \   }\n        }\n    }\n    return stack.length === 0;\n}\n", "    var stack\
    \ = [];\n    for(var i = 0; i < string.length; i++){\n        if(string[i] ==\
    \ '['){\n            stack.push(string[i]);\n        }\n        else if(string[i]\
    \ == ']'){\n            if(stack.length == 0){\n                return false;\n\
    \            }\n            else{\n                stack.pop();\n            }\n\
    \        }\n    }\n    if(stack.length == 0){\n        return true;\n    }\n \
    \   else{\n        return false;\n    }\n}\n", "    let stack = [];\n    for(let\
    \ i = 0; i < string.length; i++){\n        if(string[i] === '['){\n          \
    \  stack.push(string[i]);\n        }\n        else if(string[i] === ']'){\n  \
    \          if(stack.length === 0){\n                return false;\n          \
    \  }\n            else{\n                stack.pop();\n            }\n       \
    \ }\n    }\n    return stack.length === 0;\n}\n", "    var stack = [];\n    for(var\
    \ i = 0; i < string.length; i++){\n        if(string[i] == '['){\n           \
    \ stack.push(string[i]);\n        }\n        else if(string[i] == ']'){\n    \
    \        if(stack.length == 0){\n                return false;\n            }\n\
    \            else{\n                stack.pop();\n            }\n        }\n \
    \   }\n    if(stack.length == 0){\n        return true;\n    }\n    else{\n  \
    \      return false;\n    }\n}\n", "    let stack = [];\n    for(let i = 0; i\
    \ < string.length; i++){\n        if(string[i] === '('){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] === ')'){\n            if(stack.length ===\
    \ 0){\n                return false;\n            }\n            stack.pop();\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n\
    \    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n\
    \            stack.push(string[i]);\n        }\n        else if(string[i] ===\
    \ ']'){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            else{\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n\
    \    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n\
    \            stack.push(string[i]);\n        }\n        else if(string[i] ===\
    \ ']'){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            else{\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    var stack = [];\n\
    \    for(var i = 0; i < string.length; i++){\n        if(string[i] == \"[\"){\n\
    \            stack.push(string[i]);\n        }\n        else if(string[i] == \"\
    ]\"){\n            if(stack.length == 0){\n                return false;\n   \
    \         }\n            else{\n                stack.pop();\n            }\n\
    \        }\n    }\n    if(stack.length == 0){\n        return true;\n    }\n \
    \   else{\n        return false;\n    }\n}\n", "    let stack = [];\n    let open\
    \ = {'(':')', '[':']', '{':'}'};\n    let closed = {')':true, ']':true, '}':true};\n\
    \    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n\
    \        if(open[char]){\n            stack.push(char);\n        }else if(closed[char]){\n\
    \            if(open[stack.pop()] !== char){\n                return false;\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack = [];\n    let open = {'(':')', '[':']', '{':'}'};\n    let closed = {')':true,\
    \ ']':true, '}':true};\n    for(let i = 0; i < string.length; i++){\n        let\
    \ char = string[i];\n        if(open[char]){\n            stack.push(char);\n\
    \        }else if(closed[char]){\n            if(open[stack.pop()] !== char){\n\
    \                return false;\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack = [];\n    let open = {'{':'}', '[':']', '(':')'};\n\
    \    let closed = {'}':true, ']':true, ')':true};\n    for(let i = 0; i < string.length;\
    \ i++){\n        let char = string[i];\n        if(open[char]){\n            stack.push(char);\n\
    \        }else if(closed[char]){\n            if(open[stack.pop()] !== char){\n\
    \                return false;\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack = [];\n    let map = {\n        '(': ')',\n   \
    \     '[': ']',\n        '{': '}'\n    }\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '(' || string[i] === '[' || string[i] === '{'){\n\
    \            stack.push(string[i]);\n        } else {\n            let last =\
    \ stack.pop();\n            if(string[i] !== map[last]){\n                return\
    \ false;\n            }\n        }\n    }\n    if(stack.length !== 0){\n     \
    \   return false;\n    }\n    return true;\n}\n", "    let stack = [];\n    for(let\
    \ i = 0; i < string.length; i++){\n        if(string[i] === '['){\n          \
    \  stack.push(string[i]);\n        }\n        else if(string[i] === ']'){\n  \
    \          if(stack.length === 0){\n                return false;\n          \
    \  }\n            else{\n                stack.pop();\n            }\n       \
    \ }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n    let\
    \ open = {'(':')', '[':']', '{':'}'};\n    let closed = {')':true, ']':true, '}':true};\n\
    \    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n\
    \        if(open[char]){\n            stack.push(char);\n        }else if(closed[char]){\n\
    \            if(open[stack.pop()] !== char){\n                return false;\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i]\
    \ === '('){\n            stack.push(string[i]);\n        }\n        else if(string[i]\
    \ === ')'){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            else{\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    var stack = [];\n\
    \    for(var i = 0; i < string.length; i++){\n        if(string[i] == '('){\n\
    \            stack.push(string[i]);\n        }\n        else if(string[i] == ')'){\n\
    \            if(stack.length > 0){\n                stack.pop();\n           \
    \ }\n            else{\n                return false;\n            }\n       \
    \ }\n    }\n    if(stack.length == 0){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\n", "    var stack = [];\n    for(var i = 0;\
    \ i < string.length; i++){\n        if(string[i] == '('){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] == ')'){\n            if(stack.length ==\
    \ 0){\n                return false;\n            }\n            stack.pop();\n\
    \        }\n    }\n    return true;\n}\n", "    let stack = [];\n    let open\
    \ = {'(': ')', '[': ']', '{': '}'};\n    let closed = {')': true, ']': true, '}':\
    \ true};\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (open[char]) {\n            stack.push(char);\n        } else if (closed[char])\
    \ {\n            if (open[stack.pop()] !== char) return false;\n        }\n  \
    \  }\n    return stack.length === 0;\n}\n", "    let stack = [];\n    for(let\
    \ i = 0; i < string.length; i++){\n        if(string[i] === \"[\"){\n        \
    \    stack.push(string[i]);\n        }\n        else if(string[i] === \"]\"){\n\
    \            if(stack.length === 0){\n                return false;\n        \
    \    }\n            else{\n                stack.pop();\n            }\n     \
    \   }\n    }\n    if(stack.length === 0){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}", "    let stack = [];\n    for(let i = 0; i\
    \ < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n\
    \        }\n        else{\n            if(stack.length === 0){\n             \
    \   return false;\n            }\n            else{\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack = [];\n    let map = {\n        '(': ')',\n        '[': ']',\n       \
    \ '{': '}'\n    }\n    for(let i = 0; i < string.length; i++){\n        if(string[i]\
    \ === '(' || string[i] === '[' || string[i] === '{'){\n            stack.push(string[i]);\n\
    \        } else {\n            let last = stack.pop();\n            if(string[i]\
    \ !== map[last]){\n                return false;\n            }\n        }\n \
    \   }\n    if(stack.length !== 0){\n        return false;\n    }\n    return true;\n\
    }", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n      \
    \  if(string[i] === \"[\"){\n            stack.push(string[i]);\n        }\n \
    \       else if(string[i] === \"]\"){\n            if(stack.length === 0){\n \
    \               return false;\n            }\n            else{\n            \
    \    stack.pop();\n            }\n        }\n    }\n    if(stack.length === 0){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\n", " \
    \   let stack = [];\n    let open = { '{': '}', '[': ']', '(': ')' };\n    let\
    \ closed = { '}': true, ']': true, ')': true };\n  \n    for (let i = 0; i < string.length;\
    \ i++) {\n      let char = string[i];\n      if (open[char]) {\n        stack.push(char);\n\
    \      } else if (closed[char]) {\n        if (open[stack.pop()] !== char) return\
    \ false;\n      }\n    }\n    return stack.length === 0;\n  }\n  console.log(is_nested(\"\
    {[()]}\"));\n  console.log(is_nested(\"{[(])}\"));\n  console.log(is_nested(\"\
    {{[[(())]]}}\"));\n  console.log(is_nested(\"{[()]\"));\n  console.log(is_nested(\"\
    }[()]\"));\n  console.log(is_nested(\"{[()]}}\"));\n  console.log(is_nested(\"\
    {[()]}{\"));\n  console.log(is_nested(\"{[()]}}\"));\n  console.log(is_nested(\"\
    {[()]}{\"));\n  console.log(is_nested(\"{[()]}{\"));\n  console.log(is_nested(\"\
    {[()]}{\"));\n  console.log(is_nested(\"{[()]}{\"));\n  console.log(is_nested(\"\
    {[()]}{\"));\n  console.log(is_nested(\"{[()]}{\"));\n  console.log(is_nested(\"\
    {[()]}{\"));\n  console.log(is_nested(\"{[()]}{\"));\n  console.log(is_nested(\"\
    {[()]}{\"));\n  console.log(is_nested(\"{[()]}{\"));\n  console.log(is_nested(\"\
    {[()]}{\"));\n  console.log(is_nested(\"{[()]}{\"));\n  console.log(is_nested(\"\
    {[()]}{\"));\n  console.log(is_", "    let stack = [];\n    for(let i = 0; i <\
    \ string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] === ']'){\n            if(stack.length ===\
    \ 0){\n                return false;\n            }\n            else{\n     \
    \           stack.pop();\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack = [];\n    let map = {\n        '{': '}',\n   \
    \     '[': ']',\n        '(': ')'\n    }\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '{' || string[i] === '[' || string[i] === '('){\n\
    \            stack.push(string[i]);\n        } else {\n            let last =\
    \ stack.pop();\n            if(string[i] !== map[last]){\n                return\
    \ false;\n            }\n        }\n    }\n    if(stack.length !== 0){\n     \
    \   return false;\n    }\n    return true;\n}\n", "    var stack = [];\n    var\
    \ open = { '{': '}', '[': ']', '(': ')' };\n    var closed = { '}': true, ']':\
    \ true, ')': true };\n  \n    for (var i = 0; i < string.length; i ++) {\n   \
    \   var letter = string[i];\n      if (open[letter]) {\n        stack.push(letter);\n\
    \      } else if (closed[letter]) {\n        if (open[stack.pop()] !== letter)\
    \ return false;\n      }\n    }\n    return stack.length === 0;\n  }\n  console.log(is_nested(\"\
    {[()]}\"));\n  console.log(is_nested(\"{[(])}\"));\n  console.log(is_nested(\"\
    {{[[(())]]}}\"));\n  console.log(is_nested(\"{[(])}\"));\n  console.log(is_nested(\"\
    {[(])}\"));\n  console.log(is_nested(\"{[(])}\"));\n  console.log(is_nested(\"\
    {[(])}\"));\n  console.log(is_nested(\"{[(])}\"));\n  console.log(is_nested(\"\
    {[(])}\"));\n  console.log(is_nested(\"{[(])}\"));\n  console.log(is_nested(\"\
    {[(])}\"));\n  console.log(is_nested(\"{[(])}\"));\n  console.log(is_nested(\"\
    {[(])}\"));\n  console.log(is_nested(\"{[(])}\"));\n  console.log(is_nested(\"\
    {[(])}\"));\n  console.log(is_nested(\"{[(])}\"));\n  console.log(is_nested(\"\
    {[(])}\"));\n  console.log(is_nested(\"{[(])}\"));\n  console.log(is_nested(\"\
    {[(])}\"));\n  console.log(is_nested(\"{[(])}\"));\n  console.log(is_n", "   \
    \ var stack = [];\n    for(var i = 0; i < string.length; i++){\n        if(string[i]\
    \ == \"[\"){\n            stack.push(string[i]);\n        }\n        else if(string[i]\
    \ == \"]\"){\n            if(stack.length == 0){\n                return false;\n\
    \            }\n            else{\n                stack.pop();\n            }\n\
    \        }\n    }\n    if(stack.length == 0){\n        return true;\n    }\n \
    \   else{\n        return false;\n    }\n}\n", "    let stack = [];\n    for(let\
    \ i = 0; i < string.length; i++){\n        if(string[i] === '['){\n          \
    \  stack.push(string[i]);\n        }\n        else if(string[i] === ']'){\n  \
    \          if(stack.length === 0){\n                return false;\n          \
    \  }\n            else{\n                stack.pop();\n            }\n       \
    \ }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n    for(let\
    \ i = 0; i < string.length; i++){\n        if(string[i] === \"[\"){\n        \
    \    stack.push(string[i]);\n        }\n        else if(string[i] === \"]\"){\n\
    \            if(stack.length === 0){\n                return false;\n        \
    \    }\n            else{\n                stack.pop();\n            }\n     \
    \   }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n   \
    \ for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n  \
    \          stack.push(string[i]);\n        }\n        else if(string[i] === ']'){\n\
    \            if(stack.length === 0){\n                return false;\n        \
    \    }\n            stack.pop();\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '['){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] === ']'){\n            if(stack.length === 0){\n  \
    \              return false;\n            }\n            else{\n             \
    \   stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    // your code here\n    let stack = [];\n    for(let i = 0; i\
    \ < string.length; i++){\n        if(string[i] === '('){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] === ')'){\n            if(stack.length ===\
    \ 0){\n                return false;\n            }\n            else{\n     \
    \           stack.pop();\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '['){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] === ']'){\n            if(stack.length > 0){\n    \
    \            stack.pop();\n            }\n            else{\n                return\
    \ false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
  "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i]\
    \ === '['){\n            stack.push(string[i]);\n        }\n        else if(string[i]\
    \ === ']'){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            else{\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n\
    \    let map = {\n        '(': ')',\n        '[': ']',\n        '{': '}'\n   \
    \ }\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '('\
    \ || string[i] === '[' || string[i] === '{'){\n            stack.push(string[i]);\n\
    \        }else{\n            let last = stack.pop();\n            if(string[i]\
    \ !== map[last]){\n                return false;\n            }\n        }\n \
    \   }\n    if(stack.length !== 0){\n        return false;\n    }\n    return true;\n\
    }", "    let stack = [];\n    let open = { '{': '}', '[': ']', '(': ')' };\n \
    \   let closed = { '}': true, ']': true, ')': true };\n  \n    for (let i = 0;\
    \ i < string.length; i++) {\n      let char = string[i];\n      if (open[char])\
    \ {\n        stack.push(char);\n      } else if (closed[char]) {\n        if (open[stack.pop()]\
    \ !== char) return false;\n      }\n    }\n    return stack.length === 0;\n  }\n\
    \  console.log(is_nested(\"{[()]}\"));\n  console.log(is_nested(\"{[(])}\"));\n\
    \  console.log(is_nested(\"{{[[(())]]}}\"));", "    let stack = [];\n    for(let\
    \ i = 0; i < string.length; i++){\n        if(string[i] === '['){\n          \
    \  stack.push(string[i]);\n        }\n        else if(string[i] === ']'){\n  \
    \          if(stack.length === 0){\n                return false;\n          \
    \  }\n            else{\n                stack.pop();\n            }\n       \
    \ }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n    for(let\
    \ i = 0; i < string.length; i++){\n        if(string[i] === '['){\n          \
    \  stack.push(string[i]);\n        }\n        else if(string[i] === ']'){\n  \
    \          if(stack.length === 0){\n                return false;\n          \
    \  }\n            else{\n                stack.pop();\n            }\n       \
    \ }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n    for(let\
    \ i = 0; i < string.length; i++){\n        if(string[i] === '('){\n          \
    \  stack.push(string[i]);\n        }\n        else if(string[i] === ')'){\n  \
    \          if(stack.length === 0){\n                return false;\n          \
    \  }\n            stack.pop();\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    let stack = [];\n    let open = { '{': '}', '[': ']', '(': ')'\
    \ };\n    let closed = { '}': true, ']': true, ')': true };\n  \n    for (let\
    \ i = 0; i < string.length; i++) {\n      let char = string[i];\n      if (open[char])\
    \ {\n        stack.push(char);\n      } else if (closed[char]) {\n        if (open[stack.pop()]\
    \ !== char) return false;\n      }\n    }\n    return stack.length === 0;\n  }\n\
    \  console.log(is_nested(\"{[()]}\"))\n  console.log(is_nested(\"{[(])}\"))\n\
    \  console.log(is_nested(\"{{[[(())]]}}\"))\n  console.log(is_nested(\"{[()]}\"\
    ))\n  console.log(is_nested(\"{[(])}\"))\n  console.log(is_nested(\"{{[[(())]]}}\"\
    ))", "    let stack = [];\n    let open = {'{':'}', '[':']', '(':')'};\n    let\
    \ closed = {'}':true, ']':true, ')':true};\n    for(let i = 0; i < string.length;\
    \ i++){\n        let char = string[i];\n        if(open[char]){\n            stack.push(char);\n\
    \        } else if(closed[char]){\n            if(open[stack.pop()] !== char){\n\
    \                return false;\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    var stack = [];\n    for(var i = 0; i < string.length; i++){\n\
    \        if(string[i] == \"[\"){\n            stack.push(string[i]);\n       \
    \ }else if(string[i] == \"]\"){\n            if(stack.length == 0){\n        \
    \        return false;\n            }else{\n                stack.pop();\n   \
    \         }\n        }\n    }\n    if(stack.length == 0){\n        return true;\n\
    \    }else{\n        return false;\n    }\n}\n", "    let stack = [];\n    let\
    \ open = {'(': ')', '[': ']', '{': '}'};\n    let closed = {')': true, ']': true,\
    \ '}': true};\n    for (let i = 0; i < string.length; i++) {\n        let char\
    \ = string[i];\n        if (open[char]) {\n            stack.push(char);\n   \
    \     } else if (closed[char]) {\n            if (open[stack.pop()] !== char)\
    \ return false;\n        }\n    }\n    return stack.length === 0;\n}\n", "   \
    \ let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i]\
    \ === '('){\n            stack.push(string[i]);\n        }\n        else if(string[i]\
    \ === ')'){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            stack.pop();\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '(' || string[i] === '[' || string[i] === '{'){\n  \
    \          stack.push(string[i]);\n        }\n        else if(string[i] === ')'\
    \ || string[i] === ']' || string[i] === '}'){\n            if(stack.length ===\
    \ 0){\n                return false;\n            }\n            else if(string[i]\
    \ === ')' && stack[stack.length - 1] === '('){\n                stack.pop();\n\
    \            }\n            else if(string[i] === ']' && stack[stack.length -\
    \ 1] === '['){\n                stack.pop();\n            }\n            else\
    \ if(string[i] === '}' && stack[stack.length - 1] === '{'){\n                stack.pop();\n\
    \            }\n            else{\n                return false;\n           \
    \ }\n        }\n    }\n    if(stack.length === 0){\n        return true;\n   \
    \ }\n    else{\n        return false;\n    }\n}\n", "    var stack = [];\n   \
    \ for(var i = 0; i < string.length; i++){\n        if(string[i] == \"[\"){\n \
    \           stack.push(string[i]);\n        }\n        else if(string[i] == \"\
    ]\"){\n            if(stack.length == 0){\n                return false;\n   \
    \         }\n            else{\n                stack.pop();\n            }\n\
    \        }\n    }\n    if(stack.length == 0){\n        return true;\n    }\n \
    \   else{\n        return false;\n    }\n}\n", "    let stack = [];\n    for(let\
    \ i = 0; i < string.length; i++){\n        if(string[i] === \"[\"){\n        \
    \    stack.push(string[i]);\n        }\n        else if(string[i] === \"]\"){\n\
    \            if(stack.length === 0){\n                return false;\n        \
    \    }\n            else{\n                stack.pop();\n            }\n     \
    \   }\n    }\n    if(stack.length === 0){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\n", "    var stack = [];\n    for(var i = 0;\
    \ i < string.length; i++){\n        if(string[i] == '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] == ']'){\n            if(stack.length ==\
    \ 0){\n                return false;\n            }\n            else{\n     \
    \           stack.pop();\n            }\n        }\n    }\n    if(stack.length\
    \ == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n\
    }\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n    \
    \    if(string[i] === '['){\n            stack.push(string[i]);\n        }\n \
    \       else if(string[i] === ']'){\n            if(stack.length === 0){\n   \
    \             return false;\n            }\n            else{\n              \
    \  stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '['){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] === ']'){\n            if(stack.length === 0){\n  \
    \              return false;\n            }\n            else{\n             \
    \   stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '('){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] === ')'){\n            if(stack.length === 0){\n  \
    \              return false;\n            }\n            else{\n             \
    \   stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === \"[\"){\n            stack.push(string[i]);\n      \
    \  }\n        else if(string[i] === \"]\"){\n            if(stack.length === 0){\n\
    \                return false;\n            }\n            else{\n           \
    \     stack.pop();\n            }\n        }\n    }\n    if(stack.length === 0){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\n", " \
    \   var stack = [];\n    for(var i = 0; i < string.length; i++){\n        if(string[i]\
    \ == '['){\n            stack.push(string[i]);\n        }\n        else if(string[i]\
    \ == ']'){\n            if(stack.length == 0){\n                return false;\n\
    \            }\n            else{\n                stack.pop();\n            }\n\
    \        }\n    }\n    if(stack.length == 0){\n        return true;\n    }\n \
    \   else{\n        return false;\n    }\n}\n", "    let stack = [];\n    let open\
    \ = {'{':'}', '[':']', '(':')'};\n    let closed = {'}':true, ']':true, ')':true};\n\
    \    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n\
    \        if(open[char]){\n            stack.push(char);\n        }else if(closed[char]){\n\
    \            if(open[stack.pop()] !== char){\n                return false;\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i]\
    \ === \"[\"){\n            stack.push(string[i]);\n        }\n        else if(string[i]\
    \ === \"]\"){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            stack.pop();\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === \"[\"){\n            stack.push(string[i]);\n      \
    \  }\n        else if(string[i] === \"]\"){\n            if(stack.length === 0){\n\
    \                return false;\n            }\n            else{\n           \
    \     stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '['){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] === ']'){\n            if(stack.length === 0){\n  \
    \              return false;\n            }\n            stack.pop();\n      \
    \  }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n    for(let\
    \ i = 0; i < string.length; i++){\n        if(string[i] === \"[\"){\n        \
    \    stack.push(string[i]);\n        }\n        else if(string[i] === \"]\"){\n\
    \            if(stack.length === 0){\n                return false;\n        \
    \    }\n            else{\n                stack.pop();\n            }\n     \
    \   }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n   \
    \ for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n  \
    \          stack.push(string[i]);\n        }\n        else if(string[i] === ']'){\n\
    \            if(stack.length === 0){\n                return false;\n        \
    \    }\n            else{\n                stack.pop();\n            }\n     \
    \   }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n   \
    \ for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n  \
    \          stack.push(string[i]);\n        }\n        else if(string[i] === ']'){\n\
    \            if(stack.length === 0){\n                return false;\n        \
    \    }\n            stack.pop();\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    var stack = [];\n    var open = { '{': '}', '[': ']', '(': ')'\
    \ };\n    var closed = { '}': true, ']': true, ')': true };\n  \n    for (var\
    \ i = 0; i < string.length; i++) {\n      var letter = string[i];\n      if (open[letter])\
    \ {\n        stack.push(letter);\n      } else if (closed[letter]) {\n       \
    \ if (open[stack.pop()] !== letter) return false;\n      }\n    }\n    return\
    \ stack.length === 0;\n  }\n  console.log(is_nested(\"{[()]}\"));\n  console.log(is_nested(\"\
    {[(])}\"));\n  console.log(is_nested(\"{{[[(())]]}}\"));\n  console.log(is_nested(\"\
    {[()]\"));\n  console.log(is_nested(\"{[()]}}\"));\n  console.log(is_nested(\"\
    {[()]}}\"));\n  console.log(is_nested(\"{[()]}}\"));\n  console.log(is_nested(\"\
    {[()]}}\"));\n  console.log(is_nested(\"{[()]}}\"));\n  console.log(is_nested(\"\
    {[()]}}\"));\n  console.log(is_nested(\"{[()]}}\"));\n  console.log(is_nested(\"\
    {[()]}}\"));\n  console.log(is_nested(\"{[()]}}\"));\n  console.log(is_nested(\"\
    {[()]}}\"));\n  console.log(is_nested(\"{[()]}}\"));\n  console.log(is_nested(\"\
    {[()]}}\"));\n  console.log(is_nested(\"{[()]}}\"));\n  console.log(is_nested(\"\
    {[()]}}\"));\n  console.log(is_nested(\"{[()]}}\"));\n  console.log(is_nested(\"\
    {[()]}}\"));\n  console.log(is_nested(\"", "    var stack = [];\n    for(var i\
    \ = 0; i < string.length; i++){\n        if(string[i] == \"[\"){\n           \
    \ stack.push(string[i]);\n        }\n        else if(string[i] == \"]\"){\n  \
    \          if(stack.length == 0){\n                return false;\n           \
    \ }\n            else{\n                stack.pop();\n            }\n        }\n\
    \    }\n    if(stack.length == 0){\n        return true;\n    }\n    else{\n \
    \       return false;\n    }\n}\n", "    let stack = [];\n    let map = {\n  \
    \      '(': ')',\n        '[': ']',\n        '{': '}'\n    }\n    for(let i =\
    \ 0; i < string.length; i++){\n        if(string[i] === '(' || string[i] === '['\
    \ || string[i] === '{'){\n            stack.push(string[i]);\n        } else {\n\
    \            let last = stack.pop();\n            if(string[i] !== map[last]){\n\
    \                return false;\n            }\n        }\n    }\n    if(stack.length\
    \ !== 0){\n        return false;\n    }\n    return true;\n}\n", "  let stack\
    \ = [];\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === '['){\n\
    \      stack.push(string[i]);\n    }\n    else if(string[i] === ']'){\n      if(stack.length\
    \ === 0){\n        return false;\n      }\n      else{\n        stack.pop();\n\
    \      }\n    }\n  }\n  return stack.length === 0;\n}\n", "    let stack = [];\n\
    \    let open = {'{':'}', '[':']', '(':')'};\n    let closed = {'}':true, ']':true,\
    \ ')':true};\n    for(let i = 0; i < string.length; i++){\n        let char =\
    \ string[i];\n        if(open[char]){\n            stack.push(char);\n       \
    \ } else if(closed[char]){\n            if(open[stack.pop()] !== char){\n    \
    \            return false;\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '['){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] === ']'){\n            if(stack.length === 0){\n  \
    \              return false;\n            }\n            else{\n             \
    \   stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '['){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] === ']'){\n            if(stack.length === 0){\n  \
    \              return false;\n            }\n            else{\n             \
    \   stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    var stack = [];\n    for(var i = 0; i < string.length; i++){\n\
    \        if(string[i] == '['){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] == ']'){\n            if(stack.length == 0){\n    \
    \            return false;\n            }\n            else{\n               \
    \ stack.pop();\n            }\n        }\n    }\n    if(stack.length == 0){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\n", " \
    \   let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i]\
    \ === \"[\"){\n            stack.push(string[i]);\n        }\n        else if(string[i]\
    \ === \"]\"){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            else{\n                stack.pop();\n            }\n\
    \        }\n    }\n    if(stack.length === 0){\n        return true;\n    }\n\
    \    else{\n        return false;\n    }\n}\n", "    let stack = [];\n    for(let\
    \ i = 0; i < string.length; i++){\n        if(string[i] === '('){\n          \
    \  stack.push(string[i]);\n        }\n        else if(string[i] === ')'){\n  \
    \          if(stack.length === 0){\n                return false;\n          \
    \  }\n            else{\n                stack.pop();\n            }\n       \
    \ }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n    let\
    \ open = {'(': ')', '[': ']', '{': '}'};\n    let closed = {')': true, ']': true,\
    \ '}': true};\n    for (let i = 0; i < string.length; i++) {\n        let char\
    \ = string[i];\n        if (open[char]) {\n            stack.push(char);\n   \
    \     } else if (closed[char]) {\n            if (open[stack.pop()] !== char)\
    \ return false;\n        }\n    }\n    return stack.length === 0;\n}\n", "   \
    \ let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i]\
    \ === '(' || string[i] === '{' || string[i] === '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] === ')' || string[i] === '}' || string[i]\
    \ === ']'){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            else if(string[i] === ')' && stack[stack.length -\
    \ 1] === '('){\n                stack.pop();\n            }\n            else\
    \ if(string[i] === '}' && stack[stack.length - 1] === '{'){\n                stack.pop();\n\
    \            }\n            else if(string[i] === ']' && stack[stack.length -\
    \ 1] === '['){\n                stack.pop();\n            }\n            else{\n\
    \                return false;\n            }\n        }\n    }\n    if(stack.length\
    \ === 0){\n        return true;\n    }\n    else{\n        return false;\n   \
    \ }\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '('){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] === ')'){\n            if(stack.length === 0){\n  \
    \              return false;\n            }\n            else{\n             \
    \   stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    let stack = [];\n    let open = {'(':')', '[':']', '{':'}'};\n\
    \    let closed = {')':true, ']':true, '}':true};\n    for(let i = 0; i < string.length;\
    \ i++){\n        let char = string[i];\n        if(open[char]){\n            stack.push(char);\n\
    \        } else if(closed[char]){\n            if(open[stack.pop()] !== char){\n\
    \                return false;\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '['){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] === ']'){\n            if(stack.length === 0){\n  \
    \              return false;\n            }\n            else{\n             \
    \   stack.pop();\n            }\n        }\n    }\n    if(stack.length === 0){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\n", " \
    \   let stack = [];\n    let open = {'(': ')', '[': ']', '{': '}'};\n    let closed\
    \ = {')': true, ']': true, '}': true};\n    for (let i = 0; i < string.length;\
    \ i++) {\n        let char = string[i];\n        if (open[char]) {\n         \
    \   stack.push(char);\n        } else if (closed[char]) {\n            if (open[stack.pop()]\
    \ !== char) return false;\n        }\n    }\n    return stack.length === 0;\n\
    }\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n    \
    \    if(string[i] === '('){\n            stack.push(string[i]);\n        }\n \
    \       else if(string[i] === ')'){\n            if(stack.length === 0){\n   \
    \             return false;\n            }\n            else{\n              \
    \  stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '['){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] === ']'){\n            if(stack.length === 0){\n  \
    \              return false;\n            }\n            else{\n             \
    \   stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '['){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] === ']'){\n            if(stack.length === 0){\n  \
    \              return false;\n            }\n            else{\n             \
    \   stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    let stack = [];\n    let open = {'{':'}', '[':']', '(':')'};\n\
    \    let closed = {'}':true, ']':true, ')':true};\n    for(let i = 0; i < string.length;\
    \ i++){\n        let char = string[i];\n        if(open[char]){\n            stack.push(char);\n\
    \        } else if(closed[char]){\n            if(open[stack.pop()] !== char){\n\
    \                return false;\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '['){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] === ']'){\n            if(stack.length === 0){\n  \
    \              return false;\n            }\n            else{\n             \
    \   stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === \"[\"){\n            stack.push(string[i]);\n      \
    \  }\n        else if(string[i] === \"]\"){\n            if(stack.length === 0){\n\
    \                return false;\n            }\n            else{\n           \
    \     stack.pop();\n            }\n        }\n    }\n    if(stack.length === 0){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\n", " \
    \   let stack = [];\n    let open = { '{': '}', '[': ']', '(': ')' };\n    let\
    \ closed = { '}': true, ']': true, ')': true };\n  \n    for (let i = 0; i < string.length;\
    \ i++) {\n      let char = string[i];\n      if (open[char]) {\n        stack.push(char);\n\
    \      } else if (closed[char]) {\n        if (open[stack.pop()] !== char) return\
    \ false;\n      }\n    }\n    return stack.length === 0;\n  }\n  console.log(is_nested(\"\
    {[()]}\"))\n  console.log(is_nested(\"{[(])}\"))\n  console.log(is_nested(\"{{[[(())]]}}\"\
    ))", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n     \
    \   if(string[i] === '['){\n            stack.push(string[i]);\n        }\n  \
    \      else if(string[i] === ']'){\n            if(stack.length === 0){\n    \
    \            return false;\n            }\n            stack.pop();\n        }\n\
    \    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n    for(let\
    \ i = 0; i < string.length; i++){\n        if(string[i] === '['){\n          \
    \  stack.push(string[i]);\n        }\n        else if(string[i] === ']'){\n  \
    \          if(stack.length === 0){\n                return false;\n          \
    \  }\n            else{\n                stack.pop();\n            }\n       \
    \ }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n    let\
    \ map = {\n        '(': ')',\n        '[': ']',\n        '{': '}'\n    }\n   \
    \ for(let i = 0; i < string.length; i++){\n        if(string[i] === '(' || string[i]\
    \ === '[' || string[i] === '{'){\n            stack.push(string[i]);\n       \
    \ }else{\n            let last = stack.pop();\n            if(string[i] !== map[last]){\n\
    \                return false;\n            }\n        }\n    }\n    if(stack.length\
    \ !== 0){\n        return false;\n    }\n    return true;\n}\n", "    let stack\
    \ = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] ===\
    \ '('){\n            stack.push(string[i]);\n        }\n        else if(string[i]\
    \ === ')'){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            else{\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n\
    \    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n\
    \            stack.push(string[i]);\n        }\n        else if(string[i] ===\
    \ ']'){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            else{\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n\
    \    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n\
    \            stack.push(string[i]);\n        }\n        else if(string[i] ===\
    \ ']'){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            else{\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n\
    \    for(let i = 0; i < string.length; i++){\n        if(string[i] === \"[\"){\n\
    \            stack.push(string[i]);\n        }\n        else if(string[i] ===\
    \ \"]\"){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            else{\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    var stack = [];\n\
    \    for(var i = 0; i < string.length; i++){\n        if(string[i] == \"[\"){\n\
    \            stack.push(string[i]);\n        }\n        else if(string[i] == \"\
    ]\"){\n            if(stack.length == 0){\n                return false;\n   \
    \         }\n            else{\n                stack.pop();\n            }\n\
    \        }\n    }\n    if(stack.length == 0){\n        return true;\n    }\n \
    \   else{\n        return false;\n    }\n}\n", "    let stack = [];\n    let open\
    \ = {'{':'}', '[':']', '(':')'};\n    let closed = {'}':true, ']':true, ')':true};\n\
    \    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n\
    \        if(open[char]){\n            stack.push(char);\n        }else if(closed[char]){\n\
    \            if(open[stack.pop()] !== char){\n                return false;\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i]\
    \ === '['){\n            stack.push(string[i]);\n        }\n        else if(string[i]\
    \ === ']'){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            else{\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n\
    \    let brackets = {\n        '{': '}',\n        '[': ']',\n        '(': ')'\n\
    \    };\n    for(let i = 0; i < string.length; i++){\n        if(string[i] ===\
    \ '{' || string[i] === '[' || string[i] === '('){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] === '}' || string[i] === ']' || string[i]\
    \ === ')'){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            let last = stack.pop();\n            if(string[i]\
    \ !== brackets[last]){\n                return false;\n            }\n       \
    \ }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n    for(let\
    \ i = 0; i < string.length; i++){\n        if(string[i] === '['){\n          \
    \  stack.push(string[i]);\n        }\n        else if(string[i] === ']'){\n  \
    \          if(stack.length === 0){\n                return false;\n          \
    \  }\n            else{\n                stack.pop();\n            }\n       \
    \ }\n    }\n    return stack.length === 0;\n}\n", "    var stack = [];\n    for(var\
    \ i = 0; i < string.length; i++){\n        if(string[i] == \"[\"){\n         \
    \   stack.push(string[i]);\n        }\n        else if(string[i] == \"]\"){\n\
    \            if(stack.length == 0){\n                return false;\n         \
    \   }\n            else{\n                stack.pop();\n            }\n      \
    \  }\n    }\n    if(stack.length == 0){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\n", "    let stack = [];\n    let open = { '{':\
    \ '}', '[': ']', '(': ')' };\n    let closed = { '}': true, ']': true, ')': true\
    \ };\n  \n    for (let i = 0; i < string.length; i++) {\n      let char = string[i];\n\
    \      if (open[char]) {\n        stack.push(char);\n      } else if (closed[char])\
    \ {\n        if (open[stack.pop()] !== char) return false;\n      }\n    }\n \
    \   return stack.length === 0;\n  }\n  console.log(is_nested(\"{[()]}\"))\n  console.log(is_nested(\"\
    {[(])}\"))\n  console.log(is_nested(\"{[}\"))\n  console.log(is_nested(\"{[]}\"\
    ))\n  console.log(is_nested(\"{[()]}\"))\n  console.log(is_nested(\"{[(])}\"))\n\
    \  console.log(is_nested(\"{[}\"))\n  console.log(is_nested(\"{[]}\"))\n  console.log(is_nested(\"\
    {[()]}\"))\n  console.log(is_nested(\"{[(])}\"))\n  console.log(is_nested(\"{[}\"\
    ))\n  console.log(is_nested(\"{[]}\"))\n  console.log(is_nested(\"{[()]}\"))\n\
    \  console.log(is_nested(\"{[(])}\"))\n  console.log(is_nested(\"{[}\"))\n  console.log(is_nested(\"\
    {[]}\"))\n  console.log(is_nested(\"{[()]}\"))\n  console.log(is_nested(\"{[(])}\"\
    ))\n  console.log(is_nested(\"{[}\"))\n  console.log(is_nested(\"{[]}\"))", " \
    \   let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i]\
    \ === \"[\"){\n            stack.push(string[i]);\n        }\n        else if(string[i]\
    \ === \"]\"){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            stack.pop();\n        }\n    }\n    return stack.length\
    \ === 0;\n}", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '['){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] === ']'){\n            if(stack.length === 0){\n  \
    \              return false;\n            }\n            else{\n             \
    \   stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '['){\n            stack.push(string[i]);\n        }else\
    \ if(string[i] === ']'){\n            if(stack.length === 0){\n              \
    \  return false;\n            }else{\n                stack.pop();\n         \
    \   }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let stack\
    \ = [];\n    let open = {'{':'}', '[':']', '(':')'};\n    let closed = {'}':true,\
    \ ']':true, ')':true};\n    for(let i = 0; i < string.length; i++){\n        let\
    \ char = string[i];\n        if(open[char]){\n            stack.push(char);\n\
    \        }else if(closed[char]){\n            if(open[stack.pop()] !== char){\n\
    \                return false;\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '('){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] === ')'){\n            if(stack.length === 0){\n  \
    \              return false;\n            }\n            else{\n             \
    \   stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    let stack = [];\n    let open = {'(':')', '[':']', '{':'}'};\n\
    \    let closed = {')':true, ']':true, '}':true};\n    for(let i = 0; i < string.length;\
    \ i++){\n        let char = string[i];\n        if(open[char]){\n            stack.push(char);\n\
    \        }else if(closed[char]){\n            if(open[stack.pop()] !== char){\n\
    \                return false;\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '['){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] === ']'){\n            if(stack.length === 0){\n  \
    \              return false;\n            }\n            else{\n             \
    \   stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    let stack = [];\n    let open = { '{': '}', '[': ']', '(': ')'\
    \ };\n    let closed = { '}': true, ']': true, ')': true };\n  \n    for (let\
    \ i = 0; i < string.length; i++) {\n      let char = string[i];\n      if (open[char])\
    \ {\n        stack.push(char);\n      } else if (closed[char]) {\n        if (open[stack.pop()]\
    \ !== char) return false;\n      }\n    }\n    return stack.length === 0;\n  }\n\
    \  console.log(is_nested(\"{[()]}\"))\n  console.log(is_nested(\"{[(])}\"))\n\
    \  console.log(is_nested(\"{{[[(())]]}}\"))", "    let stack = [];\n    for(let\
    \ i = 0; i < string.length; i++){\n        if(string[i] === '['){\n          \
    \  stack.push(string[i]);\n        }\n        else if(string[i] === ']'){\n  \
    \          if(stack.length === 0){\n                return false;\n          \
    \  }\n            else{\n                stack.pop();\n            }\n       \
    \ }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n    let\
    \ open = {'{':'}', '[':']', '(':')'};\n    let closed = {'}':true, ']':true, ')':true};\n\
    \    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n\
    \        if(open[char]){\n            stack.push(char);\n        }else if(closed[char]){\n\
    \            if(open[stack.pop()] !== char){\n                return false;\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack = [];\n    let map = {\n        '(': ')',\n        '[': ']',\n       \
    \ '{': '}'\n    }\n    for(let i = 0; i < string.length; i++){\n        if(string[i]\
    \ === '(' || string[i] === '[' || string[i] === '{'){\n            stack.push(string[i]);\n\
    \        } else {\n            let last = stack.pop();\n            if(string[i]\
    \ !== map[last]){\n                return false;\n            }\n        }\n \
    \   }\n    if(stack.length !== 0){\n        return false;\n    }\n    return true;\n\
    }\n", "  let stack = [];\n  for(let i = 0; i < string.length; i++){\n    if(string[i]\
    \ === '['){\n      stack.push(string[i]);\n    }\n    else if(string[i] === ']'){\n\
    \      if(stack.length === 0){\n        return false;\n      }\n      else{\n\
    \        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n}\n",
  "    var stack = [];\n    for(var i = 0; i < string.length; i++){\n        if(string[i]\
    \ == '['){\n            stack.push(string[i]);\n        }\n        else if(string[i]\
    \ == ']'){\n            if(stack.length == 0){\n                return false;\n\
    \            }\n            else{\n                stack.pop();\n            }\n\
    \        }\n    }\n    if(stack.length == 0){\n        return true;\n    }\n \
    \   else{\n        return false;\n    }\n}\n", "    let stack = [];\n    for(let\
    \ i = 0; i < string.length; i++){\n        if(string[i] === '['){\n          \
    \  stack.push(string[i]);\n        }\n        else if(string[i] === ']'){\n  \
    \          if(stack.length === 0){\n                return false;\n          \
    \  }\n            else{\n                stack.pop();\n            }\n       \
    \ }\n    }\n    return stack.length === 0;\n}\n", "    let stack = []\n    for(let\
    \ i = 0; i < string.length; i++){\n        if(string[i] === \"[\"){\n        \
    \    stack.push(string[i])\n        }\n        else if(string[i] === \"]\"){\n\
    \            if(stack.length === 0){\n                return false\n         \
    \   }\n            else{\n                stack.pop()\n            }\n       \
    \ }\n    }\n    if(stack.length === 0){\n        return true\n    }\n    else{\n\
    \        return false\n    }\n}\n", "    let stack = [];\n    for(let i = 0; i\
    \ < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] === ']'){\n            if(stack.length ===\
    \ 0){\n                return false;\n            }\n            else{\n     \
    \           stack.pop();\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack = [];\n    let open = {'(':')', '[':']', '{':'}'};\n\
    \    let closed = {')':true, ']':true, '}':true};\n    for(let i = 0; i < string.length;\
    \ i++){\n        let char = string[i];\n        if(open[char]){\n            stack.push(char);\n\
    \        } else if(closed[char]){\n            if(open[stack.pop()] !== char){\n\
    \                return false;\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack = [];\n    let map = {\n        '(': ')',\n   \
    \     '[': ']',\n        '{': '}'\n    }\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '(' || string[i] === '[' || string[i] === '{'){\n\
    \            stack.push(string[i]);\n        } else {\n            let last =\
    \ stack.pop();\n            if(string[i] !== map[last]){\n                return\
    \ false;\n            }\n        }\n    }\n    if(stack.length !== 0){\n     \
    \   return false;\n    }\n    return true;\n}\n", "    let stack = [];\n    let\
    \ open = {'{':'}', '[':']', '(':')'};\n    let closed = {'}':true, ']':true, ')':true};\n\
    \    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n\
    \        if(open[char]){\n            stack.push(char);\n        } else if(closed[char]){\n\
    \            if(open[stack.pop()] !== char){\n                return false;\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    var\
    \ stack = [];\n    var map = {\n        '(': ')',\n        '[': ']',\n       \
    \ '{': '}'\n    }\n    for(var i = 0; i < string.length; i++){\n        if(string[i]\
    \ === '(' || string[i] === '[' || string[i] === '{'){\n            stack.push(string[i]);\n\
    \        }else{\n            var last = stack.pop();\n            if(string[i]\
    \ !== map[last]){\n                return false;\n            }\n        }\n \
    \   }\n    if(stack.length !== 0){\n        return false;\n    }\n    return true;\n\
    }", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n      \
    \  if(string[i] === '['){\n            stack.push(string[i]);\n        }\n   \
    \     else if(string[i] === ']'){\n            if(stack.length === 0){\n     \
    \           return false;\n            }\n            else{\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i]\
    \ === \"[\"){\n            stack.push(string[i]);\n        }\n        else if(string[i]\
    \ === \"]\"){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            stack.pop();\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '('){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] === ')'){\n            if(stack.length === 0){\n  \
    \              return false;\n            }\n            else{\n             \
    \   stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    let stack = [];\n    let open = {'{':'}', '[':']', '(':')'};\n\
    \    let closed = {'}':true, ']':true, ')':true};\n    for(let i = 0; i < string.length;\
    \ i++){\n        let char = string[i];\n        if(open[char]){\n            stack.push(char);\n\
    \        }else if(closed[char]){\n            if(open[stack.pop()] !== char){\n\
    \                return false;\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '['){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] === ']'){\n            if(stack.length === 0){\n  \
    \              return false;\n            }\n            else{\n             \
    \   stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '['){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] === ']'){\n            if(stack.length === 0){\n  \
    \              return false;\n            }\n            else{\n             \
    \   stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === \"[\"){\n            stack.push(string[i]);\n      \
    \  }\n        else if(string[i] === \"]\"){\n            if(stack.length === 0){\n\
    \                return false;\n            }\n            else{\n           \
    \     stack.pop();\n            }\n        }\n    }\n    if(stack.length === 0){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\n", " \
    \ let stack = [];\n  for(let i = 0; i < string.length; i++){\n    if(string[i]\
    \ === '['){\n      stack.push(string[i]);\n    }\n    else if(string[i] === ']'){\n\
    \      if(stack.length === 0){\n        return false;\n      }\n      else{\n\
    \        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n}\n",
  "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i]\
    \ === \"[\"){\n            stack.push(string[i]);\n        }\n        else if(string[i]\
    \ === \"]\"){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            else{\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n\
    \    let open = {'{':'}', '[':']', '(':')'};\n    let closed = {'}':true, ']':true,\
    \ ')':true};\n    for(let i = 0; i < string.length; i++){\n        let char =\
    \ string[i];\n        if(open[char]){\n            stack.push(char);\n       \
    \ } else if(closed[char]){\n            if(open[stack.pop()] !== char){\n    \
    \            return false;\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '['){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] === ']'){\n            if(stack.length === 0){\n  \
    \              return false;\n            }\n            else{\n             \
    \   stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    let stack = [];\n    let open = {'(': ')', '[': ']', '{': '}'};\n\
    \    let closed = {')': true, ']': true, '}': true};\n    for (let i = 0; i <\
    \ string.length; i++) {\n        let char = string[i];\n        if (open[char])\
    \ {\n            stack.push(char);\n        } else if (closed[char]) {\n     \
    \       if (open[stack.pop()] !== char) return false;\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n", "    var stack = [];\n    for(var i = 0; i < string.length;\
    \ i++){\n        if(string[i] == \"[\"){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] == \"]\"){\n            if(stack.length\
    \ == 0){\n                return false;\n            }\n            stack.pop();\n\
    \        }\n    }\n    if(stack.length == 0){\n        return true;\n    }\n \
    \   return false;\n}\n", "    var stack = [];\n    for(var i = 0; i < string.length;\
    \ i++){\n        if(string[i] == '['){\n            stack.push(string[i]);\n \
    \       }\n        else if(string[i] == ']'){\n            if(stack.length ==\
    \ 0){\n                return false;\n            }\n            else{\n     \
    \           stack.pop();\n            }\n        }\n    }\n    if(stack.length\
    \ == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n\
    }\n", "    let stack = [];\n    let open = { '{': '}', '[': ']', '(': ')' };\n\
    \    let closed = { '}': true, ']': true, ')': true };\n  \n    for (let i = 0;\
    \ i < string.length; i++) {\n      let char = string[i];\n      if (open[char])\
    \ {\n        stack.push(char);\n      } else if (closed[char]) {\n        if (open[stack.pop()]\
    \ !== char) return false;\n      }\n    }\n    return stack.length === 0;\n  }\n\
    \  console.log(is_nested(\"{[()]}\"));\n  console.log(is_nested(\"{[(])}\"));\n\
    \  console.log(is_nested(\"{{[[(())]]}}\"));", "    let count = 0;\n    for(let\
    \ i = 0; i < string.length; i++){\n        if(string[i] === \"[\"){\n        \
    \    count++;\n        }\n        if(string[i] === \"]\"){\n            count--;\n\
    \        }\n        if(count < 0){\n            return false;\n        }\n   \
    \ }\n    return count === 0;\n}\n", "    let stack = [];\n    let map = {\n  \
    \      '(': ')',\n        '[': ']',\n        '{': '}'\n    }\n    for(let i =\
    \ 0; i < string.length; i++){\n        if(string[i] === '(' || string[i] === '['\
    \ || string[i] === '{'){\n            stack.push(string[i]);\n        }else{\n\
    \            let last = stack.pop();\n            if(string[i] !== map[last]){\n\
    \                return false;\n            }\n        }\n    }\n    if(stack.length\
    \ !== 0){\n        return false;\n    }\n    return true;\n}\n", "    let stack\
    \ = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] ===\
    \ '['){\n            stack.push(string[i]);\n        }\n        else if(string[i]\
    \ === ']'){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            else{\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    var stack = [];\n\
    \    for(var i = 0; i < string.length; i++){\n        if(string[i] == '['){\n\
    \            stack.push(string[i]);\n        }\n        else if(string[i] == ']'){\n\
    \            if(stack.length == 0){\n                return false;\n         \
    \   }\n            else{\n                stack.pop();\n            }\n      \
    \  }\n    }\n    if(stack.length == 0){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\n", "    let stack = [];\n    for(let i = 0;\
    \ i < string.length; i++){\n        if(string[i] === \"[\"){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] === \"]\"){\n            if(stack.length\
    \ === 0){\n                return false;\n            }\n            else{\n \
    \               stack.pop();\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack = [];\n    let map = {\n        '(': ')',\n   \
    \     '[': ']',\n        '{': '}'\n    }\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '(' || string[i] === '[' || string[i] === '{'){\n\
    \            stack.push(string[i]);\n        } else {\n            let last =\
    \ stack.pop();\n            if(string[i] !== map[last]){\n                return\
    \ false;\n            }\n        }\n    }\n    if(stack.length !== 0){\n     \
    \   return false;\n    }\n    return true;\n}\n", "    let stack = [];\n    let\
    \ open = {'(':')', '[':']', '{':'}'};\n    let closed = {')':true, ']':true, '}':true};\n\
    \    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n\
    \        if(open[char]){\n            stack.push(char);\n        }else if(closed[char]){\n\
    \            if(open[stack.pop()] !== char){\n                return false;\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i]\
    \ === '['){\n            stack.push(string[i]);\n        }\n        else if(string[i]\
    \ === ']'){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            else{\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n\
    \    for(let i = 0; i < string.length; i++){\n        if(string[i] === '('){\n\
    \            stack.push(string[i]);\n        }\n        else if(string[i] ===\
    \ ')'){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            stack.pop();\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === \"[\"){\n            stack.push(string[i]);\n      \
    \  }\n        else if(string[i] === \"]\"){\n            if(stack.length === 0){\n\
    \                return false;\n            }\n            else{\n           \
    \     stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    let stack = [];\n    let open = {'(':')', '[':']', '{':'}'};\n\
    \    let closed = {')':true, ']':true, '}':true};\n    for(let i = 0; i < string.length;\
    \ i++){\n        let char = string[i];\n        if(open[char]){\n            stack.push(char);\n\
    \        }else if(closed[char]){\n            if(open[stack.pop()] !== char){\n\
    \                return false;\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === \"[\"){\n            stack.push(string[i]);\n      \
    \  }\n        else if(string[i] === \"]\"){\n            if(stack.length === 0){\n\
    \                return false;\n            }\n            else{\n           \
    \     stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    let stack = [];\n    let open = {'(':')', '[':']', '{':'}'};\n\
    \    let closed = {')':true, ']':true, '}':true};\n    for(let i = 0; i < string.length;\
    \ i++){\n        let char = string[i];\n        if(open[char]){\n            stack.push(char);\n\
    \        } else if(closed[char]){\n            if(open[stack.pop()] !== char){\n\
    \                return false;\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack = [];\n    let open = {'{':'}', '[':']', '(':')'};\n\
    \    let closed = {'}':true, ']':true, ')':true};\n    for(let i = 0; i < string.length;\
    \ i++){\n        let char = string[i];\n        if(open[char]){\n            stack.push(char);\n\
    \        } else if(closed[char]){\n            if(open[stack.pop()] !== char){\n\
    \                return false;\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "  let stack = [];\n  for(let i = 0; i < string.length; i++){\n\
    \    if(string[i] === '['){\n      stack.push(string[i]);\n    } else if(string[i]\
    \ === ']'){\n      if(stack.length === 0){\n        return false;\n      } else\
    \ {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n\
    }\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n    \
    \    if(string[i] === \"[\"){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] === \"]\"){\n            if(stack.length === 0){\n\
    \                return false;\n            }\n            else{\n           \
    \     stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '['){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] === ']'){\n            if(stack.length > 0){\n    \
    \            stack.pop();\n            }\n            else{\n                return\
    \ false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
  "    let stack = [];\n    let open = { '{': '}', '[': ']', '(': ')' };\n    let\
    \ closed = { '}': true, ']': true, ')': true };\n  \n    for (let i = 0; i < string.length;\
    \ i++) {\n      let char = string[i];\n      if (open[char]) {\n        stack.push(char);\n\
    \      } else if (closed[char]) {\n        if (open[stack.pop()] !== char) return\
    \ false;\n      }\n    }\n    return stack.length === 0;\n  }\n  \n  console.log(is_nested(\"\
    {[()]}\"));\n  console.log(is_nested(\"{[(])}\"));\n  console.log(is_nested(\"\
    {{[[(())]]}}\"));\n  \n  \n  //Create a function that takes a string as input\
    \ which contains only square brackets.\n  // The function should return True if\
    \ and only if there is a valid subsequence of brackets \n  // where at least one\
    \ bracket in the subsequence is nested.\n  function is_nested(string){\n     \
    \ let stack = [];\n      let open = { '{': '}', '[': ']', '(': ')' };\n      let\
    \ closed = { '}': true, ']': true, ')': true };\n    \n      for (let i = 0; i\
    \ < string.length; i++) {\n        let char = string[i];\n        if (open[char])\
    \ {\n          stack.push(char);\n        } else if (closed[char]) {\n       \
    \   if (open[stack.pop()] !== char) return false;\n        }\n      }\n      return\
    \ stack.length === 0;\n    }\n    \n    console.log(is_nested(\"{[()]}\"));\n\
    \    console.log(is_nested(\"{[(])}\"));\n    console.log(is_nested(\"{{[[(())]]}}\"\
    ));\n    \n    \n    //Create a function that takes a string as input which contains\
    \ only square brackets.\n    // The function should return True if and only if\
    \ there is a valid subsequence of brackets \n    // where at", "    let stack\
    \ = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] ===\
    \ \"[\"){\n            stack.push(string[i]);\n        }\n        else if(string[i]\
    \ === \"]\"){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            else{\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n\
    \    for(let i = 0; i < string.length; i++){\n        if(string[i] === \"[\"){\n\
    \            stack.push(string[i]);\n        }\n        else if(string[i] ===\
    \ \"]\"){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            else{\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    var stack = [];\n\
    \    for(var i = 0; i < string.length; i++){\n        if(string[i] == \"[\"){\n\
    \            stack.push(string[i]);\n        }\n        else if(string[i] == \"\
    ]\"){\n            if(stack.length == 0){\n                return false;\n   \
    \         }\n            else{\n                stack.pop();\n            }\n\
    \        }\n    }\n    if(stack.length == 0){\n        return true;\n    }\n \
    \   else{\n        return false;\n    }\n}\n", "    var stack = [];\n    var map\
    \ = {\n        '(': ')',\n        '[': ']',\n        '{': '}'\n    }\n    for(var\
    \ i = 0; i < string.length; i++){\n        if(string[i] === '(' || string[i] ===\
    \ '[' || string[i] === '{'){\n            stack.push(string[i]);\n        } else\
    \ {\n            var last = stack.pop();\n            if(string[i] !== map[last]){\n\
    \                return false;\n            }\n        }\n    }\n    if(stack.length\
    \ !== 0){\n        return false;\n    }\n    return true;\n}\n", "    let stack\
    \ = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] ===\
    \ '['){\n            stack.push(string[i]);\n        }\n        else if(string[i]\
    \ === ']'){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            else{\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n\
    \    let open = {'(':')', '[':']', '{':'}'};\n    let closed = {')':true, ']':true,\
    \ '}':true};\n    for(let i = 0; i < string.length; i++){\n        let char =\
    \ string[i];\n        if(open[char]){\n            stack.push(char);\n       \
    \ }else if(closed[char]){\n            if(open[stack.pop()] !== char){\n     \
    \           return false;\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    var stack = [];\n    for(var i = 0; i < string.length; i++){\n\
    \        if(string[i] == '['){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] == ']'){\n            if(stack.length == 0){\n    \
    \            return false;\n            }\n            else{\n               \
    \ stack.pop();\n            }\n        }\n    }\n    if(stack.length == 0){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\n", " \
    \   var stack = [];\n    var map = {\n        '(': ')',\n        '[': ']',\n \
    \       '{': '}'\n    }\n    for(var i = 0; i < string.length; i++){\n       \
    \ if(string[i] === '(' || string[i] === '[' || string[i] === '{'){\n         \
    \   stack.push(string[i]);\n        } else {\n            var last = stack.pop();\n\
    \            if(string[i] !== map[last]){\n                return false;\n   \
    \         }\n        }\n    }\n    if(stack.length !== 0){\n        return false;\n\
    \    }\n    return true;\n}", "    let stack = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] === ']'){\n            if(stack.length ===\
    \ 0){\n                return false;\n            }\n            else{\n     \
    \           stack.pop();\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '['){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] === ']'){\n            if(stack.length === 0){\n  \
    \              return false;\n            }\n            else{\n             \
    \   stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    let stack = [];\n    let map = {\n        '(': ')',\n       \
    \ '[': ']',\n        '{': '}'\n    }\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '(' || string[i] === '[' || string[i] === '{'){\n  \
    \          stack.push(string[i]);\n        } else {\n            let last = stack.pop();\n\
    \            if(string[i] !== map[last]){\n                return false;\n   \
    \         }\n        }\n    }\n    if(stack.length !== 0){\n        return false;\n\
    \    }\n    return true;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] === ']'){\n            if(stack.length ===\
    \ 0){\n                return false;\n            }\n            stack.pop();\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n\
    \    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n\
    \            stack.push(string[i]);\n        }\n        else if(string[i] ===\
    \ ']'){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            stack.pop();\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '['){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] === ']'){\n            if(stack.length === 0){\n  \
    \              return false;\n            }\n            else{\n             \
    \   stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}", "    let stack = [];\n    let map = {\n        '(': ')',\n        '[':\
    \ ']',\n        '{': '}'\n    }\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '(' || string[i] === '[' || string[i] === '{'){\n  \
    \          stack.push(string[i]);\n        } else {\n            let last = stack.pop();\n\
    \            if(string[i] !== map[last]){\n                return false;\n   \
    \         }\n        }\n    }\n    if(stack.length !== 0){\n        return false;\n\
    \    }\n    return true;\n}\n", "    let stack = [];\n    let open = { '{': '}',\
    \ '[': ']', '(': ')' };\n    let closed = { '}': true, ']': true, ')': true };\n\
    \    for (let i = 0; i < string.length; i++) {\n      let char = string[i];\n\
    \      if (open[char]) {\n        stack.push(char);\n      } else if (closed[char])\
    \ {\n        if (open[stack.pop()] !== char) return false;\n      }\n    }\n \
    \   return stack.length === 0;\n  }\n  console.log(is_nested(\"{[()]}\"));\n \
    \ console.log(is_nested(\"{[(])}\"));\n  console.log(is_nested(\"{{[[(())]]}}\"\
    ));"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
