language: js
name: HumanEval_44_change_base
results:
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x>0){\n        result = x%base + result;\n\
    \        x = Math.floor(x/base);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = change_base;\n\
    \  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\twhile(x > 0){\n\t\tresult = x % base + result;\n\
    \t\tx = Math.floor(x / base);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x>0){\n        result = (x%base).toString()\
    \ + result;\n        x = Math.floor(x/base);\n    }\n    return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    var remainder = 0;\n    var quotient = x;\n\
    \    while(quotient > 0){\n        remainder = quotient % base;\n        quotient\
    \ = Math.floor(quotient / base);\n        result = remainder + result;\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"\
    22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\tvar remainder = 0;\n\twhile(x > 0){\n\t\tremainder\
    \ = x % base;\n\t\tx = Math.floor(x / base);\n\t\tresult = remainder + result;\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"\
    22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        var digit = x % base;\n\
    \        result = digit + result;\n        x = Math.floor(x / base);\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"\
    22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var str = \"\";\n    while(x > 0){\n        str = x % base + str;\n\
    \        x = Math.floor(x / base);\n    }\n    return str;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = change_base;\n\
    \  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\twhile(x > 0){\n\t\tresult = x % base + result;\n\
    \t\tx = Math.floor(x / base);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\tvar remainder = 0;\n\tvar quotient = x;\n\t\
    while(quotient != 0){\n\t\tremainder = quotient % base;\n\t\tquotient = Math.floor(quotient\
    \ / base);\n\t\tresult = remainder + result;\n\t}\n\treturn result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = change_base;\n\
    \  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\tvar remainder = 0;\n\twhile(x > 0){\n\t\tremainder\
    \ = x % base;\n\t\tx = Math.floor(x / base);\n\t\tresult = remainder + result;\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"\
    22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\tvar remainder;\n\twhile(x > 0){\n\t\tremainder\
    \ = x % base;\n\t\tx = Math.floor(x / base);\n\t\tresult = remainder + result;\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"\
    22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\tvar temp = x;\n\twhile(temp > 0){\n\t\tresult\
    \ = (temp % base) + result;\n\t\ttemp = Math.floor(temp / base);\n\t}\n\treturn\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n\
    \  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\twhile(x > 0){\n\t\tresult = (x % base) + result;\n\
    \t\tx = Math.floor(x / base);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    var remainder = 0;\n    var quotient = x;\n\
    \    while(quotient != 0){\n        remainder = quotient % base;\n        quotient\
    \ = Math.floor(quotient / base);\n        result = remainder + result;\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"\
    22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    var remainder = 0;\n    while(x > 0){\n\
    \        remainder = x % base;\n        x = Math.floor(x / base);\n        result\
    \ = remainder + result;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\twhile(x > 0){\n\t\tresult = x % base + result;\n\
    \t\tx = Math.floor(x / base);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    var temp = x;\n    while(temp > 0){\n  \
    \      result = temp % base + result;\n        temp = Math.floor(temp / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\tvar remainder = 0;\n\tvar quotient = x;\n\t\
    while(quotient > 0){\n\t\tremainder = quotient % base;\n\t\tquotient = Math.floor(quotient\
    \ / base);\n\t\tresult = remainder + result;\n\t}\n\treturn result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = change_base;\n\
    \  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n  var result = \"\";\n  var temp = x;\n  var remainder;\n  while(temp\
    \ > 0){\n    remainder = temp % base;\n    temp = Math.floor(temp / base);\n \
    \   result = remainder + result;\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    var temp = x;\n    while(temp > 0){\n  \
    \      result = (temp % base) + result;\n        temp = Math.floor(temp / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var res = \"\";\n    while(x){\n        res = x % base + res;\n\
    \        x = Math.floor(x / base);\n    }\n    return res;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = change_base;\n\
    \  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        var remainder = x\
    \ % base;\n        x = Math.floor(x / base);\n        result = remainder + result;\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\twhile(x > 0){\n\t\tresult = x % base + result;\n\
    \t\tx = Math.floor(x / base);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\twhile(x > 0){\n\t\tresult = x % base + result;\n\
    \t\tx = Math.floor(x / base);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n  var result = \"\";\n  var remainder = x;\n  while(remainder > 0){\n\
    \    result = remainder % base + result;\n    remainder = Math.floor(remainder\
    \ / base);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = [];\n    while(x > 0){\n        result.push(x % base);\n\
    \        x = Math.floor(x / base);\n    }\n    return result.reverse().join('');\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        var digit = x % base;\n\
    \        result = digit + result;\n        x = Math.floor(x / base);\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"\
    22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\tvar remainder = 0;\n\twhile(x > 0){\n\t\tremainder\
    \ = x % base;\n\t\tx = Math.floor(x / base);\n\t\tresult = remainder + result;\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"\
    22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\tvar remainder = 0;\n\twhile(x > 0){\n\t\tremainder\
    \ = x % base;\n\t\tx = Math.floor(x / base);\n\t\tresult = remainder + result;\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"\
    22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n  var result = \"\";\n  while(x > 0){\n    result = x % base + result;\n\
    \    x = Math.floor(x / base);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    var remainder = 0;\n    while(x > 0){\n\
    \        remainder = x % base;\n        x = Math.floor(x / base);\n        result\
    \ = remainder + result;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    var remainder = 0;\n    while(x > 0){\n\
    \        remainder = x % base;\n        x = Math.floor(x / base);\n        result\
    \ = remainder + result;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    var remainder = 0;\n    while(x > 0){\n\
    \        remainder = x % base;\n        x = Math.floor(x / base);\n        result\
    \ = remainder + result;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\tvar i = 0;\n\twhile(x > 0){\n\t\tresult = x\
    \ % base + result;\n\t\tx = Math.floor(x / base);\n\t}\n\treturn result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\twhile(x > 0){\n\t\tresult = x % base + result;\n\
    \t\tx = Math.floor(x / base);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    var temp = x;\n    while(temp > 0){\n  \
    \      result = (temp % base) + result;\n        temp = Math.floor(temp / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\twhile(x > 0){\n\t\tresult = x % base + result;\n\
    \t\tx = Math.floor(x / base);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    var remainder = x;\n    var quotient = 0;\n\
    \    while(remainder > 0){\n        quotient = Math.floor(remainder / base);\n\
    \        remainder = remainder % base;\n        result = remainder + result;\n\
    \        remainder = quotient;\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = change_base;\n\
    \  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\twhile(x > 0){\n\t\tvar remainder = x % base;\n\
    \t\tresult = remainder + result;\n\t\tx = Math.floor(x / base);\n\t}\n\treturn\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n\
    \  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    var x_copy = x;\n    while(x_copy > 0){\n\
    \        result = (x_copy % base) + result;\n        x_copy = Math.floor(x_copy\
    \ / base);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\tvar remainder = 0;\n\twhile(x > 0){\n\t\tremainder\
    \ = x % base;\n\t\tx = Math.floor(x / base);\n\t\tresult = remainder + result;\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"\
    22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var str = \"\";\n    while(x > 0){\n        str = (x % base) + str;\n\
    \        x = Math.floor(x / base);\n    }\n    return str;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = change_base;\n\
    \  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    var remainder = 0;\n    var quotient = x;\n\
    \    while(quotient > 0){\n        remainder = quotient % base;\n        quotient\
    \ = Math.floor(quotient / base);\n        result = remainder + result;\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"\
    22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n  var result = \"\";\n  while(x > 0){\n    result = x % base + result;\n\
    \    x = Math.floor(x / base);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\tvar remainder = 0;\n\tvar quotient = x;\n\t\
    while(quotient > 0){\n\t\tremainder = quotient % base;\n\t\tquotient = Math.floor(quotient\
    \ / base);\n\t\tresult = remainder + result;\n\t}\n\treturn result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = change_base;\n\
    \  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    var temp = x;\n    while(temp > 0){\n  \
    \      result = (temp % base) + result;\n        temp = Math.floor(temp / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar ret = \"\";\n\twhile(x > 0){\n\t\tret = x % base + ret;\n\t\t\
    x = Math.floor(x / base);\n\t}\n\treturn ret;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\tvar remainder = 0;\n\twhile(x > 0){\n\t\tremainder\
    \ = x % base;\n\t\tx = Math.floor(x / base);\n\t\tresult = remainder + result;\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"\
    22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    var remainder = 0;\n    var quotient = x;\n\
    \    while(quotient != 0){\n        remainder = quotient % base;\n        quotient\
    \ = Math.floor(quotient / base);\n        result = remainder + result;\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"\
    22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        var digit = x % base;\n\
    \        result = digit + result;\n        x = Math.floor(x / base);\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"\
    22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar res = \"\";\n\twhile(x > 0){\n\t\tres = x % base + res;\n\t\t\
    x = Math.floor(x / base);\n\t}\n\treturn res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        var remainder = x\
    \ % base;\n        result = remainder + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\twhile(x > 0){\n\t\tresult = x % base + result;\n\
    \t\tx = Math.floor(x / base);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var x_str = x.toString();\n    var x_base = x_str.split(\"\").map(Number);\n\
    \    var x_base_len = x_base.length;\n    var x_base_new = [];\n    var x_base_new_str\
    \ = \"\";\n    var x_base_new_len = 0;\n    var x_base_new_len_diff = 0;\n   \
    \ var x_base_new_len_diff_i = 0;\n    var x_base_new_len_diff_i_str = \"\";\n\
    \    var x_base_new_len_diff_i_str_len = 0;\n    var x_base_new_len_diff_i_str_len_diff\
    \ = 0;\n    var x_base_new_len_diff_i_str_len_diff_i = 0;\n    var x_base_new_len_diff_i_str_len_diff_i_str\
    \ = \"\";\n    var x_base_new_len_diff_i_str_len_diff_i_str_len = 0;\n    var\
    \ x_base_new_len_diff_i_str_len_diff_i_str_len_diff = 0;\n    var x_base_new_len_diff_i_str_len_diff_i_str_len_diff_i\
    \ = 0;\n    var x_base_new_len_diff_i_str_len_diff_i_str_len_diff_i_str = \"\"\
    ;\n    var x_base_new_len_diff_i_str_len_diff_i_str_len_diff_i_str_len = 0;\n\
    \    var x_base_new_len_diff_i_str_len_diff_i_str_len_diff_i_str_len_diff = 0;\n\
    \    var x_base_new_len_diff_i_str_len_diff_i_str_len_diff_i_str_len_diff_i =\
    \ 0;\n    var x_base_new_len_diff_i_str_len_diff_i_str_len_diff_i_str_len_diff_i_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpgwkl511a.js:45\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        var remainder = x\
    \ % base;\n        result = remainder + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    var x_copy = x;\n    while(x_copy > 0){\n\
    \        var remainder = x_copy % base;\n        result = remainder + result;\n\
    \        x_copy = Math.floor(x_copy / base);\n    }\n    return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\twhile(x > 0){\n\t\tresult = (x % base) + result;\n\
    \t\tx = Math.floor(x / base);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    var x_copy = x;\n    while(x_copy > 0){\n\
    \        result = x_copy % base + result;\n        x_copy = Math.floor(x_copy\
    \ / base);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\twhile(x > 0){\n\t\tresult = x % base + result;\n\
    \t\tx = Math.floor(x / base);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n  var result = \"\";\n  var remainder = 0;\n  var quotient = x;\n  while(quotient\
    \ > 0){\n    remainder = quotient % base;\n    quotient = Math.floor(quotient\
    \ / base);\n    result = remainder + result;\n  }\n  return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = change_base;\n\
    \  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    var num = x;\n    var remainder = 0;\n \
    \   while(num > 0){\n        remainder = num % base;\n        num = Math.floor(num\
    \ / base);\n        result = remainder + result;\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\twhile(x > 0){\n\t\tresult = x % base + result;\n\
    \t\tx = Math.floor(x / base);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\twhile(x > 0){\n\t\tresult = (x % base) + result;\n\
    \t\tx = Math.floor(x / base);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n  var result = \"\";\n  var remainder = 0;\n  var quotient = x;\n  while(quotient\
    \ > 0){\n    remainder = quotient % base;\n    quotient = Math.floor(quotient\
    \ / base);\n    result = remainder + result;\n  }\n  return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = change_base;\n\
    \  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    var remainder = 0;\n    var quotient = x;\n\
    \    while(quotient > 0){\n        remainder = quotient % base;\n        quotient\
    \ = Math.floor(quotient / base);\n        result = remainder + result;\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"\
    22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\tvar remainder = 0;\n\twhile(x > 0){\n\t\tremainder\
    \ = x % base;\n\t\tx = Math.floor(x / base);\n\t\tresult = remainder + result;\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"\
    22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    var quotient = x;\n    var remainder = 0;\n\
    \    while(quotient > 0){\n        remainder = quotient % base;\n        quotient\
    \ = Math.floor(quotient / base);\n        result = remainder + result;\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"\
    22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\twhile(x > 0){\n\t\tresult = x % base + result;\n\
    \t\tx = Math.floor(x / base);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\twhile(x > 0){\n\t\tresult = x % base + result;\n\
    \t\tx = Math.floor(x / base);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\twhile(x > 0){\n\t\tresult = x % base + result;\n\
    \t\tx = Math.floor(x / base);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\twhile(x > 0){\n\t\tresult = x % base + result;\n\
    \t\tx = Math.floor(x / base);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    var remainder = 0;\n    while(x > 0){\n\
    \        remainder = x % base;\n        x = Math.floor(x / base);\n        result\
    \ = remainder + result;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\twhile(x > 0){\n\t\tresult = (x % base) + result;\n\
    \t\tx = Math.floor(x / base);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar str = \"\";\n\twhile(x > 0){\n\t\tstr = (x % base) + str;\n\t\t\
    x = Math.floor(x / base);\n\t}\n\treturn str;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    var remainder = 0;\n    var quotient = x;\n\
    \    while(quotient > 0){\n        remainder = quotient % base;\n        quotient\
    \ = Math.floor(quotient / base);\n        result = remainder + result;\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"\
    22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\tvar temp = x;\n\twhile(temp > 0){\n\t\tresult\
    \ = temp % base + result;\n\t\ttemp = Math.floor(temp / base);\n\t}\n\treturn\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n\
    \  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar ret = \"\";\n\twhile(x > 0){\n\t\tret = x % base + ret;\n\t\t\
    x = Math.floor(x / base);\n\t}\n\treturn ret;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    var remainder = 0;\n    var quotient = x;\n\
    \    while(quotient != 0){\n        remainder = quotient % base;\n        quotient\
    \ = Math.floor(quotient / base);\n        result = remainder + result;\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"\
    22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\twhile(x > 0){\n\t\tresult = x % base + result;\n\
    \t\tx = Math.floor(x / base);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\twhile(x > 0){\n\t\tresult = x % base + result;\n\
    \t\tx = Math.floor(x / base);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\twhile(x > 0){\n\t\tresult = (x % base) + result;\n\
    \t\tx = Math.floor(x / base);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\tvar remainder = 0;\n\tvar quotient = x;\n\t\
    while(quotient != 0){\n\t\tremainder = quotient % base;\n\t\tquotient = Math.floor(quotient\
    \ / base);\n\t\tresult = remainder + result;\n\t}\n\treturn result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = change_base;\n\
    \  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var s = \"\";\n    while(x > 0){\n        s = x % base + s;\n  \
    \      x = Math.floor(x / base);\n    }\n    return s;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\twhile(x > 0){\n\t\tresult = (x % base) + result;\n\
    \t\tx = Math.floor(x / base);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n\tvar result = \"\";\n\twhile(x > 0){\n\t\tresult = x % base + result;\n\
    \t\tx = Math.floor(x / base);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
    \ base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base)\
    \ + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
