language: js
name: HumanEval_104_unique_digits
results:
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i];\n   \
    \     var str = num.toString();\n        var flag = true;\n        for(var j =\
    \ 0; j < str.length; j++){\n            if(str[j] % 2 === 0){\n              \
    \  flag = false;\n            }\n        }\n        if(flag){\n            arr.push(num);\n\
    \        }\n    }\n    return arr.sort(function(a, b){return a - b});\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i];\n   \
    \     var isUnique = true;\n        while(num > 0){\n            var digit = num\
    \ % 10;\n            if(digit % 2 == 0){\n                isUnique = false;\n\
    \                break;\n            }\n            num = Math.floor(num / 10);\n\
    \        }\n        if(isUnique){\n            result.push(x[i]);\n        }\n\
    \    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpe0r0g6hr.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpe0r0g6hr.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(num){\n\
    \            return num % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var str = x[i].toString();\n\
    \        var flag = true;\n        for(var j = 0; j < str.length; j++){\n    \
    \        if(str[j] % 2 == 0){\n                flag = false;\n            }\n\
    \        }\n        if(flag){\n            arr.push(x[i]);\n        }\n    }\n\
    \    return arr.sort(function(a, b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(a){\n\
    \            return a % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(e){\n\
    \            return e % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(num){\n\
    \            return num % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i];\n   \
    \     var isEven = false;\n        while(num > 0){\n            if(num % 2 ==\
    \ 0){\n                isEven = true;\n                break;\n            }\n\
    \            num = Math.floor(num / 10);\n        }\n        if(!isEven){\n  \
    \          result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a - b});\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(e){\n\
    \            return e % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().length\
    \ === 1){\n            arr.push(x[i]);\n        }\n        else{\n           \
    \ var str = x[i].toString();\n            var count = 0;\n            for(var\
    \ j = 0; j < str.length; j++){\n                if(str[j] % 2 === 0){\n      \
    \              count++;\n                }\n            }\n            if(count\
    \ === 0){\n                arr.push(x[i]);\n            }\n        }\n    }\n\
    \    return arr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i];\n   \
    \     var isUnique = true;\n        while(num > 0){\n            var digit = num\
    \ % 10;\n            if(digit % 2 == 0){\n                isUnique = false;\n\
    \                break;\n            }\n            num = Math.floor(num / 10);\n\
    \        }\n        if(isUnique){\n            result.push(x[i]);\n        }\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpk1cw9wi_.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpk1cw9wi_.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i];\n   \
    \     var str = num.toString();\n        var bool = true;\n        for(var j =\
    \ 0; j < str.length; j++){\n            if(str[j] % 2 === 0){\n              \
    \  bool = false;\n            }\n        }\n        if(bool){\n            arr.push(num);\n\
    \        }\n    }\n    return arr.sort(function(a, b){return a-b});\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i].toString();\n\
    \        var flag = true;\n        for(var j = 0; j < num.length; j++){\n    \
    \        if(num[j] % 2 == 0){\n                flag = false;\n            }\n\
    \        }\n        if(flag){\n            result.push(x[i]);\n        }\n   \
    \ }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpeyuelhct.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmpeyuelhct.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var even = false;\n \
    \       var num = x[i].toString().split('');\n        for(var j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 === 0){\n                even = true;\n   \
    \         }\n        }\n        if(!even){\n            result.push(x[i]);\n \
    \       }\n    }\n    return result.sort(function(a, b){return a-b});\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var newArr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(num){\n\
    \            return num % 2 !== 0;\n        })){\n            newArr.push(x[i]);\n\
    \        }\n    }\n    return newArr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(y){\n\
    \            return y % 2 != 0;\n        })){\n            arr.push(x[i]);\n \
    \       }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i];\n   \
    \     var isEven = false;\n        while(num > 0){\n            if(num % 2 ==\
    \ 0){\n                isEven = true;\n                break;\n            }\n\
    \            num = Math.floor(num / 10);\n        }\n        if(!isEven){\n  \
    \          result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a - b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(a){\n\
    \            return a % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let newArray\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i].toString().split('');\n\
    \        let count = 0;\n        for(let j = 0; j < num.length; j++){\n      \
    \      if(num[j] % 2 === 0){\n                count++;\n            }\n      \
    \  }\n        if(count === 0){\n            newArray.push(x[i]);\n        }\n\
    \    }\n    return newArray.sort((a,b) => a - b);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(a){\n\
    \            return a % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().length\
    \ === 1){\n            arr.push(x[i]);\n        }\n        else{\n           \
    \ var temp = x[i].toString().split(\"\");\n            var count = 0;\n      \
    \      for(var j = 0; j < temp.length; j++){\n                if(temp[j] % 2 ===\
    \ 0){\n                    count++;\n                }\n            }\n      \
    \      if(count === 0){\n                arr.push(x[i]);\n            }\n    \
    \    }\n    }\n    return arr.sort(function(a, b){return a-b});\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var temp = x[i].toString().split('');\n\
    \        var count = 0;\n        for(var j = 0; j < temp.length; j++){\n     \
    \       if(temp[j] % 2 == 0){\n                count++;\n            }\n     \
    \   }\n        if(count == 0){\n            result.push(x[i]);\n        }\n  \
    \  }\n    return result.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let result\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i];\n   \
    \     let isUnique = true;\n        while(num > 0){\n            let digit = num\
    \ % 10;\n            if(digit % 2 === 0){\n                isUnique = false;\n\
    \                break;\n            }\n            num = Math.floor(num / 10);\n\
    \        }\n        if(isUnique){\n            result.push(x[i]);\n        }\n\
    \    }\n    return result.sort((a, b) => a - b);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(e){\n\
    \            return e % 2 != 0;\n        })){\n            arr.push(x[i]);\n \
    \       }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(e){\n\
    \            return e % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var str = x[i].toString();\n\
    \        var count = 0;\n        for(var j = 0; j < str.length; j++){\n      \
    \      if(str[j] % 2 == 0){\n                count++;\n            }\n       \
    \ }\n        if(count == 0){\n            arr.push(x[i]);\n        }\n    }\n\
    \    return arr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let result\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(num){\n\
    \            return num % 2 !== 0;\n        })){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){\n        return a -\
    \ b;\n    });\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i];\n   \
    \     var str = num.toString();\n        var count = 0;\n        for(var j = 0;\
    \ j < str.length; j++){\n            if(str[j] % 2 === 0){\n                count++;\n\
    \            }\n        }\n        if(count === 0){\n            arr.push(num);\n\
    \        }\n    }\n    return arr.sort(function(a, b){return a-b});\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  var arr\
    \ = [];\n  for(var i = 0; i < x.length; i++){\n    if(x[i].toString().split('').every(function(element){\n\
    \      return parseInt(element) % 2 !== 0;\n    })){\n      arr.push(x[i]);\n\
    \    }\n  }\n  return arr.sort(function(a,b){\n    return a - b;\n  });\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().length\
    \ == 1){\n            arr.push(x[i]);\n        }\n        else{\n            for(var\
    \ j = 0; j < x[i].toString().length; j++){\n                if(x[i].toString()[j]\
    \ % 2 == 0){\n                    break;\n                }\n                else\
    \ if(j == x[i].toString().length - 1){\n                    arr.push(x[i]);\n\
    \                }\n            }\n        }\n    }\n    return arr.sort(function(a,\
    \ b){return a-b});\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(y){\n\
    \            return y % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(num){\n\
    \            return num % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var str = x[i].toString();\n\
    \        var flag = true;\n        for(var j = 0; j < str.length; j++){\n    \
    \        if(str[j] % 2 == 0){\n                flag = false;\n            }\n\
    \        }\n        if(flag){\n            arr.push(x[i]);\n        }\n    }\n\
    \    return arr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let arr\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        let str = x[i].toString();\n\
    \        let flag = false;\n        for(let j = 0; j < str.length; j++){\n   \
    \         if(str[j] % 2 === 0){\n                flag = true;\n            }\n\
    \        }\n        if(!flag){\n            arr.push(x[i]);\n        }\n    }\n\
    \    return arr.sort((a,b) => a - b);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    return\
    \ x.filter(function(num){\n        return num.toString().split('').every(function(digit){\n\
    \            return parseInt(digit) % 2 !== 0;\n        });\n    }).sort(function(a,b){\n\
    \        return a - b;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var isUnique = true;\n\
    \        var num = x[i].toString();\n        for(var j = 0; j < num.length; j++){\n\
    \            if(num[j] % 2 === 0){\n                isUnique = false;\n      \
    \      }\n        }\n        if(isUnique){\n            result.push(x[i]);\n \
    \       }\n    }\n    return result.sort(function(a, b){return a - b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(y){\n\
    \            return y % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(num){\n\
    \            return num % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var y\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(e){\n\
    \            return e % 2 != 0;\n        })){\n            y.push(x[i]);\n   \
    \     }\n    }\n    return y.sort(function(a, b){\n        return a - b;\n   \
    \ });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1,\
    \ 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(num){\n\
    \            return num % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var str = x[i].toString();\n\
    \        var count = 0;\n        for(var j = 0; j < str.length; j++){\n      \
    \      if(str[j] % 2 == 0){\n                count++;\n            }\n       \
    \ }\n        if(count == 0){\n            arr.push(x[i]);\n        }\n    }\n\
    \    return arr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(e){\n\
    \            return e % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(y){\n\
    \            return y % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(num){\n\
    \            return num % 2 !== 0;\n        })){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){\n        return a -\
    \ b;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(x){\n\
    \            return x % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(num){\n\
    \            return num % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let arr\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i];\n   \
    \     let str = num.toString();\n        let count = 0;\n        for(let j = 0;\
    \ j < str.length; j++){\n            if(str[j] % 2 === 0){\n                count++;\n\
    \            }\n        }\n        if(count === 0){\n            arr.push(num);\n\
    \        }\n    }\n    return arr.sort((a,b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i].toString();\n\
    \        var count = 0;\n        for(var j = 0; j < num.length; j++){\n      \
    \      if(num[j] % 2 === 0){\n                count++;\n            }\n      \
    \  }\n        if(count === 0){\n            arr.push(x[i]);\n        }\n    }\n\
    \    return arr.sort(function(a, b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let arr\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(num){\n\
    \            return num % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a, b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(num){\n\
    \            return num % 2 !== 0;\n        })){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){\n        return a -\
    \ b;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(num){\n\
    \            return num % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(a){\n\
    \            return a % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let result\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i].toString();\n\
    \        let count = 0;\n        for(let j = 0; j < num.length; j++){\n      \
    \      if(num[j] % 2 === 0){\n                count++;\n            }\n      \
    \  }\n        if(count === 0){\n            result.push(x[i]);\n        }\n  \
    \  }\n    return result.sort((a,b) => a - b);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let arr\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        let temp = x[i].toString().split('');\n\
    \        let flag = true;\n        for(let j = 0; j < temp.length; j++){\n   \
    \         if(temp[j] % 2 === 0){\n                flag = false;\n            }\n\
    \        }\n        if(flag){\n            arr.push(x[i]);\n        }\n    }\n\
    \    return arr.sort((a,b) => a - b);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let arr\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        if(x[i].toString().length\
    \ === 1){\n            arr.push(x[i]);\n        }else{\n            let str =\
    \ x[i].toString();\n            let flag = true;\n            for(let j = 0; j\
    \ < str.length; j++){\n                if(str[j] % 2 === 0){\n               \
    \     flag = false;\n                }\n            }\n            if(flag){\n\
    \                arr.push(x[i]);\n            }\n        }\n    }\n    return\
    \ arr.sort((a,b) => a - b);\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  var arr\
    \ = [];\n  for(var i = 0; i < x.length; i++){\n    if(x[i].toString().split('').every(function(x){\n\
    \      return x % 2 !== 0;\n    })){\n      arr.push(x[i]);\n    }\n  }\n  return\
    \ arr.sort(function(a,b){\n    return a - b;\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var newArr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(y){\n\
    \            return y % 2 !== 0;\n        })){\n            newArr.push(x[i]);\n\
    \        }\n    }\n    return newArr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var count = 0;\n    \
    \    while(x[i] > 0){\n            if(x[i] % 2 == 0){\n                count++;\n\
    \            }\n            x[i] = Math.floor(x[i] / 10);\n        }\n       \
    \ if(count == 0){\n            arr.push(x[i]);\n        }\n    }\n    return arr;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpvacs0zjt.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvacs0zjt.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var newArr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i];\n   \
    \     var str = num.toString();\n        var isEven = false;\n        for(var\
    \ j = 0; j < str.length; j++){\n            if(str[j] % 2 === 0){\n          \
    \      isEven = true;\n            }\n        }\n        if(!isEven){\n      \
    \      newArr.push(num);\n        }\n    }\n    return newArr.sort(function(a,\
    \ b){return a-b});\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let arr\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i].toString();\n\
    \        let even = false;\n        for(let j = 0; j < num.length; j++){\n   \
    \         if(num[j] % 2 === 0){\n                even = true;\n            }\n\
    \        }\n        if(!even){\n            arr.push(x[i]);\n        }\n    }\n\
    \    return arr.sort((a,b) => a - b);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i];\n   \
    \     var isUnique = true;\n        while(num > 0){\n            var digit = num\
    \ % 10;\n            if(digit % 2 == 0){\n                isUnique = false;\n\
    \                break;\n            }\n            num = Math.floor(num / 10);\n\
    \        }\n        if(isUnique){\n            result.push(x[i]);\n        }\n\
    \    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpe0r0g6hr.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpe0r0g6hr.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(e){\n\
    \            return e % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let even\
    \ = [];\n    let odd = [];\n    for(let i = 0; i < x.length; i++){\n        let\
    \ str = x[i].toString();\n        let count = 0;\n        for(let j = 0; j < str.length;\
    \ j++){\n            if(str[j] % 2 === 0){\n                count++;\n       \
    \     }\n        }\n        if(count === 0){\n            odd.push(x[i]);\n  \
    \      }\n        else{\n            even.push(x[i]);\n        }\n    }\n    return\
    \ odd.sort(function(a, b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i].toString();\n\
    \        var count = 0;\n        for(var j = 0; j < num.length; j++){\n      \
    \      if(num[j] % 2 === 0){\n                count++;\n            }\n      \
    \  }\n        if(count === 0){\n            arr.push(x[i]);\n        }\n    }\n\
    \    return arr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var newArr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i].toString();\n\
    \        var count = 0;\n        for(var j = 0; j < num.length; j++){\n      \
    \      if(num[j] % 2 === 0){\n                count++;\n            }\n      \
    \  }\n        if(count === 0){\n            newArr.push(x[i]);\n        }\n  \
    \  }\n    return newArr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var y\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(a){\n\
    \            return a % 2 !== 0;\n        })){\n            y.push(x[i]);\n  \
    \      }\n    }\n    return y.sort(function(a,b){\n        return a - b;\n   \
    \ });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1,\
    \ 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i].toString();\n\
    \        var count = 0;\n        for(var j = 0; j < num.length; j++){\n      \
    \      if(num[j] % 2 === 0){\n                count++;\n            }\n      \
    \  }\n        if(count === 0){\n            arr.push(x[i]);\n        }\n    }\n\
    \    return arr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let result\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i];\n   \
    \     let isUnique = true;\n        while(num > 0){\n            let digit = num\
    \ % 10;\n            if(digit % 2 === 0){\n                isUnique = false;\n\
    \                break;\n            }\n            num = Math.floor(num / 10);\n\
    \        }\n        if(isUnique){\n            result.push(x[i]);\n        }\n\
    \    }\n    return result.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(a){\n\
    \            return a % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i].toString();\n\
    \        var count = 0;\n        for(var j = 0; j < num.length; j++){\n      \
    \      if(num[j] % 2 === 0){\n                count++;\n            }\n      \
    \  }\n        if(count === 0){\n            arr.push(x[i]);\n        }\n    }\n\
    \    return arr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i];\n   \
    \     var isUnique = true;\n        while(num > 0){\n            var digit = num\
    \ % 10;\n            if(digit % 2 == 0){\n                isUnique = false;\n\
    \                break;\n            }\n            num = Math.floor(num / 10);\n\
    \        }\n        if(isUnique){\n            result.push(x[i]);\n        }\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpk1cw9wi_.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpk1cw9wi_.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let result\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(num\
    \ => num % 2 !== 0)){\n            result.push(x[i]);\n        }\n    }\n    return\
    \ result.sort((a,b) => a - b);\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let arr\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i].toString();\n\
    \        let even = false;\n        for(let j = 0; j < num.length; j++){\n   \
    \         if(num[j] % 2 === 0){\n                even = true;\n            }\n\
    \        }\n        if(!even){\n            arr.push(x[i]);\n        }\n    }\n\
    \    return arr.sort((a,b) => a - b);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var str = x[i].toString();\n\
    \        var count = 0;\n        for(var j = 0; j < str.length; j++){\n      \
    \      if(str[j] % 2 === 0){\n                count++;\n            }\n      \
    \  }\n        if(count === 0){\n            arr.push(x[i]);\n        }\n    }\n\
    \    return arr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().length\
    \ === 1){\n            arr.push(x[i]);\n        }\n        else{\n           \
    \ for(var j = 0; j < x[i].toString().length; j++){\n                if(x[i].toString()[j]\
    \ % 2 === 0){\n                    break;\n                }\n               \
    \ else if(j === x[i].toString().length - 1){\n                    arr.push(x[i]);\n\
    \                }\n            }\n        }\n    }\n    return arr.sort(function(a,\
    \ b){return a-b});\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var newArr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i].toString();\n\
    \        var flag = true;\n        for(var j = 0; j < num.length; j++){\n    \
    \        if(num[j] % 2 === 0){\n                flag = false;\n            }\n\
    \        }\n        if(flag){\n            newArr.push(x[i]);\n        }\n   \
    \ }\n    return newArr.sort(function(a,b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i].toString();\n\
    \        var flag = true;\n        for(var j = 0; j < num.length; j++){\n    \
    \        if(num[j] % 2 == 0){\n                flag = false;\n            }\n\
    \        }\n        if(flag){\n            result.push(x[i]);\n        }\n   \
    \ }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpeyuelhct.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmpeyuelhct.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().includes(\"\
    2\") || x[i].toString().includes(\"4\") || x[i].toString().includes(\"6\") ||\
    \ x[i].toString().includes(\"8\") || x[i].toString().includes(\"0\")){\n     \
    \       continue;\n        }\n        else{\n            arr.push(x[i]);\n   \
    \     }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpk1laa2eu.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpk1laa2eu.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let result\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i].toString();\n\
    \        let count = 0;\n        for(let j = 0; j < num.length; j++){\n      \
    \      if(num[j] % 2 === 0){\n                count++;\n            }\n      \
    \  }\n        if(count === 0){\n            result.push(x[i]);\n        }\n  \
    \  }\n    return result.sort((a,b) => a - b);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i];\n   \
    \     var str = num.toString();\n        var count = 0;\n        for(var j = 0;\
    \ j < str.length; j++){\n            if(str[j] % 2 == 0){\n                count++;\n\
    \            }\n        }\n        if(count == 0){\n            arr.push(num);\n\
    \        }\n    }\n    return arr.sort(function(a, b){return a-b});\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i];\n   \
    \     var isUnique = true;\n        while(num > 0){\n            var digit = num\
    \ % 10;\n            if(digit % 2 == 0){\n                isUnique = false;\n\
    \                break;\n            }\n            num = Math.floor(num / 10);\n\
    \        }\n        if(isUnique){\n            result.push(x[i]);\n        }\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpk1cw9wi_.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpk1cw9wi_.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var str = x[i].toString();\n\
    \        var count = 0;\n        for(var j = 0; j < str.length; j++){\n      \
    \      if(str[j] % 2 === 0){\n                count++;\n            }\n      \
    \  }\n        if(count === 0){\n            arr.push(x[i]);\n        }\n    }\n\
    \    return arr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let arr\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(num\
    \ => num % 2 !== 0)){\n            arr.push(x[i]);\n        }\n    }\n    return\
    \ arr.sort((a,b) => a - b);\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().length\
    \ == 1){\n            arr.push(x[i]);\n        }\n        else{\n            var\
    \ str = x[i].toString();\n            var count = 0;\n            for(var j =\
    \ 0; j < str.length; j++){\n                if(str[j] % 2 == 0){\n           \
    \         count++;\n                }\n            }\n            if(count ==\
    \ 0){\n                arr.push(x[i]);\n            }\n        }\n    }\n    return\
    \ arr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(x){return\
    \ x % 2 !== 0})){\n            result.push(x[i]);\n        }\n    }\n    return\
    \ result.sort(function(a,b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let arr\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(e\
    \ => e % 2 !== 0)){\n            arr.push(x[i]);\n        }\n    }\n    return\
    \ arr.sort((a,b) => a - b);\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(y){\n\
    \            return y % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().length\
    \ === 1){\n            arr.push(x[i]);\n        }\n        else{\n           \
    \ var str = x[i].toString();\n            var count = 0;\n            for(var\
    \ j = 0; j < str.length; j++){\n                if(str[j] % 2 === 0){\n      \
    \              count++;\n                }\n            }\n            if(count\
    \ === 0){\n                arr.push(x[i]);\n            }\n        }\n    }\n\
    \    return arr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var str = x[i].toString();\n\
    \        var count = 0;\n        for(var j = 0; j < str.length; j++){\n      \
    \      if(str[j] % 2 === 0){\n                count++;\n            }\n      \
    \  }\n        if(count === 0){\n            arr.push(x[i]);\n        }\n    }\n\
    \    return arr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let result\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i];\n   \
    \     let isUnique = true;\n        while(num > 0){\n            let digit = num\
    \ % 10;\n            if(digit % 2 === 0){\n                isUnique = false;\n\
    \                break;\n            }\n            num = Math.floor(num / 10);\n\
    \        }\n        if(isUnique){\n            result.push(x[i]);\n        }\n\
    \    }\n    return result.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i];\n   \
    \     var str = num.toString();\n        var count = 0;\n        for(var j = 0;\
    \ j < str.length; j++){\n            if(str[j] % 2 === 0){\n                count++;\n\
    \            }\n        }\n        if(count === 0){\n            arr.push(num);\n\
    \        }\n    }\n    return arr.sort(function(a, b){return a-b});\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var str = x[i].toString();\n\
    \        var count = 0;\n        for(var j = 0; j < str.length; j++){\n      \
    \      if(str[j] % 2 === 0){\n                count++;\n            }\n      \
    \  }\n        if(count === 0){\n            arr.push(x[i]);\n        }\n    }\n\
    \    return arr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let result\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i];\n   \
    \     let isUnique = true;\n        while(num > 0){\n            let digit = num\
    \ % 10;\n            if(digit % 2 === 0){\n                isUnique = false;\n\
    \                break;\n            }\n            num = Math.floor(num / 10);\n\
    \        }\n        if(isUnique){\n            result.push(x[i]);\n        }\n\
    \    }\n    return result.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let arr\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i].toString();\n\
    \        let flag = true;\n        for(let j = 0; j < num.length; j++){\n    \
    \        if(num[j] % 2 === 0){\n                flag = false;\n            }\n\
    \        }\n        if(flag){\n            arr.push(x[i]);\n        }\n    }\n\
    \    return arr.sort((a,b) => a - b);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let arr\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i].toString();\n\
    \        let flag = true;\n        for(let j = 0; j < num.length; j++){\n    \
    \        if(num[j] % 2 === 0){\n                flag = false;\n            }\n\
    \        }\n        if(flag){\n            arr.push(x[i]);\n        }\n    }\n\
    \    return arr.sort((a,b) => a - b);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(a){\n\
    \            return a % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let arr\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(e\
    \ => e % 2 !== 0)){\n            arr.push(x[i]);\n        }\n    }\n    return\
    \ arr.sort((a,b) => a - b);\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(num){\n\
    \            return num % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i];\n   \
    \     var is_unique = true;\n        while(num > 0){\n            var digit =\
    \ num % 10;\n            if(digit % 2 == 0){\n                is_unique = false;\n\
    \                break;\n            }\n            num = Math.floor(num / 10);\n\
    \        }\n        if(is_unique){\n            result.push(x[i]);\n        }\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpkgg86y1h.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkgg86y1h.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().includes(\"\
    2\") || x[i].toString().includes(\"4\") || x[i].toString().includes(\"6\") ||\
    \ x[i].toString().includes(\"8\") || x[i].toString().includes(\"0\")){\n     \
    \       continue;\n        }\n        else{\n            arr.push(x[i]);\n   \
    \     }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpk1laa2eu.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpk1laa2eu.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let arr\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(e\
    \ => e % 2 !== 0)){\n            arr.push(x[i]);\n        }\n    }\n    return\
    \ arr.sort((a,b) => a - b);\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var str = x[i].toString();\n\
    \        var count = 0;\n        for(var j = 0; j < str.length; j++){\n      \
    \      if(str[j] % 2 == 0){\n                count++;\n            }\n       \
    \ }\n        if(count == 0){\n            arr.push(x[i]);\n        }\n    }\n\
    \    return arr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(num){\n\
    \            return num % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let arr\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        if(x[i].toString().length\
    \ === 1){\n            arr.push(x[i]);\n        }\n        else{\n           \
    \ let str = x[i].toString();\n            let count = 0;\n            for(let\
    \ j = 0; j < str.length; j++){\n                if(str[j] % 2 === 0){\n      \
    \              count++;\n                }\n            }\n            if(count\
    \ === 0){\n                arr.push(x[i]);\n            }\n        }\n    }\n\
    \    return arr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var count = 0;\n    \
    \    var num = x[i].toString();\n        for(var j = 0; j < num.length; j++){\n\
    \            if(num[j] % 2 == 0){\n                count++;\n            }\n \
    \       }\n        if(count == 0){\n            arr.push(x[i]);\n        }\n \
    \   }\n    return arr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let result\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i];\n   \
    \     let isUnique = true;\n        while(num > 0){\n            let digit = num\
    \ % 10;\n            if(digit % 2 === 0){\n                isUnique = false;\n\
    \                break;\n            }\n            num = Math.floor(num / 10);\n\
    \        }\n        if(isUnique){\n            result.push(x[i]);\n        }\n\
    \    }\n    return result.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().includes('2')\
    \ || x[i].toString().includes('4') || x[i].toString().includes('6') || x[i].toString().includes('8')){\n\
    \            continue;\n        }else{\n            arr.push(x[i]);\n        }\n\
    \    }\n    return arr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  10\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpkwgmrf4f.js:22:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpkwgmrf4f.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 10 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i].toString();\n\
    \        var count = 0;\n        for(var j = 0; j < num.length; j++){\n      \
    \      if(num[j] % 2 === 0){\n                count++;\n            }\n      \
    \  }\n        if(count === 0){\n            arr.push(x[i]);\n        }\n    }\n\
    \    return arr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let result\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        let str = x[i].toString();\n\
    \        let flag = true;\n        for(let j = 0; j < str.length; j++){\n    \
    \        if(str[j] % 2 === 0){\n                flag = false;\n              \
    \  break;\n            }\n        }\n        if(flag){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a,b) => a - b);\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().length\
    \ === 1){\n            arr.push(x[i]);\n        }\n        else{\n           \
    \ var str = x[i].toString();\n            var count = 0;\n            for(var\
    \ j = 0; j < str.length; j++){\n                if(str[j] % 2 === 0){\n      \
    \              count++;\n                }\n            }\n            if(count\
    \ === 0){\n                arr.push(x[i]);\n            }\n        }\n    }\n\
    \    return arr.sort(function(a, b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var unique\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i];\n   \
    \     var str = num.toString();\n        var hasEven = false;\n        for(var\
    \ j = 0; j < str.length; j++){\n            if(str[j] % 2 === 0){\n          \
    \      hasEven = true;\n            }\n        }\n        if(!hasEven){\n    \
    \        unique.push(num);\n        }\n    }\n    return unique.sort(function(a,\
    \ b){return a - b});\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i];\n   \
    \     var even = false;\n        while(num > 0){\n            var digit = num\
    \ % 10;\n            if(digit % 2 == 0){\n                even = true;\n     \
    \           break;\n            }\n            num = Math.floor(num / 10);\n \
    \       }\n        if(!even){\n            result.push(x[i]);\n        }\n   \
    \ }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpsu33_aed.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsu33_aed.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var y\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i].toString().split('');\n\
    \        var even = false;\n        for(var j = 0; j < num.length; j++){\n   \
    \         if(num[j] % 2 == 0){\n                even = true;\n            }\n\
    \        }\n        if(even == false){\n            y.push(x[i]);\n        }\n\
    \    }\n    return y.sort(function(a, b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let arr\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(x\
    \ => x % 2 !== 0)){\n            arr.push(x[i]);\n        }\n    }\n    return\
    \ arr.sort((a,b) => a - b);\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i];\n   \
    \     var str = num.toString();\n        var flag = true;\n        for(var j =\
    \ 0; j < str.length; j++){\n            if(str[j] % 2 === 0){\n              \
    \  flag = false;\n            }\n        }\n        if(flag){\n            arr.push(num);\n\
    \        }\n    }\n    return arr.sort(function(a, b){return a - b});\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  var arr\
    \ = [];\n  for(var i = 0; i < x.length; i++){\n    var str = x[i].toString();\n\
    \    var flag = true;\n    for(var j = 0; j < str.length; j++){\n      if(str[j]\
    \ % 2 === 0){\n        flag = false;\n      }\n    }\n    if(flag){\n      arr.push(x[i]);\n\
    \    }\n  }\n  return arr.sort(function(a,b){return a-b});\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i];\n   \
    \     var str = num.toString();\n        var count = 0;\n        for(var j = 0;\
    \ j < str.length; j++){\n            if(str[j] % 2 === 0){\n                count++;\n\
    \            }\n        }\n        if(count === 0){\n            arr.push(num);\n\
    \        }\n    }\n    return arr.sort(function(a, b){return a-b});\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let arr\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i].toString();\n\
    \        let count = 0;\n        for(let j = 0; j < num.length; j++){\n      \
    \      if(num[j] % 2 === 0){\n                count++;\n            }\n      \
    \  }\n        if(count === 0){\n            arr.push(x[i]);\n        }\n    }\n\
    \    return arr.sort((a,b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let arr\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(num){\n\
    \            return num % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a, b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().length\
    \ === 1){\n            arr.push(x[i]);\n        }\n        else{\n           \
    \ var str = x[i].toString();\n            var flag = true;\n            for(var\
    \ j = 0; j < str.length; j++){\n                if(str[j] % 2 === 0){\n      \
    \              flag = false;\n                }\n            }\n            if(flag\
    \ === true){\n                arr.push(x[i]);\n            }\n        }\n    }\n\
    \    return arr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(num){\n\
    \            return num % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var unique\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i].toString();\n\
    \        var isUnique = true;\n        for(var j = 0; j < num.length; j++){\n\
    \            if(num[j] % 2 === 0){\n                isUnique = false;\n      \
    \      }\n        }\n        if(isUnique){\n            unique.push(x[i]);\n \
    \       }\n    }\n    return unique.sort(function(a, b){return a-b});\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var isEven = false;\n\
    \        var num = x[i].toString().split('');\n        for(var j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 === 0){\n                isEven = true;\n \
    \           }\n        }\n        if(!isEven){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){return a-b});\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(x){\n\
    \            return x % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i].toString();\n\
    \        var count = 0;\n        for(var j = 0; j < num.length; j++){\n      \
    \      if(num[j] % 2 == 0){\n                count++;\n            }\n       \
    \ }\n        if(count == 0){\n            arr.push(x[i]);\n        }\n    }\n\
    \    return arr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(e){\n\
    \            return e % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().includes(\"\
    2\") || x[i].toString().includes(\"4\") || x[i].toString().includes(\"6\") ||\
    \ x[i].toString().includes(\"8\") || x[i].toString().includes(\"0\")){\n     \
    \       continue;\n        }\n        else{\n            arr.push(x[i]);\n   \
    \     }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpk1laa2eu.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpk1laa2eu.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(num){\n\
    \            return num % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i];\n   \
    \     var isUnique = true;\n        while(num > 0){\n            var digit = num\
    \ % 10;\n            if(digit % 2 == 0){\n                isUnique = false;\n\
    \                break;\n            }\n            num = Math.floor(num / 10);\n\
    \        }\n        if(isUnique){\n            result.push(x[i]);\n        }\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpk1cw9wi_.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpk1cw9wi_.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let arr\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(num\
    \ => num % 2 !== 0)){\n            arr.push(x[i]);\n        }\n    }\n    return\
    \ arr.sort((a,b) => a - b);\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i];\n   \
    \     var str = num.toString();\n        var count = 0;\n        for(var j = 0;\
    \ j < str.length; j++){\n            if(str[j] % 2 === 0){\n                count++;\n\
    \            }\n        }\n        if(count === 0){\n            arr.push(num);\n\
    \        }\n    }\n    return arr.sort(function(a, b){return a-b});\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i].toString();\n\
    \        var count = 0;\n        for(var j = 0; j < num.length; j++){\n      \
    \      if(num[j] % 2 == 0){\n                count++;\n            }\n       \
    \ }\n        if(count == 0){\n            arr.push(x[i]);\n        }\n    }\n\
    \    return arr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(num){\n\
    \            return num % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(a){\n\
    \            return a % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let newArr\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i];\n   \
    \     let numStr = num.toString();\n        let even = false;\n        for(let\
    \ j = 0; j < numStr.length; j++){\n            if(numStr[j] % 2 === 0){\n    \
    \            even = true;\n            }\n        }\n        if(!even){\n    \
    \        newArr.push(num);\n        }\n    }\n    return newArr.sort((a,b) =>\
    \ a - b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var y\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var n = x[i].toString();\n\
    \        var m = n.split(\"\");\n        var count = 0;\n        for(var j = 0;\
    \ j < m.length; j++){\n            if(m[j] % 2 == 0){\n                count++;\n\
    \            }\n        }\n        if(count == 0){\n            y.push(x[i]);\n\
    \        }\n    }\n    return y.sort(function(a, b){return a-b});\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let result\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i];\n   \
    \     let isUnique = true;\n        while(num > 0){\n            let digit = num\
    \ % 10;\n            if(digit % 2 === 0){\n                isUnique = false;\n\
    \                break;\n            }\n            num = Math.floor(num / 10);\n\
    \        }\n        if(isUnique){\n            result.push(x[i]);\n        }\n\
    \    }\n    return result.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(num){\n\
    \            return num % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var isUnique = true;\n\
    \        var num = x[i].toString();\n        for(var j = 0; j < num.length; j++){\n\
    \            if(num[j] % 2 === 0){\n                isUnique = false;\n      \
    \      }\n        }\n        if(isUnique){\n            result.push(x[i]);\n \
    \       }\n    }\n    return result.sort(function(a, b){return a - b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i];\n   \
    \     var str = num.toString();\n        var flag = true;\n        for(var j =\
    \ 0; j < str.length; j++){\n            if(str[j] % 2 === 0){\n              \
    \  flag = false;\n            }\n        }\n        if(flag){\n            arr.push(num);\n\
    \        }\n    }\n    return arr.sort(function(a, b){return a - b});\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(a){\n\
    \            return a % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let result\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i];\n   \
    \     let isUnique = true;\n        while(num > 0){\n            let digit = num\
    \ % 10;\n            if(digit % 2 === 0){\n                isUnique = false;\n\
    \                break;\n            }\n            num = Math.floor(num / 10);\n\
    \        }\n        if(isUnique){\n            result.push(x[i]);\n        }\n\
    \    }\n    return result.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(num){\n\
    \            return num % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(num){\n\
    \            return num % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i];\n   \
    \     var isEven = false;\n        while(num > 0){\n            if(num % 2 ==\
    \ 0){\n                isEven = true;\n                break;\n            }\n\
    \            num = Math.floor(num / 10);\n        }\n        if(!isEven){\n  \
    \          result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a - b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i];\n   \
    \     if(num.toString().split('').every(function(n){\n            return n % 2\
    \ !== 0;\n        })){\n            result.push(num);\n        }\n    }\n    return\
    \ result.sort(function(a, b){\n        return a - b;\n    });\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(a){\n\
    \            return a % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let result\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i].toString();\n\
    \        let isEven = false;\n        for(let j = 0; j < num.length; j++){\n \
    \           if(num[j] % 2 === 0){\n                isEven = true;\n          \
    \  }\n        }\n        if(!isEven){\n            result.push(x[i]);\n      \
    \  }\n    }\n    return result.sort((a,b) => a - b);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().length\
    \ === 1){\n            arr.push(x[i]);\n        }\n        else{\n           \
    \ var str = x[i].toString();\n            var count = 0;\n            for(var\
    \ j = 0; j < str.length; j++){\n                if(str[j] % 2 === 0){\n      \
    \              count++;\n                }\n            }\n            if(count\
    \ === 0){\n                arr.push(x[i]);\n            }\n        }\n    }\n\
    \    return arr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(y){\n\
    \            return y % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(x){\n\
    \            return x % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var str = x[i].toString();\n\
    \        var flag = true;\n        for(var j = 0; j < str.length; j++){\n    \
    \        if(str[j] % 2 == 0){\n                flag = false;\n            }\n\
    \        }\n        if(flag){\n            arr.push(x[i]);\n        }\n    }\n\
    \    return arr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var temp = x[i].toString().split('');\n\
    \        var flag = true;\n        for(var j = 0; j < temp.length; j++){\n   \
    \         if(temp[j] % 2 == 0){\n                flag = false;\n             \
    \   break;\n            }\n        }\n        if(flag){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){return a-b});\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i].toString();\n\
    \        var count = 0;\n        for(var j = 0; j < num.length; j++){\n      \
    \      if(num[j] % 2 === 0){\n                count++;\n            }\n      \
    \  }\n        if(count === 0){\n            result.push(x[i]);\n        }\n  \
    \  }\n    return result.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().length\
    \ == 1){\n            arr.push(x[i]);\n        }\n        else{\n            var\
    \ str = x[i].toString();\n            var flag = true;\n            for(var j\
    \ = 0; j < str.length; j++){\n                if(str[j] % 2 == 0){\n         \
    \           flag = false;\n                }\n            }\n            if(flag){\n\
    \                arr.push(x[i]);\n            }\n        }\n    }\n    return\
    \ arr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(e){\n\
    \            return e % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(item){\n\
    \            return item % 2 != 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a, b){return a - b});\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i];\n   \
    \     var isUnique = true;\n        while(num > 0){\n            var digit = num\
    \ % 10;\n            if(digit % 2 == 0){\n                isUnique = false;\n\
    \                break;\n            }\n            num = Math.floor(num / 10);\n\
    \        }\n        if(isUnique){\n            result.push(x[i]);\n        }\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpk1cw9wi_.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpk1cw9wi_.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i].toString();\n\
    \        var count = 0;\n        for(var j = 0; j < num.length; j++){\n      \
    \      if(num[j] % 2 === 0){\n                count++;\n            }\n      \
    \  }\n        if(count === 0){\n            arr.push(x[i]);\n        }\n    }\n\
    \    return arr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let arr\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(e\
    \ => e % 2 !== 0)){\n            arr.push(x[i]);\n        }\n    }\n    return\
    \ arr.sort((a,b) => a - b);\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i];\n   \
    \     var str = num.toString();\n        var count = 0;\n        for(var j = 0;\
    \ j < str.length; j++){\n            if(str[j] % 2 === 0){\n                count++;\n\
    \            }\n        }\n        if(count === 0){\n            arr.push(num);\n\
    \        }\n    }\n    return arr.sort(function(a, b){return a-b});\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let result\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i];\n   \
    \     let isUnique = true;\n        while(num > 0){\n            let digit = num\
    \ % 10;\n            if(digit % 2 === 0){\n                isUnique = false;\n\
    \                break;\n            }\n            num = Math.floor(num / 10);\n\
    \        }\n        if(isUnique){\n            result.push(x[i]);\n        }\n\
    \    }\n    return result.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(y){\n\
    \            return y % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let arr\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(el\
    \ => el % 2 !== 0)){\n            arr.push(x[i]);\n        }\n    }\n    return\
    \ arr.sort((a,b) => a - b);\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i];\n   \
    \     var isUnique = true;\n        while(num > 0){\n            var digit = num\
    \ % 10;\n            if(digit % 2 == 0){\n                isUnique = false;\n\
    \                break;\n            }\n            num = Math.floor(num / 10);\n\
    \        }\n        if(isUnique){\n            result.push(x[i]);\n        }\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpk1cw9wi_.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpk1cw9wi_.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  var y =\
    \ [];\n  for(var i = 0; i < x.length; i++){\n    if(x[i].toString().split('').every(function(e){\n\
    \      return e % 2 !== 0;\n    })){\n      y.push(x[i]);\n    }\n  }\n  return\
    \ y.sort(function(a,b){\n    return a - b;\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(a){\n\
    \            return a % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().length\
    \ == 1){\n            arr.push(x[i]);\n        }\n        else{\n            var\
    \ str = x[i].toString();\n            var count = 0;\n            for(var j =\
    \ 0; j < str.length; j++){\n                if(str[j] % 2 == 0){\n           \
    \         count++;\n                }\n            }\n            if(count ==\
    \ 0){\n                arr.push(x[i]);\n            }\n        }\n    }\n    return\
    \ arr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var isUnique = true;\n\
    \        var num = x[i].toString();\n        for(var j = 0; j < num.length; j++){\n\
    \            if(num[j] % 2 === 0){\n                isUnique = false;\n      \
    \      }\n        }\n        if(isUnique){\n            result.push(x[i]);\n \
    \       }\n    }\n    return result.sort(function(a, b){return a - b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(y){\n\
    \            return y % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i].toString();\n\
    \        var isUnique = true;\n        for(var j = 0; j < num.length; j++){\n\
    \            if(num[j] % 2 === 0){\n                isUnique = false;\n      \
    \      }\n        }\n        if(isUnique){\n            result.push(x[i]);\n \
    \       }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpmp9h61xp.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmp9h61xp.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i];\n   \
    \     var isEven = false;\n        while(num > 0){\n            if(num % 2 ==\
    \ 0){\n                isEven = true;\n                break;\n            }\n\
    \            num = Math.floor(num / 10);\n        }\n        if(!isEven){\n  \
    \          result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a - b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let result\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(element){\n\
    \            return element % 2 !== 0;\n        })){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){\n        return a -\
    \ b;\n    });\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i];\n   \
    \     var isUnique = true;\n        while(num > 0){\n            var digit = num\
    \ % 10;\n            if(digit % 2 == 0){\n                isUnique = false;\n\
    \                break;\n            }\n            num = Math.floor(num / 10);\n\
    \        }\n        if(isUnique){\n            result.push(x[i]);\n        }\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpk1cw9wi_.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpk1cw9wi_.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let arr\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i];\n   \
    \     let str = num.toString();\n        let isEven = false;\n        for(let\
    \ j = 0; j < str.length; j++){\n            if(str[j] % 2 === 0){\n          \
    \      isEven = true;\n            }\n        }\n        if(!isEven){\n      \
    \      arr.push(num);\n        }\n    }\n    return arr.sort((a,b) => a - b);\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  let arr\
    \ = [];\n  for(let i = 0; i < x.length; i++){\n    let num = x[i].toString().split('');\n\
    \    let count = 0;\n    for(let j = 0; j < num.length; j++){\n      if(num[j]\
    \ % 2 === 0){\n        count++;\n      }\n    }\n    if(count === 0){\n      arr.push(x[i]);\n\
    \    }\n  }\n  return arr.sort((a,b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var str = x[i].toString();\n\
    \        var count = 0;\n        for(var j = 0; j < str.length; j++){\n      \
    \      if(str[j] % 2 === 0){\n                count++;\n            }\n      \
    \  }\n        if(count === 0){\n            arr.push(x[i]);\n        }\n    }\n\
    \    return arr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let result\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i];\n   \
    \     let isUnique = true;\n        while(num > 0){\n            let digit = num\
    \ % 10;\n            if(digit % 2 === 0){\n                isUnique = false;\n\
    \                break;\n            }\n            num = Math.floor(num / 10);\n\
    \        }\n        if(isUnique){\n            result.push(x[i]);\n        }\n\
    \    }\n    return result.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let unique\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        let isUnique = true;\n\
    \        let num = x[i].toString();\n        for(let j = 0; j < num.length; j++){\n\
    \            if(num[j] % 2 === 0){\n                isUnique = false;\n      \
    \      }\n        }\n        if(isUnique){\n            unique.push(x[i]);\n \
    \       }\n    }\n    return unique.sort((a,b) => a - b);\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(x){\n\
    \            return x % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let arr\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        if(x[i].toString().length\
    \ === 1){\n            arr.push(x[i]);\n        }\n        else{\n           \
    \ let str = x[i].toString();\n            let flag = true;\n            for(let\
    \ j = 0; j < str.length; j++){\n                if(str[j] % 2 === 0){\n      \
    \              flag = false;\n                }\n            }\n            if(flag\
    \ === true){\n                arr.push(x[i]);\n            }\n        }\n    }\n\
    \    return arr.sort((a,b) => a - b);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let arr\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(e\
    \ => e % 2 !== 0)){\n            arr.push(x[i]);\n        }\n    }\n    return\
    \ arr.sort((a,b) => a - b);\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().length\
    \ === 1){\n            arr.push(x[i]);\n        }\n        else{\n           \
    \ for(var j = 0; j < x[i].toString().length; j++){\n                if(x[i].toString()[j]\
    \ % 2 === 0){\n                    break;\n                }\n               \
    \ else if(j === x[i].toString().length - 1){\n                    arr.push(x[i]);\n\
    \                }\n            }\n        }\n    }\n    return arr.sort(function(a,\
    \ b){return a-b});\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(e){\n\
    \            return e % 2 != 0;\n        })){\n            arr.push(x[i]);\n \
    \       }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i].toString();\n\
    \        var count = 0;\n        for(var j = 0; j < num.length; j++){\n      \
    \      if(num[j] % 2 === 0){\n                count++;\n            }\n      \
    \  }\n        if(count === 0){\n            arr.push(x[i]);\n        }\n    }\n\
    \    return arr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().length\
    \ == 1){\n            arr.push(x[i]);\n        }\n        else{\n            var\
    \ str = x[i].toString();\n            var count = 0;\n            for(var j =\
    \ 0; j < str.length; j++){\n                if(str[j] % 2 == 0){\n           \
    \         count++;\n                }\n            }\n            if(count ==\
    \ 0){\n                arr.push(x[i]);\n            }\n        }\n    }\n    return\
    \ arr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(num){\n\
    \            return num % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().includes(\"\
    2\") || x[i].toString().includes(\"4\") || x[i].toString().includes(\"6\") ||\
    \ x[i].toString().includes(\"8\") || x[i].toString().includes(\"0\")){\n     \
    \       continue;\n        }\n        else{\n            arr.push(x[i]);\n   \
    \     }\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmp5vt90ozy.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5vt90ozy.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var y\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var z = x[i].toString().split('');\n\
    \        var count = 0;\n        for(var j = 0; j < z.length; j++){\n        \
    \    if(z[j] % 2 == 0){\n                count++;\n            }\n        }\n\
    \        if(count == 0){\n            y.push(x[i]);\n        }\n    }\n    return\
    \ y.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(e){\n\
    \            return e % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(y){\n\
    \            return y % 2 !== 0;\n        })){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(num){\n\
    \            return num % 2 != 0;\n        })){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a,b){\n        return a - b;\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var str = x[i].toString();\n\
    \        var flag = true;\n        for(var j = 0; j < str.length; j++){\n    \
    \        if(str[j] % 2 == 0){\n                flag = false;\n            }\n\
    \        }\n        if(flag){\n            arr.push(x[i]);\n        }\n    }\n\
    \    return arr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i].toString();\n\
    \        var flag = true;\n        for(var j = 0; j < num.length; j++){\n    \
    \        if(num[j] % 2 == 0){\n                flag = false;\n            }\n\
    \        }\n        if(flag){\n            result.push(x[i]);\n        }\n   \
    \ }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpwfpeu8hk.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwfpeu8hk.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i].toString();\n\
    \        var count = 0;\n        for(var j = 0; j < num.length; j++){\n      \
    \      if(num[j] % 2 === 0){\n                count++;\n            }\n      \
    \  }\n        if(count === 0){\n            arr.push(x[i]);\n        }\n    }\n\
    \    return arr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var y\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var z = x[i].toString();\n\
    \        var count = 0;\n        for(var j = 0; j < z.length; j++){\n        \
    \    if(z[j] % 2 === 0){\n                count++;\n            }\n        }\n\
    \        if(count === 0){\n            y.push(x[i]);\n        }\n    }\n    return\
    \ y.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i].toString();\n\
    \        var count = 0;\n        for(var j = 0; j < num.length; j++){\n      \
    \      if(num[j] % 2 == 0){\n                count++;\n            }\n       \
    \ }\n        if(count == 0){\n            arr.push(num);\n        }\n    }\n \
    \   return arr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var isUnique = true;\n\
    \        var num = x[i].toString();\n        for(var j = 0; j < num.length; j++){\n\
    \            if(num[j] % 2 === 0){\n                isUnique = false;\n      \
    \      }\n        }\n        if(isUnique){\n            result.push(x[i]);\n \
    \       }\n    }\n    return result.sort(function(a, b){return a-b});\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var temp = x[i].toString().split('');\n\
    \        var flag = true;\n        for(var j = 0; j < temp.length; j++){\n   \
    \         if(temp[j] % 2 == 0){\n                flag = false;\n            }\n\
    \        }\n        if(flag){\n            arr.push(x[i]);\n        }\n    }\n\
    \    return arr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().indexOf('2')\
    \ === -1 && x[i].toString().indexOf('4') === -1 && x[i].toString().indexOf('6')\
    \ === -1 && x[i].toString().indexOf('8') === -1){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a, b){return a-b});\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  10\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpklbvsni0.js:20:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpklbvsni0.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 10 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
