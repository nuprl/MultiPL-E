language: js
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var result = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    test.split('').forEach(function(letter){\n    \
    \    if(result[letter]){\n            result[letter] += 1;\n        } else {\n\
    \            result[letter] = 1;\n        }\n        if(result[letter] > max){\n\
    \            max = result[letter];\n            maxLetters = [letter];\n     \
    \   } else if(result[letter] === max){\n            maxLetters.push(letter);\n\
    \        }\n    });\n    return {\n        max: max,\n        letters: maxLetters\n\
    \    };\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmpieks4y2i.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpieks4y2i.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var max_letters = [];\n    var result = {};\n    for (var i = 0; i < test.length;\
    \ i++){\n        if (test[i] in dict){\n            dict[test[i]] += 1;\n    \
    \    }\n        else{\n            dict[test[i]] = 1;\n        }\n    }\n    for\
    \ (var key in dict){\n        if (dict[key] > max){\n            max = dict[key];\n\
    \            max_letters = [key];\n        }\n        else if (dict[key] == max){\n\
    \            max_letters.push(key);\n        }\n    }\n    result[max_letters.join('')]\
    \ = max;\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n\
    }\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp1anuy4zt.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1anuy4zt.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var arr = test.split(\" \");\n   \
    \ var obj = {};\n    for(var i = 0; i < arr.length; i++){\n        if(obj[arr[i]]\
    \ === undefined){\n            obj[arr[i]] = 1;\n        }\n        else{\n  \
    \          obj[arr[i]]++;\n        }\n    }\n    var max = 0;\n    var maxArr\
    \ = [];\n    for(var key in obj){\n        if(obj[key] > max){\n            max\
    \ = obj[key];\n            maxArr = [];\n            maxArr.push(key);\n     \
    \   }\n        else if(obj[key] === max){\n            maxArr.push(key);\n   \
    \     }\n    }\n    var result = {};\n    for(var i = 0; i < maxArr.length; i++){\n\
    \        result[maxArr[i]] = max;\n    }\n    return result;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  '': 1\n}\n\
    \nshould loosely deep-equal\n\n{}\n    at test (/tmp/tmp82wgj13g.js:45:10)\n \
    \   at Object.<anonymous> (/tmp/tmp82wgj13g.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n\
    \  expected: {},\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var arr = test.split(\" \");\n  var\
    \ dict = {};\n  for(var i = 0; i < arr.length; i++){\n    if(dict[arr[i]]){\n\
    \      dict[arr[i]] += 1;\n    }\n    else{\n      dict[arr[i]] = 1;\n    }\n\
    \  }\n  var max = 0;\n  var max_arr = [];\n  for(var key in dict){\n    if(dict[key]\
    \ > max){\n      max = dict[key];\n      max_arr = [key];\n    }\n    else if(dict[key]\
    \ == max){\n      max_arr.push(key);\n    }\n  }\n  return max_arr;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'b'\n\
    ]\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmppie7v6cj.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmppie7v6cj.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'b'\
    \ ],\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var count = {};\n    var max = 0;\n\
    \    var maxLetter = [];\n    for(var i = 0; i < test.length; i++){\n        if(count[test[i]]){\n\
    \            count[test[i]]++;\n        } else {\n            count[test[i]] =\
    \ 1;\n        }\n        if(count[test[i]] > max){\n            max = count[test[i]];\n\
    \            maxLetter = [test[i]];\n        } else if(count[test[i]] === max){\n\
    \            maxLetter.push(test[i]);\n        }\n    }\n    return {maxLetter:\
    \ maxLetter, max: max};\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  maxLetter: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n\
    \  b: 2\n}\n    at test (/tmp/tmpr2ebnwpu.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpr2ebnwpu.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { maxLetter:\
    \ [ ' ' ], max: 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var histo = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    for (var i = 0; i < test.length; i++){\n      \
    \  if (histo[test[i]]){\n            histo[test[i]] += 1;\n        } else {\n\
    \            histo[test[i]] = 1;\n        }\n        if (histo[test[i]] > max){\n\
    \            max = histo[test[i]];\n            maxLetters = [test[i]];\n    \
    \    } else if (histo[test[i]] === max){\n            maxLetters.push(test[i]);\n\
    \        }\n    }\n    return {max: max, letters: maxLetters};\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmpfqzwdp75.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfqzwdp75.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    for (var i = 0; i < test.length; i++){\n      \
    \  if (test[i] in dict){\n            dict[test[i]] += 1;\n        }\n       \
    \ else{\n            dict[test[i]] = 1;\n        }\n    }\n    for (var key in\
    \ dict){\n        if (dict[key] > max){\n            max = dict[key];\n      \
    \      maxLetters = [key];\n        }\n        else if (dict[key] == max){\n \
    \           maxLetters.push(key);\n        }\n    }\n    return {maxLetters: maxLetters,\
    \ max: max};\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  maxLetters: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n\
    \  b: 2\n}\n    at test (/tmp/tmpsxlamp9x.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpsxlamp9x.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { maxLetters:\
    \ [ ' ' ], max: 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var hist = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    for (var i = 0; i < test.length; i++){\n      \
    \  if (test[i] in hist){\n            hist[test[i]]++;\n        }\n        else{\n\
    \            hist[test[i]] = 1;\n        }\n        if (hist[test[i]] > max){\n\
    \            max = hist[test[i]];\n            maxLetters = [test[i]];\n     \
    \   }\n        else if (hist[test[i]] == max){\n            maxLetters.push(test[i]);\n\
    \        }\n    }\n    return {'max': max, 'letters': maxLetters};\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmpb0cgr0vv.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpb0cgr0vv.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var count = {};\n    test.split('').forEach(function(i){\n\
    \        count[i] = (count[i]||0) + 1;\n    });\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmp4v8ku2e_.js:18:10)\n    at Object.<anonymous> (/tmp/tmp4v8ku2e_.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var hist = {};\n  var max = 0;\n  var\
    \ maxLetter = [];\n  for (var i = 0; i < test.length; i++) {\n    if (hist[test[i]])\
    \ {\n      hist[test[i]]++;\n    } else {\n      hist[test[i]] = 1;\n    }\n \
    \   if (hist[test[i]] > max) {\n      max = hist[test[i]];\n      maxLetter =\
    \ [test[i]];\n    } else if (hist[test[i]] === max) {\n      maxLetter.push(test[i]);\n\
    \    }\n  }\n  return {max: max, letters: maxLetter};\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmpe3st7bn6.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpe3st7bn6.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var letters = test.split(\" \");\n \
    \ var count = {};\n  for (var i = 0; i < letters.length; i++) {\n    if (count[letters[i]])\
    \ {\n      count[letters[i]] += 1;\n    } else {\n      count[letters[i]] = 1;\n\
    \    }\n  }\n  var max = 0;\n  var maxLetters = [];\n  for (var key in count)\
    \ {\n    if (count[key] > max) {\n      max = count[key];\n      maxLetters =\
    \ [key];\n    } else if (count[key] === max) {\n      maxLetters.push(key);\n\
    \    }\n  }\n  return {\n    maxLetters: maxLetters,\n    max: max\n  };\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 2,\n\
    \  maxLetters: [\n    'a',\n    'b'\n  ]\n}\n\nshould loosely deep-equal\n\n{\n\
    \  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpuhz854tg.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpuhz854tg.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { maxLetters:\
    \ [ 'a', 'b' ], max: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var maxLetter = [];\n    for(var i = 0; i < test.length; i++){\n        if(test[i]\
    \ in dict){\n            dict[test[i]] += 1;\n        }\n        else{\n     \
    \       dict[test[i]] = 1;\n        }\n    }\n    for(var key in dict){\n    \
    \    if(dict[key] > max){\n            max = dict[key];\n            maxLetter\
    \ = [key];\n        }\n        else if(dict[key] == max){\n            maxLetter.push(key);\n\
    \        }\n    }\n    return {maxLetter: maxLetter, max: max};\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  maxLetter: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n\
    \  b: 2\n}\n    at test (/tmp/tmpdd9sp_80.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpdd9sp_80.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { maxLetter:\
    \ [ ' ' ], max: 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var dict = {};\n  var max = 0;\n  var\
    \ maxLetters = [];\n  for (var i = 0; i < test.length; i++){\n    if (test[i]\
    \ in dict){\n      dict[test[i]] += 1;\n    } else {\n      dict[test[i]] = 1;\n\
    \    }\n    if (dict[test[i]] > max){\n      max = dict[test[i]];\n      maxLetters\
    \ = [test[i]];\n    } else if (dict[test[i]] === max){\n      maxLetters.push(test[i]);\n\
    \    }\n  }\n  return {max: max, letters: maxLetters};\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmpsnpcwc47.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpsnpcwc47.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    var letters = test.split(\" \");\n    for(var i\
    \ = 0; i < letters.length; i++){\n        if(dict[letters[i]]){\n            dict[letters[i]]\
    \ += 1;\n        }\n        else{\n            dict[letters[i]] = 1;\n       \
    \ }\n    }\n    for(var key in dict){\n        if(dict[key] > max){\n        \
    \    max = dict[key];\n            maxLetters = [key];\n        }\n        else\
    \ if(dict[key] == max){\n            maxLetters.push(key);\n        }\n    }\n\
    \    return {[maxLetters]: max};\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  'a,b': 2\n\
    }\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpgat2chrn.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgat2chrn.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { 'a,b': 2\
    \ },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var hist = {};\n    var max = 0;\n\
    \    var max_letter = [];\n    for (var i = 0; i < test.length; i++){\n      \
    \  if (hist[test[i]]){\n            hist[test[i]] += 1;\n        } else {\n  \
    \          hist[test[i]] = 1;\n        }\n        if (hist[test[i]] > max){\n\
    \            max = hist[test[i]];\n            max_letter = [test[i]];\n     \
    \   } else if (hist[test[i]] == max){\n            max_letter.push(test[i]);\n\
    \        }\n    }\n    return {'max': max, 'letters': max_letter};\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmpth1121il.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpth1121il.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var hist = {};\n  for (var i = 0; i\
    \ < test.length; i++) {\n    var letter = test[i];\n    if (hist[letter]) {\n\
    \      hist[letter]++;\n    } else {\n      hist[letter] = 1;\n    }\n  }\n  return\
    \ hist;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpsbhz_78b.js:23:10)\n    at Object.<anonymous> (/tmp/tmpsbhz_78b.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var result = {};\n    var max = 0;\n\
    \    var maxLetter = [];\n    var testArray = test.split(\" \");\n    for(var\
    \ i = 0; i < testArray.length; i++){\n        if(result[testArray[i]]){\n    \
    \        result[testArray[i]]++;\n        }\n        else{\n            result[testArray[i]]\
    \ = 1;\n        }\n    }\n    for(var key in result){\n        if(result[key]\
    \ > max){\n            max = result[key];\n            maxLetter = [key];\n  \
    \      }\n        else if(result[key] === max){\n            maxLetter.push(key);\n\
    \        }\n    }\n    return {maxLetter: maxLetter, max: max};\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 2,\n\
    \  maxLetter: [\n    'a',\n    'b'\n  ]\n}\n\nshould loosely deep-equal\n\n{\n\
    \  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp73q_vrf6.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp73q_vrf6.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { maxLetter:\
    \ [ 'a', 'b' ], max: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var hist = {};\n    var max = 0;\n\
    \    var maxChar = [];\n    for (var i = 0; i < test.length; i++) {\n        if\
    \ (hist[test[i]]) {\n            hist[test[i]]++;\n        } else {\n        \
    \    hist[test[i]] = 1;\n        }\n        if (hist[test[i]] > max) {\n     \
    \       max = hist[test[i]];\n            maxChar = [test[i]];\n        } else\
    \ if (hist[test[i]] === max) {\n            maxChar.push(test[i]);\n        }\n\
    \    }\n    return {\n        max: max,\n        maxChar: maxChar\n    };\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  maxChar: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b:\
    \ 2\n}\n    at test (/tmp/tmpq7w9ilng.js:33:10)\n    at Object.<anonymous> (/tmp/tmpq7w9ilng.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ maxChar: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var count = {};\n    var max = 0;\n\
    \    var result = [];\n    for(var i = 0; i < test.length; i++){\n        if(count[test[i]]){\n\
    \            count[test[i]]++;\n        }else{\n            count[test[i]] = 1;\n\
    \        }\n        if(count[test[i]] > max){\n            max = count[test[i]];\n\
    \        }\n    }\n    for(var key in count){\n        if(count[key] === max){\n\
    \            result.push(key);\n        }\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' '\n]\n\n\
    should loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpo6__e1de.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpo6__e1de.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ' ],\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    let result = {};\n    let max = 0;\n\
    \    let maxLetters = [];\n    let letters = test.split(\" \");\n    for(let i\
    \ = 0; i < letters.length; i++){\n        if(result[letters[i]]){\n          \
    \  result[letters[i]] += 1;\n        }else{\n            result[letters[i]] =\
    \ 1;\n        }\n    }\n    for(let key in result){\n        if(result[key] >\
    \ max){\n            max = result[key];\n            maxLetters = [];\n      \
    \      maxLetters.push(key);\n        }else if(result[key] === max){\n       \
    \     maxLetters.push(key);\n        }\n    }\n    return {[maxLetters]: max};\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  'a,b': 2\n\
    }\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpy6cxlyxu.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmpy6cxlyxu.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { 'a,b': 2\
    \ },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var count = {};\n    var max = 0;\n\
    \    var result = [];\n    for(var i = 0; i < test.length; i++){\n        if(count[test[i]]){\n\
    \            count[test[i]]++;\n        }\n        else{\n            count[test[i]]\
    \ = 1;\n        }\n        if(count[test[i]] > max){\n            max = count[test[i]];\n\
    \        }\n    }\n    for(var key in count){\n        if(count[key] === max){\n\
    \            result.push(key);\n        }\n    }\n    return result;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' '\n]\n\n\
    should loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmphofgjqq1.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmphofgjqq1.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ' ],\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    let dict = {};\n    let max = 0;\n\
    \    let maxLetters = [];\n    let letters = test.split(' ');\n    for(let i =\
    \ 0; i < letters.length; i++){\n        if(dict[letters[i]]){\n            dict[letters[i]]++;\n\
    \        } else {\n            dict[letters[i]] = 1;\n        }\n        if(dict[letters[i]]\
    \ > max){\n            max = dict[letters[i]];\n            maxLetters = [letters[i]];\n\
    \        } else if(dict[letters[i]] === max){\n            maxLetters.push(letters[i]);\n\
    \        }\n    }\n    return {[max]: maxLetters};\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  '2': [\n\
    \    'b',\n    'a'\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n\
    }\n    at test (/tmp/tmpkbtn_t_s.js:31:10)\n    at Object.<anonymous> (/tmp/tmpkbtn_t_s.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { '2': [ 'b',\
    \ 'a' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var result = {};\n    var max = 0;\n\
    \    var maxLetter = [];\n    var letters = test.split(\" \");\n    for(var i\
    \ = 0; i < letters.length; i++){\n        if(result[letters[i]]){\n          \
    \  result[letters[i]]++;\n        }else{\n            result[letters[i]] = 1;\n\
    \        }\n        if(result[letters[i]] > max){\n            max = result[letters[i]];\n\
    \            maxLetter = [];\n            maxLetter.push(letters[i]);\n      \
    \  }else if(result[letters[i]] === max){\n            maxLetter.push(letters[i]);\n\
    \        }\n    }\n    return {maxLetter: maxLetter, max: max};\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 2,\n\
    \  maxLetter: [\n    'b',\n    'a'\n  ]\n}\n\nshould loosely deep-equal\n\n{\n\
    \  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpbzxkh0m4.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbzxkh0m4.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { maxLetter:\
    \ [ 'b', 'a' ], max: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    let dict = {};\n    let max = 0;\n\
    \    let maxLetters = [];\n    for (let i = 0; i < test.length; i++){\n      \
    \  if (test[i] in dict){\n            dict[test[i]] += 1;\n        } else {\n\
    \            dict[test[i]] = 1;\n        }\n    }\n    for (let key in dict){\n\
    \        if (dict[key] > max){\n            max = dict[key];\n            maxLetters\
    \ = [key];\n        } else if (dict[key] === max){\n            maxLetters.push(key);\n\
    \        }\n    }\n    return {maxLetters: maxLetters, max: max};\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  maxLetters: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n\
    \  b: 2\n}\n    at test (/tmp/tmp1vpe9a7k.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1vpe9a7k.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { maxLetters:\
    \ [ ' ' ], max: 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var hist = {};\n  var max = 0;\n  var\
    \ maxLetter = [];\n  for (var i = 0; i < test.length; i++) {\n    if (hist[test[i]])\
    \ {\n      hist[test[i]]++;\n    } else {\n      hist[test[i]] = 1;\n    }\n \
    \   if (hist[test[i]] > max) {\n      max = hist[test[i]];\n      maxLetter =\
    \ [test[i]];\n    } else if (hist[test[i]] === max) {\n      maxLetter.push(test[i]);\n\
    \    }\n  }\n  return {maxLetter: maxLetter, max: max};\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  maxLetter: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n\
    \  b: 2\n}\n    at test (/tmp/tmpktnbzz8k.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpktnbzz8k.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { maxLetter:\
    \ [ ' ' ], max: 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var hist = {};\n    for (var i = 0;\
    \ i < test.length; i++) {\n        var char = test[i];\n        if (hist[char])\
    \ {\n            hist[char]++;\n        } else {\n            hist[char] = 1;\n\
    \        }\n    }\n    return hist;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpb94mc42j.js:23:10)\n    at Object.<anonymous> (/tmp/tmpb94mc42j.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var count = {};\n    var max = 0;\n\
    \    var maxLetter = [];\n    for(var i = 0; i < test.length; i++){\n        if(count[test[i]]){\n\
    \            count[test[i]] += 1;\n        }else{\n            count[test[i]]\
    \ = 1;\n        }\n        if(count[test[i]] > max){\n            max = count[test[i]];\n\
    \            maxLetter = [test[i]];\n        }else if(count[test[i]] === max){\n\
    \            maxLetter.push(test[i]);\n        }\n    }\n    return {\n      \
    \  \"max\": max,\n        \"letters\": maxLetter\n    };\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmploqmg7un.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmploqmg7un.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var hist = {};\n  var max = 0;\n  var\
    \ maxLetters = [];\n  test.split('').forEach(function(letter){\n    if(hist[letter]){\n\
    \      hist[letter]++;\n    } else {\n      hist[letter] = 1;\n    }\n    if(hist[letter]\
    \ > max){\n      max = hist[letter];\n      maxLetters = [letter];\n    } else\
    \ if(hist[letter] === max){\n      maxLetters.push(letter);\n    }\n  });\n  return\
    \ {\n    [maxLetters.join('')]: max\n  };\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n\
    }\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpy_jsqv2b.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpy_jsqv2b.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var result = {};\n  var max = 0;\n \
    \ var maxLetters = [];\n  var letters = test.split(\" \");\n  for(var i = 0; i\
    \ < letters.length; i++){\n    if(!result[letters[i]]){\n      result[letters[i]]\
    \ = 1;\n    } else {\n      result[letters[i]] += 1;\n    }\n    if(result[letters[i]]\
    \ > max){\n      max = result[letters[i]];\n      maxLetters = [];\n      maxLetters.push(letters[i]);\n\
    \    } else if(result[letters[i]] === max){\n      maxLetters.push(letters[i]);\n\
    \    }\n  }\n  return {maxLetters: maxLetters, max: max};\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 2,\n\
    \  maxLetters: [\n    'b',\n    'a'\n  ]\n}\n\nshould loosely deep-equal\n\n{\n\
    \  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpv_r_cu_o.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpv_r_cu_o.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { maxLetters:\
    \ [ 'b', 'a' ], max: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var histo = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    for (var i = 0; i < test.length; i++){\n      \
    \  if (histo[test[i]]){\n            histo[test[i]]++;\n        } else {\n   \
    \         histo[test[i]] = 1;\n        }\n        if (histo[test[i]] > max){\n\
    \            max = histo[test[i]];\n            maxLetters = [test[i]];\n    \
    \    } else if (histo[test[i]] === max){\n            maxLetters.push(test[i]);\n\
    \        }\n    }\n    return {\n        max: max,\n        maxLetters: maxLetters\n\
    \    };\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  maxLetters: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n\
    \  b: 2\n}\n    at test (/tmp/tmp7sp7op3d.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp7sp7op3d.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ maxLetters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var max_letters = [];\n    for (var i = 0; i < test.length; i++){\n     \
    \   if (test[i] in dict){\n            dict[test[i]] += 1;\n        }\n      \
    \  else{\n            dict[test[i]] = 1;\n        }\n    }\n    for (var key in\
    \ dict){\n        if (dict[key] > max){\n            max = dict[key];\n      \
    \      max_letters = [key];\n        }\n        else if (dict[key] == max){\n\
    \            max_letters.push(key);\n        }\n    }\n    return {max_letters:\
    \ max_letters, max: max};\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  max_letters: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n\
    \  b: 2\n}\n    at test (/tmp/tmp21cxeosh.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp21cxeosh.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max_letters:\
    \ [ ' ' ], max: 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var result = [];\n    for(var i = 0; i < test.length; i++){\n        if(test[i]\
    \ in dict){\n            dict[test[i]] += 1;\n        }\n        else{\n     \
    \       dict[test[i]] = 1;\n        }\n    }\n    for(var key in dict){\n    \
    \    if(dict[key] > max){\n            max = dict[key];\n        }\n    }\n  \
    \  for(var key in dict){\n        if(dict[key] == max){\n            result.push(key);\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' '\n]\n\n\
    should loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp_fkevfup.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_fkevfup.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ' ],\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var max_letters = [];\n    for (var i = 0; i < test.length; i++){\n     \
    \   if (test[i] in dict){\n            dict[test[i]] += 1;\n        }\n      \
    \  else{\n            dict[test[i]] = 1;\n        }\n    }\n    for (var key in\
    \ dict){\n        if (dict[key] > max){\n            max = dict[key];\n      \
    \      max_letters = [key];\n        }\n        else if (dict[key] == max){\n\
    \            max_letters.push(key);\n        }\n    }\n    return {max_letters:\
    \ max_letters, max: max};\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  max_letters: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n\
    \  b: 2\n}\n    at test (/tmp/tmp21cxeosh.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp21cxeosh.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max_letters:\
    \ [ ' ' ], max: 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    let dictionary = {};\n    let max\
    \ = 0;\n    let maxLetter = [];\n    for(let i = 0; i < test.length; i++){\n \
    \       if(dictionary[test[i]]){\n            dictionary[test[i]]++;\n       \
    \ }else{\n            dictionary[test[i]] = 1;\n        }\n        if(dictionary[test[i]]\
    \ > max){\n            max = dictionary[test[i]];\n            maxLetter = [test[i]];\n\
    \        }else if(dictionary[test[i]] === max){\n            maxLetter.push(test[i]);\n\
    \        }\n    }\n    return {[maxLetter]: max};\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n\
    }\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp5zroie3x.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5zroie3x.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var result = {};\n    var max = 0;\n\
    \    for(var i = 0; i < test.length; i++){\n        if(result[test[i]]){\n   \
    \         result[test[i]]++;\n        } else {\n            result[test[i]] =\
    \ 1;\n        }\n        if(result[test[i]] > max){\n            max = result[test[i]];\n\
    \        }\n    }\n    var final = {};\n    for(var key in result){\n        if(result[key]\
    \ === max){\n            final[key] = result[key];\n        }\n    }\n    return\
    \ final;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n\
    }\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpe_m08bhe.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmpe_m08bhe.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var letters = test.split(\" \");\n \
    \ var count = {};\n  var max = 0;\n  var maxLetter = [];\n  for(var i = 0; i <\
    \ letters.length; i++){\n    if(count[letters[i]]){\n      count[letters[i]]++;\n\
    \    }\n    else{\n      count[letters[i]] = 1;\n    }\n    if(count[letters[i]]\
    \ > max){\n      max = count[letters[i]];\n      maxLetter = [letters[i]];\n \
    \   }\n    else if(count[letters[i]] === max){\n      maxLetter.push(letters[i]);\n\
    \    }\n  }\n  return {maxLetter: maxLetter, max: max};\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 2,\n\
    \  maxLetter: [\n    'b',\n    'a'\n  ]\n}\n\nshould loosely deep-equal\n\n{\n\
    \  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp_fydt5pl.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_fydt5pl.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { maxLetter:\
    \ [ 'b', 'a' ], max: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var letters = test.split(\" \");\n \
    \ var count = {};\n  for (var i = 0; i < letters.length; i++) {\n    if (count[letters[i]])\
    \ {\n      count[letters[i]]++;\n    } else {\n      count[letters[i]] = 1;\n\
    \    }\n  }\n  var max = 0;\n  var maxLetters = [];\n  for (var key in count)\
    \ {\n    if (count[key] > max) {\n      max = count[key];\n      maxLetters =\
    \ [key];\n    } else if (count[key] === max) {\n      maxLetters.push(key);\n\
    \    }\n  }\n  return {[maxLetters]: max};\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  'a,b': 2\n\
    }\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp2wqwti9a.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2wqwti9a.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { 'a,b': 2\
    \ },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var letters = test.split(\" \");\n \
    \ var count = {};\n  for (var i = 0; i < letters.length; i++) {\n    if (count[letters[i]]\
    \ === undefined) {\n      count[letters[i]] = 1;\n    } else {\n      count[letters[i]]\
    \ += 1;\n    }\n  }\n  var max = 0;\n  var maxLetters = [];\n  for (var key in\
    \ count) {\n    if (count[key] > max) {\n      max = count[key];\n      maxLetters\
    \ = [key];\n    } else if (count[key] === max) {\n      maxLetters.push(key);\n\
    \    }\n  }\n  var result = {};\n  for (var i = 0; i < maxLetters.length; i++)\
    \ {\n    result[maxLetters[i]] = max;\n  }\n  return result;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  '': 1\n}\n\
    \nshould loosely deep-equal\n\n{}\n    at test (/tmp/tmp7vkuljgy.js:42:10)\n \
    \   at Object.<anonymous> (/tmp/tmp7vkuljgy.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n\
    \  expected: {},\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    let dict = {};\n    let max = 0;\n\
    \    let maxLetters = [];\n    for (let i = 0; i < test.length; i++){\n      \
    \  if (test[i] in dict){\n            dict[test[i]]++;\n        } else {\n   \
    \         dict[test[i]] = 1;\n        }\n        if (dict[test[i]] > max){\n \
    \           max = dict[test[i]];\n            maxLetters = [test[i]];\n      \
    \  } else if (dict[test[i]] === max){\n            maxLetters.push(test[i]);\n\
    \        }\n    }\n    return {[maxLetters]: max};\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n\
    }\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp7o0ak_6_.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7o0ak_6_.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var arr = test.split(\" \");\n   \
    \ var dict = {};\n    var max = 0;\n    var max_letter = [];\n    for(var i =\
    \ 0; i < arr.length; i++){\n        if(dict[arr[i]]){\n            dict[arr[i]]++;\n\
    \        }\n        else{\n            dict[arr[i]] = 1;\n        }\n        if(dict[arr[i]]\
    \ > max){\n            max = dict[arr[i]];\n            max_letter = [arr[i]];\n\
    \        }\n        else if(dict[arr[i]] == max){\n            max_letter.push(arr[i]);\n\
    \        }\n    }\n    return {max_letter: max_letter, count: max};\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  count: 2,\n\
    \  max_letter: [\n    'b',\n    'a'\n  ]\n}\n\nshould loosely deep-equal\n\n{\n\
    \  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp_iokli0o.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_iokli0o.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max_letter:\
    \ [ 'b', 'a' ], count: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var hist = {};\n    var max = 0;\n\
    \    var max_letters = [];\n    for (var i = 0; i < test.length; i++){\n     \
    \   if (hist[test[i]]){\n            hist[test[i]] += 1;\n        }\n        else{\n\
    \            hist[test[i]] = 1;\n        }\n        if (hist[test[i]] > max){\n\
    \            max = hist[test[i]];\n            max_letters = [test[i]];\n    \
    \    }\n        else if (hist[test[i]] == max){\n            max_letters.push(test[i]);\n\
    \        }\n    }\n    return {max: max, max_letters: max_letters};\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  max_letters: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n\
    \  b: 2\n}\n    at test (/tmp/tmp6c12tjt9.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6c12tjt9.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ max_letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var hist = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    for (var i = 0; i < test.length; i++){\n      \
    \  if (hist[test[i]] === undefined){\n            hist[test[i]] = 1;\n       \
    \ }\n        else{\n            hist[test[i]] += 1;\n        }\n        if (hist[test[i]]\
    \ > max){\n            max = hist[test[i]];\n            maxLetters = [test[i]];\n\
    \        }\n        else if (hist[test[i]] === max){\n            maxLetters.push(test[i]);\n\
    \        }\n    }\n    return {max: max, letters: maxLetters};\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmpe9fvghyq.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpe9fvghyq.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var obj = {};\n    var max = 0;\n\
    \    var maxArr = [];\n    var arr = test.split(\" \");\n    for(var i = 0; i\
    \ < arr.length; i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n\
    \        }else{\n            obj[arr[i]] = 1;\n        }\n    }\n    for(var key\
    \ in obj){\n        if(obj[key] > max){\n            max = obj[key];\n       \
    \     maxArr = [];\n            maxArr.push(key);\n        }else if(obj[key] ===\
    \ max){\n            maxArr.push(key);\n        }\n    }\n    return {max: max,\
    \ maxArr: maxArr};\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 2,\n\
    \  maxArr: [\n    'a',\n    'b'\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a:\
    \ 2,\n  b: 2\n}\n    at test (/tmp/tmptxbojnly.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptxbojnly.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 2,\
    \ maxArr: [ 'a', 'b' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var result = {};\n    var max = 0;\n\
    \    var maxLetter = [];\n    for(var i = 0; i < test.length; i++){\n        if(result[test[i]]){\n\
    \            result[test[i]]++;\n        } else {\n            result[test[i]]\
    \ = 1;\n        }\n        if(result[test[i]] > max){\n            max = result[test[i]];\n\
    \            maxLetter = [test[i]];\n        } else if(result[test[i]] === max){\n\
    \            maxLetter.push(test[i]);\n        }\n    }\n    return {max: max,\
    \ letters: maxLetter};\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmpy6dxxp53.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpy6dxxp53.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var hist = {};\n    for (var i = 0;\
    \ i < test.length; i++) {\n        var letter = test[i];\n        if (letter in\
    \ hist) {\n            hist[letter]++;\n        } else {\n            hist[letter]\
    \ = 1;\n        }\n    }\n    return hist;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmp_6g_le4z.js:23:10)\n    at Object.<anonymous> (/tmp/tmp_6g_le4z.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var letters = test.split(\" \");\n \
    \ var count = {};\n  var max = 0;\n  var result = [];\n  for(var i = 0; i < letters.length;\
    \ i++){\n    if(count[letters[i]] === undefined){\n      count[letters[i]] = 1;\n\
    \    }\n    else{\n      count[letters[i]] += 1;\n    }\n    if(count[letters[i]]\
    \ > max){\n      max = count[letters[i]];\n    }\n  }\n  for(var key in count){\n\
    \    if(count[key] === max){\n      result.push(key);\n    }\n  }\n  return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'b'\n\
    ]\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp1t62idat.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1t62idat.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'b'\
    \ ],\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var arr = test.split(\" \");\n   \
    \ var count = {};\n    var max = 0;\n    var maxLetter = [];\n    for(var i =\
    \ 0; i < arr.length; i++){\n        if(count[arr[i]] === undefined){\n       \
    \     count[arr[i]] = 1;\n        }\n        else{\n            count[arr[i]]++;\n\
    \        }\n        if(count[arr[i]] > max){\n            max = count[arr[i]];\n\
    \            maxLetter = [arr[i]];\n        }\n        else if(count[arr[i]] ===\
    \ max){\n            maxLetter.push(arr[i]);\n        }\n    }\n    return {maxLetter:\
    \ maxLetter, max: max};\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 2,\n\
    \  maxLetter: [\n    'b',\n    'a'\n  ]\n}\n\nshould loosely deep-equal\n\n{\n\
    \  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpw6wv0byo.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpw6wv0byo.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { maxLetter:\
    \ [ 'b', 'a' ], max: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var max_letters = [];\n    test.split('').forEach(function(letter){\n   \
    \     if(dict[letter]){\n            dict[letter] += 1;\n        }\n        else{\n\
    \            dict[letter] = 1;\n        }\n        if(dict[letter] > max){\n \
    \           max = dict[letter];\n            max_letters = [letter];\n       \
    \ }\n        else if(dict[letter] === max){\n            max_letters.push(letter);\n\
    \        }\n    });\n    return {max_letters: max_letters, max: max};\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  max_letters: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n\
    \  b: 2\n}\n    at test (/tmp/tmpmrr8bg85.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmrr8bg85.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max_letters:\
    \ [ ' ' ], max: 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var count = {};\n  var max = 0;\n  var\
    \ result = [];\n  for (var i = 0; i < test.length; i++) {\n    if (count[test[i]])\
    \ {\n      count[test[i]]++;\n    } else {\n      count[test[i]] = 1;\n    }\n\
    \    if (count[test[i]] > max) {\n      max = count[test[i]];\n    }\n  }\n  for\
    \ (var key in count) {\n    if (count[key] === max) {\n      result.push(key);\n\
    \    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' '\n]\n\n\
    should loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpfn7zx0ps.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfn7zx0ps.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ' ],\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var arr = test.split(\" \");\n   \
    \ var dict = {};\n    for(var i = 0; i < arr.length; i++){\n        if(dict[arr[i]]){\n\
    \            dict[arr[i]] += 1;\n        }\n        else{\n            dict[arr[i]]\
    \ = 1;\n        }\n    }\n    var max = 0;\n    var max_key = \"\";\n    for(var\
    \ key in dict){\n        if(dict[key] > max){\n            max = dict[key];\n\
    \            max_key = key;\n        }\n    }\n    var max_arr = [];\n    for(var\
    \ key in dict){\n        if(dict[key] == max){\n            max_arr.push(key);\n\
    \        }\n    }\n    return {max_arr: max_arr, max: max};\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 2,\n\
    \  max_arr: [\n    'a',\n    'b'\n  ]\n}\n\nshould loosely deep-equal\n\n{\n \
    \ a: 2,\n  b: 2\n}\n    at test (/tmp/tmp0ofhg3jp.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0ofhg3jp.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max_arr:\
    \ [ 'a', 'b' ], max: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var letters = test.split(\" \");\n \
    \ var count = {};\n  var max = 0;\n  var result = [];\n  for(var i = 0; i < letters.length;\
    \ i++){\n    if(count[letters[i]] === undefined){\n      count[letters[i]] = 1;\n\
    \    } else {\n      count[letters[i]]++;\n    }\n    if(count[letters[i]] > max){\n\
    \      max = count[letters[i]];\n    }\n  }\n  for(var key in count){\n    if(count[key]\
    \ === max){\n      result.push(key);\n    }\n  }\n  return result;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'b'\n\
    ]\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpqeoeae3p.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqeoeae3p.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'b'\
    \ ],\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var result = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    var letters = test.split(\" \");\n    for(var i\
    \ = 0; i < letters.length; i++){\n        if(result[letters[i]]){\n          \
    \  result[letters[i]]++;\n        }\n        else{\n            result[letters[i]]\
    \ = 1;\n        }\n        if(result[letters[i]] > max){\n            max = result[letters[i]];\n\
    \            maxLetters = [];\n            maxLetters.push(letters[i]);\n    \
    \    }\n        else if(result[letters[i]] === max){\n            maxLetters.push(letters[i]);\n\
    \        }\n    }\n    return {\n        max: max,\n        maxLetters: maxLetters\n\
    \    };\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2,\
    \ \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"\
    d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\"\
    : 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n \
    \ assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 2,\n\
    \  maxLetters: [\n    'b',\n    'a'\n  ]\n}\n\nshould loosely deep-equal\n\n{\n\
    \  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpzt5aepsa.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzt5aepsa.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 2,\
    \ maxLetters: [ 'b', 'a' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var max_letter = [];\n    var test_array = test.split(\" \");\n    for (var\
    \ i = 0; i < test_array.length; i++){\n        if (test_array[i] in dict){\n \
    \           dict[test_array[i]] += 1;\n        }\n        else{\n            dict[test_array[i]]\
    \ = 1;\n        }\n    }\n    for (var key in dict){\n        if (dict[key] >\
    \ max){\n            max = dict[key];\n            max_letter = [key];\n     \
    \   }\n        else if (dict[key] == max){\n            max_letter.push(key);\n\
    \        }\n    }\n    return {max_letter: max_letter, max: max};\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 2,\n\
    \  max_letter: [\n    'a',\n    'b'\n  ]\n}\n\nshould loosely deep-equal\n\n{\n\
    \  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpyg0x200u.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpyg0x200u.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max_letter:\
    \ [ 'a', 'b' ], max: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var result = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    var letters = test.split(\" \");\n    for(var i\
    \ = 0; i < letters.length; i++){\n        if(!result[letters[i]]){\n         \
    \   result[letters[i]] = 1;\n        } else {\n            result[letters[i]]++;\n\
    \        }\n        if(result[letters[i]] > max){\n            max = result[letters[i]];\n\
    \            maxLetters = [];\n            maxLetters.push(letters[i]);\n    \
    \    } else if(result[letters[i]] === max){\n            maxLetters.push(letters[i]);\n\
    \        }\n    }\n    return {maxLetters: maxLetters, max: max};\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 2,\n\
    \  maxLetters: [\n    'b',\n    'a'\n  ]\n}\n\nshould loosely deep-equal\n\n{\n\
    \  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpaan2x287.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpaan2x287.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { maxLetters:\
    \ [ 'b', 'a' ], max: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    for (var i = 0; i < test.length; i++){\n      \
    \  if (test[i] in dict){\n            dict[test[i]] += 1;\n        }\n       \
    \ else{\n            dict[test[i]] = 1;\n        }\n    }\n    for (var key in\
    \ dict){\n        if (dict[key] > max){\n            max = dict[key];\n      \
    \      maxLetters = [key];\n        }\n        else if (dict[key] == max){\n \
    \           maxLetters.push(key);\n        }\n    }\n    return {maxLetters: maxLetters,\
    \ max: max};\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  maxLetters: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n\
    \  b: 2\n}\n    at test (/tmp/tmpsxlamp9x.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpsxlamp9x.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { maxLetters:\
    \ [ ' ' ], max: 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var letters = test.split(\" \");\n \
    \ var letterCount = {};\n  var max = 0;\n  var maxLetter = [];\n  for (var i =\
    \ 0; i < letters.length; i++) {\n    if (letterCount[letters[i]]) {\n      letterCount[letters[i]]++;\n\
    \    } else {\n      letterCount[letters[i]] = 1;\n    }\n    if (letterCount[letters[i]]\
    \ > max) {\n      max = letterCount[letters[i]];\n      maxLetter = [];\n    \
    \  maxLetter.push(letters[i]);\n    } else if (letterCount[letters[i]] === max)\
    \ {\n      maxLetter.push(letters[i]);\n    }\n  }\n  return {maxLetter: maxLetter,\
    \ max: max};\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 2,\n\
    \  maxLetter: [\n    'b',\n    'a'\n  ]\n}\n\nshould loosely deep-equal\n\n{\n\
    \  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp2y985yt9.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2y985yt9.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { maxLetter:\
    \ [ 'b', 'a' ], max: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var obj = {};\n  var arr = test.split(\"\
    \ \");\n  for(var i = 0; i < arr.length; i++){\n    if(obj[arr[i]]){\n      obj[arr[i]]++;\n\
    \    } else {\n      obj[arr[i]] = 1;\n    }\n  }\n  var max = 0;\n  var maxArr\
    \ = [];\n  for(var key in obj){\n    if(obj[key] > max){\n      max = obj[key];\n\
    \      maxArr = [];\n      maxArr.push(key);\n    } else if(obj[key] === max){\n\
    \      maxArr.push(key);\n    }\n  }\n  return maxArr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'b'\n\
    ]\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpknf_ddw7.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmpknf_ddw7.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'b'\
    \ ],\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var histo = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    for (var i = 0; i < test.length; i++){\n      \
    \  if (histo[test[i]]){\n            histo[test[i]] += 1;\n        }\n       \
    \ else {\n            histo[test[i]] = 1;\n        }\n        if (histo[test[i]]\
    \ > max){\n            max = histo[test[i]];\n            maxLetters = [test[i]];\n\
    \        }\n        else if (histo[test[i]] === max){\n            maxLetters.push(test[i]);\n\
    \        }\n    }\n    return {\n        max: max,\n        letters: maxLetters\n\
    \    };\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmpbvh0vvw8.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbvh0vvw8.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    for (var i = 0; i < test.length; i++){\n      \
    \  if (test[i] in dict){\n            dict[test[i]] += 1;\n        }\n       \
    \ else{\n            dict[test[i]] = 1;\n        }\n    }\n    for (var key in\
    \ dict){\n        if (dict[key] > max){\n            max = dict[key];\n      \
    \      maxLetters = [key];\n        }\n        else if (dict[key] == max){\n \
    \           maxLetters.push(key);\n        }\n    }\n    return {max: max, letters:\
    \ maxLetters};\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmpri9j9xv3.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpri9j9xv3.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var histo = {};\n    var max = 0;\n\
    \    var maxKeys = [];\n    for (var i = 0; i < test.length; i++){\n        if\
    \ (histo[test[i]]){\n            histo[test[i]]++;\n        } else {\n       \
    \     histo[test[i]] = 1;\n        }\n        if (histo[test[i]] > max){\n   \
    \         max = histo[test[i]];\n            maxKeys = [test[i]];\n        } else\
    \ if (histo[test[i]] === max){\n            maxKeys.push(test[i]);\n        }\n\
    \    }\n    return {max: max, keys: maxKeys};\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  keys: [\n\
    \    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n\
    }\n    at test (/tmp/tmpxb_b_eiy.js:30:10)\n    at Object.<anonymous> (/tmp/tmpxb_b_eiy.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ keys: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var count = {};\n    test.split('').forEach(function(i){\n\
    \        count[i] = (count[i]||0) + 1;\n    });\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmp4v8ku2e_.js:18:10)\n    at Object.<anonymous> (/tmp/tmp4v8ku2e_.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var count = {};\n    var max = 0;\n\
    \    var result = [];\n    test.split('').forEach(function(i){\n        count[i]\
    \ = (count[i]||0) + 1;\n        if(count[i] > max){\n            max = count[i];\n\
    \        }\n    });\n    for(var key in count){\n        if(count[key] === max){\n\
    \            result.push(key);\n        }\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' '\n]\n\n\
    should loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmph9jhmmmd.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmph9jhmmmd.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ' ],\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var hist = {};\n    for (var i = 0;\
    \ i < test.length; i++) {\n        var letter = test[i];\n        if (letter in\
    \ hist) {\n            hist[letter]++;\n        } else {\n            hist[letter]\
    \ = 1;\n        }\n    }\n    return hist;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmp_6g_le4z.js:23:10)\n    at Object.<anonymous> (/tmp/tmp_6g_le4z.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    for (var i = 0; i < test.length; i++){\n      \
    \  if (test[i] in dict){\n            dict[test[i]]++;\n        }\n        else{\n\
    \            dict[test[i]] = 1;\n        }\n        if (dict[test[i]] > max){\n\
    \            max = dict[test[i]];\n            maxLetters = [test[i]];\n     \
    \   }\n        else if (dict[test[i]] == max){\n            maxLetters.push(test[i]);\n\
    \        }\n    }\n    return {max: max, letters: maxLetters};\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmpgak_kbrm.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgak_kbrm.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var hist = {};\n    for (var i = 0;\
    \ i < test.length; i++) {\n        var c = test[i];\n        if (c in hist) {\n\
    \            hist[c]++;\n        } else {\n            hist[c] = 1;\n        }\n\
    \    }\n    return hist;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpbr8322w5.js:23:10)\n    at Object.<anonymous> (/tmp/tmpbr8322w5.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var histo = {};\n  var max = 0;\n  var\
    \ maxLetters = [];\n  for (var i = 0; i < test.length; i++) {\n    if (histo[test[i]])\
    \ {\n      histo[test[i]]++;\n    } else {\n      histo[test[i]] = 1;\n    }\n\
    \    if (histo[test[i]] > max) {\n      max = histo[test[i]];\n      maxLetters\
    \ = [test[i]];\n    } else if (histo[test[i]] === max) {\n      maxLetters.push(test[i]);\n\
    \    }\n  }\n  return {\n    max: max,\n    letters: maxLetters\n  };\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmpqznzcggy.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqznzcggy.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var letters = test.split(\" \");\n \
    \ var count = {};\n  var max = 0;\n  var maxLetter = [];\n  for(var i = 0; i <\
    \ letters.length; i++){\n    if(count[letters[i]]){\n      count[letters[i]]++;\n\
    \    } else {\n      count[letters[i]] = 1;\n    }\n    if(count[letters[i]] >\
    \ max){\n      max = count[letters[i]];\n      maxLetter = [];\n      maxLetter.push(letters[i]);\n\
    \    } else if(count[letters[i]] === max){\n      maxLetter.push(letters[i]);\n\
    \    }\n  }\n  return {maxLetter: maxLetter, max: max};\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 2,\n\
    \  maxLetter: [\n    'b',\n    'a'\n  ]\n}\n\nshould loosely deep-equal\n\n{\n\
    \  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp_h3me0z9.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_h3me0z9.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { maxLetter:\
    \ [ 'b', 'a' ], max: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var max_letters = [];\n    for (var i = 0; i < test.length; i++){\n     \
    \   if (test[i] in dict){\n            dict[test[i]] += 1;\n        }\n      \
    \  else{\n            dict[test[i]] = 1;\n        }\n    }\n    for (var key in\
    \ dict){\n        if (dict[key] > max){\n            max = dict[key];\n      \
    \      max_letters = [key];\n        }\n        else if (dict[key] == max){\n\
    \            max_letters.push(key);\n        }\n    }\n    return {max_letters:\
    \ max_letters, max: max};\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  max_letters: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n\
    \  b: 2\n}\n    at test (/tmp/tmp21cxeosh.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp21cxeosh.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max_letters:\
    \ [ ' ' ], max: 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    let hist = {};\n    for (let i = 0;\
    \ i < test.length; i++) {\n        let char = test[i];\n        if (hist[char])\
    \ {\n            hist[char]++;\n        } else {\n            hist[char] = 1;\n\
    \        }\n    }\n    return hist;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpsfy9guu2.js:23:10)\n    at Object.<anonymous> (/tmp/tmpsfy9guu2.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var obj = {};\n  var arr = test.split(\"\
    \ \");\n  for(var i = 0; i < arr.length; i++){\n    if(obj[arr[i]] === undefined){\n\
    \      obj[arr[i]] = 1;\n    }\n    else{\n      obj[arr[i]] += 1;\n    }\n  }\n\
    \  var max = 0;\n  var maxArr = [];\n  for(var key in obj){\n    if(obj[key] >\
    \ max){\n      max = obj[key];\n      maxArr = [];\n      maxArr.push(key);\n\
    \    }\n    else if(obj[key] === max){\n      maxArr.push(key);\n    }\n  }\n\
    \  var result = {};\n  for(var i = 0; i < maxArr.length; i++){\n    result[maxArr[i]]\
    \ = max;\n  }\n  return result;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  '': 1\n}\n\
    \nshould loosely deep-equal\n\n{}\n    at test (/tmp/tmpy3fgzynr.js:45:10)\n \
    \   at Object.<anonymous> (/tmp/tmpy3fgzynr.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n\
    \  expected: {},\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var hist = {};\n    var max = 0;\n\
    \    var maxChar = [];\n    for (var i = 0; i < test.length; i++) {\n        if\
    \ (hist[test[i]]) {\n            hist[test[i]]++;\n        } else {\n        \
    \    hist[test[i]] = 1;\n        }\n        if (hist[test[i]] > max) {\n     \
    \       max = hist[test[i]];\n            maxChar = [test[i]];\n        } else\
    \ if (hist[test[i]] === max) {\n            maxChar.push(test[i]);\n        }\n\
    \    }\n    return {maxChar: maxChar, max: max};\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  maxChar: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b:\
    \ 2\n}\n    at test (/tmp/tmphajbqeu7.js:30:10)\n    at Object.<anonymous> (/tmp/tmphajbqeu7.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { maxChar:\
    \ [ ' ' ], max: 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var dict = {};\n  var max = 0;\n  var\
    \ maxLetters = [];\n  for (var i = 0; i < test.length; i++){\n    if (test[i]\
    \ in dict){\n      dict[test[i]] += 1;\n    }\n    else{\n      dict[test[i]]\
    \ = 1;\n    }\n    if (dict[test[i]] > max){\n      max = dict[test[i]];\n   \
    \   maxLetters = [test[i]];\n    }\n    else if (dict[test[i]] == max){\n    \
    \  maxLetters.push(test[i]);\n    }\n  }\n  return {max: max, letters: maxLetters};\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmp2c_ug16t.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2c_ug16t.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    let letters = test.split(\" \");\n\
    \    let count = {};\n    let max = 0;\n    let result = [];\n    for(let i =\
    \ 0; i < letters.length; i++){\n        if(count[letters[i]]){\n            count[letters[i]]++;\n\
    \        }\n        else{\n            count[letters[i]] = 1;\n        }\n   \
    \     if(count[letters[i]] > max){\n            max = count[letters[i]];\n   \
    \     }\n    }\n    for(let key in count){\n        if(count[key] === max){\n\
    \            result.push(key);\n        }\n    }\n    return result;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'b'\n\
    ]\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpb6hikp2j.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpb6hikp2j.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'b'\
    \ ],\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    for (var i = 0; i < test.length; i++){\n      \
    \  if (test[i] in dict){\n            dict[test[i]] += 1;\n        }\n       \
    \ else{\n            dict[test[i]] = 1;\n        }\n    }\n    for (var key in\
    \ dict){\n        if (dict[key] > max){\n            max = dict[key];\n      \
    \      maxLetters = [key];\n        }\n        else if (dict[key] == max){\n \
    \           maxLetters.push(key);\n        }\n    }\n    return {maxLetters: maxLetters,\
    \ max: max};\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  maxLetters: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n\
    \  b: 2\n}\n    at test (/tmp/tmpbo_mdclw.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbo_mdclw.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { maxLetters:\
    \ [ ' ' ], max: 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var count = {};\n    var max = 0;\n\
    \    var result = [];\n    for(var i = 0; i < test.length; i++){\n        if(count[test[i]]\
    \ === undefined){\n            count[test[i]] = 1;\n        }\n        else{\n\
    \            count[test[i]]++;\n        }\n        if(count[test[i]] > max){\n\
    \            max = count[test[i]];\n        }\n    }\n    for(var key in count){\n\
    \        if(count[key] === max){\n            result.push(key);\n        }\n \
    \   }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' '\n]\n\n\
    should loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpthsq2loh.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpthsq2loh.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ' ],\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var hist = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    for (var i = 0; i < test.length; i++){\n      \
    \  if (hist[test[i]]){\n            hist[test[i]]++;\n        }\n        else{\n\
    \            hist[test[i]] = 1;\n        }\n        if (hist[test[i]] > max){\n\
    \            max = hist[test[i]];\n            maxLetters = [test[i]];\n     \
    \   }\n        else if (hist[test[i]] == max){\n            maxLetters.push(test[i]);\n\
    \        }\n    }\n    return {'max': max, 'letters': maxLetters};\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmpklrba27z.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpklrba27z.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    let result = {};\n    let max = 0;\n\
    \    let maxLetters = [];\n    for(let i = 0; i < test.length; i++){\n       \
    \ if(result[test[i]]){\n            result[test[i]]++;\n        } else {\n   \
    \         result[test[i]] = 1;\n        }\n        if(result[test[i]] > max){\n\
    \            max = result[test[i]];\n            maxLetters = [test[i]];\n   \
    \     } else if(result[test[i]] === max){\n            maxLetters.push(test[i]);\n\
    \        }\n    }\n    return {[maxLetters]: max};\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n\
    }\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp7rv5ywtx.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7rv5ywtx.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var count = {};\n    var max = 0;\n\
    \    var maxLetter = [];\n    for(var i = 0; i < test.length; i++){\n        if(count[test[i]]){\n\
    \            count[test[i]]++;\n        } else {\n            count[test[i]] =\
    \ 1;\n        }\n        if(count[test[i]] > max){\n            max = count[test[i]];\n\
    \            maxLetter = [test[i]];\n        } else if(count[test[i]] === max){\n\
    \            maxLetter.push(test[i]);\n        }\n    }\n    return {\n      \
    \  max: max,\n        letters: maxLetter\n    };\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmp61dbbgth.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp61dbbgth.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var result = [];\n    for(var i = 0; i < test.length; i++){\n        if(test[i]\
    \ in dict){\n            dict[test[i]] += 1;\n        }\n        else{\n     \
    \       dict[test[i]] = 1;\n        }\n    }\n    for(var key in dict){\n    \
    \    if(dict[key] > max){\n            max = dict[key];\n        }\n    }\n  \
    \  for(var key in dict){\n        if(dict[key] == max){\n            result.push(key);\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' '\n]\n\n\
    should loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp_fkevfup.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_fkevfup.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ' ],\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var letterCount = {};\n  var maxCount\
    \ = 0;\n  var maxLetters = [];\n  for (var i = 0; i < test.length; i++) {\n  \
    \  if (letterCount[test[i]]) {\n      letterCount[test[i]]++;\n    } else {\n\
    \      letterCount[test[i]] = 1;\n    }\n    if (letterCount[test[i]] > maxCount)\
    \ {\n      maxCount = letterCount[test[i]];\n      maxLetters = [test[i]];\n \
    \   } else if (letterCount[test[i]] === maxCount) {\n      maxLetters.push(test[i]);\n\
    \    }\n  }\n  return {\n    maxCount: maxCount,\n    maxLetters: maxLetters\n\
    \  };\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2,\
    \ \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"\
    d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\"\
    : 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n \
    \ assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  maxCount:\
    \ 3,\n  maxLetters: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a:\
    \ 2,\n  b: 2\n}\n    at test (/tmp/tmpphcg8kf8.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpphcg8kf8.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { maxCount:\
    \ 3, maxLetters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    for (var i = 0; i < test.length; i++){\n      \
    \  if (test[i] in dict){\n            dict[test[i]] += 1;\n        }\n       \
    \ else{\n            dict[test[i]] = 1;\n        }\n    }\n    for (var key in\
    \ dict){\n        if (dict[key] > max){\n            max = dict[key];\n      \
    \      maxLetters = [key];\n        }\n        else if (dict[key] == max){\n \
    \           maxLetters.push(key);\n        }\n    }\n    return {max: max, letters:\
    \ maxLetters};\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmpri9j9xv3.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpri9j9xv3.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    let count = {};\n    let max = 0;\n\
    \    let maxLetters = [];\n    for (let i = 0; i < test.length; i++) {\n     \
    \   if (!count[test[i]]) {\n            count[test[i]] = 1;\n        } else {\n\
    \            count[test[i]] += 1;\n        }\n        if (count[test[i]] > max)\
    \ {\n            max = count[test[i]];\n            maxLetters = [test[i]];\n\
    \        } else if (count[test[i]] === max) {\n            maxLetters.push(test[i]);\n\
    \        }\n    }\n    return {[maxLetters]: max};\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n\
    }\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp18xocihf.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmp18xocihf.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var maxLetter = [];\n    for(var i = 0; i < test.length; i++){\n        if(dict[test[i]]\
    \ === undefined){\n            dict[test[i]] = 1;\n        }else{\n          \
    \  dict[test[i]]++;\n        }\n        if(dict[test[i]] > max){\n           \
    \ max = dict[test[i]];\n            maxLetter = [test[i]];\n        }else if(dict[test[i]]\
    \ === max){\n            maxLetter.push(test[i]);\n        }\n    }\n    return\
    \ {maxLetter: maxLetter, max: max};\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  maxLetter: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n\
    \  b: 2\n}\n    at test (/tmp/tmp2npgd6w5.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2npgd6w5.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { maxLetter:\
    \ [ ' ' ], max: 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var letters = test.split(\"\");\n  var\
    \ count = {};\n  for (var i = 0; i < letters.length; i++) {\n    if (count[letters[i]])\
    \ {\n      count[letters[i]] += 1;\n    } else {\n      count[letters[i]] = 1;\n\
    \    }\n  }\n  return count;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmp9of8ac98.js:23:10)\n    at Object.<anonymous> (/tmp/tmp9of8ac98.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  let result = {};\n  let max = 0;\n \
    \ let maxLetter = [];\n  for(let i = 0; i < test.length; i++){\n    if(result[test[i]]){\n\
    \      result[test[i]]++;\n    } else {\n      result[test[i]] = 1;\n    }\n \
    \   if(result[test[i]] > max){\n      max = result[test[i]];\n      maxLetter\
    \ = [test[i]];\n    } else if(result[test[i]] === max){\n      maxLetter.push(test[i]);\n\
    \    }\n  }\n  return {[maxLetter]: max};\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n\
    }\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpbf15ijhl.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbf15ijhl.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var hist = {};\n  test.split('').forEach(function(letter){\n\
    \    if(!hist[letter]){\n      hist[letter] = 1;\n    } else {\n      hist[letter]++;\n\
    \    }\n  });\n  return hist;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpejvskq1n.js:22:10)\n    at Object.<anonymous> (/tmp/tmpejvskq1n.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    for (var i = 0; i < test.length; i++){\n      \
    \  if (test[i] in dict){\n            dict[test[i]] += 1;\n        }\n       \
    \ else{\n            dict[test[i]] = 1;\n        }\n    }\n    for (var key in\
    \ dict){\n        if (dict[key] > max){\n            max = dict[key];\n      \
    \      maxLetters = [key];\n        }\n        else if (dict[key] == max){\n \
    \           maxLetters.push(key);\n        }\n    }\n    return {'max': max, 'maxLetters':\
    \ maxLetters};\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  maxLetters: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n\
    \  b: 2\n}\n    at test (/tmp/tmp6xub6uh1.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6xub6uh1.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ maxLetters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var result = {};\n    var arr = test.split(\"\
    \ \");\n    for(var i = 0; i < arr.length; i++){\n        if(result[arr[i]] ===\
    \ undefined){\n            result[arr[i]] = 1;\n        } else {\n           \
    \ result[arr[i]]++;\n        }\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpfwyankcb.js:24:10)\n    at Object.<anonymous> (/tmp/tmpfwyankcb.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var hist = {};\n  var max = 0;\n  var\
    \ maxLetter = [];\n  for (var i = 0; i < test.length; i++) {\n    if (hist[test[i]])\
    \ {\n      hist[test[i]] += 1;\n    } else {\n      hist[test[i]] = 1;\n    }\n\
    \    if (hist[test[i]] > max) {\n      max = hist[test[i]];\n      maxLetter =\
    \ [test[i]];\n    } else if (hist[test[i]] === max) {\n      maxLetter.push(test[i]);\n\
    \    }\n  }\n  return {maxLetter: maxLetter, max: max};\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  maxLetter: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n\
    \  b: 2\n}\n    at test (/tmp/tmpaj7y7u48.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpaj7y7u48.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { maxLetter:\
    \ [ ' ' ], max: 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var count = {};\n    for (var i =\
    \ 0; i < test.length; i++) {\n        var letter = test[i];\n        if (count[letter])\
    \ {\n            count[letter]++;\n        } else {\n            count[letter]\
    \ = 1;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmp8e26pq9n.js:23:10)\n    at Object.<anonymous> (/tmp/tmp8e26pq9n.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var arr = test.split(\" \");\n  var\
    \ obj = {};\n  var max = 0;\n  var maxArr = [];\n  for(var i = 0; i < arr.length;\
    \ i++){\n    if(obj[arr[i]]){\n      obj[arr[i]]++;\n    } else {\n      obj[arr[i]]\
    \ = 1;\n    }\n    if(obj[arr[i]] > max){\n      max = obj[arr[i]];\n    }\n \
    \ }\n  for(var key in obj){\n    if(obj[key] === max){\n      maxArr.push(key);\n\
    \    }\n  }\n  return {maxArr: maxArr, max: max};\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 2,\n\
    \  maxArr: [\n    'a',\n    'b'\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a:\
    \ 2,\n  b: 2\n}\n    at test (/tmp/tmpsxqh8746.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpsxqh8746.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { maxArr:\
    \ [ 'a', 'b' ], max: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var hist = {};\n    for (var i = 0;\
    \ i < test.length; i++) {\n        var letter = test[i];\n        if (hist[letter])\
    \ {\n            hist[letter]++;\n        } else {\n            hist[letter] =\
    \ 1;\n        }\n    }\n    return hist;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpxg80u3si.js:23:10)\n    at Object.<anonymous> (/tmp/tmpxg80u3si.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var dict = {};\n  var max = 0;\n  var\
    \ maxLetters = [];\n  for (var i = 0; i < test.length; i++){\n    if (test[i]\
    \ in dict){\n      dict[test[i]] += 1;\n    }\n    else{\n      dict[test[i]]\
    \ = 1;\n    }\n  }\n  for (var key in dict){\n    if (dict[key] > max){\n    \
    \  max = dict[key];\n      maxLetters = [key];\n    }\n    else if (dict[key]\
    \ === max){\n      maxLetters.push(key);\n    }\n  }\n  return {max: max, letters:\
    \ maxLetters};\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmp5hqt8xtq.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5hqt8xtq.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var obj = {};\n    var arr = test.split(\"\
    \ \");\n    for(var i = 0; i < arr.length; i++){\n        if(obj[arr[i]]){\n \
    \           obj[arr[i]]++;\n        } else {\n            obj[arr[i]] = 1;\n \
    \       }\n    }\n    var max = 0;\n    var result = [];\n    for(var key in obj){\n\
    \        if(obj[key] > max){\n            max = obj[key];\n            result\
    \ = [];\n            result.push(key);\n        } else if(obj[key] === max){\n\
    \            result.push(key);\n        }\n    }\n    return {result: result,\
    \ count: max};\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  count: 2,\n\
    \  result: [\n    'a',\n    'b'\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a:\
    \ 2,\n  b: 2\n}\n    at test (/tmp/tmpvo9yvsw_.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvo9yvsw_.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { result:\
    \ [ 'a', 'b' ], count: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    for (var i = 0; i < test.length; i++){\n      \
    \  if (test[i] in dict){\n            dict[test[i]] += 1;\n        }\n       \
    \ else{\n            dict[test[i]] = 1;\n        }\n    }\n    for (var key in\
    \ dict){\n        if (dict[key] > max){\n            max = dict[key];\n      \
    \      maxLetters = [key];\n        }\n        else if (dict[key] == max){\n \
    \           maxLetters.push(key);\n        }\n    }\n    return maxLetters;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' '\n]\n\n\
    should loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp11xmo3dd.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmp11xmo3dd.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ' ],\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var histo = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    for (var i = 0; i < test.length; i++){\n      \
    \  if (histo[test[i]]){\n            histo[test[i]] += 1;\n        }\n       \
    \ else{\n            histo[test[i]] = 1;\n        }\n        if (histo[test[i]]\
    \ > max){\n            max = histo[test[i]];\n            maxLetters = [test[i]];\n\
    \        }\n        else if (histo[test[i]] === max){\n            maxLetters.push(test[i]);\n\
    \        }\n    }\n    return {max: max, letters: maxLetters};\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmpvakmk22l.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvakmk22l.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var letters = test.split(\" \");\n\
    \    var count = {};\n    for (var i = 0; i < letters.length; i++) {\n       \
    \ if (count[letters[i]]) {\n            count[letters[i]]++;\n        } else {\n\
    \            count[letters[i]] = 1;\n        }\n    }\n    return count;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmp36gg5n_s.js:24:10)\n    at Object.<anonymous> (/tmp/tmp36gg5n_s.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var hist = {};\n    for (var i = 0;\
    \ i < test.length; i++) {\n        var letter = test[i];\n        if (hist[letter])\
    \ {\n            hist[letter]++;\n        } else {\n            hist[letter] =\
    \ 1;\n        }\n    }\n    return hist;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpxg80u3si.js:23:10)\n    at Object.<anonymous> (/tmp/tmpxg80u3si.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var letters = test.split(\"\");\n\
    \    var count = {};\n    for (var i = 0; i < letters.length; i++) {\n       \
    \ var letter = letters[i];\n        if (count[letter]) {\n            count[letter]++;\n\
    \        } else {\n            count[letter] = 1;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpsnseizn2.js:24:10)\n    at Object.<anonymous> (/tmp/tmpsnseizn2.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    let dict = {};\n    let max = 0;\n\
    \    let maxLetters = [];\n    for (let i = 0; i < test.length; i++){\n      \
    \  if (test[i] in dict){\n            dict[test[i]] += 1;\n        } else {\n\
    \            dict[test[i]] = 1;\n        }\n    }\n    for (let key in dict){\n\
    \        if (dict[key] > max){\n            max = dict[key];\n            maxLetters\
    \ = [key];\n        } else if (dict[key] === max){\n            maxLetters.push(key);\n\
    \        }\n    }\n    return {[maxLetters]: max};\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n\
    }\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpjfohpo4q.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjfohpo4q.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var hist = {};\n    var max = 0;\n\
    \    var maxChar = [];\n    for (var i = 0; i < test.length; i++) {\n        if\
    \ (hist[test[i]]) {\n            hist[test[i]]++;\n        } else {\n        \
    \    hist[test[i]] = 1;\n        }\n        if (hist[test[i]] > max) {\n     \
    \       max = hist[test[i]];\n            maxChar = [test[i]];\n        } else\
    \ if (hist[test[i]] === max) {\n            maxChar.push(test[i]);\n        }\n\
    \    }\n    return {\n        max: max,\n        maxChar: maxChar\n    };\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  maxChar: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b:\
    \ 2\n}\n    at test (/tmp/tmpq7w9ilng.js:33:10)\n    at Object.<anonymous> (/tmp/tmpq7w9ilng.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ maxChar: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var obj = {};\n    var max = 0;\n\
    \    var maxLetter = [];\n    for(var i = 0; i < test.length; i++){\n        if(obj[test[i]]){\n\
    \            obj[test[i]]++;\n        }else{\n            obj[test[i]] = 1;\n\
    \        }\n    }\n    for(var key in obj){\n        if(obj[key] > max){\n   \
    \         max = obj[key];\n            maxLetter = [key];\n        }else if(obj[key]\
    \ === max){\n            maxLetter.push(key);\n        }\n    }\n    return {[maxLetter]:\
    \ max};\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2,\
    \ \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"\
    d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\"\
    : 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n \
    \ assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n\
    }\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpnso9gsg5.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnso9gsg5.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var obj = {};\n    var max = 0;\n\
    \    var maxLetter = [];\n    for(var i = 0; i < test.length; i++){\n        if(obj[test[i]]){\n\
    \            obj[test[i]]++;\n        } else {\n            obj[test[i]] = 1;\n\
    \        }\n        if(obj[test[i]] > max){\n            max = obj[test[i]];\n\
    \            maxLetter = [test[i]];\n        } else if(obj[test[i]] === max){\n\
    \            maxLetter.push(test[i]);\n        }\n    }\n    return {max: max,\
    \ letters: maxLetter};\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmp4pbyarhc.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp4pbyarhc.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    let count = {};\n    let max = 0;\n\
    \    let result = [];\n    for(let i = 0; i < test.length; i++){\n        if(count[test[i]]){\n\
    \            count[test[i]]++;\n        } else {\n            count[test[i]] =\
    \ 1;\n        }\n        if(count[test[i]] > max){\n            max = count[test[i]];\n\
    \        }\n    }\n    for(let key in count){\n        if(count[key] === max){\n\
    \            result.push(key);\n        }\n    }\n    return result;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' '\n]\n\n\
    should loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpvkqfm8n_.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvkqfm8n_.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ' ],\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var obj = {};\n  var arr = test.split('\
    \ ');\n  for(var i = 0; i < arr.length; i++){\n    if(obj[arr[i]] === undefined){\n\
    \      obj[arr[i]] = 1;\n    } else {\n      obj[arr[i]] += 1;\n    }\n  }\n \
    \ var max = 0;\n  var maxArr = [];\n  for(var key in obj){\n    if(obj[key] >\
    \ max){\n      max = obj[key];\n      maxArr = [key];\n    } else if(obj[key]\
    \ === max){\n      maxArr.push(key);\n    }\n  }\n  var result = {};\n  for(var\
    \ i = 0; i < maxArr.length; i++){\n    result[maxArr[i]] = max;\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  '': 1\n}\n\
    \nshould loosely deep-equal\n\n{}\n    at test (/tmp/tmpx02l73of.js:43:10)\n \
    \   at Object.<anonymous> (/tmp/tmpx02l73of.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n\
    \  expected: {},\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var histo = {};\n    var max = 0;\n\
    \    var maxLetter = [];\n    for(var i = 0; i < test.length; i++){\n        if(histo[test[i]]){\n\
    \            histo[test[i]]++;\n        }else{\n            histo[test[i]] = 1;\n\
    \        }\n        if(histo[test[i]] > max){\n            max = histo[test[i]];\n\
    \            maxLetter = [test[i]];\n        }else if(histo[test[i]] === max){\n\
    \            maxLetter.push(test[i]);\n        }\n    }\n    return {max: max,\
    \ letters: maxLetter};\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmp_3t18tug.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_3t18tug.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    var letters = test.split(\" \");\n    for(var i\
    \ = 0; i < letters.length; i++){\n        if(dict[letters[i]] === undefined){\n\
    \            dict[letters[i]] = 1;\n        }\n        else{\n            dict[letters[i]]++;\n\
    \        }\n        if(dict[letters[i]] > max){\n            max = dict[letters[i]];\n\
    \            maxLetters = [];\n            maxLetters.push(letters[i]);\n    \
    \    }\n        else if(dict[letters[i]] === max){\n            maxLetters.push(letters[i]);\n\
    \        }\n    }\n    return {max: max, letters: maxLetters};\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    'b',\n    'a'\n  ],\n  max: 2\n}\n\nshould loosely deep-equal\n\n{\n\
    \  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpd0nqvxes.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpd0nqvxes.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 2,\
    \ letters: [ 'b', 'a' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    for (var i = 0; i < test.length; i++){\n      \
    \  if (test[i] in dict){\n            dict[test[i]] += 1;\n        }\n       \
    \ else{\n            dict[test[i]] = 1;\n        }\n    }\n    for (var key in\
    \ dict){\n        if (dict[key] > max){\n            max = dict[key];\n      \
    \      maxLetters = [key];\n        }\n        else if (dict[key] == max){\n \
    \           maxLetters.push(key);\n        }\n    }\n    return {max: max, letters:\
    \ maxLetters};\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmpxiiajgvp.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxiiajgvp.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var result = [];\n    for(var i = 0; i < test.length; i++){\n        if(test[i]\
    \ in dict){\n            dict[test[i]] += 1;\n        }\n        else{\n     \
    \       dict[test[i]] = 1;\n        }\n    }\n    for(var key in dict){\n    \
    \    if(dict[key] > max){\n            max = dict[key];\n        }\n    }\n  \
    \  for(var key in dict){\n        if(dict[key] == max){\n            result.push(key);\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' '\n]\n\n\
    should loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp_fkevfup.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_fkevfup.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ' ],\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var histo = {};\n  var max = 0;\n  var\
    \ maxLetters = [];\n  for (var i = 0; i < test.length; i++) {\n    if (histo[test[i]])\
    \ {\n      histo[test[i]]++;\n    } else {\n      histo[test[i]] = 1;\n    }\n\
    \    if (histo[test[i]] > max) {\n      max = histo[test[i]];\n      maxLetters\
    \ = [test[i]];\n    } else if (histo[test[i]] === max) {\n      maxLetters.push(test[i]);\n\
    \    }\n  }\n  return {max: max, letters: maxLetters};\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmpi7021rtb.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpi7021rtb.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var result = {};\n    var max = 0;\n\
    \    for(var i = 0; i < test.length; i++){\n        if(result[test[i]]){\n   \
    \         result[test[i]]++;\n        }else{\n            result[test[i]] = 1;\n\
    \        }\n        if(result[test[i]] > max){\n            max = result[test[i]];\n\
    \        }\n    }\n    var final = {};\n    for(var key in result){\n        if(result[key]\
    \ === max){\n            final[key] = result[key];\n        }\n    }\n    return\
    \ final;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n\
    }\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpps7rfiqi.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmpps7rfiqi.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var obj = {};\n    var max = 0;\n\
    \    var result = [];\n    for(var i = 0; i < test.length; i++){\n        if(obj[test[i]]){\n\
    \            obj[test[i]]++;\n        }else{\n            obj[test[i]] = 1;\n\
    \        }\n    }\n    for(var key in obj){\n        if(obj[key] > max){\n   \
    \         max = obj[key];\n        }\n    }\n    for(var key in obj){\n      \
    \  if(obj[key] === max){\n            result.push(key);\n        }\n    }\n  \
    \  return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' '\n]\n\n\
    should loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp74d40tfg.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp74d40tfg.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ' ],\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var count = {};\n    var max = 0;\n\
    \    var result = [];\n    for(var i = 0; i < test.length; i++){\n        if(count[test[i]]){\n\
    \            count[test[i]] += 1;\n        }\n        else{\n            count[test[i]]\
    \ = 1;\n        }\n        if(count[test[i]] > max){\n            max = count[test[i]];\n\
    \        }\n    }\n    for(var key in count){\n        if(count[key] === max){\n\
    \            result.push(key);\n        }\n    }\n    return result;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' '\n]\n\n\
    should loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpofbfkl6e.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpofbfkl6e.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ' ],\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var max_letters = [];\n    for (var i = 0; i < test.length; i++){\n     \
    \   if (test[i] in dict){\n            dict[test[i]] += 1;\n        }\n      \
    \  else{\n            dict[test[i]] = 1;\n        }\n    }\n    for (var key in\
    \ dict){\n        if (dict[key] > max){\n            max = dict[key];\n      \
    \      max_letters = [key];\n        }\n        else if (dict[key] == max){\n\
    \            max_letters.push(key);\n        }\n    }\n    return {max_letters:\
    \ max_letters, max: max};\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  max_letters: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n\
    \  b: 2\n}\n    at test (/tmp/tmp21cxeosh.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp21cxeosh.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max_letters:\
    \ [ ' ' ], max: 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var letters = test.split(\" \");\n\
    \    var count = {};\n    for (var i = 0; i < letters.length; i++) {\n       \
    \ var letter = letters[i];\n        if (count[letter]) {\n            count[letter]++;\n\
    \        } else {\n            count[letter] = 1;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmp3gocr8yo.js:25:10)\n    at Object.<anonymous> (/tmp/tmp3gocr8yo.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var hist = {};\n    for (var i = 0;\
    \ i < test.length; i++) {\n        var letter = test[i];\n        if (letter in\
    \ hist) {\n            hist[letter] += 1;\n        } else {\n            hist[letter]\
    \ = 1;\n        }\n    }\n    return hist;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpukw05ml8.js:23:10)\n    at Object.<anonymous> (/tmp/tmpukw05ml8.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var hist = {};\n    for (var i = 0;\
    \ i < test.length; i++) {\n        var letter = test[i];\n        if (hist[letter])\
    \ {\n            hist[letter]++;\n        } else {\n            hist[letter] =\
    \ 1;\n        }\n    }\n    return hist;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpxg80u3si.js:23:10)\n    at Object.<anonymous> (/tmp/tmpxg80u3si.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var hist = {};\n  for (var i = 0; i\
    \ < test.length; i++) {\n    var letter = test[i];\n    if (hist[letter]) {\n\
    \      hist[letter]++;\n    } else {\n      hist[letter] = 1;\n    }\n  }\n  return\
    \ hist;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpsbhz_78b.js:23:10)\n    at Object.<anonymous> (/tmp/tmpsbhz_78b.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var hist = {};\n    var max = 0;\n\
    \    var maxKeys = [];\n    for (var i = 0; i < test.length; i++) {\n        if\
    \ (hist[test[i]]) {\n            hist[test[i]]++;\n        } else {\n        \
    \    hist[test[i]] = 1;\n        }\n        if (hist[test[i]] > max) {\n     \
    \       max = hist[test[i]];\n            maxKeys = [test[i]];\n        } else\
    \ if (hist[test[i]] === max) {\n            maxKeys.push(test[i]);\n        }\n\
    \    }\n    return {'max': max, 'maxKeys': maxKeys};\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  maxKeys: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b:\
    \ 2\n}\n    at test (/tmp/tmp0md6cj91.js:30:10)\n    at Object.<anonymous> (/tmp/tmp0md6cj91.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ maxKeys: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var arr = test.split(' ');\n  var obj\
    \ = {};\n  for(var i = 0; i < arr.length; i++){\n    if(obj[arr[i]]){\n      obj[arr[i]]++;\n\
    \    } else {\n      obj[arr[i]] = 1;\n    }\n  }\n  var max = 0;\n  var maxArr\
    \ = [];\n  for(var key in obj){\n    if(obj[key] > max){\n      max = obj[key];\n\
    \      maxArr = [];\n      maxArr.push(key);\n    } else if(obj[key] === max){\n\
    \      maxArr.push(key);\n    }\n  }\n  var result = {};\n  for(var i = 0; i <\
    \ maxArr.length; i++){\n    result[maxArr[i]] = max;\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  '': 1\n}\n\
    \nshould loosely deep-equal\n\n{}\n    at test (/tmp/tmpam1adbhd.js:44:10)\n \
    \   at Object.<anonymous> (/tmp/tmpam1adbhd.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n\
    \  expected: {},\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var letters = test.split(\" \");\n \
    \ var count = {};\n  for (var i = 0; i < letters.length; i++) {\n    if (count[letters[i]])\
    \ {\n      count[letters[i]]++;\n    } else {\n      count[letters[i]] = 1;\n\
    \    }\n  }\n  return count;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmp805qrm3x.js:24:10)\n    at Object.<anonymous> (/tmp/tmp805qrm3x.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var arr = test.split(\" \");\n   \
    \ var dict = {};\n    for(var i = 0; i < arr.length; i++){\n        if(dict[arr[i]]\
    \ === undefined){\n            dict[arr[i]] = 1;\n        }\n        else{\n \
    \           dict[arr[i]] += 1;\n        }\n    }\n    var max = 0;\n    var maxArr\
    \ = [];\n    for(var key in dict){\n        if(dict[key] > max){\n           \
    \ max = dict[key];\n            maxArr = [key];\n        }\n        else if(dict[key]\
    \ === max){\n            maxArr.push(key);\n        }\n    }\n    var finalDict\
    \ = {};\n    for(var i = 0; i < maxArr.length; i++){\n        finalDict[maxArr[i]]\
    \ = max;\n    }\n    return finalDict;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  '': 1\n}\n\
    \nshould loosely deep-equal\n\n{}\n    at test (/tmp/tmpb6i6ty3c.js:44:10)\n \
    \   at Object.<anonymous> (/tmp/tmpb6i6ty3c.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n\
    \  expected: {},\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var histogram = {};\n  var max = 0;\n\
    \  var maxLetters = [];\n  test.split(\"\").forEach(function(letter){\n    if(histogram[letter]){\n\
    \      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n\
    \    if(histogram[letter] > max){\n      max = histogram[letter];\n      maxLetters\
    \ = [letter];\n    } else if(histogram[letter] === max){\n      maxLetters.push(letter);\n\
    \    }\n  });\n  return {\n    max: max,\n    letters: maxLetters\n  };\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmpflkybgn_.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpflkybgn_.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var max_letters = [];\n    test.split(\"\").forEach(function(letter){\n \
    \       if(dict[letter] === undefined){\n            dict[letter] = 1;\n     \
    \   }\n        else{\n            dict[letter] += 1;\n        }\n        if(dict[letter]\
    \ > max){\n            max = dict[letter];\n            max_letters = [letter];\n\
    \        }\n        else if(dict[letter] === max){\n            max_letters.push(letter);\n\
    \        }\n    });\n    return {[max_letters]: max};\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n\
    }\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpii4rgb4t.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpii4rgb4t.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    test.split(\"\").forEach(function(letter){\n  \
    \      if(dict[letter]){\n            dict[letter] += 1;\n        } else {\n \
    \           dict[letter] = 1;\n        }\n        if(dict[letter] > max){\n  \
    \          max = dict[letter];\n            maxLetters = [letter];\n        }\
    \ else if(dict[letter] === max){\n            maxLetters.push(letter);\n     \
    \   }\n    });\n    return {\n        max: max,\n        letters: maxLetters\n\
    \    };\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmpn54z87fq.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpn54z87fq.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var max_letters = [];\n    for (var i = 0; i < test.length; i++){\n     \
    \   if (test[i] in dict){\n            dict[test[i]] += 1;\n        }\n      \
    \  else{\n            dict[test[i]] = 1;\n        }\n    }\n    for (var key in\
    \ dict){\n        if (dict[key] > max){\n            max = dict[key];\n      \
    \      max_letters = [key];\n        }\n        else if (dict[key] == max){\n\
    \            max_letters.push(key);\n        }\n    }\n    return {max_letters:\
    \ max_letters, max: max};\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  max_letters: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n\
    \  b: 2\n}\n    at test (/tmp/tmp21cxeosh.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp21cxeosh.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max_letters:\
    \ [ ' ' ], max: 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var letters = test.split(\" \");\n\
    \    var counts = {};\n    for (var i = 0; i < letters.length; i++) {\n      \
    \  var num = letters[i];\n        counts[num] = counts[num] ? counts[num] + 1\
    \ : 1;\n    }\n    return counts;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpq00oiwwv.js:21:10)\n    at Object.<anonymous> (/tmp/tmpq00oiwwv.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var histo = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    for (var i = 0; i < test.length; i++){\n      \
    \  if (histo[test[i]]){\n            histo[test[i]]++;\n        } else {\n   \
    \         histo[test[i]] = 1;\n        }\n        if (histo[test[i]] > max){\n\
    \            max = histo[test[i]];\n            maxLetters = [test[i]];\n    \
    \    } else if (histo[test[i]] === max){\n            maxLetters.push(test[i]);\n\
    \        }\n    }\n    return {max: max, letters: maxLetters};\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmp2_sx_fon.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2_sx_fon.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    var testArr = test.split(\" \");\n    for(var i\
    \ = 0; i < testArr.length; i++){\n        if(dict[testArr[i]]){\n            dict[testArr[i]]\
    \ += 1;\n        }\n        else{\n            dict[testArr[i]] = 1;\n       \
    \ }\n    }\n    for(var key in dict){\n        if(dict[key] > max){\n        \
    \    max = dict[key];\n            maxLetters = [key];\n        }\n        else\
    \ if(dict[key] === max){\n            maxLetters.push(key);\n        }\n    }\n\
    \    return {max: max, letters: maxLetters};\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    'a',\n    'b'\n  ],\n  max: 2\n}\n\nshould loosely deep-equal\n\n{\n\
    \  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpstltg8ju.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpstltg8ju.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 2,\
    \ letters: [ 'a', 'b' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var count = {};\n  var max = 0;\n  var\
    \ maxLetter = [];\n  for (var i = 0; i < test.length; i++) {\n    if (count[test[i]]\
    \ === undefined) {\n      count[test[i]] = 1;\n    } else {\n      count[test[i]]\
    \ += 1;\n    }\n    if (count[test[i]] > max) {\n      max = count[test[i]];\n\
    \      maxLetter = [test[i]];\n    } else if (count[test[i]] === max) {\n    \
    \  maxLetter.push(test[i]);\n    }\n  }\n  return {maxLetter: maxLetter, max:\
    \ max};\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  maxLetter: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n\
    \  b: 2\n}\n    at test (/tmp/tmp6c67t0wv.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6c67t0wv.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { maxLetter:\
    \ [ ' ' ], max: 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    let dict = {};\n    let max = 0;\n\
    \    let result = [];\n    for(let i = 0; i < test.length; i++){\n        if(dict[test[i]]){\n\
    \            dict[test[i]] += 1;\n        }\n        else{\n            dict[test[i]]\
    \ = 1;\n        }\n    }\n    for(let key in dict){\n        if(dict[key] > max){\n\
    \            max = dict[key];\n        }\n    }\n    for(let key in dict){\n \
    \       if(dict[key] === max){\n            result.push(key);\n        }\n   \
    \ }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' '\n]\n\n\
    should loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpzh93cvl0.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzh93cvl0.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ' ],\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    for (var i = 0; i < test.length; i++){\n      \
    \  if (test[i] in dict){\n            dict[test[i]] += 1;\n        }\n       \
    \ else{\n            dict[test[i]] = 1;\n        }\n    }\n    for (var key in\
    \ dict){\n        if (dict[key] > max){\n            max = dict[key];\n      \
    \      maxLetters = [key];\n        }\n        else if (dict[key] == max){\n \
    \           maxLetters.push(key);\n        }\n    }\n    return {max: max, letters:\
    \ maxLetters};\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmpxiiajgvp.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxiiajgvp.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var max_letters = [];\n    for (var i = 0; i < test.length; i++){\n     \
    \   if (test[i] in dict){\n            dict[test[i]] += 1;\n        }\n      \
    \  else{\n            dict[test[i]] = 1;\n        }\n    }\n    for (var key in\
    \ dict){\n        if (dict[key] > max){\n            max = dict[key];\n      \
    \      max_letters = [key];\n        }\n        else if (dict[key] == max){\n\
    \            max_letters.push(key);\n        }\n    }\n    return {max_letters:\
    \ max_letters, max: max};\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  max_letters: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n\
    \  b: 2\n}\n    at test (/tmp/tmp21cxeosh.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp21cxeosh.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max_letters:\
    \ [ ' ' ], max: 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    let letters = test.split(\" \");\n\
    \    let dict = {};\n    for(let i = 0; i < letters.length; i++){\n        if(dict[letters[i]]){\n\
    \            dict[letters[i]] += 1;\n        }\n        else{\n            dict[letters[i]]\
    \ = 1;\n        }\n    }\n    let max = 0;\n    let maxLetters = [];\n    for(let\
    \ key in dict){\n        if(dict[key] > max){\n            max = dict[key];\n\
    \            maxLetters = [key];\n        }\n        else if(dict[key] === max){\n\
    \            maxLetters.push(key);\n        }\n    }\n    return {[maxLetters]:\
    \ max};\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  'a,b': 2\n\
    }\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpkltcc1v_.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkltcc1v_.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { 'a,b': 2\
    \ },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    let hist = {};\n    let max = 0;\n\
    \    let maxLetters = [];\n    for (let i = 0; i < test.length; i++) {\n     \
    \   if (hist[test[i]]) {\n            hist[test[i]]++;\n        } else {\n   \
    \         hist[test[i]] = 1;\n        }\n        if (hist[test[i]] > max) {\n\
    \            max = hist[test[i]];\n            maxLetters = [test[i]];\n     \
    \   } else if (hist[test[i]] === max) {\n            maxLetters.push(test[i]);\n\
    \        }\n    }\n    return {[maxLetters]: max};\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n\
    }\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpomnk3ey5.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpomnk3ey5.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var obj = {};\n  var arr = test.split('\
    \ ');\n  for(var i = 0; i < arr.length; i++){\n    if(!obj[arr[i]]){\n      obj[arr[i]]\
    \ = 1;\n    } else {\n      obj[arr[i]]++;\n    }\n  }\n  var max = 0;\n  var\
    \ maxArr = [];\n  for(var key in obj){\n    if(obj[key] > max){\n      max = obj[key];\n\
    \      maxArr = [];\n      maxArr.push(key);\n    } else if(obj[key] === max){\n\
    \      maxArr.push(key);\n    }\n  }\n  return {maxArr: maxArr, max: max};\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 2,\n\
    \  maxArr: [\n    'a',\n    'b'\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a:\
    \ 2,\n  b: 2\n}\n    at test (/tmp/tmp665ymn84.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp665ymn84.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { maxArr:\
    \ [ 'a', 'b' ], max: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var histo = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    for (var i = 0; i < test.length; i++){\n      \
    \  if (histo[test[i]]){\n            histo[test[i]] += 1;\n        } else {\n\
    \            histo[test[i]] = 1;\n        }\n        if (histo[test[i]] > max){\n\
    \            max = histo[test[i]];\n            maxLetters = [test[i]];\n    \
    \    } else if (histo[test[i]] === max){\n            maxLetters.push(test[i]);\n\
    \        }\n    }\n    return {max: max, letters: maxLetters};\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmpfqzwdp75.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfqzwdp75.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var arr = test.split(\" \");\n   \
    \ var dict = {};\n    for(var i = 0; i < arr.length; i++){\n        if(dict[arr[i]]){\n\
    \            dict[arr[i]] += 1;\n        }\n        else{\n            dict[arr[i]]\
    \ = 1;\n        }\n    }\n    var max = 0;\n    var max_key = \"\";\n    for(var\
    \ key in dict){\n        if(dict[key] > max){\n            max = dict[key];\n\
    \            max_key = key;\n        }\n    }\n    var max_arr = [];\n    for(var\
    \ key in dict){\n        if(dict[key] == max){\n            max_arr.push(key);\n\
    \        }\n    }\n    var dict2 = {};\n    for(var i = 0; i < max_arr.length;\
    \ i++){\n        dict2[max_arr[i]] = max;\n    }\n    return dict2;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  '': 1\n}\n\
    \nshould loosely deep-equal\n\n{}\n    at test (/tmp/tmpt_pqk2qs.js:47:10)\n \
    \   at Object.<anonymous> (/tmp/tmpt_pqk2qs.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n\
    \  expected: {},\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    for (var i = 0; i < test.length; i++){\n      \
    \  if (test[i] in dict){\n            dict[test[i]] += 1;\n        }\n       \
    \ else{\n            dict[test[i]] = 1;\n        }\n    }\n    for (var key in\
    \ dict){\n        if (dict[key] > max){\n            max = dict[key];\n      \
    \      maxLetters = [key];\n        }\n        else if (dict[key] == max){\n \
    \           maxLetters.push(key);\n        }\n    }\n    return {max: max, letters:\
    \ maxLetters};\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmpri9j9xv3.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpri9j9xv3.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var hist = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    for (var i = 0; i < test.length; i++){\n      \
    \  if (hist[test[i]]){\n            hist[test[i]] += 1;\n        }\n        else{\n\
    \            hist[test[i]] = 1;\n        }\n        if (hist[test[i]] > max){\n\
    \            max = hist[test[i]];\n            maxLetters = [test[i]];\n     \
    \   }\n        else if (hist[test[i]] === max){\n            maxLetters.push(test[i]);\n\
    \        }\n    }\n    return {max: max, letters: maxLetters};\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmp4j_2caod.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp4j_2caod.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    test.split(\"\").forEach(function(letter){\n  \
    \      if(letter in dict){\n            dict[letter] += 1;\n        }\n      \
    \  else{\n            dict[letter] = 1;\n        }\n        if(dict[letter] >\
    \ max){\n            max = dict[letter];\n            maxLetters = [letter];\n\
    \        }\n        else if(dict[letter] === max){\n            maxLetters.push(letter);\n\
    \        }\n    });\n    return {max: max, letters: maxLetters};\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmphvvplje5.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphvvplje5.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var result = {};\n  var max = 0;\n \
    \ var maxLetter = [];\n  for(var i = 0; i < test.length; i++){\n    if(result[test[i]]){\n\
    \      result[test[i]]++;\n    } else {\n      result[test[i]] = 1;\n    }\n \
    \   if(result[test[i]] > max){\n      max = result[test[i]];\n      maxLetter\
    \ = [test[i]];\n    } else if(result[test[i]] === max){\n      maxLetter.push(test[i]);\n\
    \    }\n  }\n  return {maxLetter: maxLetter, max: max};\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  maxLetter: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n\
    \  b: 2\n}\n    at test (/tmp/tmpraqbf0lz.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpraqbf0lz.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { maxLetter:\
    \ [ ' ' ], max: 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var count = {};\n    for (var i =\
    \ 0; i < test.length; i++) {\n        var letter = test[i];\n        if (count[letter])\
    \ {\n            count[letter]++;\n        } else {\n            count[letter]\
    \ = 1;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmp8e26pq9n.js:23:10)\n    at Object.<anonymous> (/tmp/tmp8e26pq9n.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var hist = {};\n    for (var i = 0;\
    \ i < test.length; i++) {\n        var letter = test[i];\n        if (hist[letter])\
    \ {\n            hist[letter]++;\n        } else {\n            hist[letter] =\
    \ 1;\n        }\n    }\n    return hist;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpxg80u3si.js:23:10)\n    at Object.<anonymous> (/tmp/tmpxg80u3si.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    for (var i = 0; i < test.length; i++){\n      \
    \  if (test[i] in dict){\n            dict[test[i]] += 1;\n        }\n       \
    \ else{\n            dict[test[i]] = 1;\n        }\n    }\n    for (var key in\
    \ dict){\n        if (dict[key] > max){\n            max = dict[key];\n      \
    \      maxLetters = [key];\n        }\n        else if (dict[key] == max){\n \
    \           maxLetters.push(key);\n        }\n    }\n    return {max: max, letters:\
    \ maxLetters};\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmpri9j9xv3.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpri9j9xv3.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var letters = test.split(\" \");\n \
    \ var letterCount = {};\n  for (var i = 0; i < letters.length; i++) {\n    var\
    \ letter = letters[i];\n    if (letterCount[letter] === undefined) {\n      letterCount[letter]\
    \ = 1;\n    } else {\n      letterCount[letter]++;\n    }\n  }\n  return letterCount;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpe5iqbmyb.js:25:10)\n    at Object.<anonymous> (/tmp/tmpe5iqbmyb.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var dict = {};\n  var max = 0;\n  var\
    \ maxLetters = [];\n  for (var i = 0; i < test.length; i++){\n    if (test[i]\
    \ in dict){\n      dict[test[i]] += 1;\n    }\n    else{\n      dict[test[i]]\
    \ = 1;\n    }\n  }\n  for (var key in dict){\n    if (dict[key] > max){\n    \
    \  max = dict[key];\n      maxLetters = [key];\n    }\n    else if (dict[key]\
    \ === max){\n      maxLetters.push(key);\n    }\n  }\n  return {maxLetters: maxLetters,\
    \ max: max};\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  maxLetters: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n\
    \  b: 2\n}\n    at test (/tmp/tmpjsavhj33.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpjsavhj33.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { maxLetters:\
    \ [ ' ' ], max: 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var arr = test.split(\" \");\n  var\
    \ obj = {};\n  var max = 0;\n  var result = [];\n  for(var i = 0; i < arr.length;\
    \ i++){\n    if(obj[arr[i]]){\n      obj[arr[i]]++;\n    }\n    else{\n      obj[arr[i]]\
    \ = 1;\n    }\n  }\n  for(var key in obj){\n    if(obj[key] > max){\n      max\
    \ = obj[key];\n    }\n  }\n  for(var key in obj){\n    if(obj[key] === max){\n\
    \      result.push(key);\n    }\n  }\n  return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'b'\n\
    ]\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpqhf6gpjt.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqhf6gpjt.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'b'\
    \ ],\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var letters = test.split(\"\");\n  var\
    \ dict = {};\n  var max = 0;\n  var maxLetters = [];\n  for (var i = 0; i < letters.length;\
    \ i++){\n    if (letters[i] in dict){\n      dict[letters[i]] += 1;\n    }\n \
    \   else{\n      dict[letters[i]] = 1;\n    }\n  }\n  for (var key in dict){\n\
    \    if (dict[key] > max){\n      max = dict[key];\n      maxLetters = [key];\n\
    \    }\n    else if (dict[key] == max){\n      maxLetters.push(key);\n    }\n\
    \  }\n  return {maxLetters: maxLetters, max: max};\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  maxLetters: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n\
    \  b: 2\n}\n    at test (/tmp/tmpgsp5n6zl.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgsp5n6zl.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { maxLetters:\
    \ [ ' ' ], max: 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var hist = {};\n    var max = 0;\n\
    \    var max_letters = [];\n    for (var i = 0; i < test.length; i++){\n     \
    \   if (hist[test[i]] === undefined){\n            hist[test[i]] = 1;\n      \
    \  }\n        else{\n            hist[test[i]] += 1;\n        }\n        if (hist[test[i]]\
    \ > max){\n            max = hist[test[i]];\n            max_letters = [test[i]];\n\
    \        }\n        else if (hist[test[i]] === max){\n            max_letters.push(test[i]);\n\
    \        }\n    }\n    return {max_letters: max_letters, max: max};\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  max_letters: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n\
    \  b: 2\n}\n    at test (/tmp/tmpsczszuw6.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpsczszuw6.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max_letters:\
    \ [ ' ' ], max: 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    let hist = {};\n    let max = 0;\n\
    \    let maxLetters = [];\n    for (let i = 0; i < test.length; i++) {\n     \
    \   if (hist[test[i]]) {\n            hist[test[i]]++;\n        } else {\n   \
    \         hist[test[i]] = 1;\n        }\n        if (hist[test[i]] > max) {\n\
    \            max = hist[test[i]];\n            maxLetters = [test[i]];\n     \
    \   } else if (hist[test[i]] === max) {\n            maxLetters.push(test[i]);\n\
    \        }\n    }\n    return {[maxLetters]: max};\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n\
    }\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpl3bgfpz8.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpl3bgfpz8.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var hist = {};\n    for (var i = 0;\
    \ i < test.length; i++) {\n        var letter = test[i];\n        if (letter in\
    \ hist) {\n            hist[letter]++;\n        } else {\n            hist[letter]\
    \ = 1;\n        }\n    }\n    return hist;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmp_6g_le4z.js:23:10)\n    at Object.<anonymous> (/tmp/tmp_6g_le4z.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var hist = {};\n    for (var i = 0;\
    \ i < test.length; i++) {\n        var letter = test[i];\n        if (letter in\
    \ hist) {\n            hist[letter]++;\n        } else {\n            hist[letter]\
    \ = 1;\n        }\n    }\n    return hist;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmp_6g_le4z.js:23:10)\n    at Object.<anonymous> (/tmp/tmp_6g_le4z.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var hist = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    for (var i = 0; i < test.length; i++){\n      \
    \  if (hist[test[i]] === undefined){\n            hist[test[i]] = 1;\n       \
    \ } else {\n            hist[test[i]] += 1;\n        }\n        if (hist[test[i]]\
    \ > max){\n            max = hist[test[i]];\n            maxLetters = [test[i]];\n\
    \        } else if (hist[test[i]] === max){\n            maxLetters.push(test[i]);\n\
    \        }\n    }\n    return {\n        max: max,\n        letters: maxLetters\n\
    \    };\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmpdvdeij86.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpdvdeij86.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var hist = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    for (var i = 0; i < test.length; i++){\n      \
    \  if (hist[test[i]]){\n            hist[test[i]] += 1;\n        }\n        else{\n\
    \            hist[test[i]] = 1;\n        }\n        if (hist[test[i]] > max){\n\
    \            max = hist[test[i]];\n            maxLetters = [test[i]];\n     \
    \   }\n        else if (hist[test[i]] === max){\n            maxLetters.push(test[i]);\n\
    \        }\n    }\n    return {max: max, letters: maxLetters};\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmp4j_2caod.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp4j_2caod.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var result = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    var letters = test.split(\" \");\n    for(var i\
    \ = 0; i < letters.length; i++){\n        if(result[letters[i]]){\n          \
    \  result[letters[i]]++;\n        }\n        else{\n            result[letters[i]]\
    \ = 1;\n        }\n        if(result[letters[i]] > max){\n            max = result[letters[i]];\n\
    \            maxLetters = [];\n            maxLetters.push(letters[i]);\n    \
    \    }\n        else if(result[letters[i]] === max){\n            maxLetters.push(letters[i]);\n\
    \        }\n    }\n    return {max: max, letters: maxLetters};\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    'b',\n    'a'\n  ],\n  max: 2\n}\n\nshould loosely deep-equal\n\n{\n\
    \  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp5wsr6mt0.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5wsr6mt0.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 2,\
    \ letters: [ 'b', 'a' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var maxLetter = [];\n    for(var i = 0; i < test.length; i++){\n        if(test[i]\
    \ in dict){\n            dict[test[i]]++;\n        }\n        else{\n        \
    \    dict[test[i]] = 1;\n        }\n        if(dict[test[i]] > max){\n       \
    \     max = dict[test[i]];\n            maxLetter = [test[i]];\n        }\n  \
    \      else if(dict[test[i]] == max){\n            maxLetter.push(test[i]);\n\
    \        }\n    }\n    return {maxLetter: maxLetter, max: max};\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  maxLetter: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n\
    \  b: 2\n}\n    at test (/tmp/tmpr379h4r8.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpr379h4r8.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { maxLetter:\
    \ [ ' ' ], max: 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var max_letter = [];\n    for (var i = 0; i < test.length; i++){\n      \
    \  if (test[i] in dict){\n            dict[test[i]] += 1;\n        }\n       \
    \ else{\n            dict[test[i]] = 1;\n        }\n    }\n    for (var key in\
    \ dict){\n        if (dict[key] > max){\n            max = dict[key];\n      \
    \      max_letter = [key];\n        }\n        else if (dict[key] == max){\n \
    \           max_letter.push(key);\n        }\n    }\n    return max_letter;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' '\n]\n\n\
    should loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpdsac08h9.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdsac08h9.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ' ],\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var count = {};\n    var max = 0;\n\
    \    var result = [];\n    for(var i = 0; i < test.length; i++){\n        if(count[test[i]]){\n\
    \            count[test[i]]++;\n        }else{\n            count[test[i]] = 1;\n\
    \        }\n        if(count[test[i]] > max){\n            max = count[test[i]];\n\
    \        }\n    }\n    for(var key in count){\n        if(count[key] === max){\n\
    \            result.push(key);\n        }\n    }\n    return result;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' '\n]\n\n\
    should loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp1meef70t.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1meef70t.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ' ],\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var max_letters = [];\n    for (var i = 0; i < test.length; i++){\n     \
    \   if (test[i] in dict){\n            dict[test[i]] += 1;\n        }\n      \
    \  else{\n            dict[test[i]] = 1;\n        }\n    }\n    for (var key in\
    \ dict){\n        if (dict[key] > max){\n            max = dict[key];\n      \
    \      max_letters = [key];\n        }\n        else if (dict[key] == max){\n\
    \            max_letters.push(key);\n        }\n    }\n    return {max_letters:\
    \ max_letters, max: max};\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  max_letters: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n\
    \  b: 2\n}\n    at test (/tmp/tmp21cxeosh.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp21cxeosh.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max_letters:\
    \ [ ' ' ], max: 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var letters = test.split(\"\");\n  var\
    \ count = {};\n  for (var i = 0; i < letters.length; i++) {\n    if (count[letters[i]])\
    \ {\n      count[letters[i]] += 1;\n    } else {\n      count[letters[i]] = 1;\n\
    \    }\n  }\n  var max = 0;\n  var maxLetters = [];\n  for (var key in count)\
    \ {\n    if (count[key] > max) {\n      max = count[key];\n      maxLetters =\
    \ [key];\n    } else if (count[key] === max) {\n      maxLetters.push(key);\n\
    \    }\n  }\n  var result = {};\n  for (var i = 0; i < maxLetters.length; i++)\
    \ {\n    result[maxLetters[i]] = max;\n  }\n  return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n\
    }\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpv7_8hz9x.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv7_8hz9x.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    var letters = test.split(\" \");\n    for(var i\
    \ = 0; i < letters.length; i++){\n        if(dict[letters[i]]){\n            dict[letters[i]]\
    \ += 1;\n        }\n        else{\n            dict[letters[i]] = 1;\n       \
    \ }\n    }\n    for(var key in dict){\n        if(dict[key] > max){\n        \
    \    max = dict[key];\n            maxLetters = [key];\n        }\n        else\
    \ if(dict[key] === max){\n            maxLetters.push(key);\n        }\n    }\n\
    \    return {maxLetters: maxLetters, max: max};\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 2,\n\
    \  maxLetters: [\n    'a',\n    'b'\n  ]\n}\n\nshould loosely deep-equal\n\n{\n\
    \  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpadr2keow.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpadr2keow.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { maxLetters:\
    \ [ 'a', 'b' ], max: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var hist = {};\n    for (var i = 0;\
    \ i < test.length; i++) {\n        var letter = test[i];\n        if (hist[letter])\
    \ {\n            hist[letter]++;\n        } else {\n            hist[letter] =\
    \ 1;\n        }\n    }\n    return hist;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpxg80u3si.js:23:10)\n    at Object.<anonymous> (/tmp/tmpxg80u3si.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var letters = test.split(\" \");\n \
    \ var count = {};\n  for (var i = 0; i < letters.length; i++) {\n    if (count[letters[i]]\
    \ === undefined) {\n      count[letters[i]] = 1;\n    } else {\n      count[letters[i]]\
    \ += 1;\n    }\n  }\n  var max = 0;\n  var maxLetter = [];\n  for (var key in\
    \ count) {\n    if (count[key] > max) {\n      max = count[key];\n      maxLetter\
    \ = [key];\n    } else if (count[key] === max) {\n      maxLetter.push(key);\n\
    \    }\n  }\n  var result = {};\n  for (var i = 0; i < maxLetter.length; i++)\
    \ {\n    result[maxLetter[i]] = max;\n  }\n  return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  '': 1\n}\n\
    \nshould loosely deep-equal\n\n{}\n    at test (/tmp/tmph00b67_u.js:43:10)\n \
    \   at Object.<anonymous> (/tmp/tmph00b67_u.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n\
    \  expected: {},\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var histo = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    for (var i = 0; i < test.length; i++){\n      \
    \  if (histo[test[i]]){\n            histo[test[i]] += 1;\n        } else {\n\
    \            histo[test[i]] = 1;\n        }\n        if (histo[test[i]] > max){\n\
    \            max = histo[test[i]];\n            maxLetters = [test[i]];\n    \
    \    } else if (histo[test[i]] === max){\n            maxLetters.push(test[i]);\n\
    \        }\n    }\n    return {'max': max, 'letters': maxLetters};\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmpmm7b0u4s.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmm7b0u4s.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var obj = {};\n    var max = 0;\n\
    \    var result = [];\n    test.split(\"\").forEach(function(letter){\n      \
    \  if(obj[letter]){\n            obj[letter]++;\n        } else {\n          \
    \  obj[letter] = 1;\n        }\n    });\n    for(var key in obj){\n        if(obj[key]\
    \ > max){\n            max = obj[key];\n        }\n    }\n    for(var key in obj){\n\
    \        if(obj[key] === max){\n            result.push(key);\n        }\n   \
    \ }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' '\n]\n\n\
    should loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp13hzzqzs.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp13hzzqzs.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ' ],\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    var letters = test.split(\" \");\n    for(var i\
    \ = 0; i < letters.length; i++){\n        if(dict[letters[i]]){\n            dict[letters[i]]++;\n\
    \        }\n        else{\n            dict[letters[i]] = 1;\n        }\n    \
    \    if(dict[letters[i]] > max){\n            max = dict[letters[i]];\n      \
    \      maxLetters = [];\n            maxLetters.push(letters[i]);\n        }\n\
    \        else if(dict[letters[i]] == max){\n            maxLetters.push(letters[i]);\n\
    \        }\n    }\n    return {max: max, letters: maxLetters};\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    'b',\n    'a'\n  ],\n  max: 2\n}\n\nshould loosely deep-equal\n\n{\n\
    \  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpfy13g8p8.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfy13g8p8.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 2,\
    \ letters: [ 'b', 'a' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var obj = {};\n  var arr = test.split(\"\
    \ \");\n  for(var i = 0; i < arr.length; i++){\n    if(obj[arr[i]] === undefined){\n\
    \      obj[arr[i]] = 1;\n    }\n    else{\n      obj[arr[i]] += 1;\n    }\n  }\n\
    \  var max = 0;\n  var maxArr = [];\n  for(var key in obj){\n    if(obj[key] >\
    \ max){\n      max = obj[key];\n      maxArr = [];\n      maxArr.push(key);\n\
    \    }\n    else if(obj[key] === max){\n      maxArr.push(key);\n    }\n  }\n\
    \  var result = {};\n  for(var i = 0; i < maxArr.length; i++){\n    result[maxArr[i]]\
    \ = max;\n  }\n  return result;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  '': 1\n}\n\
    \nshould loosely deep-equal\n\n{}\n    at test (/tmp/tmpy3fgzynr.js:45:10)\n \
    \   at Object.<anonymous> (/tmp/tmpy3fgzynr.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n\
    \  expected: {},\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  let hist = {};\n  let max = 0;\n  let\
    \ maxLetters = [];\n  for (let i = 0; i < test.length; i++) {\n    let letter\
    \ = test[i];\n    if (hist[letter]) {\n      hist[letter]++;\n    } else {\n \
    \     hist[letter] = 1;\n    }\n    if (hist[letter] > max) {\n      max = hist[letter];\n\
    \      maxLetters = [letter];\n    } else if (hist[letter] === max) {\n      maxLetters.push(letter);\n\
    \    }\n  }\n  return {[maxLetters]: max};\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n\
    }\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmplp6q99k2.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmplp6q99k2.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var maxLetter = [];\n    for(var i = 0; i < test.length; i++){\n        if(dict[test[i]]){\n\
    \            dict[test[i]]++;\n        }else{\n            dict[test[i]] = 1;\n\
    \        }\n        if(dict[test[i]] > max){\n            max = dict[test[i]];\n\
    \            maxLetter = [test[i]];\n        }else if(dict[test[i]] === max){\n\
    \            maxLetter.push(test[i]);\n        }\n    }\n    return {maxLetter:\
    \ maxLetter, max: max};\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  maxLetter: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n\
    \  b: 2\n}\n    at test (/tmp/tmpt1nw2tdf.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpt1nw2tdf.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { maxLetter:\
    \ [ ' ' ], max: 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    for (var i = 0; i < test.length; i++){\n      \
    \  if (test[i] in dict){\n            dict[test[i]] += 1;\n        }\n       \
    \ else{\n            dict[test[i]] = 1;\n        }\n    }\n    for (var key in\
    \ dict){\n        if (dict[key] > max){\n            max = dict[key];\n      \
    \      maxLetters = [key];\n        }\n        else if (dict[key] == max){\n \
    \           maxLetters.push(key);\n        }\n    }\n    return {max: max, letters:\
    \ maxLetters};\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmpri9j9xv3.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpri9j9xv3.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var dict = {};\n  var max = 0;\n  var\
    \ maxLetters = [];\n  test.split(\"\").forEach(function(letter){\n    if(dict[letter]){\n\
    \      dict[letter] += 1;\n    } else {\n      dict[letter] = 1;\n    }\n    if(dict[letter]\
    \ > max){\n      max = dict[letter];\n      maxLetters = [letter];\n    } else\
    \ if(dict[letter] === max){\n      maxLetters.push(letter);\n    }\n  });\n  return\
    \ {[maxLetters.join(\"\")]: max};\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n\
    }\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp6nug7q6y.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6nug7q6y.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var dict = {};\n  var max = 0;\n  var\
    \ max_letter = [];\n  for (var i = 0; i < test.length; i++){\n    if (test[i]\
    \ in dict){\n      dict[test[i]] += 1;\n    }\n    else{\n      dict[test[i]]\
    \ = 1;\n    }\n    if (dict[test[i]] > max){\n      max = dict[test[i]];\n   \
    \   max_letter = [test[i]];\n    }\n    else if (dict[test[i]] == max){\n    \
    \  max_letter.push(test[i]);\n    }\n  }\n  return {max_letter: max_letter, max:\
    \ max};\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2,\
    \ \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"\
    d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\"\
    : 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n \
    \ assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  max_letter: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n\
    \  b: 2\n}\n    at test (/tmp/tmpcujqfk4f.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpcujqfk4f.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max_letter:\
    \ [ ' ' ], max: 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    for (var i = 0; i < test.length; i++){\n      \
    \  if (test[i] in dict){\n            dict[test[i]] += 1;\n        }\n       \
    \ else{\n            dict[test[i]] = 1;\n        }\n    }\n    for (var key in\
    \ dict){\n        if (dict[key] > max){\n            max = dict[key];\n      \
    \      maxLetters = [key];\n        }\n        else if (dict[key] == max){\n \
    \           maxLetters.push(key);\n        }\n    }\n    return {max: max, letters:\
    \ maxLetters};\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmpri9j9xv3.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpri9j9xv3.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var histo = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    for (var i = 0; i < test.length; i++){\n      \
    \  if (histo[test[i]]){\n            histo[test[i]]++;\n        } else {\n   \
    \         histo[test[i]] = 1;\n        }\n        if (histo[test[i]] > max){\n\
    \            max = histo[test[i]];\n            maxLetters = [test[i]];\n    \
    \    } else if (histo[test[i]] === max){\n            maxLetters.push(test[i]);\n\
    \        }\n    }\n    return {max: max, letters: maxLetters};\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmp2_sx_fon.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2_sx_fon.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var histo = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    for (var i = 0; i < test.length; i++){\n      \
    \  if (histo[test[i]]){\n            histo[test[i]]++;\n        } else {\n   \
    \         histo[test[i]] = 1;\n        }\n        if (histo[test[i]] > max){\n\
    \            max = histo[test[i]];\n            maxLetters = [test[i]];\n    \
    \    } else if (histo[test[i]] === max){\n            maxLetters.push(test[i]);\n\
    \        }\n    }\n    return {max: max, letters: maxLetters};\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmp2_sx_fon.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2_sx_fon.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var hist = {};\n    for (var i = 0;\
    \ i < test.length; i++) {\n        var letter = test[i];\n        if (hist[letter])\
    \ {\n            hist[letter]++;\n        } else {\n            hist[letter] =\
    \ 1;\n        }\n    }\n    return hist;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpxg80u3si.js:23:10)\n    at Object.<anonymous> (/tmp/tmpxg80u3si.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var arr = test.split(\" \");\n   \
    \ var dict = {};\n    var max = 0;\n    var maxArr = [];\n    for(var i = 0; i\
    \ < arr.length; i++){\n        if(dict[arr[i]]){\n            dict[arr[i]] +=\
    \ 1;\n        }\n        else{\n            dict[arr[i]] = 1;\n        }\n   \
    \ }\n    for(var key in dict){\n        if(dict[key] > max){\n            max\
    \ = dict[key];\n            maxArr = [];\n            maxArr.push(key);\n    \
    \    }\n        else if(dict[key] == max){\n            maxArr.push(key);\n  \
    \      }\n    }\n    return {max: max, letters: maxArr};\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    'a',\n    'b'\n  ],\n  max: 2\n}\n\nshould loosely deep-equal\n\n{\n\
    \  a: 2,\n  b: 2\n}\n    at test (/tmp/tmptp48z0ld.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptp48z0ld.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 2,\
    \ letters: [ 'a', 'b' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var obj = {};\n  var arr = test.split(\"\
    \ \");\n  for(var i = 0; i < arr.length; i++){\n    if(obj[arr[i]] === undefined){\n\
    \      obj[arr[i]] = 1;\n    } else {\n      obj[arr[i]] += 1;\n    }\n  }\n \
    \ return obj;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmp7uvcc1_n.js:24:10)\n    at Object.<anonymous> (/tmp/tmp7uvcc1_n.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var letters = test.split(\"\");\n  var\
    \ dict = {};\n  var max = 0;\n  var maxLetters = [];\n  for (var i = 0; i < letters.length;\
    \ i++){\n    if (letters[i] in dict){\n      dict[letters[i]] += 1;\n    }\n \
    \   else{\n      dict[letters[i]] = 1;\n    }\n  }\n  for (var key in dict){\n\
    \    if (dict[key] > max){\n      max = dict[key];\n      maxLetters = [key];\n\
    \    }\n    else if (dict[key] == max){\n      maxLetters.push(key);\n    }\n\
    \  }\n  return {maxLetters: maxLetters, max: max};\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  maxLetters: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n\
    \  b: 2\n}\n    at test (/tmp/tmpgsp5n6zl.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgsp5n6zl.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { maxLetters:\
    \ [ ' ' ], max: 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var max_letters = [];\n    for (var i = 0; i < test.length; i++){\n     \
    \   if (test[i] in dict){\n            dict[test[i]] += 1;\n        }\n      \
    \  else{\n            dict[test[i]] = 1;\n        }\n    }\n    for (var key in\
    \ dict){\n        if (dict[key] > max){\n            max = dict[key];\n      \
    \      max_letters = [key];\n        }\n        else if (dict[key] == max){\n\
    \            max_letters.push(key);\n        }\n    }\n    return {max_letters:\
    \ max_letters, max: max};\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  max_letters: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n\
    \  b: 2\n}\n    at test (/tmp/tmphd36iwfz.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphd36iwfz.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max_letters:\
    \ [ ' ' ], max: 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var hist = {};\n  var max = 0;\n  var\
    \ maxLetter = [];\n  for (var i = 0; i < test.length; i++) {\n    if (hist[test[i]])\
    \ {\n      hist[test[i]]++;\n    } else {\n      hist[test[i]] = 1;\n    }\n \
    \   if (hist[test[i]] > max) {\n      max = hist[test[i]];\n      maxLetter =\
    \ [test[i]];\n    } else if (hist[test[i]] === max) {\n      maxLetter.push(test[i]);\n\
    \    }\n  }\n  return {max: max, letters: maxLetter};\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmpe3st7bn6.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpe3st7bn6.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var obj = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    for(var i = 0; i < test.length; i++){\n       \
    \ if(obj[test[i]]){\n            obj[test[i]]++;\n        } else {\n         \
    \   obj[test[i]] = 1;\n        }\n        if(obj[test[i]] > max){\n          \
    \  max = obj[test[i]];\n            maxLetters = [test[i]];\n        } else if(obj[test[i]]\
    \ === max){\n            maxLetters.push(test[i]);\n        }\n    }\n    return\
    \ {\n        max: max,\n        letters: maxLetters\n    };\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmpq11gv_ac.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpq11gv_ac.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var obj = {};\n    var max = 0;\n\
    \    var result = [];\n    for(var i = 0; i < test.length; i++){\n        if(obj[test[i]]){\n\
    \            obj[test[i]]++;\n        } else {\n            obj[test[i]] = 1;\n\
    \        }\n    }\n    for(var key in obj){\n        if(obj[key] > max){\n   \
    \         max = obj[key];\n        }\n    }\n    for(var key in obj){\n      \
    \  if(obj[key] === max){\n            result.push(key);\n        }\n    }\n  \
    \  return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' '\n]\n\n\
    should loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp70ren1ao.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp70ren1ao.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ' ],\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var result = {};\n    var max = 0;\n\
    \    var maxLetter = [];\n    var arr = test.split(\" \");\n    for(var i = 0;\
    \ i < arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }\n        else{\n            result[arr[i]] = 1;\n        }\n    }\n\
    \    for(var key in result){\n        if(result[key] > max){\n            max\
    \ = result[key];\n            maxLetter = [key];\n        }\n        else if(result[key]\
    \ === max){\n            maxLetter.push(key);\n        }\n    }\n    return {[maxLetter]:\
    \ max};\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2,\
    \ \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"\
    d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\"\
    : 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n \
    \ assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  'a,b': 2\n\
    }\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp8jfbf77n.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8jfbf77n.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { 'a,b': 2\
    \ },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var hist = {};\n    var max = 0;\n\
    \    var max_key = [];\n    for (var i = 0; i < test.length; i++){\n        if\
    \ (hist[test[i]]){\n            hist[test[i]] += 1;\n        }\n        else{\n\
    \            hist[test[i]] = 1;\n        }\n        if (hist[test[i]] > max){\n\
    \            max = hist[test[i]];\n            max_key = [test[i]];\n        }\n\
    \        else if (hist[test[i]] == max){\n            max_key.push(test[i]);\n\
    \        }\n    }\n    return {max_key: max_key, max: max};\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  max_key: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b:\
    \ 2\n}\n    at test (/tmp/tmpwmd37cam.js:32:10)\n    at Object.<anonymous> (/tmp/tmpwmd37cam.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max_key:\
    \ [ ' ' ], max: 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var max_letters = [];\n    var letters = test.split(\" \");\n    for (var\
    \ i = 0; i < letters.length; i++){\n        if (letters[i] in dict){\n       \
    \     dict[letters[i]] += 1;\n        }\n        else{\n            dict[letters[i]]\
    \ = 1;\n        }\n    }\n    for (var key in dict){\n        if (dict[key] >\
    \ max){\n            max = dict[key];\n            max_letters = [key];\n    \
    \    }\n        else if (dict[key] == max){\n            max_letters.push(key);\n\
    \        }\n    }\n    return {max_letters: max_letters, max: max};\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 2,\n\
    \  max_letters: [\n    'a',\n    'b'\n  ]\n}\n\nshould loosely deep-equal\n\n\
    {\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpcqz8qgz6.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpcqz8qgz6.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max_letters:\
    \ [ 'a', 'b' ], max: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    let dict = {};\n    let max = 0;\n\
    \    let maxLetters = [];\n    let testArray = test.split(\" \");\n    for(let\
    \ i = 0; i < testArray.length; i++){\n        if(dict[testArray[i]]){\n      \
    \      dict[testArray[i]] += 1;\n        }\n        else{\n            dict[testArray[i]]\
    \ = 1;\n        }\n    }\n    for(let key in dict){\n        if(dict[key] > max){\n\
    \            max = dict[key];\n            maxLetters = [key];\n        }\n  \
    \      else if(dict[key] === max){\n            maxLetters.push(key);\n      \
    \  }\n    }\n    return {[maxLetters]: max};\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  'a,b': 2\n\
    }\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpniohnqbz.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpniohnqbz.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { 'a,b': 2\
    \ },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var histo = {};\n    var max = 0;\n\
    \    var maxChars = [];\n    for (var i = 0; i < test.length; i++) {\n       \
    \ if (histo[test[i]]) {\n            histo[test[i]]++;\n        } else {\n   \
    \         histo[test[i]] = 1;\n        }\n        if (histo[test[i]] > max) {\n\
    \            max = histo[test[i]];\n            maxChars = [test[i]];\n      \
    \  } else if (histo[test[i]] === max) {\n            maxChars.push(test[i]);\n\
    \        }\n    }\n    return {max: max, chars: maxChars};\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  chars: [\n\
    \    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n\
    }\n    at test (/tmp/tmpdigvr7j1.js:30:10)\n    at Object.<anonymous> (/tmp/tmpdigvr7j1.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ chars: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var hist = {};\n  var max = 0;\n  var\
    \ maxLetters = [];\n  for (var i = 0; i < test.length; i++) {\n    if (hist[test[i]])\
    \ {\n      hist[test[i]]++;\n    } else {\n      hist[test[i]] = 1;\n    }\n \
    \   if (hist[test[i]] > max) {\n      max = hist[test[i]];\n      maxLetters =\
    \ [test[i]];\n    } else if (hist[test[i]] === max) {\n      maxLetters.push(test[i]);\n\
    \    }\n  }\n  return {maxLetters: maxLetters, max: max};\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  maxLetters: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n\
    \  b: 2\n}\n    at test (/tmp/tmp6tfyuxoq.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6tfyuxoq.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { maxLetters:\
    \ [ ' ' ], max: 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var dict = {};\n  var max = 0;\n  var\
    \ max_letters = [];\n  var letters = test.split(\" \");\n  for (var i = 0; i <\
    \ letters.length; i++){\n    if (dict[letters[i]]){\n      dict[letters[i]] +=\
    \ 1;\n    }\n    else{\n      dict[letters[i]] = 1;\n    }\n  }\n  for (var key\
    \ in dict){\n    if (dict[key] > max){\n      max = dict[key];\n      max_letters\
    \ = [key];\n    }\n    else if (dict[key] == max){\n      max_letters.push(key);\n\
    \    }\n  }\n  return {max_letters: max_letters, max: max};\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 2,\n\
    \  max_letters: [\n    'a',\n    'b'\n  ]\n}\n\nshould loosely deep-equal\n\n\
    {\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp91gzmhph.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp91gzmhph.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max_letters:\
    \ [ 'a', 'b' ], max: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var histo = {};\n  var max = 0;\n  var\
    \ maxLetters = [];\n  for (var i = 0; i < test.length; i++) {\n    if (histo[test[i]])\
    \ {\n      histo[test[i]]++;\n    } else {\n      histo[test[i]] = 1;\n    }\n\
    \    if (histo[test[i]] > max) {\n      max = histo[test[i]];\n      maxLetters\
    \ = [test[i]];\n    } else if (histo[test[i]] === max) {\n      maxLetters.push(test[i]);\n\
    \    }\n  }\n  return {\n    max: max,\n    letters: maxLetters\n  };\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmpqznzcggy.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqznzcggy.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var hist = {};\n  var max = 0;\n  var\
    \ maxLetter = [];\n  for (var i = 0; i < test.length; i++) {\n    if (hist[test[i]])\
    \ {\n      hist[test[i]]++;\n    } else {\n      hist[test[i]] = 1;\n    }\n \
    \   if (hist[test[i]] > max) {\n      max = hist[test[i]];\n      maxLetter =\
    \ [test[i]];\n    } else if (hist[test[i]] === max) {\n      maxLetter.push(test[i]);\n\
    \    }\n  }\n  return {\n    [maxLetter]: max\n  };\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n\
    }\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpxd0nfiro.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxd0nfiro.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n\
    \  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var letters = test.split(\" \");\n\
    \    var count = {};\n    var max = 0;\n    var maxLetter = [];\n    for(var i\
    \ = 0; i < letters.length; i++){\n        if(count[letters[i]]){\n           \
    \ count[letters[i]]++;\n        }else{\n            count[letters[i]] = 1;\n \
    \       }\n        if(count[letters[i]] > max){\n            max = count[letters[i]];\n\
    \            maxLetter = [];\n            maxLetter.push(letters[i]);\n      \
    \  }else if(count[letters[i]] === max){\n            maxLetter.push(letters[i]);\n\
    \        }\n    }\n    return {maxLetter: maxLetter, max: max};\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 2,\n\
    \  maxLetter: [\n    'b',\n    'a'\n  ]\n}\n\nshould loosely deep-equal\n\n{\n\
    \  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpr2kj7u8h.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpr2kj7u8h.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { maxLetter:\
    \ [ 'b', 'a' ], max: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    var letters = test.split(\" \");\n    for(var i\
    \ = 0; i < letters.length; i++){\n        if(dict[letters[i]]){\n            dict[letters[i]]\
    \ += 1;\n        }else{\n            dict[letters[i]] = 1;\n        }\n      \
    \  if(dict[letters[i]] > max){\n            max = dict[letters[i]];\n        \
    \    maxLetters = [letters[i]];\n        }else if(dict[letters[i]] == max){\n\
    \            maxLetters.push(letters[i]);\n        }\n    }\n    return {maxLetters:\
    \ maxLetters, max: max};\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 2,\n\
    \  maxLetters: [\n    'b',\n    'a'\n  ]\n}\n\nshould loosely deep-equal\n\n{\n\
    \  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp7sseqt9m.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp7sseqt9m.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { maxLetters:\
    \ [ 'b', 'a' ], max: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var max_letter = [];\n    for (var i = 0; i < test.length; i++){\n      \
    \  if (test[i] in dict){\n            dict[test[i]] += 1;\n        }\n       \
    \ else{\n            dict[test[i]] = 1;\n        }\n    }\n    for (var key in\
    \ dict){\n        if (dict[key] > max){\n            max = dict[key];\n      \
    \      max_letter = [key];\n        }\n        else if (dict[key] == max){\n \
    \           max_letter.push(key);\n        }\n    }\n    return {max_letter: max_letter,\
    \ max: max};\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  max_letter: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n\
    \  b: 2\n}\n    at test (/tmp/tmp9aqzj9d5.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp9aqzj9d5.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max_letter:\
    \ [ ' ' ], max: 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var dict = {};\n    var max = 0;\n\
    \    var maxLetters = [];\n    for (var i = 0; i < test.length; i++){\n      \
    \  if (test[i] in dict){\n            dict[test[i]] += 1;\n        }\n       \
    \ else{\n            dict[test[i]] = 1;\n        }\n    }\n    for (var key in\
    \ dict){\n        if (dict[key] > max){\n            max = dict[key];\n      \
    \      maxLetters = [key];\n        }\n        else if (dict[key] == max){\n \
    \           maxLetters.push(key);\n        }\n    }\n    return {max: max, letters:\
    \ maxLetters};\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  letters:\
    \ [\n    ' '\n  ],\n  max: 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n \
    \ b: 2\n}\n    at test (/tmp/tmpri9j9xv3.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpri9j9xv3.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ letters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n  var result = {};\n  var max = 0;\n \
    \ var maxLetters = [];\n  test.split(\"\").forEach(function(letter){\n    if(result[letter]){\n\
    \      result[letter] += 1;\n    } else {\n      result[letter] = 1;\n    }\n\
    \    if(result[letter] > max){\n      max = result[letter];\n      maxLetters\
    \ = [letter];\n    } else if(result[letter] === max){\n      maxLetters.push(letter);\n\
    \    }\n  });\n  return {\n    max: max,\n    maxLetters: maxLetters\n  };\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  max: 3,\n\
    \  maxLetters: [\n    ' '\n  ]\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n\
    \  b: 2\n}\n    at test (/tmp/tmpuxr2mqfl.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpuxr2mqfl.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { max: 3,\
    \ maxLetters: [ ' ' ] },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var result = {};\n    var max = 0;\n\
    \    var maxLetter = [];\n    var testArray = test.split(\" \");\n    for(var\
    \ i = 0; i < testArray.length; i++){\n        if(result[testArray[i]]){\n    \
    \        result[testArray[i]]++;\n        }\n        else{\n            result[testArray[i]]\
    \ = 1;\n        }\n    }\n    for(var key in result){\n        if(result[key]\
    \ > max){\n            max = result[key];\n            maxLetter = [];\n     \
    \       maxLetter.push(key);\n        }\n        else if(result[key] === max){\n\
    \            maxLetter.push(key);\n        }\n    }\n    return maxLetter;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'b'\n\
    ]\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpzviopwzj.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzviopwzj.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'b'\
    \ ],\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\nfunction histogram(test){\n    var hist = {};\n    for (var i = 0;\
    \ i < test.length; i++) {\n        var key = test[i];\n        if (hist[key])\
    \ {\n            hist[key]++;\n        } else {\n            hist[key] = 1;\n\
    \        }\n    }\n    return hist;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpx_39jnsf.js:23:10)\n    at Object.<anonymous> (/tmp/tmpx_39jnsf.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
