{
  "name": "HumanEval_130_tri",
  "language": "jl",
  "prompt": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n",
  "tests": "using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "results": [
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    elif n % 2 == 0:\n        return Vector{Int64}(1 + n / 2) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2_3tm7bw.jl:20\nin expression starting at /tmp/tmp2_3tm7bw.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n % 2 == 0:\n        return Vector{Int64}(1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy2pp94v6.jl:20\nin expression starting at /tmp/tmpy2pp94v6.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(1, 2)\n    elif n % 2 == 0:\n        return Vector{Int64}(1, tri(n / 2) + tri(n / 2 - 1) + tri(n / 2 + 1))\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzws3buvi.jl:20\nin expression starting at /tmp/tmpzws3buvi.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}([])\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 2])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1 + n / 2])\n    else:\n        return Vector{Int64}([1, 1 + (n - 1) / 2, 1 + (n - 2) / 2, 1 + n / 2])\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9cmfj123.jl:20\nin expression starting at /tmp/tmp9cmfj123.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise Exception(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb8b47zsz.jl:20\nin expression starting at /tmp/tmpb8b47zsz.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n % 2 == 0:\n        return [1, 3, 2, 8] + tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy8uo96_p.jl:20\nin expression starting at /tmp/tmpy8uo96_p.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1f03542b.jl:20\nin expression starting at /tmp/tmp1f03542b.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(1, 2)\n    elif n % 2 == 0:\n        return Vector{Int64}(1, tri(n - 2) + tri(n - 1) + tri(n + 1))\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp35jz2p55.jl:20\nin expression starting at /tmp/tmp35jz2p55.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return Vector{Int64}([])\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiuwm4ujt.jl:20\nin expression starting at /tmp/tmpiuwm4ujt.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(1 + (n / 2), tri(n - 1) + tri(n - 2) + tri(n + 1))\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8qnmttrp.jl:20\nin expression starting at /tmp/tmp8qnmttrp.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqh4ikx4p.jl:20\nin expression starting at /tmp/tmpqh4ikx4p.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n == 2:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return [1, 1 + n / 2, 1 + n / 2 + n / 2, 1 + n / 2 + n / 2 + n / 2]\n    else:\n        return [1, 1 + n / 2, 1 + n / 2 + n / 2, 1 + n / 2 + n / 2 + n / 2 + 1]\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbpcyje6g.jl:20\nin expression starting at /tmp/tmpbpcyje6g.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    elif n % 2 == 0:\n        return Vector{Int64}(1 + n / 2) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2_3tm7bw.jl:20\nin expression starting at /tmp/tmp2_3tm7bw.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv4u95dq6.jl:20\nin expression starting at /tmp/tmpv4u95dq6.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n == 4:\n        return [3, 1, 2, 8]\n    else:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmxgmuf8p.jl:20\nin expression starting at /tmp/tmpmxgmuf8p.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector[Int64]()\n    elif n == 1:\n        return Vector[Int64]([1, 3, 2])\n    elif n == 2:\n        return Vector[Int64]([1, 3, 2, 8])\n    else:\n        return Vector[Int64]([1, 3, 2, 8]) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzop_qlyb.jl:20\nin expression starting at /tmp/tmpzop_qlyb.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise Exception(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}([1, 3, 2, 8])\n    if n == 2:\n        return Vector{Int64}([1, 3, 2, 8])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkevuhzx4.jl:20\nin expression starting at /tmp/tmpkevuhzx4.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}([])\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 2])\n    elif n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    else:\n        return Vector{Int64}([1, 1 + (n / 2), 0, 0])\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptfelq233.jl:20\nin expression starting at /tmp/tmptfelq233.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n % 2 == 0:\n        return [1, 3, 2, 8] + tri(n - 1) + tri(n - 2)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6j9rnsqv.jl:20\nin expression starting at /tmp/tmp6j9rnsqv.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 3])\n    elif n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    else:\n        return Vector{Int64}([1, 1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)])\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcslmh7ut.jl:20\nin expression starting at /tmp/tmpcslmh7ut.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}([0])\n    elif n == 1:\n        return Vector{Int64}([1, 3])\n    elif n == 2:\n        return Vector{Int64}([1, 3, 2])\n    else:\n        return Vector{Int64}([1, 1 + (n / 2), 1 + (n / 2) + (n / 2), 1 + (n / 2) + (n / 2) + (n / 2)])\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpedg3psos.jl:20\nin expression starting at /tmp/tmpedg3psos.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(1 + n / 2)\n    else:\n        return Vector{Int64}(1 + tri(n - 1) + tri(n - 2) + tri(n + 1))\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8o94_ki6.jl:20\nin expression starting at /tmp/tmp8o94_ki6.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    elif n % 2 == 0:\n        return Vector{Int64}\n    else:\n        return Vector{Int64}\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2o6om1rh.jl:20\nin expression starting at /tmp/tmp2o6om1rh.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    elif n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplchuq62w.jl:20\nin expression starting at /tmp/tmplchuq62w.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n % 2 == 0:\n        return [1, 1 + (n / 2), 2, 2 + (n / 2)]\n    else:\n        return [1, 1 + (n / 2), 2, 2 + (n / 2)] + tri(n - 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdsohufmt.jl:20\nin expression starting at /tmp/tmpdsohufmt.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(1, 2)\n    if n % 2 == 0:\n        return Vector{Int64}(1, tri(n / 2) + tri(n / 2 - 1) + tri(n / 2 + 1))\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaggpimbb.jl:20\nin expression starting at /tmp/tmpaggpimbb.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        return Vector[Int64]()\n    elif n == 0:\n        return Vector[Int64]([1, 0, 0])\n    elif n == 1:\n        return Vector[Int64]([1, 1, 0])\n    elif n == 2:\n        return Vector[Int64]([1, 1, 1])\n    else:\n        return Vector[Int64]([1, 1, 1] + tri(n - 1) + tri(n - 2) + tri(n + 1))\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8n4qqde4.jl:20\nin expression starting at /tmp/tmp8n4qqde4.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(1, 2)\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeu9jcqkq.jl:20\nin expression starting at /tmp/tmpeu9jcqkq.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 3])\n    elif n == 3:\n        return Vector{Int64}([1, 3, 2])\n    elif n == 4:\n        return Vector{Int64}([1, 3, 2, 8])\n    else:\n        return Vector{Int64}([1, 3, 2, 8]) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7r56tp3e.jl:20\nin expression starting at /tmp/tmp7r56tp3e.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 1:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 2]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    else:\n        return [1, 1 + n / 2, 1 + n / 2 + n % 2, 1 + n / 2 + n % 2 + n % 2]\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5jsyqdjv.jl:20\nin expression starting at /tmp/tmp5jsyqdjv.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 3])\n    elif n == 3:\n        return Vector{Int64}([1, 3, 2])\n    elif n == 4:\n        return Vector{Int64}([1, 3, 2, 8])\n    else:\n        return Vector{Int64}([1, 3, 2, 8]) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7r56tp3e.jl:20\nin expression starting at /tmp/tmp7r56tp3e.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(1, 2)\n    else:\n        return Vector{Int64}(1, 3) + (n / 2) * (Vector{Int64}(1, 2) + Vector{Int64}(1, 1) + Vector{Int64}(1, 3))\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293178,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxdgcnpyx.jl:20\nin expression starting at /tmp/tmpxdgcnpyx.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n % 2 == 0:\n        return [1, 1 + (n / 2), 2, 2 + (n / 2) + 1]\n    else:\n        return [1, 1 + (n / 2), 2, 2 + (n / 2) + 1]\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv_oame39.jl:20\nin expression starting at /tmp/tmpv_oame39.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 1:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 2]\n    else:\n        return [1, 3] + tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293178,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppw3l3ev3.jl:20\nin expression starting at /tmp/tmppw3l3ev3.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n % 2 == 0:\n        return Vector{Int64}(1 + n / 2) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptmuvu0xb.jl:20\nin expression starting at /tmp/tmptmuvu0xb.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    elif n % 2 == 0:\n        return Vector{Int64}(1 + n / 2) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2_3tm7bw.jl:20\nin expression starting at /tmp/tmp2_3tm7bw.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 1:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 2]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    else:\n        return [1, 1 + (n / 2), 0, 0]\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp82eap7vl.jl:20\nin expression starting at /tmp/tmp82eap7vl.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 1:\n        return []\n    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return [1, 1, 2, 3, 5, 8]\n    else:\n        return [1, 1, 2, 3, 5, 8, 1, 2, 3, 5, 8]\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293178,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppszz8oma.jl:20\nin expression starting at /tmp/tmppszz8oma.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        return [1, 1 + (n / 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293178,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb9bao3ns.jl:20\nin expression starting at /tmp/tmpb9bao3ns.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 1:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 2])\n    else:\n        return Vector{Int64}([1, 3, 2, 8])\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293178,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptslw0kq3.jl:20\nin expression starting at /tmp/tmptslw0kq3.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    elif n == 3:\n        return Vector{Int64}(1, 3, 2, 8)\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkf2g0mze.jl:20\nin expression starting at /tmp/tmpkf2g0mze.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(1 + (n / 2), tri(n - 1) + tri(n - 2) + tri(n + 1))\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1fhyvqsn.jl:20\nin expression starting at /tmp/tmp1fhyvqsn.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1))\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjgjc3eih.jl:20\nin expression starting at /tmp/tmpjgjc3eih.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv4u95dq6.jl:20\nin expression starting at /tmp/tmpv4u95dq6.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}([])\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1, 1, 1]) + tri(n - 2) + tri(n - 1)\n    else:\n        return Vector{Int64}([1, 1, 1, 1]) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppnmeicbp.jl:20\nin expression starting at /tmp/tmppnmeicbp.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 1:\n        return []\n    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return [1, 1 + n / 2]\n    else:\n        return [1, 1 + n / 2, 1 + n / 2 + 1]\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4bsxmhc3.jl:20\nin expression starting at /tmp/tmp4bsxmhc3.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(1 + n / 2)\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293178,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_5ih7epd.jl:20\nin expression starting at /tmp/tmp_5ih7epd.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}([])\n    elif n == 1:\n        return Vector{Int64}([3])\n    elif n == 2:\n        return Vector{Int64}([1, 2])\n    else:\n        return Vector{Int64}([1, 1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)])\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4nfgndt8.jl:20\nin expression starting at /tmp/tmp4nfgndt8.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n % 2 == 0:\n        return [1, 3, 2, 8] + tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy8uo96_p.jl:20\nin expression starting at /tmp/tmpy8uo96_p.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(1 + n / 2) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeucfi66z.jl:20\nin expression starting at /tmp/tmpeucfi66z.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}([])\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 2])\n    else:\n        return Vector{Int64}([1, 1 + (n / 2), 1 + (n / 2) + (n / 2), 1 + (n / 2) + (n / 2) + (n / 2)])\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293178,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_pq7da5e.jl:20\nin expression starting at /tmp/tmp_pq7da5e.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector[Int64]([0])\n    elif n == 1:\n        return Vector[Int64]([3])\n    elif n == 2:\n        return Vector[Int64]([1, 3])\n    elif n % 2 == 0:\n        return Vector[Int64]([1, 1 + n / 2])\n    else:\n        return Vector[Int64]([1, 1 + (n - 1) / 2, 1 + (n - 2) / 2, 1 + (n + 1) / 2])\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgi6m9bsf.jl:20\nin expression starting at /tmp/tmpgi6m9bsf.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(1 + (n / 2), tri(n - 1) + tri(n - 2) + tri(n + 1))\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1fhyvqsn.jl:20\nin expression starting at /tmp/tmp1fhyvqsn.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n % 2 == 0:\n        return [1, 1 + (n / 2), 2 + (n / 2), tri(n - 2) + tri(n - 1) + tri(n + 1)]\n    else:\n        return [1, tri(n - 1) + tri(n - 2) + tri(n + 1), 2 + (n / 2), tri(n - 2) + tri(n - 1) + tri(n + 1)]\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jm5vu78.jl:20\nin expression starting at /tmp/tmp9jm5vu78.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n % 2 == 0:\n        return [1, 1 + n / 2, 1 + (n - 1) / 2, 1 + (n - 2) / 2, 1 + (n + 1) / 2]\n    else:\n        return [1, 1 + (n - 1) / 2, 1 + (n - 2) / 2, 1 + (n - 1) / 2, 1 + (n + 1) / 2]\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf6ich9zy.jl:20\nin expression starting at /tmp/tmpf6ich9zy.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    elif n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplchuq62w.jl:20\nin expression starting at /tmp/tmplchuq62w.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return Vector[Int64]([0])\n    if n == 1:\n        return Vector[Int64]([1])\n    if n == 2:\n        return Vector[Int64]([1, 3])\n    if n == 3:\n        return Vector[Int64]([1, 3, 2, 8])\n    if n % 2 == 0:\n        return Vector[Int64]([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppst_c5b_.jl:20\nin expression starting at /tmp/tmppst_c5b_.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(1 + (n / 2), tri(n - 1) + tri(n - 2) + tri(n + 1))\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8qnmttrp.jl:20\nin expression starting at /tmp/tmp8qnmttrp.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    elif n % 2 == 0:\n        return Vector{Int64}(1 + n / 2) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2_3tm7bw.jl:20\nin expression starting at /tmp/tmp2_3tm7bw.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return []\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n % 2 == 0:\n        return [1, 3, 2, 8] + tri(n - 1) + tri(n - 2)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp62kstnz5.jl:20\nin expression starting at /tmp/tmp62kstnz5.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector[Int64]()\n    if n == 1:\n        return Vector[Int64]([1])\n    if n == 2:\n        return Vector[Int64]([1, 3])\n    if n % 2 == 0:\n        return Vector[Int64]([1, 2, 3, 5]) + tri(n - 2)\n    else:\n        return Vector[Int64]([1, 1, 3, 2, 8]) + tri(n - 1) + tri(n - 2)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_ogmghxy.jl:20\nin expression starting at /tmp/tmp_ogmghxy.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 3])\n    elif n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    else:\n        return Vector{Int64}([1, 1 + n / 2, 1 + n / 2 + n / 2, 1 + n / 2 + n / 2 + n / 2])\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpztj_wxwv.jl:20\nin expression starting at /tmp/tmpztj_wxwv.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        if n % 2 == 0:\n            return Vector{Int64}(1 + n / 2) + tri(n - 2) + tri(n + 1)\n        else:\n            return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3b3qjgza.jl:20\nin expression starting at /tmp/tmp3b3qjgza.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(1) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplfvjbcg9.jl:20\nin expression starting at /tmp/tmplfvjbcg9.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}([])\n    elif n == 1:\n        return Vector{Int64}([3])\n    elif n == 2:\n        return Vector{Int64}([1, 2])\n    else:\n        return Vector{Int64}([1, 1 + (n / 2), 1 + (n / 2) + (n / 2), 1 + (n / 2) + (n / 2) + (n / 2)])\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxr90ar3t.jl:20\nin expression starting at /tmp/tmpxr90ar3t.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 3])\n    elif n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    else:\n        return Vector{Int64}([1, 1 + n / 2, 1 + n / 2 + n / 2, 1 + n / 2 + n / 2 + n / 2])\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpztj_wxwv.jl:20\nin expression starting at /tmp/tmpztj_wxwv.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return []\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n % 2 == 0:\n        return [1, 1 + n / 2, 1 + n / 2, 1 + n / 2]\n    else:\n        return [1, 1 + n / 2, 1 + n / 2, 1 + n / 2] + tri(n - 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_ycnld_w.jl:20\nin expression starting at /tmp/tmp_ycnld_w.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}([])\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 2])\n    else:\n        return Vector{Int64}([1, 3, 2, 8])\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8e_a_vjc.jl:20\nin expression starting at /tmp/tmp8e_a_vjc.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}([])\n    elif n == 1:\n        return Vector{Int64}([3])\n    elif n == 2:\n        return Vector{Int64}([1, 2])\n    else:\n        if n % 2 == 0:\n            return Vector{Int64}([1, n / 2, tri(n / 2)])\n        else:\n            return Vector{Int64}([1, tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)])\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt4uy3h5v.jl:20\nin expression starting at /tmp/tmpt4uy3h5v.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}([])\n    elif n == 1:\n        return Vector{Int64}([3])\n    elif n == 2:\n        return Vector{Int64}([1, 2])\n    else:\n        return Vector{Int64}([1, 1 + (n / 2), 2, 3])\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzlnn5zil.jl:20\nin expression starting at /tmp/tmpzlnn5zil.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    elif n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplchuq62w.jl:20\nin expression starting at /tmp/tmplchuq62w.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoyajtzry.jl:20\nin expression starting at /tmp/tmpoyajtzry.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(1, 2)\n    else:\n        return Vector{Int64}(1, 3) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293180,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe8slgpof.jl:20\nin expression starting at /tmp/tmpe8slgpof.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise Exception(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(1 + n / 2) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpivb7k9xp.jl:20\nin expression starting at /tmp/tmpivb7k9xp.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 3])\n    elif n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    else:\n        return Vector{Int64}([1, 1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)])\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpapr1z8m1.jl:20\nin expression starting at /tmp/tmpapr1z8m1.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    elif n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplchuq62w.jl:20\nin expression starting at /tmp/tmplchuq62w.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(1, 2)\n    elif n % 2 == 0:\n        return Vector{Int64}(1, tri(n / 2) + tri(n / 2 - 1) + tri(n / 2 + 1))\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplj2h4u0w.jl:20\nin expression starting at /tmp/tmplj2h4u0w.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    elif n == 3:\n        return Vector{Int64}\n    elif n == 4:\n        return Vector{Int64}\n    else:\n        return Vector{Int64}\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxogli4j5.jl:20\nin expression starting at /tmp/tmpxogli4j5.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    elif n == 3:\n        return Vector{Int64}(1, 3, 2, 8)\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkf2g0mze.jl:20\nin expression starting at /tmp/tmpkf2g0mze.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector[Int64]()\n    if n == 1:\n        return Vector[Int64]([1, 3, 2])\n    if n == 2:\n        return Vector[Int64]([1, 3, 2, 8])\n    if n % 2 == 0:\n        return Vector[Int64]([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0pvw5tue.jl:20\nin expression starting at /tmp/tmp0pvw5tue.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise Exception(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(1 + n / 2)\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2wy2c3c_.jl:20\nin expression starting at /tmp/tmp2wy2c3c_.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}([])\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 2])\n    elif n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    else:\n        return Vector{Int64}([1, 1 + (n / 2), 0, 0])\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptfelq233.jl:20\nin expression starting at /tmp/tmptfelq233.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector[Int64]{0}\n    elif n == 1:\n        return Vector[Int64]{3}\n    elif n == 2:\n        return Vector[Int64]{1, 2}\n    else:\n        return Vector[Int64]{1, 3, 2, tri(n - 1) + tri(n - 2) + tri(n + 1)}\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293180,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjqo0danp.jl:20\nin expression starting at /tmp/tmpjqo0danp.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}([0])\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9xqot7f7.jl:20\nin expression starting at /tmp/tmp9xqot7f7.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(1 + n / 2,\n                             tri(n - 1) + tri(n - 2) + tri(n + 1))\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8efisnw8.jl:20\nin expression starting at /tmp/tmp8efisnw8.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(1, 2)\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv3e2iyqf.jl:20\nin expression starting at /tmp/tmpv3e2iyqf.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    elif n % 2 == 0:\n        return Vector{Int64}(1 + (n / 2)) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpshmarq4m.jl:20\nin expression starting at /tmp/tmpshmarq4m.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    else:\n        return [1, 1 + (n / 2), 1 + (n / 2) + (n / 2), 1 + (n / 2) + (n / 2) + (n / 2)]\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpew99ulas.jl:20\nin expression starting at /tmp/tmpew99ulas.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1 + n / 2])\n    else:\n        return Vector{Int64}([1, 1 + n / 2, 1 + n / 2 + n / 2])\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9a36md6m.jl:20\nin expression starting at /tmp/tmp9a36md6m.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise Exception(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(1 + n / 2)\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2wy2c3c_.jl:20\nin expression starting at /tmp/tmp2wy2c3c_.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv4u95dq6.jl:20\nin expression starting at /tmp/tmpv4u95dq6.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}([0])\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1 + n / 2])\n    else:\n        return Vector{Int64}([1, 1 + n / 2, 1 + n / 2 + n / 2])\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjawrd4bk.jl:20\nin expression starting at /tmp/tmpjawrd4bk.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    elif n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplchuq62w.jl:20\nin expression starting at /tmp/tmplchuq62w.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector[Int64]([0])\n    elif n == 1:\n        return Vector[Int64]([1, 3])\n    elif n == 2:\n        return Vector[Int64]([1, 3, 2])\n    else:\n        return Vector[Int64]([1, 3, 2, 8])\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprk24sz43.jl:20\nin expression starting at /tmp/tmprk24sz43.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1, 1, 1]) + tri(n - 2) + tri(n - 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n - 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpui5us0j9.jl:20\nin expression starting at /tmp/tmpui5us0j9.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return Vector[Int64]()\n    if n == 1:\n        return Vector[Int64]([1])\n    if n == 2:\n        return Vector[Int64]([1, 3])\n    if n % 2 == 0:\n        return Vector[Int64]([1, 1 + n / 2])\n    else:\n        return Vector[Int64]([1, 1 + n / 2, 1 + (n - 1) / 2, 1 + (n - 2) / 2 + 1])\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz04va637.jl:20\nin expression starting at /tmp/tmpz04va637.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(1 + (n / 2), tri(n - 1) + tri(n - 2) + tri(n + 1))\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8qnmttrp.jl:20\nin expression starting at /tmp/tmp8qnmttrp.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n == 2:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return [1, 1 + n / 2, 1 + n / 2, 1 + n / 2]\n    else:\n        return [1, 1 + n / 2, 1 + n / 2, 1 + n / 2, 1 + n / 2, 1 + n / 2, 1 + n / 2]\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpivl98uys.jl:20\nin expression starting at /tmp/tmpivl98uys.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(1, 2)\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeu9jcqkq.jl:20\nin expression starting at /tmp/tmpeu9jcqkq.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(1 + (n / 2), tri(n - 1) + tri(n - 2) + tri(n + 1))\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1fhyvqsn.jl:20\nin expression starting at /tmp/tmp1fhyvqsn.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise Exception(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmponvriet_.jl:20\nin expression starting at /tmp/tmponvriet_.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigdh1now.jl:20\nin expression starting at /tmp/tmpigdh1now.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        return Vector{Int64}()\n    elif n == 0:\n        return Vector{Int64}([1])\n    elif n == 1:\n        return Vector{Int64}([1, 3])\n    elif n == 2:\n        return Vector{Int64}([1, 3, 2])\n    else:\n        return Vector{Int64}([1, 1 + n / 2, 1 + n / 2 + n / 2, 1 + n / 2 + n / 2 + n / 2])\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwfrk_epb.jl:20\nin expression starting at /tmp/tmpwfrk_epb.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector[Int64]{0}\n    elif n == 1:\n        return Vector[Int64]{3}\n    elif n == 2:\n        return Vector[Int64]{1, 2}\n    else:\n        return Vector[Int64]{1, 3, 2, tri(n - 1) + tri(n - 2) + tri(n + 1)}\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293180,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjqo0danp.jl:20\nin expression starting at /tmp/tmpjqo0danp.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 2])\n    else:\n        if n % 2 == 0:\n            return Vector{Int64}([1, 1 + n / 2]) + tri(n - 2)\n        else:\n            return Vector{Int64}([1, 1 + n / 2]) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgro_si00.jl:20\nin expression starting at /tmp/tmpgro_si00.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector[Int64]()\n    elif n == 1:\n        return Vector[Int64]([1, 3, 2])\n    elif n == 2:\n        return Vector[Int64]([1, 3, 2, 8])\n    else:\n        return Vector[Int64]([1, 3, 2, 8]) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzop_qlyb.jl:20\nin expression starting at /tmp/tmpzop_qlyb.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector[Int64]()\n    elif n == 1:\n        return Vector[Int64]([1, 3, 2])\n    elif n == 2:\n        return Vector[Int64]([1, 3, 2, 8])\n    else:\n        return Vector[Int64]([1, 3, 2, 8]) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzop_qlyb.jl:20\nin expression starting at /tmp/tmpzop_qlyb.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 1:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 2]\n    else:\n        return [1, 3] + tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293178,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppw3l3ev3.jl:20\nin expression starting at /tmp/tmppw3l3ev3.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}([])\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 2])\n    elif n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    else:\n        return Vector{Int64}([1, 1 + n / 2, 1 + n / 2 + n / 2, 1 + n / 2 + n / 2 + n / 2])\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp53pnoijk.jl:20\nin expression starting at /tmp/tmp53pnoijk.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise Exception(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}([0])\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyo6wya5e.jl:20\nin expression starting at /tmp/tmpyo6wya5e.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1))\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjgjc3eih.jl:20\nin expression starting at /tmp/tmpjgjc3eih.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(1 + (n / 2), tri(n - 1) + tri(n - 2) + tri(n + 1))\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8qnmttrp.jl:20\nin expression starting at /tmp/tmp8qnmttrp.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return Vector{Int64}([])\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_f7sk9p.jl:20\nin expression starting at /tmp/tmpn_f7sk9p.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector[Int64]([])\n    elif n == 1:\n        return Vector[Int64]([1])\n    elif n == 2:\n        return Vector[Int64]([1, 3])\n    elif n == 3:\n        return Vector[Int64]([1, 3, 2, 8])\n    else:\n        return Vector[Int64]([1, 1 + n / 2, 1 + (n - 1) / 2, 1 + (n - 2) / 2 + 1 + (n - 1) / 2])\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpilnblu2u.jl:20\nin expression starting at /tmp/tmpilnblu2u.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv4u95dq6.jl:20\nin expression starting at /tmp/tmpv4u95dq6.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(1 + n / 2)\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt8e5mm38.jl:20\nin expression starting at /tmp/tmpt8e5mm38.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1))\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpruaq8yn9.jl:20\nin expression starting at /tmp/tmpruaq8yn9.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n == 2:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return [1, 1 + n / 2, 1 + n / 2 + n / 2, 1 + n / 2 + n / 2 + n / 2]\n    else:\n        return [1, 1 + n / 2, 1 + n / 2 + n / 2, 1 + n / 2 + n / 2 + n / 2 + 1]\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpthfgzxcm.jl:20\nin expression starting at /tmp/tmpthfgzxcm.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    elif n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplchuq62w.jl:20\nin expression starting at /tmp/tmplchuq62w.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1f03542b.jl:20\nin expression starting at /tmp/tmp1f03542b.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise Exception(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmponvriet_.jl:20\nin expression starting at /tmp/tmponvriet_.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n == 2:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return Vector{Int64}\n    return Vector{Int64}\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnt859v2m.jl:20\nin expression starting at /tmp/tmpnt859v2m.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 1:\n        return Vector{Int64}\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n % 2 == 0:\n        return [1, 1 + n / 2, 2, 2 + n / 2, 3, 3 + n / 2, 4, 4 + n / 2, 5, 5 + n / 2, 6, 6 + n / 2, 7, 7 + n / 2, 8, 8 + n / 2, 9, 9 + n / 2, 10, 10 + n / 2, 11, 11 + n / 2, 12, 12 + n / 2, 13, 13 + n / 2, 14, 14 + n / 2, 15, 15 + n / 2, 16, 16 + n / 2, 17, 17 + n / 2, 18, 18 + n / 2, 19, 19 + n / 2, 20, 20 + n / 2, 21, 21 + n / 2, 22, 22 + n / 2, 23, 23 + n / 2, 24, 24 + n / 2, 25, 25 + n / 2, 26, 26 + n / 2, 27, 27 + n / 2, 28, 28 + n / 2, 29, 29 + n / 2, 30, 30 + n / 2, 31, 31 + n / 2, 32, 32 + n / 2, 33, 33 + n / 2, 34, 34 + n / 2, 35, 35 + n / 2, 36, 36 + n / 2, 37, 37 + n / 2, 38, 38 + n / 2, 39, 39 + n / 2, 40, 40 + n / 2, 41, 41 + n / 2, 42, 42 + n / 2, 43, 43 + n / 2, 44, 44 + n / 2, 45, 45 + n / 2, 46, 46 + n / 2, 47, 47 + n / 2, 48, 48 + n / 2, 49, 49 + n / 2, 50, 50 + n / 2, 51, 51 + n / 2, 52, 52 + n / 2, 53, 53 + n / 2,\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293183,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpikpfrb0a.jl:20\nin expression starting at /tmp/tmpikpfrb0a.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigdh1now.jl:20\nin expression starting at /tmp/tmpigdh1now.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    elif n == 3:\n        return Vector{Int64}\n    else:\n        return [1, 1 + n / 2, 1 + n / 2 + n / 2, 1 + n / 2 + n / 2 + n / 2]\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293183,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5oj40kxd.jl:20\nin expression starting at /tmp/tmp5oj40kxd.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(1 + (n / 2), tri(n - 1) + tri(n - 2) + tri(n + 1))\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1fhyvqsn.jl:20\nin expression starting at /tmp/tmp1fhyvqsn.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    elif n % 2 == 0:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293183,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2leb1q1s.jl:20\nin expression starting at /tmp/tmp2leb1q1s.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n % 2 == 0:\n        return [1, 1 + (n / 2), 2 + (n / 2), tri(n - 2) + tri(n - 1) + tri(n + 1)]\n    else:\n        return [1, 1 + (n / 2), 2 + (n / 2), tri(n - 2) + tri(n - 1) + tri(n + 1)]\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293183,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxvpjyz1_.jl:20\nin expression starting at /tmp/tmpxvpjyz1_.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    elif n == 3:\n        return Vector{Int64}\n    elif n % 2 == 0:\n        return [1, 1 + n / 2, 1 + n / 2, 1 + n / 2]\n    else:\n        return [1, 1 + n / 2, 1 + n / 2, 1 + n / 2 + 1]\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293183,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_cbhgl3c.jl:20\nin expression starting at /tmp/tmp_cbhgl3c.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n % 2 == 0:\n        return [1, 3, 2, 8] + tri(n - 2)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293183,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpinrje_kx.jl:20\nin expression starting at /tmp/tmpinrje_kx.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        return Vector{Int64}()\n    elif n == 0:\n        return Vector{Int64}([1])\n    elif n == 1:\n        return Vector{Int64}([1, 3])\n    elif n == 2:\n        return Vector{Int64}([1, 3, 2])\n    else:\n        return Vector{Int64}([1, 1 + n / 2, 1 + n / 2 + n / 2, 1 + n / 2 + n / 2 + n / 2])\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293183,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnl117tl5.jl:20\nin expression starting at /tmp/tmpnl117tl5.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    elif n == 3:\n        return Vector{Int64}(1, 3, 2, 8)\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293183,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpce_r3x8b.jl:20\nin expression starting at /tmp/tmpce_r3x8b.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(1 + (n / 2), tri(n - 1) + tri(n - 2) + tri(n + 1))\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1fhyvqsn.jl:20\nin expression starting at /tmp/tmp1fhyvqsn.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}([])\n    elif n == 1:\n        return Vector{Int64}([3])\n    elif n == 2:\n        return Vector{Int64}([1, 2])\n    else:\n        return Vector{Int64}([1, 1 + n / 2, 1 + n / 2 + n / 2, 1 + n / 2 + n / 2 + n / 2])\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293183,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfl3ys7bm.jl:20\nin expression starting at /tmp/tmpfl3ys7bm.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 3])\n    elif n == 3:\n        return Vector{Int64}([1, 3, 2])\n    elif n == 4:\n        return Vector{Int64}([1, 3, 2, 8])\n    else:\n        return Vector{Int64}([1, 3, 2, 8]) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7r56tp3e.jl:20\nin expression starting at /tmp/tmp7r56tp3e.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}([1, 3, 2, 8])\n    if n == 2:\n        return Vector{Int64}([1, 3, 2, 8])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1 + n / 2, 2, tri(n - 2) + tri(n - 1) + tri(n + 1)])\n    else:\n        return Vector{Int64}([1, tri(n - 1) + tri(n - 2) + tri(n + 1), 2, tri(n - 1) + tri(n - 2) + tri(n + 1)])\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293183,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpewci7r62.jl:20\nin expression starting at /tmp/tmpewci7r62.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(1 + n / 2) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293183,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph4cs59p1.jl:20\nin expression starting at /tmp/tmph4cs59p1.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoyajtzry.jl:20\nin expression starting at /tmp/tmpoyajtzry.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    elif n == 3:\n        return Vector{Int64}\n    else:\n        return Vector{Int64}\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293183,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnqt7btc5.jl:20\nin expression starting at /tmp/tmpnqt7btc5.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([1, 3, 2, 8])\n    elif n == 2:\n        return Vector{Int64}([1, 3, 2, 8])\n    elif n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    elif n % 2 == 0:\n        return Vector{Int64}([1, 3, 2, 8]) + tri(n - 1) + tri(n - 2)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293183,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpun3sqagj.jl:20\nin expression starting at /tmp/tmpun3sqagj.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n % 2 == 0:\n        return [1, 3, 2, 8] + tri(n - 1) + tri(n - 2)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6j9rnsqv.jl:20\nin expression starting at /tmp/tmp6j9rnsqv.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise Exception(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1 + n / 2])\n    else:\n        return Vector{Int64}([1, 1 + n / 2, 1 + n / 2 + 1])\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293183,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe_8i9jct.jl:20\nin expression starting at /tmp/tmpe_8i9jct.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    elif n == 3:\n        return Vector{Int64}\n    elif n == 4:\n        return Vector{Int64}\n    else:\n        return Vector{Int64}\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxogli4j5.jl:20\nin expression starting at /tmp/tmpxogli4j5.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector[Int64]()\n    if n == 1:\n        return Vector[Int64]([1, 3, 2, 8])\n    if n % 2 == 0:\n        return Vector[Int64]([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293183,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6s8lrql3.jl:20\nin expression starting at /tmp/tmp6s8lrql3.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        if n % 2 == 0:\n            return Vector{Int64}(1 + n / 2) + tri(n - 2) + tri(n + 1)\n        else:\n            return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3b3qjgza.jl:20\nin expression starting at /tmp/tmp3b3qjgza.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigdh1now.jl:20\nin expression starting at /tmp/tmpigdh1now.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([1, 3, 2])\n    elif n == 2:\n        return Vector{Int64}([1, 3, 2, 8])\n    else:\n        return Vector{Int64}([1, 3, 2, 8]) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293183,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp91yz0hma.jl:20\nin expression starting at /tmp/tmp91yz0hma.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n % 2 == 0:\n        return [1, 1 + n / 2, 1 + (n - 2) / 2, 1 + (n - 4) / 2]\n    else:\n        return [1, 1 + (n - 1) / 2, 1 + (n - 2) / 2, 1 + (n - 3) / 2]\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293183,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa3s59he4.jl:20\nin expression starting at /tmp/tmpa3s59he4.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise Exception(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293183,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphq7mlak1.jl:20\nin expression starting at /tmp/tmphq7mlak1.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n == 2:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return Vector{Int64}\n    else:\n        return Vector{Int64}\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293183,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxadjor9u.jl:20\nin expression starting at /tmp/tmpxadjor9u.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}([])\n    elif n == 1:\n        return Vector{Int64}([3])\n    elif n == 2:\n        return Vector{Int64}([1, 2])\n    elif n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    else:\n        return Vector{Int64}([1, 1 + (n / 2), 1 + (n / 2) + (n / 2), 1 + (n / 2) + (n / 2) + (n / 2)])\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293183,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp62e4cth.jl:20\nin expression starting at /tmp/tmpp62e4cth.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(1 + n / 2)\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293183,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc43n6s6m.jl:20\nin expression starting at /tmp/tmpc43n6s6m.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector[Int64]()\n    elif n == 1:\n        return Vector[Int64]([1, 3, 2])\n    elif n == 2:\n        return Vector[Int64]([1, 3, 2, 8])\n    else:\n        return Vector[Int64]([1, 3, 2, 8]) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzop_qlyb.jl:20\nin expression starting at /tmp/tmpzop_qlyb.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(1 + n / 2)\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt8e5mm38.jl:20\nin expression starting at /tmp/tmpt8e5mm38.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(1 + n / 2) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293183,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph4cs59p1.jl:20\nin expression starting at /tmp/tmph4cs59p1.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector[Int64]([0])\n    elif n == 1:\n        return Vector[Int64]([1])\n    elif n == 2:\n        return Vector[Int64]([1, 3])\n    else:\n        if n % 2 == 0:\n            return Vector[Int64]([1, 1 + n / 2]) + tri(n - 2)\n        else:\n            return Vector[Int64]([1, 1 + n / 2, 1 + n / 2 + 1]) + tri(n - 1) + tri(n - 2)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293184,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7gau0985.jl:20\nin expression starting at /tmp/tmp7gau0985.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}([])\n    elif n == 1:\n        return Vector{Int64}([3])\n    elif n == 2:\n        return Vector{Int64}([1, 2])\n    elif n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    else:\n        return Vector{Int64}([1, n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)])\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293183,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv75xelqx.jl:20\nin expression starting at /tmp/tmpv75xelqx.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise Exception(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}([])\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293185,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_x8qit42.jl:20\nin expression starting at /tmp/tmp_x8qit42.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise Exception(\"n should be non-negative\")\n    if n == 0:\n        return Vector[Int64]{0}\n    if n == 1:\n        return Vector[Int64]{1, 3}\n    if n == 2:\n        return Vector[Int64]{1, 3, 2, 8}\n    if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293184,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_29tkx2c.jl:20\nin expression starting at /tmp/tmp_29tkx2c.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}([0])\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293185,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmen5a5oe.jl:20\nin expression starting at /tmp/tmpmen5a5oe.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 2])\n    else:\n        return Vector{Int64}([1, 1 + (n / 2), 1 + (n / 2) + (n / 2), 1 + (n / 2) + (n / 2) + (n / 2)])\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293185,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_tvmpvpr.jl:20\nin expression starting at /tmp/tmp_tvmpvpr.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    elif n == 3:\n        return Vector{Int64}\n    else:\n        return Vector{Int64}\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293183,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnqt7btc5.jl:20\nin expression starting at /tmp/tmpnqt7btc5.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoyajtzry.jl:20\nin expression starting at /tmp/tmpoyajtzry.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise Exception(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 3])\n    elif n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    else:\n        return Vector{Int64}([1, 1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)])\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293185,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiq7z_n9f.jl:20\nin expression starting at /tmp/tmpiq7z_n9f.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}([])\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1, 2, 3])\n    else:\n        return Vector{Int64}([1, 1, 1, 2, 3, 2, 1])\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293184,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7yj_6omv.jl:20\nin expression starting at /tmp/tmp7yj_6omv.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise Exception(\"n should be non-negative\")\n    if n == 0:\n        return Vector[Int64]()\n    if n == 1:\n        return Vector[Int64]([1])\n    if n == 2:\n        return Vector[Int64]([1, 3])\n    if n % 2 == 0:\n        return Vector[Int64]([1, 1, 2, 2, 3])\n    else:\n        return Vector[Int64]([1, 1, 2, 3, 3, 4]) + tri(n - 1) + tri(n - 2) + tri(n + 1)\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293184,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpteyhijf7.jl:20\nin expression starting at /tmp/tmpteyhijf7.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 1:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 2]\n    else:\n        return [1, 3] + tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293178,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppw3l3ev3.jl:20\nin expression starting at /tmp/tmppw3l3ev3.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise Exception(\"n should be non-negative\")\n    if n == 0:\n        return Vector[Int64]()\n    if n == 1:\n        return Vector[Int64]([1, 3, 2])\n    if n == 2:\n        return Vector[Int64]([1, 3, 2, 8])\n    if n == 3:\n        return Vector[Int64]([1, 3, 2, 8, 13])\n    if n == 4:\n        return Vector[Int64]([1, 3, 2, 8, 13, 21])\n    if n == 5:\n        return Vector[Int64]([1, 3, 2, 8, 13, 21, 34])\n    if n == 6:\n        return Vector[Int64]([1, 3, 2, 8, 13, 21, 34, 55])\n    if n == 7:\n        return Vector[Int64]([1, 3, 2, 8, 13, 21, 34, 55, 89])\n    if n == 8:\n        return Vector[Int64]([1, 3, 2, 8, 13, 21, 34, 55, 89, 144])\n    if n == 9:\n        return Vector[Int64]([1, 3, 2, 8, 13, 21, 34, 55, 89, 144, 233])\n    if n == 10:\n        return Vector[Int64]([1, 3, 2, 8, 13, 21, 34, 55, 89, 144, 233, 377])\n    if n == 11:\n        return Vector[Int64]([1, 3, 2, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610])\n    if n == 12:\n        return Vector[Int64]([1, 3, 2, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987])\n    if n == 13:\n        return Vector[Int64]([1, 3, 2, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597])\n    if n == 14:\n        return Vector[Int64]([1, 3, 2, 8, 13, 21, 34, 55, 89\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293185,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp993jf_tm.jl:20\nin expression starting at /tmp/tmp993jf_tm.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n == 2:\n        return Vector{Int64}\n    if n == 3:\n        return Vector{Int64}\n    if n == 4:\n        return Vector{Int64}\n    if n == 5:\n        return Vector{Int64}\n    if n == 6:\n        return Vector{Int64}\n    if n == 7:\n        return Vector{Int64}\n    if n == 8:\n        return Vector{Int64}\n    if n == 9:\n        return Vector{Int64}\n    if n == 10:\n        return Vector{Int64}\n    if n == 11:\n        return Vector{Int64}\n    if n == 12:\n        return Vector{Int64}\n    if n == 13:\n        return Vector{Int64}\n    if n == 14:\n        return Vector{Int64}\n    if n == 15:\n        return Vector{Int64}\n    if n == 16:\n        return Vector{Int64}\n    if n == 17:\n        return Vector{Int64}\n    if n == 18:\n        return Vector{Int64}\n    if n == 19:\n        return Vector{Int64}\n    if n == 20:\n        return Vector{Int64}\n    if n == 21:\n        return Vector{Int64}\n    if n == 22:\n        return Vector{Int64}\n    if n == 23:\n        return Vector{Int64}\n    if n == 24:\n        return Vector{Int64}\n    if n == 25:\n        return Vector{Int64}\n    if n == 26:\n        return Vector{Int64}\n    if n == 27:\n        return Vector{Int64}\n    if n == 28:\n        return Vector{Int64}\n    if n == 29:\n        return Vector{Int64}\n    if n == 30:\n        return Vector{Int64}\n    if n == 31:\n        return Vector{Int64}\n    if n == 32:\n        return Vector{Int64}\n    if n == 33:\n        return Vector{Int64}\n    if\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293185,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4jjysm6m.jl:20\nin expression starting at /tmp/tmp4jjysm6m.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    else:\n        return Vector{Int64}\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293185,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfgd5ifjv.jl:20\nin expression starting at /tmp/tmpfgd5ifjv.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    elif n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293185,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjl62qlb4.jl:20\nin expression starting at /tmp/tmpjl62qlb4.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 3])\n    elif n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    else:\n        return Vector{Int64}([1, 1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)])\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293185,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz3ym5gj_.jl:20\nin expression starting at /tmp/tmpz3ym5gj_.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise Exception(\"n must be non-negative\")\n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293185,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl4rm7b30.jl:20\nin expression starting at /tmp/tmpl4rm7b30.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2))\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293185,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq_zb6pcm.jl:20\nin expression starting at /tmp/tmpq_zb6pcm.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    elif n == 3:\n        return Vector{Int64}\n    elif n == 4:\n        return Vector{Int64}\n    elif n == 5:\n        return Vector{Int64}\n    elif n == 6:\n        return Vector{Int64}\n    elif n == 7:\n        return Vector{Int64}\n    elif n == 8:\n        return Vector{Int64}\n    elif n == 9:\n        return Vector{Int64}\n    elif n == 10:\n        return Vector{Int64}\n    elif n == 11:\n        return Vector{Int64}\n    elif n == 12:\n        return Vector{Int64}\n    elif n == 13:\n        return Vector{Int64}\n    elif n == 14:\n        return Vector{Int64}\n    elif n == 15:\n        return Vector{Int64}\n    elif n == 16:\n        return Vector{Int64}\n    elif n == 17:\n        return Vector{Int64}\n    elif n == 18:\n        return Vector{Int64}\n    elif n == 19:\n        return Vector{Int64}\n    elif n == 20:\n        return Vector{Int64}\n    elif n == 21:\n        return Vector{Int64}\n    elif n == 22:\n        return Vector{Int64}\n    elif n == 23:\n        return Vector{Int64}\n    elif n == 24:\n        return Vector{Int64}\n    elif n == 25:\n        return Vector{Int64}\n    elif n == 26:\n        return Vector{Int64}\n    elif n == 27:\n        return Vector{Int64}\n    elif n == 28:\n        return Vector{Int64}\n    elif n == 29:\n        return Vector{Int64}\n    elif n == 30:\n        return Vector{Int64}\n    elif n == 31:\n        return Vector{Int64}\n    \nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293185,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp74hlynyl.jl:20\nin expression starting at /tmp/tmp74hlynyl.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(1 + (n / 2), tri(n - 1) + tri(n - 2) + tri(n + 1))\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1fhyvqsn.jl:20\nin expression starting at /tmp/tmp1fhyvqsn.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n == 2:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return Vector{Int64}\n    else:\n        return Vector{Int64}\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293183,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxadjor9u.jl:20\nin expression starting at /tmp/tmpxadjor9u.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1))\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjgjc3eih.jl:20\nin expression starting at /tmp/tmpjgjc3eih.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1))\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpruaq8yn9.jl:20\nin expression starting at /tmp/tmpruaq8yn9.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(1 + n / 2) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293185,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb340ljgu.jl:20\nin expression starting at /tmp/tmpb340ljgu.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        if n % 2 == 0:\n            return Vector{Int64}(1 + n / 2) + tri(n - 2) + tri(n + 1)\n        else:\n            return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3b3qjgza.jl:20\nin expression starting at /tmp/tmp3b3qjgza.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1, 2, 3])\n    else:\n        return Vector{Int64}([1, 1, 1, 2, 3]) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293185,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1s36atdd.jl:20\nin expression starting at /tmp/tmp1s36atdd.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector[Int64]([0])\n    if n == 1:\n        return Vector[Int64]([1, 3])\n    if n == 2:\n        return Vector[Int64]([1, 2, 8])\n    if n % 2 == 0:\n        return Vector[Int64]([1, 3, 2, 8]) + tri(n - 1) + tri(n - 2)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293185,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmzkxh_0o.jl:20\nin expression starting at /tmp/tmpmzkxh_0o.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    elif n == 3:\n        return Vector{Int64}\n    else:\n        return Vector{Int64}\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293185,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb15h0obn.jl:20\nin expression starting at /tmp/tmpb15h0obn.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n % 2 == 0:\n        return [1, 1 + n / 2, 1 + (n / 2) + (n / 2), 1 + (n / 2) + (n / 2) + (n / 2)]\n    else:\n        return [1, 1 + (n - 1) / 2, 1 + (n - 1) / 2 + (n - 1) / 2, 1 + (n - 1) / 2 + (n - 1) / 2 + (n - 1) / 2]\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293185,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk4welkse.jl:20\nin expression starting at /tmp/tmpk4welkse.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1))\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpruaq8yn9.jl:20\nin expression starting at /tmp/tmpruaq8yn9.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 3])\n    elif n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    else:\n        return Vector{Int64}([1, 1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)])\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcslmh7ut.jl:20\nin expression starting at /tmp/tmpcslmh7ut.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    elif n % 2 == 0:\n        return Vector{Int64}\n    else:\n        return [1, 1 + n / 2, 1 + n / 2 + n / 2, 1 + n / 2 + n / 2 + n / 2]\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293185,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz0q52bqv.jl:20\nin expression starting at /tmp/tmpz0q52bqv.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 1:\n        return []\n    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293185,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi4y288y_.jl:20\nin expression starting at /tmp/tmpi4y288y_.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 3])\n    else:\n        return Vector{Int64}([1, 1 + (n / 2), tri(n - 1) + tri(n - 2) + tri(n + 1)])\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293185,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf5ei5mcm.jl:20\nin expression starting at /tmp/tmpf5ei5mcm.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(1 + n / 2)\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293183,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc43n6s6m.jl:20\nin expression starting at /tmp/tmpc43n6s6m.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise Exception(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1)) + tri(n - 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293186,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdtfeu3v4.jl:20\nin expression starting at /tmp/tmpdtfeu3v4.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}([])\n    elif n == 1:\n        return Vector{Int64}([3])\n    elif n == 2:\n        return Vector{Int64}([1, 2])\n    else:\n        if n % 2 == 0:\n            return Vector{Int64}([1, 1 + n / 2]) + tri(n - 2)\n        else:\n            return Vector{Int64}([1, tri(n - 1) + tri(n - 2) + tri(n + 1)])\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293186,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpshg_4cb9.jl:20\nin expression starting at /tmp/tmpshg_4cb9.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1)) + tri(n - 1)\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293186,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7x2y90dm.jl:20\nin expression starting at /tmp/tmp7x2y90dm.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n % 2 == 0:\n        return [1, 3, 2, 8] + tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy8uo96_p.jl:20\nin expression starting at /tmp/tmpy8uo96_p.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    else:\n        return Vector{Int64}\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293186,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvylzan3_.jl:20\nin expression starting at /tmp/tmpvylzan3_.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n == 2:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return Vector{Int64}\n    return Vector{Int64}\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnt859v2m.jl:20\nin expression starting at /tmp/tmpnt859v2m.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return Vector{Int64}([])\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1 + n / 2])\n    else:\n        return Vector{Int64}([1, 1 + n / 2, 1 + n / 2 + n / 2])\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293186,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr7n26hsp.jl:20\nin expression starting at /tmp/tmpr7n26hsp.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 2])\n    else:\n        return Vector{Int64}([1, 3, 2, 8])\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293186,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxo501cwo.jl:20\nin expression starting at /tmp/tmpxo501cwo.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector[Int64]([0])\n    elif n == 1:\n        return Vector[Int64]([1, 3])\n    elif n == 2:\n        return Vector[Int64]([1, 2])\n    elif n % 2 == 0:\n        return Vector[Int64]([1, 1 + n / 2])\n    else:\n        return Vector[Int64]([1, 1 + (n - 1) / 2, 1 + (n - 2) / 2, 1 + (n + 1) / 2])\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
      "timestamp": 1664293186,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpptuejvkx.jl:20\nin expression starting at /tmp/tmpptuejvkx.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}