name: HumanEval_29_filter_by_prefix
language: jl
prompt: "\"\"\" Filter an input vector of strings only for ones that start with a\
  \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
  abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\"\
  \nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
  \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
  , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
  ])\nend\n"
completions: ['    return filter(lambda s: s.startswith(prefix), strings)', '    return
    filter(lambda x: x.starts_with(prefix), strings)', "    return filter(lambda s:\
    \ s.startswith(prefix), strings)\n", '    return filter(lambda x: x.starts_with(prefix),
    strings)', '    return filter(lambda s: s.startswith(prefix), strings)', '    return
    filter(lambda s: s.startswith(prefix), strings)', "    return filter(lambda s:\
    \ s.startswith(prefix), strings)\n", '    return filter(lambda x: x.starts_with(prefix),
    strings)', '    return filter(lambda x: x.startswith(prefix), strings)', '    return
    filter(lambda s: s.startswith(prefix), strings)', '    return filter(lambda s:
    s.startswith(prefix), strings)', '    return filter(lambda x: x.startswith(prefix),
    strings)', '    return filter(lambda s: s.startswith(prefix), strings)', "   \
    \ return filter(lambda s: s.startswith(prefix), strings)\n", '    return filter(lambda
    s: s.startswith(prefix), strings)', '    return filter(lambda x: x.starts_with(prefix),
    strings)', '    return filter(lambda s: s.startswith(prefix), strings)', '    return
    filter(lambda x: x.startswith(prefix), strings)', '    return filter(lambda s:
    s.starts_with(prefix), strings)', '    return filter(lambda x: x.starts_with(prefix),
    strings)', '    return filter(lambda x: x.starts_with(prefix), strings)', '    return
    filter(lambda s: s.startswith(prefix), strings)', '    return filter(lambda string:
    string.startswith(prefix), strings)', '    return filter(lambda x: x.startswith(prefix),
    strings)', '    return filter(lambda s: s.startswith(prefix), strings)', '    return
    filter(lambda x: x.starts_with(prefix), strings)', "    return filter(lambda s:\
    \ s.startswith(prefix), strings)\n", '    return filter(lambda s: s.startswith(prefix),
    strings)', '    return filter(lambda s: s.starts_with(prefix), strings)', '    return
    filter(lambda s: s.startswith(prefix), strings)', '    return filter(lambda x:
    x.startswith(prefix), strings)', '    return filter(lambda s: s.startswith(prefix),
    strings)', '    return filter(lambda s: s.starts_with(prefix), strings)', '    return
    filter(lambda s: s.startswith(prefix), strings)', '    return filter(lambda string:
    string.startswith(prefix), strings)', '    return filter(lambda x: x.startswith(prefix),
    strings)', '    return filter(lambda s: s.startsWith(prefix), strings)', '    return
    filter(lambda s: s.startswith(prefix), strings)', '    return filter(lambda s:
    s.startswith(prefix), strings)', '    return filter(lambda s: s.startswith(prefix),
    strings)', '    return filter(lambda x: x.startswith(prefix), strings)', '    return
    filter(lambda x: x.startsWith(prefix), strings)', '    return filter(lambda s:
    s.startswith(prefix), strings)', '    return filter(lambda s: s.starts_with(prefix),
    strings)', '    return filter(lambda x: x.startswith(prefix), strings)', "   \
    \ return filter(lambda s: s.startswith(prefix), strings)\n", '    return filter(lambda
    x: x.starts_with(prefix), strings)', "    return filter(lambda x: x.startswith(prefix),\
    \ strings)\n", '    return filter(lambda s: s.startswith(prefix), strings)', '    return
    filter(lambda s: s.startswith(prefix), strings)', '    return filter(lambda s:
    s.startswith(prefix), strings)', '    return filter(lambda s: s.startswith(prefix),
    strings)', '    return filter(lambda x: x.starts_with(prefix), strings)', '    return
    filter(lambda x: x.startsWith(prefix), strings)', '    return filter(lambda x:
    x.startswith(prefix), strings)', '    return filter(lambda x: x.starts_with(prefix),
    strings)', '    return filter(lambda s: s.startswith(prefix), strings)', '    return
    filter(lambda s: s.startswith(prefix), strings)', '    return filter(lambda x:
    x.starts_with(prefix), strings)', '    return filter(lambda x: x.startswith(prefix),
    strings)', '    return filter(lambda x: x.startswith(prefix), strings)', '    return
    filter(lambda x: x.starts_with(prefix), strings)', '    return filter(lambda x:
    x.starts_with(prefix), strings)', '    return filter(lambda x: x.starts_with(prefix),
    strings)', '    return filter(lambda s: s.startswith(prefix), strings)', '    return
    filter(lambda x: x.startswith(prefix), strings)', '    return filter(lambda s:
    s.startswith(prefix), strings)', '    return filter(lambda x: x.starts_with(prefix),
    strings)', '    return filter(lambda s: s.startswith(prefix), strings)', '    return
    filter(lambda s: s.startswith(prefix), strings)', '    return filter(lambda s:
    s.startswith(prefix), strings)', '    return filter(lambda s: s.startswith(prefix),
    strings)', '    return filter(lambda s: s.startswith(prefix), strings)', '    return
    filter(lambda s: s.startswith(prefix), strings)', '    return filter(lambda s:
    s.startswith(prefix), strings)', '    return filter(lambda s: s.starts_with(prefix),
    strings)', '    return filter(lambda x: x.starts_with(prefix), strings)', '    return
    filter(lambda s: s.startswith(prefix), strings)', '    return filter(lambda s:
    s.startswith(prefix), strings)', '    return filter(lambda string: string.starts_with(prefix),
    strings)', '    return filter(lambda x: x.startswith(prefix), strings)', '    return
    filter(lambda x: x.starts_with(prefix), strings)', '    return filter(lambda x:
    x.startswith(prefix), strings)', '    return filter(lambda s: s.startswith(prefix),
    strings)', '    return filter(lambda s: s.starts_with(prefix), strings)', '    return
    filter(lambda s: s.startswith(prefix), strings)', '    return filter(lambda x:
    x.startswith(prefix), strings)', '    return filter(lambda x: x.starts_with(prefix),
    strings)', '    return filter(lambda x: x.starts_with(prefix), strings)', '    return
    filter(lambda s: s.startswith(prefix), strings)', '    return filter(lambda x:
    x.startswith(prefix), strings)', '    return filter(lambda s: s.startswith(prefix),
    strings)', '    return filter(lambda s: s.startswith(prefix), strings)', '    return
    filter(lambda s: s.startswith(prefix), strings)', '    return filter(lambda s:
    s.starts_with(prefix), strings)', '    return filter(lambda x: x.startswith(prefix),
    strings)', '    return filter(lambda s: s.startswith(prefix), strings)', '    return
    filter(lambda s: s.startswith(prefix), strings)', '    return filter(lambda string:
    string.startswith(prefix), strings)', '    return filter(lambda x: x.starts_with(prefix),
    strings)', '    return filter(lambda x: x.startsWith(prefix), strings)', '    return
    filter(lambda s: s.startswith(prefix), strings)', '    return filter(lambda x:
    x.startswith(prefix), strings)', '    return filter(lambda x: x.startswith(prefix),
    strings)', '    return filter(lambda s: s.startswith(prefix), strings)', '    return
    filter(lambda x: x.starts_with(prefix), strings)', '    return filter(lambda x:
    x.startswith(prefix), strings)', '    return filter(lambda s: s.startswith(prefix),
    strings)', '    return filter(lambda s: s.startswith(prefix), strings)', '    return
    filter(lambda s: s.startswith(prefix), strings)', '    return filter(lambda s:
    s.startswith(prefix), strings)', '    return filter(lambda s: s.startswith(prefix),
    strings)', '    return filter(lambda s: s.startswith(prefix), strings)', '    return
    filter(lambda x: x.startswith(prefix), strings)', '    return filter(lambda s:
    s.startswith(prefix), strings)', '    return filter(lambda x: x.startswith(prefix),
    strings)', '    return filter(lambda x: x.startswith(prefix), strings)', '    return
    filter(lambda s: s.startswith(prefix), strings)', '    return filter(lambda string:
    string.startswith(prefix), strings)', '    return filter(lambda x: x.starts_with(prefix),
    strings)', '    return filter(lambda x: x.starts_with(prefix), strings)', '    return
    filter(lambda s: s.starts_with(prefix), strings)', "    return filter(lambda s:\
    \ s.startswith(prefix), strings)\n", '    return filter(lambda x: x.startswith(prefix),
    strings)', '    return filter(lambda x: x.starts_with(prefix), strings)', '    return
    filter(lambda s: s.startswith(prefix), strings)', '    return filter(lambda x:
    x.starts_with(prefix), strings)', '    return filter(lambda s: s.startswith(prefix),
    strings)', '    return filter(lambda s: s.startswith(prefix), strings)', '    return
    filter(lambda x: x.startswith(prefix), strings)', '    return filter(lambda x:
    x.startswith(prefix), strings)', '    return filter(lambda x: x.starts_with(prefix),
    strings)', '    return filter(lambda x: x.starts_with(prefix), strings)', '    return
    filter(lambda x: x.startswith(prefix), strings)', '    return filter(lambda x:
    x.starts_with(prefix), strings)', '    return filter(lambda s: s.startswith(prefix),
    strings)', '    return filter(lambda s: s.startswith(prefix), strings)', '    return
    filter(lambda x: x.starts_with(prefix), strings)', '    return filter(lambda x:
    x.startswith(prefix), strings)', '    return filter(lambda s: s.startswith(prefix),
    strings)', '    return filter(lambda string: string.startsWith(prefix), strings)',
  '    return filter(lambda s: s.startswith(prefix), strings)', '    return filter(lambda
    x: x.startsWith(prefix), strings)', '    return filter(lambda s: s.startswith(prefix),
    strings)', "    return filter(lambda s: s.startswith(prefix), strings)\n", '    return
    filter(lambda s: s.startswith(prefix), strings)', "    return filter(lambda s:\
    \ s.startswith(prefix), strings)\n", '    return filter(lambda x: x.starts_with(prefix),
    strings)', '    return filter(lambda x: x.starts_with(prefix), strings)', '    return
    filter(lambda s: s.startswith(prefix), strings)', '    return filter(lambda s:
    s.starts_with(prefix), strings)', '    return filter(lambda x: x.startswith(prefix),
    strings)', '    return filter(lambda s: s.startswith(prefix), strings)', '    return
    filter(lambda s: s.startswith(prefix), strings)', '    return filter(lambda x:
    x.startswith(prefix), strings)', '    return filter(lambda x: x.startswith(prefix),
    strings)', '    return filter(lambda x: x.starts_with(prefix), strings)', '    return
    filter(lambda x: x.startswith(prefix), strings)', "    return filter(lambda s:\
    \ s.startswith(prefix), strings)\n", '    return filter(lambda s: s.starts_with(prefix),
    strings)', '    return filter(lambda x: x.starts_with(prefix), strings)', '    return
    filter(lambda s: s.starts_with(prefix), strings)', '    return filter(lambda x:
    x.starts_with(prefix), strings)', '    return filter(lambda x: x.starts_with(prefix),
    strings)', '    return filter(lambda x: x.startswith(prefix), strings)', "   \
    \ return filter(lambda s: s.startswith(prefix), strings)\n", '    return filter(lambda
    x: x.startsWith(prefix), strings)', '    return filter(lambda x: x.startswith(prefix),
    strings)', '    return filter(lambda x: x.starts_with(prefix), strings)', '    return
    filter(lambda s: s.startswith(prefix), strings)', "    return filter(lambda s:\
    \ s.startswith(prefix), strings)\n", '    return filter(lambda x: x.starts_with(prefix),
    strings)', '    return filter(lambda x: x.starts_with(prefix), strings)', '    return
    filter(lambda x: x.starts_with(prefix), strings)', '    return filter(lambda x:
    x.starts_with(prefix), strings)', '    return filter(lambda s: s.startswith(prefix),
    strings)', '    return filter(lambda s: s.starts_with(prefix), strings)', '    return
    filter(lambda x: x.startswith(prefix), strings)', '    return filter(lambda x:
    x.starts_with(prefix), strings)', '    return filter(lambda s: s.startswith(prefix),
    strings)', '    return filter(lambda s: s.startswith(prefix), strings)', '    return
    filter(lambda x: x.startswith(prefix), strings)', '    return filter(lambda x:
    x.starts_with(prefix), strings)', '    return filter(lambda s: s.startswith(prefix),
    strings)', "    return filter(lambda x: x.startswith(prefix), strings)\n", '    return
    filter(lambda s: s.startswith(prefix), strings)', '    return filter(lambda s:
    s.startswith(prefix), strings)', '    return filter(lambda x: x.startswith(prefix),
    strings)', '    return filter(lambda s: s.startswith(prefix), strings)', '    return
    filter(lambda s: s.startswith(prefix), strings)', '    return filter(lambda s:
    s.startswith(prefix), strings)', '    return filter(lambda s: s.startswith(prefix),
    strings)', '    return filter(lambda s: s.startswith(prefix), strings)', '    return
    filter(lambda s: s.startswith(prefix), strings)', '    return filter(lambda x:
    x.starts_with(prefix), strings)', '    return filter(lambda x: x.startswith(prefix),
    strings)', '    return filter(lambda x: x.starts_with(prefix), strings)', '    return
    filter(lambda s: s.startswith(prefix), strings)', '    return filter(lambda x:
    x.starts_with(prefix), strings)', '    return filter(lambda s: s.startswith(prefix),
    strings)']
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
