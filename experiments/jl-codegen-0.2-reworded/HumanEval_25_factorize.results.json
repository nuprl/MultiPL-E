{
  "name": "HumanEval_25_factorize",
  "language": "jl",
  "prompt": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n",
  "tests": "using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "results": [
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i) * factorize(n / i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpitjek8th.jl:13\nin expression starting at /tmp/tmpitjek8th.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    elif n == 3:\n        return Vector{Int64}\n    elif n % 2 == 0:\n        return factorize(n / 2)\n    else:\n        return factorize(n - 1) + Vector{Int64}\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt15axpu8.jl:13\nin expression starting at /tmp/tmpt15axpu8.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = append(factors, i)\n            factors = append(factors, n / i)\n            break\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfzd5qf1k.jl:13\nin expression starting at /tmp/tmpfzd5qf1k.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqix3yjck.jl:13\nin expression starting at /tmp/tmpqix3yjck.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpapqea40n.jl:13\nin expression starting at /tmp/tmpapqea40n.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i] * factorize(n / i)\n        return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr2_2q1gy.jl:13\nin expression starting at /tmp/tmpr2_2q1gy.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n+1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfnx57qtm.jl:13\nin expression starting at /tmp/tmpfnx57qtm.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8ag2cpzc.jl:13\nin expression starting at /tmp/tmp8ag2cpzc.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpehmrvau0.jl:13\nin expression starting at /tmp/tmpehmrvau0.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n+1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprhvha8s1.jl:13\nin expression starting at /tmp/tmprhvha8s1.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i) * factorize(n / i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpitjek8th.jl:13\nin expression starting at /tmp/tmpitjek8th.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors + Vector{Int64}(n)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp6zvunw6.jl:13\nin expression starting at /tmp/tmpp6zvunw6.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i) * factorize(n / i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpitjek8th.jl:13\nin expression starting at /tmp/tmpitjek8th.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpapqea40n.jl:13\nin expression starting at /tmp/tmpapqea40n.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7qxwg77c.jl:13\nin expression starting at /tmp/tmp7qxwg77c.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[factorize(n / 2) + factorize(n % 2)]\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf1k2vidk.jl:13\nin expression starting at /tmp/tmpf1k2vidk.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n / 2) + factorize(n / 3) + factorize(n / 5) + factorize(n / 7)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf93paj0z.jl:13\nin expression starting at /tmp/tmpf93paj0z.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n / 2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps4in8a5p.jl:13\nin expression starting at /tmp/tmps4in8a5p.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n / 2) + factorize(n / 3) + factorize(n / 5) + factorize(n / 7)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf93paj0z.jl:13\nin expression starting at /tmp/tmpf93paj0z.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    elif n == 3:\n        return Vector{Int64}\n    elif n == 4:\n        return Vector{Int64}\n    elif n == 5:\n        return Vector{Int64}\n    elif n == 6:\n        return Vector{Int64}\n    elif n == 7:\n        return Vector{Int64}\n    elif n == 8:\n        return Vector{Int64}\n    elif n == 9:\n        return Vector{Int64}\n    elif n == 10:\n        return Vector{Int64}\n    elif n == 11:\n        return Vector{Int64}\n    elif n == 12:\n        return Vector{Int64}\n    elif n == 13:\n        return Vector{Int64}\n    elif n == 14:\n        return Vector{Int64}\n    elif n == 15:\n        return Vector{Int64}\n    elif n == 16:\n        return Vector{Int64}\n    elif n == 17:\n        return Vector{Int64}\n    elif n == 18:\n        return Vector{Int64}\n    elif n == 19:\n        return Vector{Int64}\n    elif n == 20:\n        return Vector{Int64}\n    elif n == 21:\n        return Vector{Int64}\n    elif n == 22:\n        return Vector{Int64}\n    elif n == 23:\n        return Vector{Int64}\n    elif n == 24:\n        return Vector{Int64}\n    elif n == 25:\n        return Vector{Int64}\n    elif n == 26:\n        return Vector{Int64}\n    elif n == 27:\n        return Vector{Int64}\n    elif n == 28:\n        return Vector{Int64}\n    elif n == 29:\n        return Vector{Int64}\n    elif n == 30:\n        return Vector{Int64}\n    elif n == 31:\n        return Vector{Int64}\n    elif n == 32:\n        return Vector{Int64}\n    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpalsw7v78.jl:13\nin expression starting at /tmp/tmpalsw7v78.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 2:\n        return Vector{Int64}[2]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6f3cmv5t.jl:13\nin expression starting at /tmp/tmp6f3cmv5t.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3fpjlmd4.jl:13\nin expression starting at /tmp/tmp3fpjlmd4.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors + Vector{Int64}(n)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp6zvunw6.jl:13\nin expression starting at /tmp/tmpp6zvunw6.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpehmrvau0.jl:13\nin expression starting at /tmp/tmpehmrvau0.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n / 2) + factorize(n / 3) + factorize(n / 5) + factorize(n / 7)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf93paj0z.jl:13\nin expression starting at /tmp/tmpf93paj0z.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n / 2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps4in8a5p.jl:13\nin expression starting at /tmp/tmps4in8a5p.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector[Int64]()\n    elif n == 0:\n        return Vector[Int64]()\n    else:\n        return Vector[Int64]([n, factorize(n // 2)]) + factorize(n // 2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpay4mc5yx.jl:13\nin expression starting at /tmp/tmpay4mc5yx.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 2:\n        return Vector{Int64}[2]\n    elif n == 3:\n        return Vector{Int64}[2, 1]\n    elif n == 4:\n        return Vector{Int64}[2, 2]\n    elif n % 2 == 0:\n        return factorize(n / 2) * 2\n    else:\n        return factorize(3 * (n - 1) + 1)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1c4iw6c3.jl:13\nin expression starting at /tmp/tmp1c4iw6c3.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpehmrvau0.jl:13\nin expression starting at /tmp/tmpehmrvau0.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n+1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfnx57qtm.jl:13\nin expression starting at /tmp/tmpfnx57qtm.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpapqea40n.jl:13\nin expression starting at /tmp/tmpapqea40n.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(n):\n            factors = factors + factorize(n % i)\n        return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv3eh_1pn.jl:13\nin expression starting at /tmp/tmpv3eh_1pn.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = factorize(n / 2)\n        return Vector{Int64}[factors[0] * 2, factors[1]]\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcz6bokn3.jl:13\nin expression starting at /tmp/tmpcz6bokn3.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    elif n == 3:\n        return Vector{Int64}\n    elif n == 4:\n        return Vector{Int64}\n    elif n == 5:\n        return Vector{Int64}\n    elif n == 6:\n        return Vector{Int64}\n    elif n == 7:\n        return Vector{Int64}\n    elif n == 8:\n        return Vector{Int64}\n    elif n == 9:\n        return Vector{Int64}\n    elif n == 10:\n        return Vector{Int64}\n    elif n == 11:\n        return Vector{Int64}\n    elif n == 12:\n        return Vector{Int64}\n    elif n == 13:\n        return Vector{Int64}\n    elif n == 14:\n        return Vector{Int64}\n    elif n == 15:\n        return Vector{Int64}\n    elif n == 16:\n        return Vector{Int64}\n    elif n == 17:\n        return Vector{Int64}\n    elif n == 18:\n        return Vector{Int64}\n    elif n == 19:\n        return Vector{Int64}\n    elif n == 20:\n        return Vector{Int64}\n    elif n == 21:\n        return Vector{Int64}\n    elif n == 22:\n        return Vector{Int64}\n    elif n == 23:\n        return Vector{Int64}\n    elif n == 24:\n        return Vector{Int64}\n    elif n == 25:\n        return Vector{Int64}\n    elif n == 26:\n        return Vector{Int64}\n    elif n == 27:\n        return Vector{Int64}\n    elif n == 28:\n        return Vector{Int64}\n    elif n == 29:\n        return Vector{Int64}\n    elif n == 30:\n        return Vector{Int64}\n    elif n == 31:\n        return Vector{Int64}\n    elif n == 32:\n        return Vector{Int64}\n    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpalsw7v78.jl:13\nin expression starting at /tmp/tmpalsw7v78.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector[Int64]()\n    elif n == 0:\n        return Vector[Int64]([0])\n    else:\n        return Vector[Int64]([n, factorize(n % 2), factorize(n % 3), factorize(n % 5), factorize(n % 7)])\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5q0n57jx.jl:13\nin expression starting at /tmp/tmp5q0n57jx.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n+1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprhvha8s1.jl:13\nin expression starting at /tmp/tmprhvha8s1.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n / 2) + factorize(n / 3) + factorize(n / 5) + factorize(n / 7)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf93paj0z.jl:13\nin expression starting at /tmp/tmpf93paj0z.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return (factorize(n // 2) + factorize(n % 2))\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj8ta9k_i.jl:13\nin expression starting at /tmp/tmpj8ta9k_i.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3fpjlmd4.jl:13\nin expression starting at /tmp/tmp3fpjlmd4.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqix3yjck.jl:13\nin expression starting at /tmp/tmpqix3yjck.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i) * factorize(n / i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpitjek8th.jl:13\nin expression starting at /tmp/tmpitjek8th.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5duayfii.jl:13\nin expression starting at /tmp/tmp5duayfii.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3fpjlmd4.jl:13\nin expression starting at /tmp/tmp3fpjlmd4.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return (factorize(n // 2) * factorize(n % 2))\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkf5fv_2x.jl:13\nin expression starting at /tmp/tmpkf5fv_2x.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector[Int64]()\n    factors = Vector[Int64]()\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector[Int64](i)\n            n = n / i\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7zw5c4qy.jl:13\nin expression starting at /tmp/tmp7zw5c4qy.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(1, i)\n            n = n / i\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv99vb8fu.jl:13\nin expression starting at /tmp/tmpv99vb8fu.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbrnoa02j.jl:13\nin expression starting at /tmp/tmpbrnoa02j.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8ag2cpzc.jl:13\nin expression starting at /tmp/tmp8ag2cpzc.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3fpjlmd4.jl:13\nin expression starting at /tmp/tmp3fpjlmd4.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5duayfii.jl:13\nin expression starting at /tmp/tmp5duayfii.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = factorize(n/2)\n        return factors + factorize(n - factors[0]*2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvhhjh4te.jl:13\nin expression starting at /tmp/tmpvhhjh4te.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i) * factorize(n / i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpitjek8th.jl:13\nin expression starting at /tmp/tmpitjek8th.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3fpjlmd4.jl:13\nin expression starting at /tmp/tmp3fpjlmd4.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3fpjlmd4.jl:13\nin expression starting at /tmp/tmp3fpjlmd4.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n / i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjbocnoba.jl:13\nin expression starting at /tmp/tmpjbocnoba.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = append(factors, i)\n            factors = append(factors, n/i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpril9_3r0.jl:13\nin expression starting at /tmp/tmpril9_3r0.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = factorize(n / 2)\n        return Vector{Int64}[factors[0] * 2, factors[1]]\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcz6bokn3.jl:13\nin expression starting at /tmp/tmpcz6bokn3.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3fpjlmd4.jl:13\nin expression starting at /tmp/tmp3fpjlmd4.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3fpjlmd4.jl:13\nin expression starting at /tmp/tmp3fpjlmd4.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n / 2) + factorize(n / 3) + factorize(n / 5) + factorize(n / 7) + factorize(n / 11) + factorize(n / 13) + factorize(n / 17) + factorize(n / 19) + factorize(n / 23) + factorize(n / 29) + factorize(n / 31) + factorize(n / 37) + factorize(n / 41) + factorize(n / 43) + factorize(n / 47) + factorize(n / 53) + factorize(n / 59) + factorize(n / 61) + factorize(n / 67) + factorize(n / 71) + factorize(n / 73) + factorize(n / 79) + factorize(n / 83) + factorize(n / 89) + factorize(n / 97) + factorize(n / 101) + factorize(n / 103) + factorize(n / 107) + factorize(n / 109) + factorize(n / 113) + factorize(n / 127) + factorize(n / 131) + factorize(n / 137) + factorize(n / 139) + factorize(n / 149) + factorize(n / 151) + factorize(n / 157) + factorize(n / 163) + factorize(n / 167) + factorize(n / 173) + factorize(n / 179) + factorize(n / 181) + factorize(n / 191) + factorize(n / 193) + factorize(n / 197) + factorize(n / 199) + factorize(n / 211) + factorize(n / 223) + factorize(n / 227) + factorize(n / 229) + factorize(n / 233) + factorize(n / 239) + factorize(n / 241) + factorize(n / 251) + factorize(n / 257) + factorize(n / 263) + factorize(n / 269) + factorize(n / 271) + factorize(n / 277) + factorize(n / 281)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmponf6ud0p.jl:13\nin expression starting at /tmp/tmponf6ud0p.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n % 2) + factorize(n % 3) + factorize(n % 5) + factorize(n % 7)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt6pyluo5.jl:13\nin expression starting at /tmp/tmpt6pyluo5.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors = append(factors, i)\n            factors = append(factors, n / i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjt9pcarh.jl:13\nin expression starting at /tmp/tmpjt9pcarh.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n / 2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps4in8a5p.jl:13\nin expression starting at /tmp/tmps4in8a5p.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = append(factors, i)\n            factors = append(factors, n/i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpril9_3r0.jl:13\nin expression starting at /tmp/tmpril9_3r0.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    else:\n        return factorize(n/2) + factorize(n/3) + factorize(n/5) + factorize(n/7)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm19xiomb.jl:13\nin expression starting at /tmp/tmpm19xiomb.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpehmrvau0.jl:13\nin expression starting at /tmp/tmpehmrvau0.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpehmrvau0.jl:13\nin expression starting at /tmp/tmpehmrvau0.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = factorize(n / 2)\n        return Vector{Int64}[factors[0] * 2, factors[1]]\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcz6bokn3.jl:13\nin expression starting at /tmp/tmpcz6bokn3.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    elif n == 3:\n        return Vector{Int64}\n    elif n == 4:\n        return Vector{Int64}\n    elif n == 5:\n        return Vector{Int64}\n    elif n == 6:\n        return Vector{Int64}\n    elif n == 7:\n        return Vector{Int64}\n    elif n == 8:\n        return Vector{Int64}\n    elif n == 9:\n        return Vector{Int64}\n    elif n == 10:\n        return Vector{Int64}\n    elif n == 11:\n        return Vector{Int64}\n    elif n == 12:\n        return Vector{Int64}\n    elif n == 13:\n        return Vector{Int64}\n    elif n == 14:\n        return Vector{Int64}\n    elif n == 15:\n        return Vector{Int64}\n    elif n == 16:\n        return Vector{Int64}\n    elif n == 17:\n        return Vector{Int64}\n    elif n == 18:\n        return Vector{Int64}\n    elif n == 19:\n        return Vector{Int64}\n    elif n == 20:\n        return Vector{Int64}\n    elif n == 21:\n        return Vector{Int64}\n    elif n == 22:\n        return Vector{Int64}\n    elif n == 23:\n        return Vector{Int64}\n    elif n == 24:\n        return Vector{Int64}\n    elif n == 25:\n        return Vector{Int64}\n    elif n == 26:\n        return Vector{Int64}\n    elif n == 27:\n        return Vector{Int64}\n    elif n == 28:\n        return Vector{Int64}\n    elif n == 29:\n        return Vector{Int64}\n    elif n == 30:\n        return Vector{Int64}\n    elif n == 31:\n        return Vector{Int64}\n    elif n == 32:\n        return Vector{Int64}\n    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpalsw7v78.jl:13\nin expression starting at /tmp/tmpalsw7v78.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqix3yjck.jl:13\nin expression starting at /tmp/tmpqix3yjck.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = append(factors, i)\n            factors = append(factors, n / i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0hnaqtcx.jl:13\nin expression starting at /tmp/tmp0hnaqtcx.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbrnoa02j.jl:13\nin expression starting at /tmp/tmpbrnoa02j.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors + Vector{Int64}(n)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp6zvunw6.jl:13\nin expression starting at /tmp/tmpp6zvunw6.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    factors = factors + Vector{Int64}(n)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7_5rj61f.jl:13\nin expression starting at /tmp/tmp7_5rj61f.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = factorize(n / 2)\n        return Vector{Int64}[factors[0] * 2, factors[1]]\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcz6bokn3.jl:13\nin expression starting at /tmp/tmpcz6bokn3.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n+1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprhvha8s1.jl:13\nin expression starting at /tmp/tmprhvha8s1.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = append(factors, i)\n            factors = append(factors, n / i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0hnaqtcx.jl:13\nin expression starting at /tmp/tmp0hnaqtcx.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 2:\n        return Vector{Int64}[2]\n    elif n == 3:\n        return Vector{Int64}[3]\n    elif n == 4:\n        return Vector{Int64}[2, 2]\n    elif n == 5:\n        return Vector{Int64}[5]\n    elif n == 6:\n        return Vector{Int64}[3, 2]\n    elif n == 7:\n        return Vector{Int64}[7]\n    elif n == 8:\n        return Vector{Int64}[2, 2, 2]\n    elif n == 9:\n        return Vector{Int64}[3, 3]\n    elif n == 10:\n        return Vector{Int64}[5, 2]\n    elif n == 11:\n        return Vector{Int64}[11]\n    elif n == 12:\n        return Vector{Int64}[2, 2, 2, 2]\n    elif n == 13:\n        return Vector{Int64}[13]\n    elif n == 14:\n        return Vector{Int64}[7, 2]\n    elif n == 15:\n        return Vector{Int64}[3, 5]\n    elif n == 16:\n        return Vector{Int64}[2, 2, 2, 2, 2]\n    elif n == 17:\n        return Vector{Int64}[17]\n    elif n == 18:\n        return Vector{Int64}[3, 3, 2]\n    elif n == 19:\n        return Vector{Int64}[19]\n    elif n == 20:\n        return Vector{Int64}[2, 2, 2, 2, 2, 2]\n    elif n == 21:\n        return Vector{Int64}[3, 7]\n    elif n == 22:\n        return Vector{Int64}[11, 2]\n    elif n == 23:\n        return Vector{Int64}[23]\n    elif n == 24:\n        return Vector{Int64}[2, 2, 2, 2, 2, 2,\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplxdjb70z.jl:13\nin expression starting at /tmp/tmplxdjb70z.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n+1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprhvha8s1.jl:13\nin expression starting at /tmp/tmprhvha8s1.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbrnoa02j.jl:13\nin expression starting at /tmp/tmpbrnoa02j.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i) * factorize(n / i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo68wfs9n.jl:13\nin expression starting at /tmp/tmpo68wfs9n.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n+1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprhvha8s1.jl:13\nin expression starting at /tmp/tmprhvha8s1.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector[Int64]()\n    elif n == 0:\n        return Vector[Int64]([0])\n    else:\n        return Vector[Int64]([n, factorize(n % 2), factorize(n % 3), factorize(n % 5), factorize(n % 7)])\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5q0n57jx.jl:13\nin expression starting at /tmp/tmp5q0n57jx.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors + Vector{Int64}(n)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp6zvunw6.jl:13\nin expression starting at /tmp/tmpp6zvunw6.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector[Int64]()\n    factors = Vector[Int64]()\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n / i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa17hy2sj.jl:13\nin expression starting at /tmp/tmpa17hy2sj.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbrnoa02j.jl:13\nin expression starting at /tmp/tmpbrnoa02j.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector[Int64]()\n    factors = Vector[Int64]()\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector[Int64](i)\n            n = n / i\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7zw5c4qy.jl:13\nin expression starting at /tmp/tmp7zw5c4qy.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbrnoa02j.jl:13\nin expression starting at /tmp/tmpbrnoa02j.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + [i] * factorize(n / i)\n            break\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpytnl1m93.jl:13\nin expression starting at /tmp/tmpytnl1m93.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7qxwg77c.jl:13\nin expression starting at /tmp/tmp7qxwg77c.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3fpjlmd4.jl:13\nin expression starting at /tmp/tmp3fpjlmd4.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(1, i)\n            n = n / i\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv99vb8fu.jl:13\nin expression starting at /tmp/tmpv99vb8fu.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    if n == 0:\n        return Vector{Int64}[0]\n    if n == 2:\n        return Vector{Int64}[2]\n    if n == 3:\n        return Vector{Int64}[3]\n    if n % 2 == 0:\n        return factorize(n / 2) * 2\n    if n % 3 == 0:\n        return factorize(n / 3) * 3\n    return factorize(n / 5) * 5\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp65os6lux.jl:13\nin expression starting at /tmp/tmp65os6lux.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n / 2) + factorize(n / 3) + factorize(n / 5) + factorize(n / 7)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf93paj0z.jl:13\nin expression starting at /tmp/tmpf93paj0z.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    elif n == 3:\n        return Vector{Int64}\n    elif n == 4:\n        return Vector{Int64}\n    elif n == 5:\n        return Vector{Int64}\n    elif n == 6:\n        return Vector{Int64}\n    elif n == 7:\n        return Vector{Int64}\n    elif n == 8:\n        return Vector{Int64}\n    elif n == 9:\n        return Vector{Int64}\n    elif n == 10:\n        return Vector{Int64}\n    elif n == 11:\n        return Vector{Int64}\n    elif n == 12:\n        return Vector{Int64}\n    elif n == 13:\n        return Vector{Int64}\n    elif n == 14:\n        return Vector{Int64}\n    elif n == 15:\n        return Vector{Int64}\n    elif n == 16:\n        return Vector{Int64}\n    elif n == 17:\n        return Vector{Int64}\n    elif n == 18:\n        return Vector{Int64}\n    elif n == 19:\n        return Vector{Int64}\n    elif n == 20:\n        return Vector{Int64}\n    elif n == 21:\n        return Vector{Int64}\n    elif n == 22:\n        return Vector{Int64}\n    elif n == 23:\n        return Vector{Int64}\n    elif n == 24:\n        return Vector{Int64}\n    elif n == 25:\n        return Vector{Int64}\n    elif n == 26:\n        return Vector{Int64}\n    elif n == 27:\n        return Vector{Int64}\n    elif n == 28:\n        return Vector{Int64}\n    elif n == 29:\n        return Vector{Int64}\n    elif n == 30:\n        return Vector{Int64}\n    elif n == 31:\n        return Vector{Int64}\n    elif n == 32:\n        return Vector{Int64}\n    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpalsw7v78.jl:13\nin expression starting at /tmp/tmpalsw7v78.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqix3yjck.jl:13\nin expression starting at /tmp/tmpqix3yjck.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors + Vector{Int64}(n)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp6zvunw6.jl:13\nin expression starting at /tmp/tmpp6zvunw6.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector[Int64]()\n    elif n == 0:\n        return Vector[Int64]([0])\n    else:\n        factors = Vector[Int64]([])\n        for i in range(2, n+1):\n            if n % i == 0:\n                factors = factors + factorize(n / i)\n        return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwecrlbub.jl:13\nin expression starting at /tmp/tmpwecrlbub.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3fpjlmd4.jl:13\nin expression starting at /tmp/tmp3fpjlmd4.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 2:\n        return Vector{Int64}[2]\n    elif n == 3:\n        return Vector{Int64}[3]\n    elif n == 4:\n        return Vector{Int64}[2, 2]\n    elif n % 2 == 0:\n        return factorize(n / 2) * 2\n    else:\n        return factorize(3 * (n - 1) + 1)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpewfeu91w.jl:13\nin expression starting at /tmp/tmpewfeu91w.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i) * factorize(n / i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpitjek8th.jl:13\nin expression starting at /tmp/tmpitjek8th.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5duayfii.jl:13\nin expression starting at /tmp/tmp5duayfii.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpehmrvau0.jl:13\nin expression starting at /tmp/tmpehmrvau0.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = append(factors, i)\n            factors = append(factors, n / i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0hnaqtcx.jl:13\nin expression starting at /tmp/tmp0hnaqtcx.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    else:\n        return Vector{Int64}.append(factorize(n / 2))\n        .append(factorize(n / 3))\n        .append(factorize(n / 5))\n        .append(factorize(n / 7))\n        .append(factorize(n / 11))\n        .append(factorize(n / 13))\n        .append(factorize(n / 17))\n        .append(factorize(n / 19))\n        .append(factorize(n / 23))\n        .append(factorize(n / 29))\n        .append(factorize(n / 31))\n        .append(factorize(n / 37))\n        .append(factorize(n / 41))\n        .append(factorize(n / 43))\n        .append(factorize(n / 47))\n        .append(factorize(n / 53))\n        .append(factorize(n / 59))\n        .append(factorize(n / 61))\n        .append(factorize(n / 67))\n        .append(factorize(n / 71))\n        .append(factorize(n / 73))\n        .append(factorize(n / 79))\n        .append(factorize(n / 83))\n        .append(factorize(n / 89))\n        .append(factorize(n / 97))\n        .append(factorize(n / 101))\n        .append(factorize(n / 103))\n        .append(factorize(n / 107))\n        .append(factorize(n / 109))\n        .append(factorize(n / 113))\n        .append(factorize(n / 127))\n        .append(factorize(n / 131))\n        .append(factorize(n / 137))\n        .append(factorize(n / 139))\n        .append(factorize(n / 149))\n        .append(factorize(n / 151))\n        .append(factorize(n / 157))\n        .append(factorize(n / 163))\n        .append(factorize(n / 167))\n        .append(factorize(n / 173))\n        .append(factorize(n\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6r2qyquo.jl:13\nin expression starting at /tmp/tmp6r2qyquo.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector[Int64]()\n    elif n == 2:\n        return Vector[Int64]([2])\n    elif n == 3:\n        return Vector[Int64]([3])\n    elif n % 2 == 0:\n        return factorize(n / 2) + factorize(n / 2)\n    else:\n        return factorize(n - 1) + Vector[Int64]([n])\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp91fyrp9n.jl:13\nin expression starting at /tmp/tmp91fyrp9n.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbrnoa02j.jl:13\nin expression starting at /tmp/tmpbrnoa02j.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n+1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprhvha8s1.jl:13\nin expression starting at /tmp/tmprhvha8s1.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector[Int64]()\n    elif n == 0:\n        return Vector[Int64]()\n    else:\n        factors = Vector[Int64]()\n        for i in range(2, n+1):\n            if n % i == 0:\n                factors.append(i)\n                factors.append(n/i)\n        return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjcdiaokb.jl:13\nin expression starting at /tmp/tmpjcdiaokb.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return (factorize(n // 2) * 2) + (factorize(n % 2) * 1)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9csm7ftb.jl:13\nin expression starting at /tmp/tmp9csm7ftb.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbrnoa02j.jl:13\nin expression starting at /tmp/tmpbrnoa02j.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n / i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr2p_tfm2.jl:13\nin expression starting at /tmp/tmpr2p_tfm2.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = append(factors, i)\n            factors = append(factors, n/i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpril9_3r0.jl:13\nin expression starting at /tmp/tmpril9_3r0.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3fpjlmd4.jl:13\nin expression starting at /tmp/tmp3fpjlmd4.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n / i)\n            break\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphlapznjy.jl:13\nin expression starting at /tmp/tmphlapznjy.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n / i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr2p_tfm2.jl:13\nin expression starting at /tmp/tmpr2p_tfm2.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    if n == 0:\n        return Vector{Int64}[0]\n    factors = Vector{Int64}[0]\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}[i] * factorize(n / i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpohp3sv9b.jl:13\nin expression starting at /tmp/tmpohp3sv9b.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8ag2cpzc.jl:13\nin expression starting at /tmp/tmp8ag2cpzc.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return (factorize(n / 2) + factorize(n / 3) + factorize(n / 5) + factorize(n / 7) + factorize(n / 11) + factorize(n / 13) + factorize(n / 17) + factorize(n / 19) + factorize(n / 23) + factorize(n / 29) + factorize(n / 31) + factorize(n / 37) + factorize(n / 41) + factorize(n / 43) + factorize(n / 47) + factorize(n / 53) + factorize(n / 59) + factorize(n / 61) + factorize(n / 67) + factorize(n / 71) + factorize(n / 73) + factorize(n / 79) + factorize(n / 83) + factorize(n / 89) + factorize(n / 97) + factorize(n / 101) + factorize(n / 103) + factorize(n / 107) + factorize(n / 109) + factorize(n / 113) + factorize(n / 127) + factorize(n / 131) + factorize(n / 137) + factorize(n / 139) + factorize(n / 149) + factorize(n / 151) + factorize(n / 157) + factorize(n / 163) + factorize(n / 167) + factorize(n / 173) + factorize(n / 179) + factorize(n / 181) + factorize(n / 191) + factorize(n / 193) + factorize(n / 197) + factorize(n / 199) + factorize(n / 211) + factorize(n / 223) + factorize(n / 227) + factorize(n / 229) + factorize(n / 233) + factorize(n / 239) + factorize(n / 241) + factorize(n / 251) + factorize(n / 257) + factorize(n / 263) + factorize(n / 269) + factorize(n / 271) + factorize(n / 277) + factorize(n / 281) + factorize(n / 283)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzrdsqtr6.jl:13\nin expression starting at /tmp/tmpzrdsqtr6.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i) * factorize(n / i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpitjek8th.jl:13\nin expression starting at /tmp/tmpitjek8th.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector[Int64]()\n    factors = Vector[Int64]()\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector[Int64]([i, n//i])\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi9kr7x0w.jl:13\nin expression starting at /tmp/tmpi9kr7x0w.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5duayfii.jl:13\nin expression starting at /tmp/tmp5duayfii.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3fpjlmd4.jl:13\nin expression starting at /tmp/tmp3fpjlmd4.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return (factorize(n // 2) + factorize(n % 2))\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp43ay416n.jl:13\nin expression starting at /tmp/tmp43ay416n.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n / 2) + factorize(n / 3) + factorize(n / 5) + factorize(n / 7) + factorize(n / 11) + factorize(n / 13) + factorize(n / 17) + factorize(n / 19) + factorize(n / 23) + factorize(n / 29) + factorize(n / 31) + factorize(n / 37) + factorize(n / 41) + factorize(n / 43) + factorize(n / 47) + factorize(n / 53) + factorize(n / 59) + factorize(n / 61) + factorize(n / 67) + factorize(n / 71) + factorize(n / 73) + factorize(n / 79) + factorize(n / 83) + factorize(n / 89) + factorize(n / 97) + factorize(n / 101) + factorize(n / 103) + factorize(n / 107) + factorize(n / 109) + factorize(n / 113) + factorize(n / 127) + factorize(n / 131) + factorize(n / 137) + factorize(n / 139) + factorize(n / 149) + factorize(n / 151) + factorize(n / 157) + factorize(n / 163) + factorize(n / 167) + factorize(n / 173) + factorize(n / 179) + factorize(n / 181) + factorize(n / 191) + factorize(n / 193) + factorize(n / 197) + factorize(n / 199) + factorize(n / 211) + factorize(n / 223) + factorize(n / 227) + factorize(n / 229) + factorize(n / 233) + factorize(n / 239) + factorize(n / 241) + factorize(n / 251) + factorize(n / 257) + factorize(n / 263) + factorize(n / 269) + factorize(n\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98kyp2oe.jl:13\nin expression starting at /tmp/tmp98kyp2oe.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpehmrvau0.jl:13\nin expression starting at /tmp/tmpehmrvau0.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    if n == 0:\n        return Vector{Int64}[0]\n    if n == 2:\n        return Vector{Int64}[2]\n    if n % 2 == 0:\n        return factorize(n / 2) * 2\n    if n % 3 == 0:\n        return factorize(n / 3) * 3\n    if n % 5 == 0:\n        return factorize(n / 5) * 5\n    if n % 7 == 0:\n        return factorize(n / 7) * 7\n    return factorize(n)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwcm_oc85.jl:13\nin expression starting at /tmp/tmpwcm_oc85.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(n):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdvdv7cy0.jl:13\nin expression starting at /tmp/tmpdvdv7cy0.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 2:\n        return Vector{Int64}[2]\n    elif n == 3:\n        return Vector{Int64}[3]\n    elif n % 2 == 0:\n        return factorize(n / 2) * 2\n    else:\n        return factorize(n) * (n - 1)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpprhykp2c.jl:13\nin expression starting at /tmp/tmpprhykp2c.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i) * factorize(n / i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpitjek8th.jl:13\nin expression starting at /tmp/tmpitjek8th.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(1, i)\n            n = n / i\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv99vb8fu.jl:13\nin expression starting at /tmp/tmpv99vb8fu.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    if n == 2:\n        return Vector{Int64}[2]\n    if n == 3:\n        return Vector{Int64}[3]\n    if n == 4:\n        return Vector{Int64}[2, 2]\n    if n == 5:\n        return Vector{Int64}[5]\n    if n == 6:\n        return Vector{Int64}[2, 3]\n    if n == 7:\n        return Vector{Int64}[7]\n    if n == 8:\n        return Vector{Int64}[2, 2, 2]\n    if n == 9:\n        return Vector{Int64}[3, 3]\n    if n == 10:\n        return Vector{Int64}[5, 2]\n    if n == 11:\n        return Vector{Int64}[11]\n    if n == 12:\n        return Vector{Int64}[2, 2, 2, 2]\n    if n == 13:\n        return Vector{Int64}[13]\n    if n == 14:\n        return Vector{Int64}[2, 7]\n    if n == 15:\n        return Vector{Int64}[3, 5]\n    if n == 16:\n        return Vector{Int64}[2, 2, 2, 2, 2]\n    if n == 17:\n        return Vector{Int64}[17]\n    if n == 18:\n        return Vector{Int64}[2, 3, 3]\n    if n == 19:\n        return Vector{Int64}[19]\n    if n == 20:\n        return Vector{Int64}[2, 2, 2, 2, 2, 2]\n    if n == 21:\n        return Vector{Int64}[3, 3, 3]\n    if n == 22:\n        return Vector{Int64}[2, 2, 2, 2, 2, 2, 2]\n    if n == 23:\n        return Vector{Int64}[2, 2, 2, 2, 2, 2, 2, 2]\n    if n == 24:\n        return Vector{Int64}[2, 2, 2, 2, 2\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsn9l_wsw.jl:13\nin expression starting at /tmp/tmpsn9l_wsw.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqix3yjck.jl:13\nin expression starting at /tmp/tmpqix3yjck.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3fpjlmd4.jl:13\nin expression starting at /tmp/tmp3fpjlmd4.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = append(factors, i)\n            factors = append(factors, n / i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0hnaqtcx.jl:13\nin expression starting at /tmp/tmp0hnaqtcx.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3fpjlmd4.jl:13\nin expression starting at /tmp/tmp3fpjlmd4.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqix3yjck.jl:13\nin expression starting at /tmp/tmpqix3yjck.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    if n == 0:\n        return Vector{Int64}[0]\n    if n == 2:\n        return Vector{Int64}[2]\n    if n == 3:\n        return Vector{Int64}[1, 1]\n    if n % 2 == 0:\n        return factorize(n / 2) * 2\n    return factorize(n) * (n - 1)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpau0okwvw.jl:13\nin expression starting at /tmp/tmpau0okwvw.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n / 2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps4in8a5p.jl:13\nin expression starting at /tmp/tmps4in8a5p.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return (factorize(n / 2) + factorize(n / 3) + factorize(n / 5) + factorize(n / 7) + factorize(n / 11) + factorize(n / 13) + factorize(n / 17) + factorize(n / 19) + factorize(n / 23) + factorize(n / 29) + factorize(n / 31) + factorize(n / 37) + factorize(n / 41) + factorize(n / 43) + factorize(n / 47) + factorize(n / 53) + factorize(n / 59) + factorize(n / 61) + factorize(n / 67) + factorize(n / 71) + factorize(n / 73) + factorize(n / 79) + factorize(n / 83) + factorize(n / 89) + factorize(n / 97) + factorize(n / 101) + factorize(n / 103) + factorize(n / 107) + factorize(n / 109) + factorize(n / 113) + factorize(n / 127) + factorize(n / 131) + factorize(n / 137) + factorize(n / 139) + factorize(n / 149) + factorize(n / 151) + factorize(n / 157) + factorize(n / 163) + factorize(n / 167) + factorize(n / 173) + factorize(n / 179) + factorize(n / 181) + factorize(n / 191) + factorize(n / 193) + factorize(n / 197) + factorize(n / 199) + factorize(n / 211) + factorize(n / 223) + factorize(n / 227) + factorize(n / 229) + factorize(n / 233) + factorize(n / 239) + factorize(n / 241) + factorize(n / 251) + factorize(n / 257) + factorize(n / 263) + factorize(n / 269) + factorize(n / 271) + factorize(n / 277) + factorize(n / 281) + factorize(n / 283)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzrdsqtr6.jl:13\nin expression starting at /tmp/tmpzrdsqtr6.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqix3yjck.jl:13\nin expression starting at /tmp/tmpqix3yjck.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfwwz2u1m.jl:13\nin expression starting at /tmp/tmpfwwz2u1m.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n+1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprhvha8s1.jl:13\nin expression starting at /tmp/tmprhvha8s1.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = append(factors, i)\n            factors = append(factors, n/i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpril9_3r0.jl:13\nin expression starting at /tmp/tmpril9_3r0.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector[Int64]()\n    elif n == 0:\n        return Vector[Int64]()\n    else:\n        factors = Vector[Int64]()\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors = factors + Vector[Int64](i)\n                n = n / i\n        return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp92s8ejm5.jl:13\nin expression starting at /tmp/tmp92s8ejm5.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector[Int64]()\n    elif n == 2:\n        return Vector[Int64](2)\n    elif n == 3:\n        return Vector[Int64](3)\n    elif n % 2 == 0:\n        return factorize(n / 2) + factorize(n / 2)\n    else:\n        return factorize(n - 1) + factorize(n - 1)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp942_yr3i.jl:13\nin expression starting at /tmp/tmp942_yr3i.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqix3yjck.jl:13\nin expression starting at /tmp/tmpqix3yjck.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = factorize(n/2)\n        return factors * factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkvc28z9j.jl:13\nin expression starting at /tmp/tmpkvc28z9j.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[1] * (n / i)\n        return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx9vk1tmy.jl:13\nin expression starting at /tmp/tmpx9vk1tmy.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 2:\n        return Vector{Int64}[2]\n    elif n == 3:\n        return Vector{Int64}[1, 2]\n    elif n % 2 == 0:\n        return factorize(n / 2) * 2\n    else:\n        return factorize(3 * (n - 1) + 1)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphl_p9s2v.jl:13\nin expression starting at /tmp/tmphl_p9s2v.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector[Int64]{1}\n    else:\n        factors = Vector[Int64]{}\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors = append(factors, i)\n                factors = append(factors, n / i)\n        return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpve2g3_f6.jl:13\nin expression starting at /tmp/tmpve2g3_f6.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8ag2cpzc.jl:13\nin expression starting at /tmp/tmp8ag2cpzc.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    elif n == 0:\n        return Vector{Int64}\n    else:\n        return Vector{Int64}.append(n)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzbi1dfag.jl:13\nin expression starting at /tmp/tmpzbi1dfag.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3fpjlmd4.jl:13\nin expression starting at /tmp/tmp3fpjlmd4.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbrnoa02j.jl:13\nin expression starting at /tmp/tmpbrnoa02j.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n / i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292915,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphggtn8bo.jl:13\nin expression starting at /tmp/tmphggtn8bo.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n / 2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps4in8a5p.jl:13\nin expression starting at /tmp/tmps4in8a5p.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 2:\n        return Vector{Int64}[2]\n    elif n == 3:\n        return Vector{Int64}[3]\n    elif n == 4:\n        return Vector{Int64}[2, 2]\n    elif n == 5:\n        return Vector{Int64}[5]\n    elif n == 6:\n        return Vector{Int64}[2, 3]\n    elif n == 7:\n        return Vector{Int64}[7]\n    elif n == 8:\n        return Vector{Int64}[2, 2, 2]\n    elif n == 9:\n        return Vector{Int64}[3, 3]\n    elif n == 10:\n        return Vector{Int64}[5, 2]\n    elif n == 11:\n        return Vector{Int64}[11]\n    elif n == 12:\n        return Vector{Int64}[2, 2, 2, 2]\n    elif n == 13:\n        return Vector{Int64}[13]\n    elif n == 14:\n        return Vector{Int64}[2, 7]\n    elif n == 15:\n        return Vector{Int64}[3, 5]\n    elif n == 16:\n        return Vector{Int64}[2, 2, 2, 2, 2]\n    elif n == 17:\n        return Vector{Int64}[17]\n    elif n == 18:\n        return Vector{Int64}[2, 3, 3]\n    elif n == 19:\n        return Vector{Int64}[19]\n    elif n == 20:\n        return Vector{Int64}[2, 2, 2, 2, 2, 2]\n    elif n == 21:\n        return Vector{Int64}[3, 3, 3]\n    elif n == 22:\n        return Vector{Int64}[2, 2, 2, 2, 2, 2, 2]\n    elif n == 23:\n        return Vector{Int64}[2, 2, 2, 2, 2, 2, 2, 2]\n    el\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292915,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi35xa56l.jl:13\nin expression starting at /tmp/tmpi35xa56l.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    elif n == 0:\n        return Vector{Int64}\n    else:\n        return Vector{Int64}.append(factorize(n / 2))\n        .append(factorize(n / 3))\n        .append(factorize(n / 5))\n        .append(factorize(n / 7))\n        .append(factorize(n / 11))\n        .append(factorize(n / 13))\n        .append(factorize(n / 17))\n        .append(factorize(n / 19))\n        .append(factorize(n / 23))\n        .append(factorize(n / 29))\n        .append(factorize(n / 31))\n        .append(factorize(n / 37))\n        .append(factorize(n / 41))\n        .append(factorize(n / 43))\n        .append(factorize(n / 47))\n        .append(factorize(n / 53))\n        .append(factorize(n / 59))\n        .append(factorize(n / 61))\n        .append(factorize(n / 67))\n        .append(factorize(n / 71))\n        .append(factorize(n / 73))\n        .append(factorize(n / 79))\n        .append(factorize(n / 83))\n        .append(factorize(n / 89))\n        .append(factorize(n / 97))\n        .append(factorize(n / 101))\n        .append(factorize(n / 103))\n        .append(factorize(n / 107))\n        .append(factorize(n / 109))\n        .append(factorize(n / 113))\n        .append(factorize(n / 127))\n        .append(factorize(n / 131))\n        .append(factorize(n / 137))\n        .append(factorize(n / 139))\n        .append(factorize(n / 149))\n        .append(factorize(n / 151))\n        .append(factorize(n / 157))\n        .append(factorize(n / 163))\n        .append(factorize(n / 167))\n        .append(\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292915,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpis_qgald.jl:13\nin expression starting at /tmp/tmpis_qgald.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3fpjlmd4.jl:13\nin expression starting at /tmp/tmp3fpjlmd4.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbrnoa02j.jl:13\nin expression starting at /tmp/tmpbrnoa02j.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbrnoa02j.jl:13\nin expression starting at /tmp/tmpbrnoa02j.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector[Int64]()\n    elif n == 2:\n        return Vector[Int64](2)\n    elif n == 3:\n        return Vector[Int64](3)\n    elif n % 2 == 0:\n        return factorize(n / 2) + factorize(n / 2)\n    else:\n        return factorize(n - 1) + factorize(n - 1)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp942_yr3i.jl:13\nin expression starting at /tmp/tmp942_yr3i.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbrnoa02j.jl:13\nin expression starting at /tmp/tmpbrnoa02j.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8ag2cpzc.jl:13\nin expression starting at /tmp/tmp8ag2cpzc.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8ag2cpzc.jl:13\nin expression starting at /tmp/tmp8ag2cpzc.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3fpjlmd4.jl:13\nin expression starting at /tmp/tmp3fpjlmd4.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = factorize(n / 2)\n        return Vector{Int64}[factors[0] * 2, factors[1]]\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcz6bokn3.jl:13\nin expression starting at /tmp/tmpcz6bokn3.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbrnoa02j.jl:13\nin expression starting at /tmp/tmpbrnoa02j.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpapqea40n.jl:13\nin expression starting at /tmp/tmpapqea40n.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3fpjlmd4.jl:13\nin expression starting at /tmp/tmp3fpjlmd4.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector[Int64]()\n    elif n == 2:\n        return Vector[Int64](2)\n    elif n == 3:\n        return Vector[Int64](3)\n    elif n % 2 == 0:\n        return factorize(n / 2) * 2\n    else:\n        return factorize(n - 1) + Vector[Int64](1)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292915,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz4cjqhip.jl:13\nin expression starting at /tmp/tmpz4cjqhip.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + [i] * factorize(n / i)\n            break\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpytnl1m93.jl:13\nin expression starting at /tmp/tmpytnl1m93.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = append(factors, i)\n            factors = append(factors, n // i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292915,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp67583fy3.jl:13\nin expression starting at /tmp/tmp67583fy3.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n / i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292915,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphggtn8bo.jl:13\nin expression starting at /tmp/tmphggtn8bo.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n / 2) + factorize(n / 3) + factorize(n / 5) + factorize(n / 7) + factorize(n / 11) + factorize(n / 13) + factorize(n / 17) + factorize(n / 19) + factorize(n / 23) + factorize(n / 29) + factorize(n / 31) + factorize(n / 37) + factorize(n / 41) + factorize(n / 43) + factorize(n / 47) + factorize(n / 53) + factorize(n / 59) + factorize(n / 61) + factorize(n / 67) + factorize(n / 71) + factorize(n / 73) + factorize(n / 79) + factorize(n / 83) + factorize(n / 89) + factorize(n / 97) + factorize(n / 101) + factorize(n / 103) + factorize(n / 107) + factorize(n / 109) + factorize(n / 113) + factorize(n / 127) + factorize(n / 131) + factorize(n / 137) + factorize(n / 139) + factorize(n / 149) + factorize(n / 151) + factorize(n / 157) + factorize(n / 163) + factorize(n / 167) + factorize(n / 173) + factorize(n / 179) + factorize(n / 181) + factorize(n / 191) + factorize(n / 193) + factorize(n / 197) + factorize(n / 199) + factorize(n / 211) + factorize(n / 223) + factorize(n / 227) + factorize(n / 229) + factorize(n / 233) + factorize(n / 239) + factorize(n / 241) + factorize(n / 251) + factorize(n / 257) + factorize(n / 263) + factorize(n / 269) + factorize(n / 271) + factorize(n / 277) + factorize(n / 281)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmponf6ud0p.jl:13\nin expression starting at /tmp/tmponf6ud0p.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector[Int64]()\n    elif n == 2:\n        return Vector[Int64]([2])\n    elif n == 3:\n        return Vector[Int64]([3])\n    elif n % 2 == 0:\n        return factorize(n / 2) + factorize(n / 2)\n    else:\n        return factorize(n / 2) + factorize(n / 3)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292915,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsvhjq37r.jl:13\nin expression starting at /tmp/tmpsvhjq37r.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector[Int64]()\n    elif n == 2:\n        return Vector[Int64](2)\n    elif n == 3:\n        return Vector[Int64](3)\n    elif n == 4:\n        return Vector[Int64](2, 2)\n    elif n == 5:\n        return Vector[Int64](5)\n    elif n == 6:\n        return Vector[Int64](2, 3)\n    elif n == 7:\n        return Vector[Int64](7)\n    elif n == 8:\n        return Vector[Int64](2, 2, 2)\n    elif n == 9:\n        return Vector[Int64](3, 3)\n    elif n == 10:\n        return Vector[Int64](5, 2)\n    elif n == 11:\n        return Vector[Int64](11)\n    elif n == 12:\n        return Vector[Int64](2, 2, 2, 2)\n    elif n == 13:\n        return Vector[Int64](13)\n    elif n == 14:\n        return Vector[Int64](2, 7)\n    elif n == 15:\n        return Vector[Int64](3, 5)\n    elif n == 16:\n        return Vector[Int64](2, 2, 2, 2, 2)\n    elif n == 17:\n        return Vector[Int64](17)\n    elif n == 18:\n        return Vector[Int64](2, 3, 3)\n    elif n == 19:\n        return Vector[Int64](19)\n    elif n == 20:\n        return Vector[Int64](2, 2, 2, 2, 2, 2)\n    elif n == 21:\n        return Vector[Int64](3, 3, 3)\n    elif n == 22:\n        return Vector[Int64](2, 7, 2)\n    elif n == 23:\n        return Vector[Int64](2, 2, 2, 2, 2, 2)\n    elif n == 24:\n        return Vector[Int64](2, 2, 2, 2, 2, 2, 2)\n    elif n == 25:\n\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292915,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu1598vdv.jl:13\nin expression starting at /tmp/tmpu1598vdv.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3fpjlmd4.jl:13\nin expression starting at /tmp/tmp3fpjlmd4.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i) * factorize(n / i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpitjek8th.jl:13\nin expression starting at /tmp/tmpitjek8th.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    if n == 0:\n        return Vector{Int64}[0]\n    factors = Vector{Int64}[0]\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}[i]\n            n = n / i\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292915,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjw65qn1v.jl:13\nin expression starting at /tmp/tmpjw65qn1v.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqix3yjck.jl:13\nin expression starting at /tmp/tmpqix3yjck.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7qxwg77c.jl:13\nin expression starting at /tmp/tmp7qxwg77c.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqix3yjck.jl:13\nin expression starting at /tmp/tmpqix3yjck.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbrnoa02j.jl:13\nin expression starting at /tmp/tmpbrnoa02j.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = factorize(n / 2)\n        return Vector{Int64}[factors[0] * 2, factors[1]]\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcz6bokn3.jl:13\nin expression starting at /tmp/tmpcz6bokn3.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n+1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprhvha8s1.jl:13\nin expression starting at /tmp/tmprhvha8s1.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292915,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmjh6bug3.jl:13\nin expression starting at /tmp/tmpmjh6bug3.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3fpjlmd4.jl:13\nin expression starting at /tmp/tmp3fpjlmd4.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + [i] * factorize(n / i)\n            break\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292915,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps9oxiz3i.jl:13\nin expression starting at /tmp/tmps9oxiz3i.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8ag2cpzc.jl:13\nin expression starting at /tmp/tmp8ag2cpzc.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    if n == 0:\n        return Vector{Int64}[0]\n    if n == 2:\n        return Vector{Int64}[2]\n    if n == 3:\n        return Vector{Int64}[1, 1]\n    if n == 4:\n        return Vector{Int64}[2, 1]\n    if n == 5:\n        return Vector{Int64}[1, 2]\n    if n == 6:\n        return Vector{Int64}[2, 2]\n    if n == 7:\n        return Vector{Int64}[1, 1, 1]\n    if n == 8:\n        return Vector{Int64}[2, 1, 1]\n    if n == 9:\n        return Vector{Int64}[1, 2, 1]\n    if n == 10:\n        return Vector{Int64}[2, 2, 1]\n    if n == 11:\n        return Vector{Int64}[1, 1, 2]\n    if n == 12:\n        return Vector{Int64}[2, 1, 2]\n    if n == 13:\n        return Vector{Int64}[1, 2, 2]\n    if n == 14:\n        return Vector{Int64}[2, 2, 2]\n    if n == 15:\n        return Vector{Int64}[1, 1, 1, 1]\n    if n == 16:\n        return Vector{Int64}[2, 1, 1, 1]\n    if n == 17:\n        return Vector{Int64}[1, 2, 1, 1]\n    if n == 18:\n        return Vector{Int64}[2, 2, 1, 1]\n    if n == 19:\n        return Vector{Int64}[1, 1, 2, 1]\n    if n == 20:\n        return Vector{Int64}[2, 1, 2, 1]\n    if n == 21:\n        return Vector{Int64}[1, 2, 2, 1]\n    if n == 22:\n        return Vector{Int64}[2, 2, 2, 1]\n    if n == 23:\n        return Vector\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292915,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe7uidrfz.jl:13\nin expression starting at /tmp/tmpe7uidrfz.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i) * factorize(n / i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpitjek8th.jl:13\nin expression starting at /tmp/tmpitjek8th.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqix3yjck.jl:13\nin expression starting at /tmp/tmpqix3yjck.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(1, i)\n            n = n / i\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv99vb8fu.jl:13\nin expression starting at /tmp/tmpv99vb8fu.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    elif n == 3:\n        return Vector{Int64}\n    elif n == 4:\n        return Vector{Int64}\n    elif n == 5:\n        return Vector{Int64}\n    elif n == 6:\n        return Vector{Int64}\n    elif n == 7:\n        return Vector{Int64}\n    elif n == 8:\n        return Vector{Int64}\n    elif n == 9:\n        return Vector{Int64}\n    elif n == 10:\n        return Vector{Int64}\n    elif n == 11:\n        return Vector{Int64}\n    elif n == 12:\n        return Vector{Int64}\n    elif n == 13:\n        return Vector{Int64}\n    elif n == 14:\n        return Vector{Int64}\n    elif n == 15:\n        return Vector{Int64}\n    elif n == 16:\n        return Vector{Int64}\n    elif n == 17:\n        return Vector{Int64}\n    elif n == 18:\n        return Vector{Int64}\n    elif n == 19:\n        return Vector{Int64}\n    elif n == 20:\n        return Vector{Int64}\n    elif n == 21:\n        return Vector{Int64}\n    elif n == 22:\n        return Vector{Int64}\n    elif n == 23:\n        return Vector{Int64}\n    elif n == 24:\n        return Vector{Int64}\n    elif n == 25:\n        return Vector{Int64}\n    elif n == 26:\n        return Vector{Int64}\n    elif n == 27:\n        return Vector{Int64}\n    elif n == 28:\n        return Vector{Int64}\n    elif n == 29:\n        return Vector{Int64}\n    elif n == 30:\n        return Vector{Int64}\n    elif n == 31:\n        return Vector{Int64}\n    elif n == 32:\n        return Vector{Int64}\n    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpalsw7v78.jl:13\nin expression starting at /tmp/tmpalsw7v78.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    elif n == 3:\n        return Vector{Int64}\n    elif n == 4:\n        return Vector{Int64}\n    elif n == 5:\n        return Vector{Int64}\n    elif n == 6:\n        return Vector{Int64}\n    elif n == 7:\n        return Vector{Int64}\n    elif n == 8:\n        return Vector{Int64}\n    elif n == 9:\n        return Vector{Int64}\n    elif n == 10:\n        return Vector{Int64}\n    elif n == 11:\n        return Vector{Int64}\n    elif n == 12:\n        return Vector{Int64}\n    elif n == 13:\n        return Vector{Int64}\n    elif n == 14:\n        return Vector{Int64}\n    elif n == 15:\n        return Vector{Int64}\n    elif n == 16:\n        return Vector{Int64}\n    elif n == 17:\n        return Vector{Int64}\n    elif n == 18:\n        return Vector{Int64}\n    elif n == 19:\n        return Vector{Int64}\n    elif n == 20:\n        return Vector{Int64}\n    elif n == 21:\n        return Vector{Int64}\n    elif n == 22:\n        return Vector{Int64}\n    elif n == 23:\n        return Vector{Int64}\n    elif n == 24:\n        return Vector{Int64}\n    elif n == 25:\n        return Vector{Int64}\n    elif n == 26:\n        return Vector{Int64}\n    elif n == 27:\n        return Vector{Int64}\n    elif n == 28:\n        return Vector{Int64}\n    elif n == 29:\n        return Vector{Int64}\n    elif n == 30:\n        return Vector{Int64}\n    elif n == 31:\n        return Vector{Int64}\n    elif n == 32:\n        return Vector{Int64}\n    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpalsw7v78.jl:13\nin expression starting at /tmp/tmpalsw7v78.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors.append(i)\n            factors = factors.append(n/i)\n    return factors\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292915,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0sy3d7wq.jl:13\nin expression starting at /tmp/tmp0sy3d7wq.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n / 2) + factorize(n / 3) + factorize(n / 5) + factorize(n / 7)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292910,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf93paj0z.jl:13\nin expression starting at /tmp/tmpf93paj0z.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1:\n        return Vector[Int64]()\n    elif n == 2:\n        return Vector[Int64](2)\n    elif n == 3:\n        return Vector[Int64](3)\n    elif n % 2 == 0:\n        return factorize(n / 2) + factorize(n / 2)\n    else:\n        return factorize(n - 1) + factorize(n - 1)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp942_yr3i.jl:13\nin expression starting at /tmp/tmp942_yr3i.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}