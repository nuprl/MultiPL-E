name: HumanEval_57_monotonic
language: jl
prompt: "\"\"\"Return true is vector elements are monotonically increasing or decreasing.\n\
  \    >>> monotonic([1, 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n\
  \    false\n    >>> monotonic([4, 1, 0, -10])\n    true\n    \"\"\"\nfunction monotonic(l::Vector{Int64})::Bool\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
  \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
  \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
  \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
  \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
completions: ['    return l.all(l.is_increasing | l.is_decreasing)', '    return l.all(l.is_increasing
    | l.is_decreasing)', '    return l.all(l.is_increasing(l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(', '    return l.all(l.is_increasing | l.is_decreasing)', '    return all(l[i]
    <= l[i+1] for i in range(len(l)-1))', '    return all(l[i] <= l[i+1] for i in
    range(len(l)-1))', '    return all(l[i] <= l[i+1] for i in range(len(l)-1))',
  '    return all(l[i] <= l[i+1] for i in range(len(l)-1))', '    return l.all(l.is_increasing(l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(', '    return all(l[i] <= l[i+1] for i in range(len(l)-1))',
  '    return l.all(l.is_increasing | l.is_decreasing)', '    return l.all(l.is_increasing
    | l.is_decreasing)', '    return all(l[i] <= l[i+1] for i in range(len(l)-1))',
  '    return l.all(l.is_increasing | l.is_decreasing)', '    return l.all(l.is_increasing(l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(', '    return l.all(l.is_increasing | l.is_decreasing)',
  '    return l.all(l.is_increasing | l.is_decreasing)', '    return l.all(l.is_increasing
    | l.is_decreasing)', '    return l.all(l.is_increasing | l.is_decreasing)', '    return
    all(l[i+1] <= l[i] for i in range(len(l)-1))', '    return all(l[i+1] <= l[i]
    for i in range(len(l)-1))', '    return l.all(l.is_increasing(l.map(l.abs, l.map(l.sign,
    l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign,
    l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign,
    l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign,
    l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign,
    l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign,
    l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign,
    l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign,
    l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign,
    l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign,
    l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign,
    l.map(', '    return l.all(l.is_increasing(l.map(l.abs, l.sort(l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,', '    return
    l.all(l.is_increasing | l.is_decreasing)', '    return all(l[i] <= l[i+1] for
    i in range(len(l)-1))', '    return l.all(l.is_increasing | l.is_decreasing)',
  '    return all(l[i] <= l[i+1] for i in range(len(l)-1))', '    return l.all(l.is_increasing(l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(', '    return l.all(l.is_increasing(l.map(l.abs, l.sort(l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,',
  '    return l.all(l.is_increasing | l.is_decreasing)', '    return all(l[i] <= l[i
    + 1] for i in range(len(l) - 1))', '    return all(l[i] <= l[i+1] for i in range(len(l)-1))',
  '    return all(l[i] <= l[i+1] for i in range(len(l)-1))', '    return l.all(l.is_increasing
    | l.is_decreasing)', '    return all(l[i] <= l[i+1] for i in range(len(l)-1))',
  '    return l.all(l.is_increasing | l.is_decreasing)', '    return l.all(l.is_increasing
    | l.is_decreasing)', '    return l.all(l.is_increasing | l.is_decreasing)', '    return
    l.all(l.is_increasing | l.is_decreasing)', '    return all(l[i] <= l[i+1] for
    i in range(len(l)-1))', '    return l.all(l.is_increasing | l.is_decreasing)',
  '    return l.all(l.is_increasing | l.is_decreasing)', '    return all(l[i] <= l[i+1]
    for i in range(len(l)-1))', '    return l.all(l.is_increasing(l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(', '    return l.all(l.is_increasing | l.is_decreasing)', '    return l.all(l.is_increasing
    | l.is_decreasing)', '    return l.all(l.is_increasing | l.is_decreasing)', '    return
    l.all(l.is_increasing | l.is_decreasing)', '    return all(l[i] <= l[i+1] for
    i in range(len(l)-1))', '    return all(l[i] <= l[i+1] for i in range(len(l)-1))',
  '    return l.all(l.is_increasing | l.is_decreasing)', '    return l.all(l.is_increasing
    | l.is_decreasing)', '    return l.all(l.is_increasing | l.is_decreasing)', '    return
    l.all(l.is_increasing | l.is_decreasing)', '    return l.all(l.is_increasing(l.map(l.abs,
    l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs,
    l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs,
    l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs,
    l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs,
    l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs,
    l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs,
    l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs,
    l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs,
    l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs,
    l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs,
    l.sort(l.map(l.abs,', '    return l.all(l.is_increasing | l.is_decreasing)', '    return
    l.all(l.is_increasing | l.is_decreasing)', '    return l.all(l.is_increasing |
    l.is_decreasing)', '    return l.all(l.is_increasing | l.is_decreasing)', '    return
    all(l[i] <= l[i+1] for i in range(len(l)-1))', '    return l.all(l.is_increasing
    | l.is_decreasing)', '    return l.all(l.is_increasing(l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(', '    return l.all(l.is_increasing | l.is_decreasing)', '    return l.all(l.is_increasing
    | l.is_decreasing)', '    return l.all(l.is_increasing | l.is_decreasing)', '    return
    l.all(l.is_increasing(l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(', '    return l.all(l.is_increasing
    | l.is_decreasing)', "    return all(l[i] <= l[i+1] for i in range(len(l)-1))\n",
  '    return all(l[i] <= l[i+1] for i in range(len(l)-1))', '    return l.all(l.is_increasing
    | l.is_decreasing)', '    return all(l[i] <= l[i+1] for i in range(len(l)-1))',
  '    return l.all(l.is_increasing | l.is_decreasing)', '    return l.all(l.is_increasing(l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(', "    return all(l[i] <= l[i + 1] for i in range(len(l)\
    \ - 1))\n", '    return l.all(l.is_increasing | l.is_decreasing)', '    return
    l.all(l.is_increasing | l.is_decreasing)', '    return l.all(l.is_increasing(l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(', '    return l.all(l.is_increasing(l.map(l.abs, l.map(l.sign,
    l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign,
    l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign,
    l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign,
    l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign,
    l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign,
    l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign,
    l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign,
    l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign,
    l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign,
    l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign,
    l.map(', '    return l.all(l.is_increasing | l.is_decreasing)', "    return all(l[i]\
    \ <= l[i+1] for i in range(len(l)-1))\n", '    return l.all(l.is_increasing |
    l.is_decreasing)', '    return l.all(l.is_increasing(l.map(l.abs, l.map(l.sign,
    l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign,
    l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign,
    l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign,
    l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign,
    l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign,
    l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign,
    l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign,
    l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign,
    l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign,
    l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign,
    l.map(', '    return l.all(l.is_increasing | l.is_decreasing)', '    return all(l[i]
    <= l[i+1] for i in range(len(l)-1))', '    return l.all(l.is_increasing | l.is_decreasing)',
  '    return l.all(l.is_increasing | l.is_decreasing)', '    return all(l[i] <= l[i
    + 1] for i in range(len(l) - 1))', '    return all(l[i] <= l[i+1] for i in range(len(l)-1))',
  '    return l.all(l.is_increasing | l.is_decreasing)', '    return l.all(l.is_increasing
    | l.is_decreasing)', '    return l.all(l.is_increasing | l.is_decreasing)', " \
    \   return all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n", '    return l.all(l.is_increasing
    | l.is_decreasing)', '    return l.all(l.is_increasing | l.is_decreasing)', '    return
    l.all(l.is_increasing(l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(', '    return l.all(l.is_increasing
    | l.is_decreasing)', '    return l.all(l.is_increasing | l.is_decreasing)', '    return
    l.all(l.is_increasing(l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(', '    return l.all(l.is_increasing
    | l.is_decreasing)', '    return l.all(l.is_increasing(l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(', '    return l.all(l.is_increasing | l.is_decreasing)', '    return all(l[i]
    <= l[i+1] for i in range(len(l)-1))', '    return l.all(l.is_increasing(l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(', '    return l.all(l.is_increasing | l.is_decreasing)',
  '    return l.all(l.is_increasing | l.is_decreasing)', '    return l.all(l.is_increasing(l.map(l.abs,
    l.map(l.sign, l.map(l.min, l.map(l.max, l.map(l.abs, l.map(l.sign, l.map(l.min,
    l.map(l.max, l.map(l.abs, l.map(l.sign, l.map(l.min, l.map(l.max, l.map(l.abs,
    l.map(l.sign, l.map(l.min, l.map(l.max, l.map(l.abs, l.map(l.sign, l.map(l.min,
    l.map(l.max, l.map(l.abs, l.map(l.sign, l.map(l.min, l.map(l.max, l.map(l.abs,
    l.map(l.sign, l.map(l.min, l.map(l.max, l.map(l.abs, l.map(l.sign, l.map(l.min,
    l.map(l.max, l.map(l.abs, l.map(l.sign, l.map(l.min, l.map(l.max, l.map(l.abs,
    l.map(l.sign, l.map(l.min, l.map(l.max, l.map(l.abs, l.map(l.sign, l.map(l.min,
    l.map(l.max, l.map(l.abs, l.map(l.sign, l.map(l.min, l.map(l.max, l.map(l.abs,
    l.map(l.sign, l.map(l.min, l.map(l.max, l.map(l.abs, l.map(l.sign, l.map(l.min,
    l.map(l.max, l.map(l.abs, l.map(l.sign, l.map(l.min, l.map(l.max, l.map(l.abs,
    l.map(l.sign, l.map(', '    return l.all(l.is_increasing | l.is_decreasing)',
  '    return l.all(l.is_increasing | l.is_decreasing)', '    return all(l[i] <= l[i+1]
    for i in range(len(l)-1))', '    return all(l[i] <= l[i+1] for i in range(len(l)-1))',
  '    return all(l[i+1] <= l[i] for i in range(len(l)-1))', '    return l.all(l.is_increasing
    | l.is_decreasing)', '    return all(l[i] <= l[i+1] for i in range(len(l)-1))',
  '    return l.all(l.is_increasing | l.is_decreasing)', '    return l.all(l.is_increasing(l.map(l.abs,
    l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs,
    l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs,
    l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs,
    l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs,
    l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs,
    l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs,
    l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs,
    l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs,
    l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs,
    l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs,
    l.map(l.sign, l.map(', '    return l.all(l.is_increasing | l.is_decreasing)',
  '    return all(l[i+1] <= l[i] for i in range(len(l)-1))', '    return l.all(l.is_increasing
    | l.is_decreasing)', '    return all(l[i] <= l[i+1] for i in range(len(l)-1))',
  '    return l.all(l.is_increasing | l.is_decreasing)', '    return l.all(l.is_increasing
    | l.is_decreasing)', '    return l.all(l.is_increasing | l.is_decreasing)', '    return
    l.all(l.is_increasing | l.is_decreasing)', '    return l.all(l.is_increasing |
    l.is_decreasing)', '    return l.all(l.is_increasing | l.is_decreasing)', '    return
    l.all(l.is_increasing(l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(', '    return l.all(l.is_increasing
    | l.is_decreasing)', '    return l.all(l.is_increasing | l.is_decreasing)', '    return
    all(l[i] <= l[i+1] for i in range(len(l)-1))', "    return all(l[i] <= l[i+1]\
    \ for i in range(len(l)-1))\n", '    return l.all(l.is_increasing | l.is_decreasing)',
  '    return l.all(l.is_increasing(l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(', '    return l.all(l.is_increasing(l.map(l.abs,
    l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs,
    l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs,
    l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs,
    l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs,
    l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs,
    l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs,
    l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs,
    l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs,
    l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs,
    l.map(l.sign, l.map(l.sub, l.map(l.abs, l.map(l.sign, l.map(l.sub, l.map(l.abs,
    l.map(l.sign, l.map(', '    return l.all(l.is_increasing | l.is_decreasing)',
  '    return l.all(l.is_increasing(l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(', '    return l.all(l.is_increasing
    | l.is_decreasing)', '    return l.all(l.is_increasing(l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(', '    return l.all(l.is_increasing | l.is_decreasing)', '    return l.all(l.is_increasing(l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(', '    return all(l[i+1] <= l[i] for i in range(len(l)-1))',
  '    return l.all(l.is_increasing(l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(', '    return l.all(l.is_increasing
    | l.is_decreasing)', '    return all(l[i] <= l[i+1] for i in range(len(l)-1))',
  '    return l.all(l.is_increasing | l.is_decreasing)', '    return l.all(l.is_increasing(l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(', '    return all(l[i] <= l[i+1] for i in range(len(l)-1))',
  '    return l.all(l.is_increasing(l.map(l.abs, l.sort(l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,', '    return
    l.all(l.is_increasing | l.is_decreasing)', '    return l.all(l.is_increasing |
    l.is_decreasing)', "    return all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n",
  '    return all(l[i] <= l[i+1] for i in range(len(l)-1))', '    return l.all(l.is_increasing
    | l.is_decreasing)', '    return l.all(l.is_increasing | l.is_decreasing)', '    return
    l.all(l.is_increasing(l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(', '    return l.all(l.is_increasing
    | l.is_decreasing)', '    return l.all(l.is_increasing(l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(', '    return l.all(l.is_increasing(l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(', '    return
    all(l[i] <= l[i+1] for i in range(len(l)-1))', '    return l.all(l.is_increasing
    | l.is_decreasing)', '    return all(l[i] <= l[i+1] for i in range(len(l)-1))',
  '    return l.all(l.is_increasing | l.is_decreasing)', '    return all(l[i+1] <=
    l[i] for i in range(len(l)-1))', '    return all(l[i] <= l[i+1] for i in range(len(l)-1))',
  '    return l.all(l.is_increasing(l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(', '    return all(l[i+1]
    <= l[i] for i in range(len(l)-1))', '    return all(l[i] <= l[i+1] for i in range(len(l)-1))',
  '    return l.all(l.is_increasing | l.is_decreasing)', '    return l.all(l.is_increasing(l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(', '    return l.all(l.is_increasing(l.map(l.abs, l.map(l.sign,
    l.map(l.min, l.map(l.max, l.map(l.abs, l.map(l.sign, l.map(l.min, l.map(l.max,
    l.map(l.abs, l.map(l.sign, l.map(l.min, l.map(l.max, l.map(l.abs, l.map(l.sign,
    l.map(l.min, l.map(l.max, l.map(l.abs, l.map(l.sign, l.map(l.min, l.map(l.max,
    l.map(l.abs, l.map(l.sign, l.map(l.min, l.map(l.max, l.map(l.abs, l.map(l.sign,
    l.map(l.min, l.map(l.max, l.map(l.abs, l.map(l.sign, l.map(l.min, l.map(l.max,
    l.map(l.abs, l.map(l.sign, l.map(l.min, l.map(l.max, l.map(l.abs, l.map(l.sign,
    l.map(l.min, l.map(l.max, l.map(l.abs, l.map(l.sign, l.map(l.min, l.map(l.max,
    l.map(l.abs, l.map(l.sign, l.map(l.min, l.map(l.max, l.map(l.abs, l.map(l.sign,
    l.map(l.min, l.map(l.max, l.map(l.abs, l.map(l.sign, l.map(l.min, l.map(l.max,
    l.map(l.abs, l.map(l.sign, l.map(l.min, l.map(l.max, l.map(l.abs, l.map(l.sign,
    l.map(', '    return l.all(l.is_increasing | l.is_decreasing)', '    return all(l[i]
    <= l[i + 1] for i in range(len(l) - 1))', '    return all(l[i] <= l[i+1] for i
    in range(len(l)-1))', '    return l.all(l.is_increasing | l.is_decreasing)', '    return
    l.all(l.is_increasing | l.is_decreasing)', '    return l.all(l.is_increasing |
    l.is_decreasing)', '    return l.all(l.is_increasing(l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign,
    l.map(', '    return l.all(l.is_increasing | l.is_decreasing)', '    return l.all(l.is_increasing
    | l.is_decreasing)', '    return l.all(l.is_increasing | l.is_decreasing)', '    return
    l.all(l.is_increasing | l.is_decreasing)', "    return all(l[i] <= l[i+1] for\
    \ i in range(len(l)-1))\n", '    return all(l[i] <= l[i+1] for i in range(len(l)-1))',
  '    return all(l[i+1] <= l[i] for i in range(len(l)-1))', '    return all(l[i]
    <= l[i+1] for i in range(len(l)-1))', '    return l.all(l.is_increasing | l.is_decreasing)',
  '    return all(l[i] <= l[i+1] for i in range(len(l)-1))', '    return l.all(l.is_increasing
    | l.is_decreasing)', '    return all(l[i] <= l[i+1] for i in range(len(l)-1))',
  '    return l.all(l.is_increasing | l.is_decreasing)', '    return l.all(l.is_increasing
    | l.is_decreasing)', '    return l.all(l.is_increasing | l.is_decreasing)', " \
    \   return all(l[i+1] <= l[i] for i in range(len(l)-1))\n", '    return l.all(l.is_increasing
    | l.is_decreasing)', '    return l.all(l.is_increasing | l.is_decreasing)', '    return
    all(l[i] <= l[i+1] for i in range(len(l)-1))', '    return l.all(l.is_increasing(l.map(l.abs,
    l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs,
    l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs,
    l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs,
    l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs,
    l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs,
    l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs,
    l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs,
    l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs,
    l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs,
    l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs, l.sort(l.map(l.abs,
    l.sort(l.map(l.abs,', '    return l.all(l.is_increasing | l.is_decreasing)', '    return
    l.all(l.is_increasing | l.is_decreasing)', '    return l.all(l.is_increasing(l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs, l.map(l.sign, l.map(l.abs,
    l.map(l.sign, l.map(', '    return l.all(l.is_increasing | l.is_decreasing)']
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
