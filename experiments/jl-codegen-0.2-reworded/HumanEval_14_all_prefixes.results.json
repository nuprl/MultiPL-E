{
  "name": "HumanEval_14_all_prefixes",
  "language": "jl",
  "prompt": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n",
  "tests": "using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "results": [
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    else return [string[0]..] ++ all_prefixes(string[1..])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4a6q240b.jl:6\nin expression starting at /tmp/tmp4a6q240b.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string == \"\"\n        return []\n    else\n        return [string[:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpseop6a_d.jl:6 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpseop6a_d.jl:1\nin expression starting at /tmp/tmpseop6a_d.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string == \"\" then return []\n    all_prefixes(string[1:]) + [string[0]]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2xt_hfwa.jl:6\nin expression starting at /tmp/tmp2xt_hfwa.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1).map(i => string[i:])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing last argument in \"i:\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpne0q51fl.jl:6\nin expression starting at /tmp/tmpne0q51fl.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[0:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp65xvwy42.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp65xvwy42.jl:1\nin expression starting at /tmp/tmp65xvwy42.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1)\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa4f4d0cu.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa4f4d0cu.jl:1\nin expression starting at /tmp/tmpa4f4d0cu.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    result = []\n    for i = 1 to len(string) do\n        if string[i] = \"\" then\n            result = append(result, \"\")\n        else\n            result = append(result, string[1:i])\n    return result\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxb037vvx.jl:6\nin expression starting at /tmp/tmpxb037vvx.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[0:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp65xvwy42.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp65xvwy42.jl:1\nin expression starting at /tmp/tmp65xvwy42.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[0:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp65xvwy42.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp65xvwy42.jl:1\nin expression starting at /tmp/tmp65xvwy42.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg67o9_rv.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg67o9_rv.jl:1\nin expression starting at /tmp/tmpg67o9_rv.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    result = []\n    for i = 1 to len(string) do\n        if string[i] = \"\" then\n            result = result + [string[:i]]\n        else\n            result = result + [string[:i]]\n    return result\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkpl1rywx.jl:6\nin expression starting at /tmp/tmpkpl1rywx.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    result = []\n    for i = 1 to len(string) do\n        result = result + [string[0:i]]\n    return result\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_v62izuc.jl:6\nin expression starting at /tmp/tmp_v62izuc.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(String, string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpanpvxmf8.jl:9\nin expression starting at /tmp/tmpanpvxmf8.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    else return [string[0]] + all_prefixes(string[1:])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa_x59ous.jl:6\nin expression starting at /tmp/tmpa_x59ous.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[0:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp65xvwy42.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp65xvwy42.jl:1\nin expression starting at /tmp/tmp65xvwy42.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[0:i] for i in range(1, len(string)+1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqc8r862d.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqc8r862d.jl:1\nin expression starting at /tmp/tmpqc8r862d.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq2ee4g0l.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq2ee4g0l.jl:1\nin expression starting at /tmp/tmpq2ee4g0l.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[0:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp65xvwy42.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp65xvwy42.jl:1\nin expression starting at /tmp/tmp65xvwy42.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(String, string.split(\"\"))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzp_9qiuq.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzp_9qiuq.jl:1\nin expression starting at /tmp/tmpzp_9qiuq.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[0:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp65xvwy42.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp65xvwy42.jl:1\nin expression starting at /tmp/tmp65xvwy42.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg67o9_rv.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg67o9_rv.jl:1\nin expression starting at /tmp/tmpg67o9_rv.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpobou6r62.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpobou6r62.jl:1\nin expression starting at /tmp/tmpobou6r62.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[0:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp65xvwy42.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp65xvwy42.jl:1\nin expression starting at /tmp/tmp65xvwy42.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1, 1)\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpihddiy4z.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpihddiy4z.jl:1\nin expression starting at /tmp/tmpihddiy4z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string == \"\"\n        return []\n    else\n        return [string] + all_prefixes(string[1:])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp51ti3ege.jl:9\nin expression starting at /tmp/tmp51ti3ege.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1).map(i => string[i:])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing last argument in \"i:\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpne0q51fl.jl:6\nin expression starting at /tmp/tmpne0q51fl.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[0:i] for i in range(1, len(string)+1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqc8r862d.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqc8r862d.jl:1\nin expression starting at /tmp/tmpqc8r862d.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    else return [string] + all_prefixes(string[1:])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph7nyqxp3.jl:6\nin expression starting at /tmp/tmph7nyqxp3.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.new(string.split(\"\"))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplc_cifvy.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplc_cifvy.jl:1\nin expression starting at /tmp/tmplc_cifvy.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    return [string[0]..] ++ all_prefixes(string[1..])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplhre97w1.jl:6\nin expression starting at /tmp/tmplhre97w1.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if len(string) == 0:\n        return []\n    else:\n        return [string[:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphlre2uxa.jl:7\nin expression starting at /tmp/tmphlre2uxa.jl:7\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(string.substring(0, i) for i in range(1, len(string)))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpou8el4rb.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpou8el4rb.jl:1\nin expression starting at /tmp/tmpou8el4rb.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg67o9_rv.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg67o9_rv.jl:1\nin expression starting at /tmp/tmpg67o9_rv.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string))::string[0..i]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd9n2yyjn.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd9n2yyjn.jl:1\nin expression starting at /tmp/tmpd9n2yyjn.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1).map(i => string[i:])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing last argument in \"i:\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpne0q51fl.jl:6\nin expression starting at /tmp/tmpne0q51fl.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string.substring(0, i) for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0xrztghp.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0xrztghp.jl:1\nin expression starting at /tmp/tmp0xrztghp.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    result = []\n    for i in range(1, len(string) + 1):\n        if string[:i] = string[:i]:\n            result.append(string[:i])\n    return result\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl_pn_c26.jl:6\nin expression starting at /tmp/tmpl_pn_c26.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    result = []\n    for i in range(1, len(string) + 1):\n        if string[:i] = string[:i]:\n            result.append(string[:i])\n    return result\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl_pn_c26.jl:6\nin expression starting at /tmp/tmpl_pn_c26.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string == \"\"\n        return []\n    else\n        return [string[:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpseop6a_d.jl:6 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpseop6a_d.jl:1\nin expression starting at /tmp/tmpseop6a_d.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    result = []\n    for i = 0 to len(string) - 1 do\n        if string[i] = \" \" then\n            result = result + [string[0:i]]\n        end if\n    end for\n    return result\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps76ii2bc.jl:6\nin expression starting at /tmp/tmps76ii2bc.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1)\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa4f4d0cu.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa4f4d0cu.jl:1\nin expression starting at /tmp/tmpa4f4d0cu.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string.substring(0, i) for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0xrztghp.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0xrztghp.jl:1\nin expression starting at /tmp/tmp0xrztghp.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string.substr(0, i) for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpygdkiryf.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpygdkiryf.jl:1\nin expression starting at /tmp/tmpygdkiryf.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppm3kpva_.jl:6\nin expression starting at /tmp/tmppm3kpva_.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[0:i] for i in range(1, len(string)+1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqc8r862d.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqc8r862d.jl:1\nin expression starting at /tmp/tmpqc8r862d.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    else return [string[0]..] + all_prefixes(string[1..])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu3ixw3j9.jl:6\nin expression starting at /tmp/tmpu3ixw3j9.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    else return [string[0]..] + all_prefixes(string[1..])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu3ixw3j9.jl:6\nin expression starting at /tmp/tmpu3ixw3j9.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1).map(i => string[i:])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing last argument in \"i:\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpne0q51fl.jl:6\nin expression starting at /tmp/tmpne0q51fl.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1)\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa4f4d0cu.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa4f4d0cu.jl:1\nin expression starting at /tmp/tmpa4f4d0cu.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    else return [string[0]] + all_prefixes(string[1:])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa_x59ous.jl:6\nin expression starting at /tmp/tmpa_x59ous.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[0:i] for i in range(1, len(string)+1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqc8r862d.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqc8r862d.jl:1\nin expression starting at /tmp/tmpqc8r862d.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.new(string.split(\"\"))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplc_cifvy.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplc_cifvy.jl:1\nin expression starting at /tmp/tmplc_cifvy.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(string.substring(0, i) for i in range(1, len(string)))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpou8el4rb.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpou8el4rb.jl:1\nin expression starting at /tmp/tmpou8el4rb.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string.substring(0, i) for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0xrztghp.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0xrztghp.jl:1\nin expression starting at /tmp/tmp0xrztghp.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(string.substring(0, i) for i in range(1, len(string)))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpou8el4rb.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpou8el4rb.jl:1\nin expression starting at /tmp/tmpou8el4rb.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1)\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa4f4d0cu.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa4f4d0cu.jl:1\nin expression starting at /tmp/tmpa4f4d0cu.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1)\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa4f4d0cu.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa4f4d0cu.jl:1\nin expression starting at /tmp/tmpa4f4d0cu.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpobou6r62.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpobou6r62.jl:1\nin expression starting at /tmp/tmpobou6r62.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(string.substring, string.split(\"\"))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpggxidajt.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpggxidajt.jl:1\nin expression starting at /tmp/tmpggxidajt.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(string.substring, string.split(\"\"))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpggxidajt.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpggxidajt.jl:1\nin expression starting at /tmp/tmpggxidajt.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    all_prefixes = []\n    for i in range(1, len(string) + 1):\n        all_prefixes.append(string[:i])\n    return all_prefixes\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpacw373ml.jl:6\nin expression starting at /tmp/tmpacw373ml.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(String, string.split(\"\"))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzp_9qiuq.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzp_9qiuq.jl:1\nin expression starting at /tmp/tmpzp_9qiuq.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1).map(\n        (i) -> string[i:i + 1]\n    )\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdq8yq8yf.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdq8yq8yf.jl:1\nin expression starting at /tmp/tmpdq8yq8yf.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq2ee4g0l.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq2ee4g0l.jl:1\nin expression starting at /tmp/tmpq2ee4g0l.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1).map(i => string[i] + string[i + 1])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwcy6t5l_.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwcy6t5l_.jl:1\nin expression starting at /tmp/tmpwcy6t5l_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1).map(i => string[i:])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing last argument in \"i:\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpne0q51fl.jl:6\nin expression starting at /tmp/tmpne0q51fl.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    return all_prefixes(string[1:]) + [string[0]]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp38pke5xi.jl:6\nin expression starting at /tmp/tmp38pke5xi.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(string.substring(0, i) for i in range(1, len(string) + 1))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnkarpqrf.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnkarpqrf.jl:1\nin expression starting at /tmp/tmpnkarpqrf.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(string.substring, string.split(\"\"))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpggxidajt.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpggxidajt.jl:1\nin expression starting at /tmp/tmpggxidajt.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpobou6r62.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpobou6r62.jl:1\nin expression starting at /tmp/tmpobou6r62.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1).map(i => string[i:])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing last argument in \"i:\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpne0q51fl.jl:6\nin expression starting at /tmp/tmpne0q51fl.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    return [string[0]..] ++ all_prefixes(string[1..])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplhre97w1.jl:6\nin expression starting at /tmp/tmplhre97w1.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string == \"\" then return []\n    else return all_prefixes(string[1:]) + [string[0]]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzr7n1hke.jl:6\nin expression starting at /tmp/tmpzr7n1hke.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[0:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp65xvwy42.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp65xvwy42.jl:1\nin expression starting at /tmp/tmp65xvwy42.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg67o9_rv.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg67o9_rv.jl:1\nin expression starting at /tmp/tmpg67o9_rv.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[0:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp65xvwy42.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp65xvwy42.jl:1\nin expression starting at /tmp/tmp65xvwy42.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[0:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp65xvwy42.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp65xvwy42.jl:1\nin expression starting at /tmp/tmp65xvwy42.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1).map(i => string[i:i + 1])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphi0m0ahw.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphi0m0ahw.jl:1\nin expression starting at /tmp/tmphi0m0ahw.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(string.substring(0, i) for i in range(1, len(string)))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpou8el4rb.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpou8el4rb.jl:1\nin expression starting at /tmp/tmpou8el4rb.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1)\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa4f4d0cu.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa4f4d0cu.jl:1\nin expression starting at /tmp/tmpa4f4d0cu.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1)\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa4f4d0cu.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa4f4d0cu.jl:1\nin expression starting at /tmp/tmpa4f4d0cu.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    else return [string[0]..] + all_prefixes(string[1..])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu3ixw3j9.jl:6\nin expression starting at /tmp/tmpu3ixw3j9.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(lambda x: x, Vector.range(0, len(string) - 1))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jxiceev.jl:6\nin expression starting at /tmp/tmp9jxiceev.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg67o9_rv.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg67o9_rv.jl:1\nin expression starting at /tmp/tmpg67o9_rv.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[0:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp65xvwy42.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp65xvwy42.jl:1\nin expression starting at /tmp/tmp65xvwy42.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(string.substring, string.split(\"\"))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpggxidajt.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpggxidajt.jl:1\nin expression starting at /tmp/tmpggxidajt.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(string.substring(0, i) for i in range(1, len(string)))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpou8el4rb.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpou8el4rb.jl:1\nin expression starting at /tmp/tmpou8el4rb.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(string.substring, string.split(\"\"))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpggxidajt.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpggxidajt.jl:1\nin expression starting at /tmp/tmpggxidajt.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(string.substring(0, i) for i in range(1, len(string) + 1))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnkarpqrf.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnkarpqrf.jl:1\nin expression starting at /tmp/tmpnkarpqrf.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(string.substring, string, 1, len(string))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp881qq2am.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp881qq2am.jl:1\nin expression starting at /tmp/tmp881qq2am.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    else return [string[0]..] ++ all_prefixes(string[1..])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4a6q240b.jl:6\nin expression starting at /tmp/tmp4a6q240b.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg67o9_rv.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg67o9_rv.jl:1\nin expression starting at /tmp/tmpg67o9_rv.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(string.substring(0, i) for i in range(1, len(string)))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpou8el4rb.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpou8el4rb.jl:1\nin expression starting at /tmp/tmpou8el4rb.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[0:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp65xvwy42.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp65xvwy42.jl:1\nin expression starting at /tmp/tmp65xvwy42.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1, 1)\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpihddiy4z.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpihddiy4z.jl:1\nin expression starting at /tmp/tmpihddiy4z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    result = []\n    for i in range(1, len(string) + 1):\n        if string[:i] = string[:i]:\n            result.append(string[:i])\n    return result\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl_pn_c26.jl:6\nin expression starting at /tmp/tmpl_pn_c26.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(String, string.split(\"\"))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzp_9qiuq.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzp_9qiuq.jl:1\nin expression starting at /tmp/tmpzp_9qiuq.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppm3kpva_.jl:6\nin expression starting at /tmp/tmppm3kpva_.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq2ee4g0l.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq2ee4g0l.jl:1\nin expression starting at /tmp/tmpq2ee4g0l.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[0:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp65xvwy42.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp65xvwy42.jl:1\nin expression starting at /tmp/tmp65xvwy42.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if len(string) == 0:\n        return []\n    else:\n        return [string[:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphlre2uxa.jl:7\nin expression starting at /tmp/tmphlre2uxa.jl:7\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string == \"\" then\n        return []\n    else\n        return [string[0]..] + all_prefixes(string[1..])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"]\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_khgrij7.jl:9\nin expression starting at /tmp/tmp_khgrij7.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1).map(\n        i -> string[i:i + 1]\n    )\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2jrswghm.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2jrswghm.jl:1\nin expression starting at /tmp/tmp2jrswghm.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[0:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp65xvwy42.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp65xvwy42.jl:1\nin expression starting at /tmp/tmp65xvwy42.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[0:i] for i in range(1, len(string))]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_nm1ckbm.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_nm1ckbm.jl:1\nin expression starting at /tmp/tmp_nm1ckbm.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1)\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa4f4d0cu.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa4f4d0cu.jl:1\nin expression starting at /tmp/tmpa4f4d0cu.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[0:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp65xvwy42.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp65xvwy42.jl:1\nin expression starting at /tmp/tmp65xvwy42.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    else return [string[0]] + all_prefixes(string[1:])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa_x59ous.jl:6\nin expression starting at /tmp/tmpa_x59ous.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(string.substring(0, i) for i in range(1, len(string)))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpou8el4rb.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpou8el4rb.jl:1\nin expression starting at /tmp/tmpou8el4rb.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[0:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp65xvwy42.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp65xvwy42.jl:1\nin expression starting at /tmp/tmp65xvwy42.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string.substring(0, i) for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0xrztghp.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0xrztghp.jl:1\nin expression starting at /tmp/tmp0xrztghp.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    else return [string[0]..] ++ all_prefixes(string[1..])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4a6q240b.jl:6\nin expression starting at /tmp/tmp4a6q240b.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    else return [string[0]..] + all_prefixes(string[1..])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu3ixw3j9.jl:6\nin expression starting at /tmp/tmpu3ixw3j9.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1)\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa4f4d0cu.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa4f4d0cu.jl:1\nin expression starting at /tmp/tmpa4f4d0cu.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpobou6r62.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpobou6r62.jl:1\nin expression starting at /tmp/tmpobou6r62.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1, 1)\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpihddiy4z.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpihddiy4z.jl:1\nin expression starting at /tmp/tmpihddiy4z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1, 1)\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpihddiy4z.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpihddiy4z.jl:1\nin expression starting at /tmp/tmpihddiy4z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.new(string.split(\"\")).map(lambda x: x + \"\")\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7460179k.jl:6\nin expression starting at /tmp/tmp7460179k.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(String, string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpanpvxmf8.jl:9\nin expression starting at /tmp/tmpanpvxmf8.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1).map(\n        (i) -> string[i:i + 1]\n    )\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdq8yq8yf.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdq8yq8yf.jl:1\nin expression starting at /tmp/tmpdq8yq8yf.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    return [string[0]..] ++ all_prefixes(string[1..])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplhre97w1.jl:6\nin expression starting at /tmp/tmplhre97w1.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(string.substring, string.split(\"\"), 1)\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp59wpscgu.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp59wpscgu.jl:1\nin expression starting at /tmp/tmp59wpscgu.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    else return [string[0]] + all_prefixes(string[1:])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa_x59ous.jl:6\nin expression starting at /tmp/tmpa_x59ous.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpobou6r62.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpobou6r62.jl:1\nin expression starting at /tmp/tmpobou6r62.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1)\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa4f4d0cu.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa4f4d0cu.jl:1\nin expression starting at /tmp/tmpa4f4d0cu.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[0:i] for i in range(1, len(string)+1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqc8r862d.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqc8r862d.jl:1\nin expression starting at /tmp/tmpqc8r862d.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string.substr(0, i) for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpygdkiryf.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpygdkiryf.jl:1\nin expression starting at /tmp/tmpygdkiryf.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(string.substring(0, i) for i in range(1, len(string)))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpou8el4rb.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpou8el4rb.jl:1\nin expression starting at /tmp/tmpou8el4rb.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpobou6r62.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpobou6r62.jl:1\nin expression starting at /tmp/tmpobou6r62.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1).map(\n        (i) -> string[i:i + 1]\n    )\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdq8yq8yf.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdq8yq8yf.jl:1\nin expression starting at /tmp/tmpdq8yq8yf.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1).map(i => string[i:])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing last argument in \"i:\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpne0q51fl.jl:6\nin expression starting at /tmp/tmpne0q51fl.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(string.substring(0, i) for i in range(1, len(string)))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpou8el4rb.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpou8el4rb.jl:1\nin expression starting at /tmp/tmpou8el4rb.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(string.substring(0, i) for i in range(1, len(string)))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpou8el4rb.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpou8el4rb.jl:1\nin expression starting at /tmp/tmpou8el4rb.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string.substring(0, i) for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0xrztghp.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0xrztghp.jl:1\nin expression starting at /tmp/tmp0xrztghp.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if len(string) == 0:\n        return []\n    else:\n        return [string[0]] + all_prefixes(string[1:])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpofte1jp9.jl:7\nin expression starting at /tmp/tmpofte1jp9.jl:7\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    else return [string[0]..] ++ all_prefixes(string[1..])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4a6q240b.jl:6\nin expression starting at /tmp/tmp4a6q240b.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1).map(i => string[i] + string[i + 1])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwcy6t5l_.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwcy6t5l_.jl:1\nin expression starting at /tmp/tmpwcy6t5l_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(string.substring(0, i) for i in range(1, len(string) + 1))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnkarpqrf.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnkarpqrf.jl:1\nin expression starting at /tmp/tmpnkarpqrf.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string == \"\" \n        return [] \n    else: \n        return [string] + all_prefixes(string[1:]) \nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292465,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: whitespace not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf8tcyaqe.jl:9\nin expression starting at /tmp/tmpf8tcyaqe.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[0:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp65xvwy42.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp65xvwy42.jl:1\nin expression starting at /tmp/tmp65xvwy42.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpobou6r62.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpobou6r62.jl:1\nin expression starting at /tmp/tmpobou6r62.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if len(string) == 0:\n        return []\n    else:\n        return [string[:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphlre2uxa.jl:7\nin expression starting at /tmp/tmphlre2uxa.jl:7\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(string.substring(0, i) for i in range(1, len(string)))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpou8el4rb.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpou8el4rb.jl:1\nin expression starting at /tmp/tmpou8el4rb.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1).map(\n        (i) -> string[0:i + 1]\n    )\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292464,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpybocp51p.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpybocp51p.jl:1\nin expression starting at /tmp/tmpybocp51p.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    else return [string[0]..] ++ all_prefixes(string[1..])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4a6q240b.jl:6\nin expression starting at /tmp/tmp4a6q240b.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg67o9_rv.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg67o9_rv.jl:1\nin expression starting at /tmp/tmpg67o9_rv.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string == \"\" then return []\n    result = []\n    for i in range(1, len(string) + 1):\n        if string[:i] == string:\n            result.append(string[:i])\n    return result\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292464,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5bcpv8mp.jl:6\nin expression starting at /tmp/tmp5bcpv8mp.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[0:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp65xvwy42.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp65xvwy42.jl:1\nin expression starting at /tmp/tmp65xvwy42.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[0:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp65xvwy42.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp65xvwy42.jl:1\nin expression starting at /tmp/tmp65xvwy42.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    return [string[0]] + all_prefixes(string[1:])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292464,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzp2w1svq.jl:6\nin expression starting at /tmp/tmpzp2w1svq.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.new(string.split(\"\"))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplc_cifvy.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplc_cifvy.jl:1\nin expression starting at /tmp/tmplc_cifvy.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpobou6r62.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpobou6r62.jl:1\nin expression starting at /tmp/tmpobou6r62.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.new(string.split(\"\"))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplc_cifvy.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplc_cifvy.jl:1\nin expression starting at /tmp/tmplc_cifvy.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppm3kpva_.jl:6\nin expression starting at /tmp/tmppm3kpva_.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1)\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa4f4d0cu.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa4f4d0cu.jl:1\nin expression starting at /tmp/tmpa4f4d0cu.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[0:i] for i in range(1, len(string)+1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqc8r862d.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqc8r862d.jl:1\nin expression starting at /tmp/tmpqc8r862d.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    else return [string[0]] + all_prefixes(string[1:])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa_x59ous.jl:6\nin expression starting at /tmp/tmpa_x59ous.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[0:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp65xvwy42.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp65xvwy42.jl:1\nin expression starting at /tmp/tmp65xvwy42.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[0:i] for i in range(1, len(string)+1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqc8r862d.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqc8r862d.jl:1\nin expression starting at /tmp/tmpqc8r862d.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[0:i] for i in range(1, len(string)+1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqc8r862d.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqc8r862d.jl:1\nin expression starting at /tmp/tmpqc8r862d.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[0:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp65xvwy42.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp65xvwy42.jl:1\nin expression starting at /tmp/tmp65xvwy42.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string == \"\"\n        return []\n    else\n        return [string[:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpseop6a_d.jl:6 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpseop6a_d.jl:1\nin expression starting at /tmp/tmpseop6a_d.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq2ee4g0l.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq2ee4g0l.jl:1\nin expression starting at /tmp/tmpq2ee4g0l.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    all_prefixes = []\n    i = 0\n    while i < len(string):\n        all_prefixes = append(all_prefixes, string[0:i+1])\n        i = i + 1\n    return all_prefixes\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292465,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbrdu0aro.jl:6\nin expression starting at /tmp/tmpbrdu0aro.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1)\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa4f4d0cu.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa4f4d0cu.jl:1\nin expression starting at /tmp/tmpa4f4d0cu.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(string.substring(0, i) for i in range(1, len(string) + 1))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnkarpqrf.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnkarpqrf.jl:1\nin expression starting at /tmp/tmpnkarpqrf.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(string.substring(0, i) for i in range(1, len(string)))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpou8el4rb.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpou8el4rb.jl:1\nin expression starting at /tmp/tmpou8el4rb.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(lambda x: x, Vector.range(0, len(string)))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292464,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpve0touwm.jl:6\nin expression starting at /tmp/tmpve0touwm.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[0:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp65xvwy42.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp65xvwy42.jl:1\nin expression starting at /tmp/tmp65xvwy42.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(string.substring, string.split(\"\"))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpggxidajt.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpggxidajt.jl:1\nin expression starting at /tmp/tmpggxidajt.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(string.substring(0, i) for i in range(1, len(string)))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpou8el4rb.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpou8el4rb.jl:1\nin expression starting at /tmp/tmpou8el4rb.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[0:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp65xvwy42.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp65xvwy42.jl:1\nin expression starting at /tmp/tmp65xvwy42.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string == \"\" then return []\n    else return [string[0]..] + all_prefixes(string[1..])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292465,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo1bivnfb.jl:6\nin expression starting at /tmp/tmpo1bivnfb.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[0:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp65xvwy42.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp65xvwy42.jl:1\nin expression starting at /tmp/tmp65xvwy42.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string.substring(0, i) for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0xrztghp.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0xrztghp.jl:1\nin expression starting at /tmp/tmp0xrztghp.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    all_prefixes = []\n    i = 0\n    while i < len(string):\n        all_prefixes = all_prefixes + [string[:i+1]]\n        i = i + 1\n    return all_prefixes\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292464,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpecd3lll0.jl:6\nin expression starting at /tmp/tmpecd3lll0.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    else return [string[0]..] ++ all_prefixes(string[1..])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4a6q240b.jl:6\nin expression starting at /tmp/tmp4a6q240b.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(lambda x: x, string.split(\"\"))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292464,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb14r8dz6.jl:6\nin expression starting at /tmp/tmpb14r8dz6.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg67o9_rv.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg67o9_rv.jl:1\nin expression starting at /tmp/tmpg67o9_rv.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[0:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp65xvwy42.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp65xvwy42.jl:1\nin expression starting at /tmp/tmp65xvwy42.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1).map(i => string[i] + string[i + 1])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwcy6t5l_.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwcy6t5l_.jl:1\nin expression starting at /tmp/tmpwcy6t5l_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(string.substring(0, i) for i in range(1, len(string)))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpou8el4rb.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpou8el4rb.jl:1\nin expression starting at /tmp/tmpou8el4rb.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    def all_prefixes(string):\n        if len(string) == 0:\n            return []\n        else:\n            return [string[:i] for i in range(1, len(string) + 1)]\n    return all_prefixes(string)\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292465,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmp1zze3dv6.jl:5 expected \"end\", got \"all_prefixes\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1zze3dv6.jl:6\nin expression starting at /tmp/tmp1zze3dv6.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(string.substring(0, i) for i in range(1, len(string) + 1))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnkarpqrf.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnkarpqrf.jl:1\nin expression starting at /tmp/tmpnkarpqrf.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(string.substring(0, i) for i in range(1, len(string) + 1))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnkarpqrf.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnkarpqrf.jl:1\nin expression starting at /tmp/tmpnkarpqrf.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(string.substring, string, 0, string.length)\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292465,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp9kygi7h.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp9kygi7h.jl:1\nin expression starting at /tmp/tmpp9kygi7h.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1).map(\n        (i) -> string[i:i + 1]\n    )\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdq8yq8yf.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdq8yq8yf.jl:1\nin expression starting at /tmp/tmpdq8yq8yf.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(string.substring(0, i) for i in range(1, len(string)))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpou8el4rb.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpou8el4rb.jl:1\nin expression starting at /tmp/tmpou8el4rb.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(string.substring(0, i) for i in range(1, len(string)))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpou8el4rb.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpou8el4rb.jl:1\nin expression starting at /tmp/tmpou8el4rb.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    all_prefixes(string[1:]) + [string[1:]]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292465,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp70tjthn6.jl:6\nin expression starting at /tmp/tmp70tjthn6.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1)\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa4f4d0cu.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa4f4d0cu.jl:1\nin expression starting at /tmp/tmpa4f4d0cu.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(lambda x: x, string.split(\"\"))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292464,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb14r8dz6.jl:6\nin expression starting at /tmp/tmpb14r8dz6.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(string.substring(0, i), i)\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292464,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1_9kr9yr.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1_9kr9yr.jl:1\nin expression starting at /tmp/tmp1_9kr9yr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq2ee4g0l.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq2ee4g0l.jl:1\nin expression starting at /tmp/tmpq2ee4g0l.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1).map(lambda i: string[i:])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292465,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgopmmpho.jl:6\nin expression starting at /tmp/tmpgopmmpho.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    return [string[0]..] ++ all_prefixes(string[1..])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplhre97w1.jl:6\nin expression starting at /tmp/tmplhre97w1.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.map(string.substring(0, i) for i in range(1, len(string)))\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpou8el4rb.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpou8el4rb.jl:1\nin expression starting at /tmp/tmpou8el4rb.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    return Vector.range(0, len(string) - 1)\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa4f4d0cu.jl:5 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa4f4d0cu.jl:1\nin expression starting at /tmp/tmpa4f4d0cu.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if len(string) == 0:\n        return []\n    else:\n        return [string[:i] for i in range(1, len(string) + 1)]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphlre2uxa.jl:7\nin expression starting at /tmp/tmphlre2uxa.jl:7\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n    if string = \"\" then return []\n    return [string[0]] + all_prefixes(string[1:])\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
      "timestamp": 1664292464,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzp2w1svq.jl:6\nin expression starting at /tmp/tmpzp2w1svq.jl:6\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}