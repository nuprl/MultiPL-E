name: HumanEval_120_maximum
language: jl
prompt: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
  \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example\
  \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n \
  \   >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
  \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector\
  \ will be in the range of [1, 1000].\n        2. The elements in the vector will\
  \ be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\
  function maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
  \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
  \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
  \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2,\
  \ 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
  \ 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
  \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
  \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\n\
  end\n"
completions: ['    return [arr[i] for i in range(k) if arr[i] > arr[i+1]]', '    return
    max_k(arr, k)', '    return max_k(arr, k)', '    return max_k(arr, k)', '    return
    max_k(arr, k)', "    if k == 0:\n        return []\n    if k == 1:\n        return\
    \ max_k_1(arr)\n    if k == 2:\n        return max_k_2(arr)\n    return max_k_3(arr,\
    \ k)", '    return max_k(arr, k)', '    return max_k(arr, k)', "    if k == 0:\n\
    \        return []\n    if k == 1:\n        return max_k_1(arr)\n    if k == 2:\n\
    \        return max_k_2(arr)\n    if k == 3:\n        return max_k_3(arr)\n  \
    \  if k == 4:\n        return max_k_4(arr)\n    if k == 5:\n        return max_k_5(arr)\n\
    \    if k == 6:\n        return max_k_6(arr)\n    if k == 7:\n        return max_k_7(arr)\n\
    \    if k == 8:\n        return max_k_8(arr)\n    if k == 9:\n        return max_k_9(arr)\n\
    \    if k == 10:\n        return max_k_10(arr)\n    if k == 11:\n        return\
    \ max_k_11(arr)\n    if k == 12:\n        return max_k_12(arr)\n    if k == 13:\n\
    \        return max_k_13(arr)\n    if k == 14:\n        return max_k_14(arr)\n\
    \    if k == 15:\n        return max_k_15(arr)\n    if k == 16:\n        return\
    \ max_k_16(arr)\n    if k == 17:\n        return max_k_17(arr)\n    if k == 18:\n\
    \        return max_k_18(arr)\n    if k == 19:\n        return max_k_19(arr)\n\
    \    if k == 20:\n        return max_k_20(arr)\n    if k == 21:\n        return\
    \ max_k_21(arr)\n    if k == 22:\n        return max_k_22(arr)\n    if k == 23:\n\
    \        return max_k_23(arr)\n    if k == 24:\n        return max_k_24(arr)\n\
    \    if k == 25:\n        return max_k_25(arr)\n    if k == 26:\n        return\
    \ max_k_26(arr)\n    if k == 27:\n        return max_k_27(arr)\n    if k == 28:\n\
    \        return max_k_28(", '    return maximum_rec(arr, k, 0, len(arr) - 1)',
  '    return maximum_rec(arr, k, 0, len(arr))', "    return [max(arr[i] for i in\
    \ range(k)) for i in range(k)]\n", '    return max_k(arr, k)', '    return max_k(arr,
    k)', '    return max_k(arr, k)', '    return max_k(arr, k)', "    if k == 0:\n\
    \        return []\n    if k == 1:\n        return max_k(arr)\n    return max_k(arr)\
    \ + max_k(arr[k:])", '    return max_k(arr, k)', '    return max_k(arr, k)', " \
    \   if k == 0:\n        return []\n    elif k == 1:\n        return max_k_1(arr)\n\
    \    else:\n        return max_k_2(arr, k)", '    return maximum_rec(arr, k, 0,
    len(arr) - 1)', '    return max_k(arr, k)', "    if k > len(arr) or k < 0:\n \
    \       return arr\n    elif k == 0:\n        return []\n    else:\n        return\
    \ [max(arr[i:i+k]) for i in range(0, len(arr), k)]\n", '    return max_k(arr,
    k)', "    return [max(arr, k)]\n", '    return max_k(arr, k)', '    return max_k_numbers(arr,
    k)', "    def findMax(arr, k):\n        if k == 0:\n            return arr\n \
    \       elif k == 1:\n            return max(arr)\n        else:\n           \
    \ return max(findMax(arr[:k], k - 1), findMax(arr[k:], k))\n    return findMax(arr,\
    \ k)\n", "    if k == 0:\n        return []\n    if k == 1:\n        return max_k_1(arr)\n\
    \    if k == 2:\n        return max_k_2(arr)\n    if k == 3:\n        return max_k_3(arr)\n\
    \    if k == 4:\n        return max_k_4(arr)\n    if k == 5:\n        return max_k_5(arr)\n\
    \    if k == 6:\n        return max_k_6(arr)\n    if k == 7:\n        return max_k_7(arr)\n\
    \    if k == 8:\n        return max_k_8(arr)\n    if k == 9:\n        return max_k_9(arr)\n\
    \    if k == 10:\n        return max_k_10(arr)\n    if k == 11:\n        return\
    \ max_k_11(arr)\n    if k == 12:\n        return max_k_12(arr)\n    if k == 13:\n\
    \        return max_k_13(arr)\n    if k == 14:\n        return max_k_14(arr)\n\
    \    if k == 15:\n        return max_k_15(arr)\n    if k == 16:\n        return\
    \ max_k_16(arr)\n    if k == 17:\n        return max_k_17(arr)\n    if k == 18:\n\
    \        return max_k_18(arr)\n    if k == 19:\n        return max_k_19(arr)\n\
    \    if k == 20:\n        return max_k_20(arr)\n    if k == 21:\n        return\
    \ max_k_21(arr)\n    if k == 22:\n        return max_k_22(arr)\n    if k == 23:\n\
    \        return max_k_23(arr)\n    if k == 24:\n        return max_k_24(arr)\n\
    \    if k == 25:\n        return max_k_25(arr)\n    if k == 26:\n        return\
    \ max_k_26(arr)\n    if k == 27:\n        return max_k_27(arr)\n    if k == 28:\n\
    \        return max_k_28(", "    return [max(arr, k)]\n", '    return max_k(arr,
    k)', '    return max_k_numbers(arr, k)', "    if k == 0:\n        return []\n\
    \    elif k == 1:\n        return max_k(arr)\n    else:\n        return max_k(max_k(arr,\
    \ k - 1))", '    return maximum_helper(arr, k)', "    return [arr[i] for i in\
    \ range(k) if arr[i] > arr[i+1]]\n", "    return [max(arr, k)]\n", '    return
    max_k(arr, k)', "    return [arr[i] for i in range(len(arr)) if arr[i] >= arr[i\
    \ - k]][:k]\n", "    def helper(arr, k):\n        if k == 0:\n            return\
    \ []\n        if k == 1:\n            return max(arr)\n        if arr[k - 1] >=\
    \ arr[k - 2]:\n            return [arr[k - 1]] + helper(arr[:k - 1], k - 1)\n\
    \        else:\n            return helper(arr[:k - 1], k - 1) + [arr[k - 2]]",
  "    return [max(arr, k)]\n", '    return max_k(arr, k)', '    return max_k(arr,
    k)', "    def helper(arr, k):\n        if k == 0:\n            return []\n   \
    \     if k == 1:\n            return max(arr)\n        if k == 2:\n          \
    \  return arr[0], arr[1]\n        if arr[0] > arr[1]:\n            arr[0], arr[1]\
    \ = arr[1], arr[0]\n        if arr[0] > arr[2]:\n            arr[0], arr[2] =\
    \ arr[2], arr[0]\n        if arr[1] > arr[2]:\n            arr[1], arr[2] = arr[2],\
    \ arr[1]\n        if arr[0] > arr[1]:\n            arr[0], arr[1] = arr[1], arr[0]\n\
    \        if arr[1] > arr[2]:\n            arr[1], arr[2] = arr[2], arr[1]\n  \
    \      if arr[0] > arr[1]:\n            arr[0], arr[1] = arr[1], arr[0]\n    \
    \    if arr[0] > arr[2]:\n            arr[0], arr[2] = arr[2], arr[0]\n      \
    \  if arr[1] > arr[2]:\n            arr[1], arr[2] = arr[2], arr[1]\n        if\
    \ arr[0] > arr[1]:\n            arr[0], arr[1] = arr[1], arr[0]\n        if arr[1]\
    \ > arr[2]:\n            arr[1], arr[2] = arr[2], arr[1]\n        if arr[0] >\
    \ arr[1]:\n            arr[0], arr[1] = arr[1], arr[0]\n        if arr[0] > arr[2]:\n\
    \            arr[0], arr[2] = arr[2], arr[0]\n        if arr[1] > arr[2]:\n  \
    \          arr[1], arr[2] = arr[2], arr[1]\n        if arr[0] > arr[1]:\n    \
    \        arr[0], arr[1] = arr[1], arr[0]\n        if arr[1] > arr[2]:\n      \
    \      arr[1], arr[2] = arr[2],", '    return max_k(arr, k)', '    return max_k(arr,
    k)', '    return max_k(arr, k)', "    return [max(arr, k)]\n", '    return max_k(arr,
    k)', '    return max_k(arr, k)', '    return max_k(arr, k)', "    def find_max(arr,\
    \ k):\n        if k == 0:\n            return arr\n        else:\n           \
    \ return find_max(arr[1:], k - 1)\n    return find_max(arr, k)\n", '    return
    max_k(arr, k)', "    return [max(arr[i:i+k]) for i in range(0, len(arr), k)]\n",
  "    def helper(arr, k):\n        if k == 0:\n            return []\n        if\
    \ k == 1:\n            return [max(arr)]\n        if k == 2:\n            return\
    \ [max(arr[0], arr[1])]\n        if k == 3:\n            return [max(arr[0], max(arr[1],\
    \ arr[2]))]\n        if k == 4:\n            return [max(arr[0], max(arr[1], max(arr[2],\
    \ arr[3])))]\n        if k == 5:\n            return [max(arr[0], max(arr[1],\
    \ max(arr[2], max(arr[3], arr[4]))))]\n        if k == 6:\n            return\
    \ [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], arr[5])))))]\n\
    \        if k == 7:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3],\
    \ max(arr[4], max(arr[5], arr[6]))))))]\n        if k == 8:\n            return\
    \ [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6],\
    \ arr[7])))))))]\n        if k == 9:\n            return [max(arr[0], max(arr[1],\
    \ max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], max(arr[7], arr[8]))))))))]\n\
    \        if k == 10:\n            return [max(arr[0], max(arr[1], max(arr[2],\
    \ max(arr[3], max(arr[4], max(arr[5], max(arr[6], max(arr[7], max(arr[8], arr[9])))))))))]\n\
    \        if k == 11:\n            return [max(arr[0], max(arr[1], max(arr[2],\
    \ max(arr[3], max(arr[4], max(arr[5], max(arr[6", '    return max_k(arr, k)',
  '    return max_k(arr, k)', '    return max_k(arr, k)', "    return sorted(arr)[:k]\n",
  '    return max_k(arr, k)', "    return [max(arr[i:i + k]) for i in range(0, len(arr),\
    \ k)]\n", "    def find_maximum(arr, k):\n        if k == 0:\n            return\
    \ arr\n        else:\n            return find_maximum(arr[1:], k - 1)\n    return\
    \ find_maximum(arr, k)\n", '    return max_k(arr, k)', "    return [max(arr[i]\
    \ for i in range(k)) for i in range(k)]\n", "    return [max(arr, k)]\n", '    return
    max_k(arr, k)', '    return maximum_rec(arr, k, 0, len(arr) - 1)', "    def helper(arr,\
    \ k):\n        if k == 0:\n            return []\n        if k == 1:\n       \
    \     return [max(arr)]\n        if k == 2:\n            return [max(arr[0], arr[1])]\n\
    \        if k == 3:\n            return [max(arr[0], max(arr[1], arr[2]))]\n \
    \       if k == 4:\n            return [max(arr[0], max(arr[1], max(arr[2], arr[3])))]\n\
    \        if k == 5:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3],\
    \ arr[4]))))]\n        if k == 6:\n            return [max(arr[0], max(arr[1],\
    \ max(arr[2], max(arr[3], max(arr[4], arr[5])))))]\n        if k == 7:\n     \
    \       return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5],\
    \ arr[6]))))))]\n        if k == 8:\n            return [max(arr[0], max(arr[1],\
    \ max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], arr[7])))))))]\n\
    \        if k == 9:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3],\
    \ max(arr[4], max(arr[5], max(arr[6], max(arr[7], arr[8]))))))))]\n        if\
    \ k == 10:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3],\
    \ max(arr[4], max(arr[5], max(arr[6], max(arr[7], max(arr[8], arr[9])))))))))]\n\
    \        if k == 11:\n            return [max(arr[0], max(arr[1], max(arr[2],\
    \ max(arr[3], max(arr[4], max(arr[5], max(arr[6", '    return max_k(arr, k)',
  '    return max_k(arr, k)', "    def helper(arr, k):\n        if k == 0:\n     \
    \       return []\n        if k == 1:\n            return [max(arr)]\n       \
    \ if k == 2:\n            return [max(arr[0], arr[1])]\n        if k == 3:\n \
    \           return [max(arr[0], max(arr[1], arr[2]))]\n        if k == 4:\n  \
    \          return [max(arr[0], max(arr[1], max(arr[2], arr[3])))]\n        if\
    \ k == 5:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3],\
    \ arr[4]))))]\n        if k == 6:\n            return [max(arr[0], max(arr[1],\
    \ max(arr[2], max(arr[3], max(arr[4], arr[5])))))]\n        if k == 7:\n     \
    \       return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5],\
    \ arr[6]))))))]\n        if k == 8:\n            return [max(arr[0], max(arr[1],\
    \ max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], arr[7])))))))]\n\
    \        if k == 9:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3],\
    \ max(arr[4], max(arr[5], max(arr[6], max(arr[7], arr[8]))))))))]\n        if\
    \ k == 10:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3],\
    \ max(arr[4], max(arr[5], max(arr[6], max(arr[7], max(arr[8], arr[9])))))))))]\n\
    \        if k == 11:\n            return [max(arr[0], max(arr[1], max(arr[2],\
    \ max(arr[3], max(arr[4], max(arr[5], max(arr[6", '    return max_k(arr, k)',
  '    return max_k(arr, k)', "    def compare(a, b):\n        return a > b\n    \n\
    \    def max_k_numbers(arr, k):\n        if k == 0:\n            return []\n \
    \       elif k == 1:\n            return max(arr, key=lambda x: x)\n        else:\n\
    \            return max(arr, key=lambda x: x, compare=compare)\n    \n    return\
    \ max_k_numbers(arr, k)\n", '    return max_k(arr, k)', "    def findMax(arr,\
    \ k):\n        if len(arr) < k:\n            return arr\n        else:\n     \
    \       return arr[0:k]", '    return max_k(arr, k)', '    return max_k(arr, k)',
  '    return max_k(arr, k)', '    return max_k(arr, k)', "    def find_max_index(arr,\
    \ k):\n        max_index = 0\n        for i in range(len(arr)):\n            if\
    \ arr[i] > arr[max_index]:\n                max_index = i\n        return max_index",
  '    return max_k(arr, k)', "    if k == 0:\n        return []\n    if k == 1:\n\
    \        return max_k(arr)\n    if k == len(arr):\n        return arr\n    if\
    \ k > len(arr):\n        return arr\n    if k == len(arr) - 1:\n        return\
    \ arr\n    return max_k(arr[:k]) + max_k(arr[k:])", '    return max_k(arr, k)',
  "    if k > len(arr) or k < 0:\n        return arr\n    \n    max_index = 0\n  \
    \  max_value = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_value:\n\
    \            max_value = arr[i]\n            max_index = i\n    \n    return arr[0:k]\
    \ + arr[max_index:k] + arr[k:len(arr)]\n", "    if k == 0:\n        return []\n\
    \    if k == 1:\n        return max_k_1(arr)\n    if k == 2:\n        return max_k_2(arr)\n\
    \    if k == 3:\n        return max_k_3(arr)\n    if k == 4:\n        return max_k_4(arr)\n\
    \    if k == 5:\n        return max_k_5(arr)\n    if k == 6:\n        return max_k_6(arr)\n\
    \    if k == 7:\n        return max_k_7(arr)\n    if k == 8:\n        return max_k_8(arr)\n\
    \    if k == 9:\n        return max_k_9(arr)\n    if k == 10:\n        return\
    \ max_k_10(arr)\n    if k == 11:\n        return max_k_11(arr)\n    if k == 12:\n\
    \        return max_k_12(arr)\n    if k == 13:\n        return max_k_13(arr)\n\
    \    if k == 14:\n        return max_k_14(arr)\n    if k == 15:\n        return\
    \ max_k_15(arr)\n    if k == 16:\n        return max_k_16(arr)\n    if k == 17:\n\
    \        return max_k_17(arr)\n    if k == 18:\n        return max_k_18(arr)\n\
    \    if k == 19:\n        return max_k_19(arr)\n    if k == 20:\n        return\
    \ max_k_20(arr)\n    if k == 21:\n        return max_k_21(arr)\n    if k == 22:\n\
    \        return max_k_22(arr)\n    if k == 23:\n        return max_k_23(arr)\n\
    \    if k == 24:\n        return max_k_24(arr)\n    if k == 25:\n        return\
    \ max_k_25(arr)\n    if k == 26:\n        return max_k_26(arr)\n    if k == 27:\n\
    \        return max_k_27(arr)\n    if k == 28:\n        return max_k_28(", '    return
    max_k(arr, k)', "    if k == 0:\n        return []\n    if k == 1:\n        return\
    \ max_k_1(arr)\n    if k == 2:\n        return max_k_2(arr)\n    return max_k_3(arr,\
    \ k)", "    return [max(arr[i:i+k]) for i in range(0, len(arr), k)]\n", "    return\
    \ [max(arr[i] for i in range(len(arr)) if i < k)]\n", "    return [max(arr[i:i+k])\
    \ for i in range(0, len(arr), k)]\n", '    return maximum_rec(arr, k, 0, len(arr)
    - 1)', '    return max_k(arr, k)', '    return max_k(arr, k)', '    return max_k(arr,
    k)', '    return max_k(arr, k)', "    if k == 0:\n        return []\n    elif\
    \ k == 1:\n        return max_k(arr)\n    else:\n        return max_k(max_k(arr,\
    \ k - 1))", "    def compare(a, b):\n        if a > b:\n            return 1\n\
    \        elif a < b:\n            return -1\n        else:\n            return\
    \ 0", '    return max_k(arr, k)', "    if k == 0:\n        return []\n    elif\
    \ k == 1:\n        return max_k_1(arr)\n    else:\n        return max_k_2(arr,\
    \ k)", "    return [max(arr[i] for i in range(k)) for i in range(k)]\n", "   \
    \ def find_max_index(arr, k):\n        max_index = 0\n        for i in range(len(arr)):\n\
    \            if arr[i] > arr[max_index]:\n                max_index = i\n    \
    \    return max_index", '    return max_k(arr, k)', '    return max_k(arr, k)',
  "    return [arr[i] for i in range(k) if arr[i] > arr[i+1]]\n", '    return max_k(arr,
    k)', '    return max_k(arr, k)', "    def helper(arr, k):\n        if k == 0:\n\
    \            return []\n        if k == 1:\n            return [max(arr)]\n  \
    \      if k == 2:\n            return [max(arr[0], arr[1])]\n        if k == 3:\n\
    \            return [max(arr[0], max(arr[1], arr[2]))]\n        if k == 4:\n \
    \           return [max(arr[0], max(arr[1], max(arr[2], arr[3])))]\n        if\
    \ k == 5:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3],\
    \ arr[4]))))]\n        if k == 6:\n            return [max(arr[0], max(arr[1],\
    \ max(arr[2], max(arr[3], max(arr[4], arr[5])))))]\n        if k == 7:\n     \
    \       return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5],\
    \ arr[6]))))))]\n        if k == 8:\n            return [max(arr[0], max(arr[1],\
    \ max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], arr[7])))))))]\n\
    \        if k == 9:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3],\
    \ max(arr[4], max(arr[5], max(arr[6], max(arr[7], arr[8]))))))))]\n        if\
    \ k == 10:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3],\
    \ max(arr[4], max(arr[5], max(arr[6], max(arr[7], max(arr[8], arr[9])))))))))]\n\
    \        if k == 11:\n            return [max(arr[0], max(arr[1], max(arr[2],\
    \ max(arr[3], max(arr[4], max(arr[5], max(arr[6", "    return [max(arr[i] for\
    \ i in range(k)) for i in range(k)]\n", '    return max_k(arr, k)', "    return\
    \ [arr[i] for i in range(k) if arr[i] > arr[i - 1]]\n", '    return max_k(arr,
    k)', '    return max_k(arr, k)', '    return [max(arr, k)]', "    if k == 0:\n\
    \        return []\n    if k == 1:\n        return max_k_1(arr)\n    if k == 2:\n\
    \        return max_k_2(arr)\n    if k == 3:\n        return max_k_3(arr)\n  \
    \  if k == 4:\n        return max_k_4(arr)\n    if k == 5:\n        return max_k_5(arr)\n\
    \    if k == 6:\n        return max_k_6(arr)\n    if k == 7:\n        return max_k_7(arr)\n\
    \    if k == 8:\n        return max_k_8(arr)\n    if k == 9:\n        return max_k_9(arr)\n\
    \    if k == 10:\n        return max_k_10(arr)\n    if k == 11:\n        return\
    \ max_k_11(arr)\n    if k == 12:\n        return max_k_12(arr)\n    if k == 13:\n\
    \        return max_k_13(arr)\n    if k == 14:\n        return max_k_14(arr)\n\
    \    if k == 15:\n        return max_k_15(arr)\n    if k == 16:\n        return\
    \ max_k_16(arr)\n    if k == 17:\n        return max_k_17(arr)\n    if k == 18:\n\
    \        return max_k_18(arr)\n    if k == 19:\n        return max_k_19(arr)\n\
    \    if k == 20:\n        return max_k_20(arr)\n    if k == 21:\n        return\
    \ max_k_21(arr)\n    if k == 22:\n        return max_k_22(arr)\n    if k == 23:\n\
    \        return max_k_23(arr)\n    if k == 24:\n        return max_k_24(arr)\n\
    \    if k == 25:\n        return max_k_25(arr)\n    if k == 26:\n        return\
    \ max_k_26(arr)\n    if k == 27:\n        return max_k_27(arr)\n    if k == 28:\n\
    \        return max_k_28(", '    return max_k_subset(arr, k)', '    return max_k(arr,
    k)', "    def helper(arr, k):\n        if k == 0:\n            return []\n   \
    \     if k == 1:\n            return [max(arr)]\n        if k == 2:\n        \
    \    return [max(arr[0], arr[1])]\n        if k == 3:\n            return [max(arr[0],\
    \ max(arr[1], arr[2]))]\n        if k == 4:\n            return [max(arr[0], max(arr[1],\
    \ max(arr[2], arr[3])))]\n        if k == 5:\n            return [max(arr[0],\
    \ max(arr[1], max(arr[2], max(arr[3], arr[4]))))]\n        if k == 6:\n      \
    \      return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], arr[5])))))]\n\
    \        if k == 7:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3],\
    \ max(arr[4], max(arr[5], arr[6]))))))]\n        if k == 8:\n            return\
    \ [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6],\
    \ arr[7])))))))]\n        if k == 9:\n            return [max(arr[0], max(arr[1],\
    \ max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], max(arr[7], arr[8]))))))))]\n\
    \        if k == 10:\n            return [max(arr[0], max(arr[1], max(arr[2],\
    \ max(arr[3], max(arr[4], max(arr[5], max(arr[6], max(arr[7], max(arr[8], arr[9])))))))))]\n\
    \        if k == 11:\n            return [max(arr[0], max(arr[1], max(arr[2],\
    \ max(arr[3], max(arr[4], max(arr[5], max(arr[6", '    return max_k(arr, k)',
  '    return max_k(arr, k)', '    return maximum_rec(arr, k, 0, len(arr) - 1)', '    return
    max_k(arr, k)', '    return maximum_helper(arr, k)', '    return max_k_subset(arr,
    k)', '    return max_k_numbers(arr, k)', '    return max_k(arr, k)', '    return
    max_k(arr, k)', "    return [max(arr[i] for i in range(len(arr)) if i < k)]\n",
  "    if k == 0:\n        return []\n    elif k == 1:\n        return max(arr)\n\
    \    else:\n        return max(arr, k)\n", '    return max_k(arr, k)', "    if\
    \ k == 0:\n        return []\n    if k == 1:\n        return max_k_1(arr)\n  \
    \  if k == 2:\n        return max_k_2(arr)\n    if k == 3:\n        return max_k_3(arr)\n\
    \    if k == 4:\n        return max_k_4(arr)\n    if k == 5:\n        return max_k_5(arr)\n\
    \    if k == 6:\n        return max_k_6(arr)\n    if k == 7:\n        return max_k_7(arr)\n\
    \    if k == 8:\n        return max_k_8(arr)\n    if k == 9:\n        return max_k_9(arr)\n\
    \    if k == 10:\n        return max_k_10(arr)\n    if k == 11:\n        return\
    \ max_k_11(arr)\n    if k == 12:\n        return max_k_12(arr)\n    if k == 13:\n\
    \        return max_k_13(arr)\n    if k == 14:\n        return max_k_14(arr)\n\
    \    if k == 15:\n        return max_k_15(arr)\n    if k == 16:\n        return\
    \ max_k_16(arr)\n    if k == 17:\n        return max_k_17(arr)\n    if k == 18:\n\
    \        return max_k_18(arr)\n    if k == 19:\n        return max_k_19(arr)\n\
    \    if k == 20:\n        return max_k_20(arr)\n    if k == 21:\n        return\
    \ max_k_21(arr)\n    if k == 22:\n        return max_k_22(arr)\n    if k == 23:\n\
    \        return max_k_23(arr)\n    if k == 24:\n        return max_k_24(arr)\n\
    \    if k == 25:\n        return max_k_25(arr)\n    if k == 26:\n        return\
    \ max_k_26(arr)\n    if k == 27:\n        return max_k_27(arr)\n    if k == 28:\n\
    \        return max_k_28(", '    return max_k(arr, k)', "    return [max(arr[i]\
    \ for i in range(k)) for i in range(k)]\n", '    return max_k(arr, k)', '    return
    max_k(arr, k)', "    if k == 0:\n        return []\n    elif k == 1:\n       \
    \ return max_k_1(arr)\n    else:\n        return max_k_2(arr, k)", '    return
    max_k(arr, k)', '    return maximum_rec(arr, k, 0, len(arr) - 1)', '    return
    max_k(arr, k)', '    return max_k(arr, k)', "    def compare(a, b):\n        if\
    \ a > b:\n            return 1\n        elif a < b:\n            return -1\n \
    \       else:\n            return 0", '    return max_k(arr, k)', "    return\
    \ [arr[i] for i in range(len(arr)) if arr[i] > arr[i-k] and i >= k]\n", "    if\
    \ k == 0:\n        return []\n    elif k == 1:\n        return max(arr)\n    else:\n\
    \        return max(arr[0:k])\n", "    if k == 0:\n        return []\n    if k\
    \ == 1:\n        return max_k_1(arr)\n    if k == 2:\n        return max_k_2(arr)\n\
    \    if k == 3:\n        return max_k_3(arr)\n    if k == 4:\n        return max_k_4(arr)\n\
    \    if k == 5:\n        return max_k_5(arr)\n    if k == 6:\n        return max_k_6(arr)\n\
    \    if k == 7:\n        return max_k_7(arr)\n    if k == 8:\n        return max_k_8(arr)\n\
    \    if k == 9:\n        return max_k_9(arr)\n    if k == 10:\n        return\
    \ max_k_10(arr)\n    if k == 11:\n        return max_k_11(arr)\n    if k == 12:\n\
    \        return max_k_12(arr)\n    if k == 13:\n        return max_k_13(arr)\n\
    \    if k == 14:\n        return max_k_14(arr)\n    if k == 15:\n        return\
    \ max_k_15(arr)\n    if k == 16:\n        return max_k_16(arr)\n    if k == 17:\n\
    \        return max_k_17(arr)\n    if k == 18:\n        return max_k_18(arr)\n\
    \    if k == 19:\n        return max_k_19(arr)\n    if k == 20:\n        return\
    \ max_k_20(arr)\n    if k == 21:\n        return max_k_21(arr)\n    if k == 22:\n\
    \        return max_k_22(arr)\n    if k == 23:\n        return max_k_23(arr)\n\
    \    if k == 24:\n        return max_k_24(arr)\n    if k == 25:\n        return\
    \ max_k_25(arr)\n    if k == 26:\n        return max_k_26(arr)\n    if k == 27:\n\
    \        return max_k_27(arr)\n    if k == 28:\n        return max_k_28(", " \
    \   if k == 0:\n        return []\n    if k == 1:\n        return max_k_1(arr)\n\
    \    if k == 2:\n        return max_k_2(arr)\n    return max_k_3(arr, k)", " \
    \   return [arr[i] for i in range(len(arr)) if arr[i] >= arr[i - k] and arr[i]\
    \ >= arr[i + k]]\n", "    if k == 0:\n        return []\n    if k == 1:\n    \
    \    return max_k_1(arr)\n    if k == 2:\n        return max_k_2(arr)\n    return\
    \ max_k_3(arr, k)", "    if k == 0:\n        return []\n    if k == 1:\n     \
    \   return max_k(arr)\n    if k == 2:\n        return max_k(arr) + max_k(arr +\
    \ 1)\n    if k == 3:\n        return max_k(arr) + max_k(arr + 1) + max_k(arr +\
    \ 2)\n    if k == 4:\n        return max_k(arr) + max_k(arr + 1) + max_k(arr +\
    \ 2) + max_k(arr + 3)\n    if k == 5:\n        return max_k(arr) + max_k(arr +\
    \ 1) + max_k(arr + 2) + max_k(arr + 3) + max_k(arr + 4)\n    if k == 6:\n    \
    \    return max_k(arr) + max_k(arr + 1) + max_k(arr + 2) + max_k(arr + 3) + max_k(arr\
    \ + 4) + max_k(arr + 5)\n    if k == 7:\n        return max_k(arr) + max_k(arr\
    \ + 1) + max_k(arr + 2) + max_k(arr + 3) + max_k(arr + 4) + max_k(arr + 5) + max_k(arr\
    \ + 6)\n    if k == 8:\n        return max_k(arr) + max_k(arr + 1) + max_k(arr\
    \ + 2) + max_k(arr + 3) + max_k(arr + 4) + max_k(arr + 5) + max_k(arr + 6) + max_k(arr\
    \ + 7)\n    if k == 9:\n        return max_k(arr) + max_k(arr + 1) + max_k(arr\
    \ + 2) + max_k(arr + 3) + max_k(arr + 4) + max_k(arr + 5) + max_k(arr + 6) + max_k(arr\
    \ + 7) + max_k(arr + 8)\n    if k == 10:\n        return max_k(arr) + max_k(arr\
    \ + 1) + max_k(arr + 2)", '    return max_k(arr, k)', '    return max_k(arr, k)',
  '    return maximum_rec(arr, k, 0, len(arr) - 1)', '    return max_k(arr, k)', '    return
    max_k(arr, k)', "    return sorted(arr)[:k]\n", "    return [max(arr[i:i+k]) for\
    \ i in range(len(arr)-k+1)]\n", '    return max_k(arr, k)', "    def helper(arr,\
    \ k):\n        if k == 0:\n            return []\n        if k == 1:\n       \
    \     return [max(arr)]\n        if k == 2:\n            return [max(arr[0], arr[1])]\n\
    \        if arr[0] > arr[1]:\n            arr[0], arr[1] = arr[1], arr[0]\n  \
    \      if arr[0] > arr[2]:\n            arr[0], arr[2] = arr[2], arr[0]\n    \
    \    if arr[1] > arr[2]:\n            arr[1], arr[2] = arr[2], arr[1]\n      \
    \  if arr[0] > arr[1]:\n            arr[0], arr[1] = arr[1], arr[0]\n        if\
    \ arr[0] > arr[2]:\n            arr[0], arr[2] = arr[2], arr[0]\n        if arr[1]\
    \ > arr[2]:\n            arr[1], arr[2] = arr[2], arr[1]\n        if arr[0] >\
    \ arr[1]:\n            arr[0], arr[1] = arr[1], arr[0]\n        if arr[0] > arr[2]:\n\
    \            arr[0], arr[2] = arr[2], arr[0]\n        if arr[1] > arr[2]:\n  \
    \          arr[1], arr[2] = arr[2], arr[1]\n        if arr[0] > arr[1]:\n    \
    \        arr[0], arr[1] = arr[1], arr[0]\n        if arr[0] > arr[2]:\n      \
    \      arr[0], arr[2] = arr[2], arr[0]\n        if arr[1] > arr[2]:\n        \
    \    arr[1], arr[2] = arr[2], arr[1]\n        if arr[0] > arr[1]:\n          \
    \  arr[0], arr[1] = arr[1], arr[0]\n        if arr[0] > arr[2]:\n            arr[0],\
    \ arr[2] = arr[2], arr[0]\n        if arr[1] > arr[2]:\n            arr[1], arr[2]",
  '    return max_k(arr, k)', '    return max_k(arr, k)', '    return max_k(arr, k)',
  '    return max_k(arr, k)', '    return max_k(arr, k)', "    def helper(arr, k):\n\
    \        if k == 0:\n            return []\n        if k == 1:\n            return\
    \ max(arr)\n        if k == 2:\n            return max(arr[0], arr[1])\n     \
    \   if arr[0] >= arr[1]:\n            return helper(arr[1:], k - 1)\n        else:\n\
    \            return helper(arr[0:], k - 1)\n    return helper(arr, k)\n", '    return
    maximum_helper(arr, k)', '    return max_k(arr, k)', '    return max_k_numbers(arr,
    k)', '    return max_k(arr, k)', '    return max_k(arr, k)', "    def get_max_k_numbers(arr,\
    \ k):\n        max_k_numbers = []\n        for i in range(len(arr)):\n       \
    \     if len(max_k_numbers) < k:\n                max_k_numbers.append(arr[i])\n\
    \            else:\n                if arr[i] > max_k_numbers[k - 1]:\n      \
    \              max_k_numbers[k - 1] = arr[i]\n        return max_k_numbers", '    return
    max_k(arr, k)', '    return max_k(arr, k)', "    def find_max(arr, k):\n     \
    \   if k == 0:\n            return arr\n        else:\n            return find_max(arr[1:],\
    \ k - 1)\n    return find_max(arr, k)\n", "    return sorted(arr)[:k]\n", "  \
    \  if k == 0:\n        return []\n    if k == 1:\n        return max(arr)\n  \
    \  if k == 2:\n        return max(arr[0], arr[1])\n    if k == len(arr):\n   \
    \     return arr\n    return arr[0] + max(arr[1:k])\n", "    return [arr[i] for\
    \ i in range(k) if arr[i] > arr[i+1]]\n", "    return [arr[i] for i in range(len(arr))\
    \ if arr[i] > arr[i-k] and i >= k]\n", '    return max_k(arr, k)', "    if k ==\
    \ 0:\n        return []\n    if k == 1:\n        return max_k_1(arr)\n    if k\
    \ == 2:\n        return max_k_2(arr)\n    if k == 3:\n        return max_k_3(arr)\n\
    \    if k == 4:\n        return max_k_4(arr)\n    if k == 5:\n        return max_k_5(arr)\n\
    \    if k == 6:\n        return max_k_6(arr)\n    if k == 7:\n        return max_k_7(arr)\n\
    \    if k == 8:\n        return max_k_8(arr)\n    if k == 9:\n        return max_k_9(arr)\n\
    \    if k == 10:\n        return max_k_10(arr)\n    if k == 11:\n        return\
    \ max_k_11(arr)\n    if k == 12:\n        return max_k_12(arr)\n    if k == 13:\n\
    \        return max_k_13(arr)\n    if k == 14:\n        return max_k_14(arr)\n\
    \    if k == 15:\n        return max_k_15(arr)\n    if k == 16:\n        return\
    \ max_k_16(arr)\n    if k == 17:\n        return max_k_17(arr)\n    if k == 18:\n\
    \        return max_k_18(arr)\n    if k == 19:\n        return max_k_19(arr)\n\
    \    if k == 20:\n        return max_k_20(arr)\n    if k == 21:\n        return\
    \ max_k_21(arr)\n    if k == 22:\n        return max_k_22(arr)\n    if k == 23:\n\
    \        return max_k_23(arr)\n    if k == 24:\n        return max_k_24(arr)\n\
    \    if k == 25:\n        return max_k_25(arr)\n    if k == 26:\n        return\
    \ max_k_26(arr)\n    if k == 27:\n        return max_k_27(arr)\n    if k == 28:\n\
    \        return max_k_28(", '    return max_k(arr, k)', '    return max_k(arr,
    k)', '    return max_k(arr, k)', '    return max_k(arr, k)', "    return [max(arr,\
    \ k)]\n", '    return maximum_rec(arr, k, 0, len(arr) - 1)', '    return max_k(arr,
    k)', '    return max_k(arr, k)', '    return max_k(arr, k)', '    return max_k(arr,
    k)', "    def helper(arr, k):\n        if len(arr) < k:\n            return arr\n\
    \        else:\n            return [max(arr[i], arr[i + 1]) for i in range(len(arr)\
    \ - k + 1)]", "    if k == 0:\n        return []\n    if k == 1:\n        return\
    \ [max(arr)]\n    if k == 2:\n        return [max(arr[0], arr[1])]\n    if k ==\
    \ 3:\n        return [max(arr[0], max(arr[1], arr[2]))]\n    if k == 4:\n    \
    \    return [max(arr[0], max(arr[1], max(arr[2], arr[3])))]\n    if k == 5:\n\
    \        return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], arr[4]))))]\n\
    \    if k == 6:\n        return [max(arr[0], max(arr[1], max(arr[2], max(arr[3],\
    \ max(arr[4], arr[5])))))]\n    if k == 7:\n        return [max(arr[0], max(arr[1],\
    \ max(arr[2], max(arr[3], max(arr[4], max(arr[5], arr[6]))))))]\n    if k == 8:\n\
    \        return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5],\
    \ max(arr[6], arr[7])))))))]\n    if k == 9:\n        return [max(arr[0], max(arr[1],\
    \ max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], max(arr[7], arr[8]))))))))]\n\
    \    if k == 10:\n        return [max(arr[0], max(arr[1], max(arr[2], max(arr[3],\
    \ max(arr[4], max(arr[5], max(arr[6], max(arr[7], max(arr[8], arr[9])))))))))]\n\
    \    if k == 11:\n        return [max(arr[0], max(arr[1], max(arr[2], max(arr[3],\
    \ max(arr[4], max(arr[5], max(arr[6], max(arr[7], max(", "    return [max(arr[i]\
    \ for i in range(k)) for i in range(k)]\n", '    return max_k(arr, k)', '    return
    max_k_numbers(arr, k)', "    return [arr[i] for i in range(k) if arr[i] > arr[i\
    \ + 1]]\n", '    return maximum_helper(arr, k)', '    return max_k(arr, k)', " \
    \   return [max(arr[i:i+k]) for i in range(len(arr) - k + 1)]\n", "    if k ==\
    \ 0:\n        return []\n    elif k == 1:\n        return max_k_1(arr)\n    else:\n\
    \        return max_k_2(arr, k)", "    if k == 0:\n        return []\n    elif\
    \ k == 1:\n        return max_k_1(arr)\n    else:\n        return max_k_2(arr,\
    \ k)", '    return max_k(arr, k)']
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
