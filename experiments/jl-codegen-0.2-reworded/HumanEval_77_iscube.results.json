{
  "name": "HumanEval_77_iscube",
  "language": "jl",
  "prompt": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n",
  "tests": "using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "results": [
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return True\n    if a % 3 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp89bam55z.jl:21\nin expression starting at /tmp/tmp89bam55z.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return False\n    if a % 4 == 0:\n        return False\n    return True\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw5dhj8le.jl:21\nin expression starting at /tmp/tmpw5dhj8le.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    elif a < 0:\n        return True\n    else:\n        return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4o7cqqid.jl:21\nin expression starting at /tmp/tmp4o7cqqid.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0 or a == 1:\n        return True\n    elif a % 3 == 0:\n        return iscube(a // 3)\n    else:\n        return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"a\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5lc6iuo.jl:20\nin expression starting at /tmp/tmpu5lc6iuo.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    elif a == 0:\n        return True\n    else:\n        return False\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5vv7nwdl.jl:21\nin expression starting at /tmp/tmp5vv7nwdl.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr_vdopks.jl:21\nin expression starting at /tmp/tmpr_vdopks.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return True\n    if a % 3 == 0:\n        return False\n    return iscube(a / 3)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppxk2mzqp.jl:21\nin expression starting at /tmp/tmppxk2mzqp.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return iscube(a // 3)\n    return iscube(a // 4)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphamhsw_s.jl:21\nin expression starting at /tmp/tmphamhsw_s.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    return a % a == 0 and a % (a / a) == 0\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmplbd9y8wy.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplbd9y8wy.jl:20\nin expression starting at /tmp/tmplbd9y8wy.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return iscube(a / 3)\n    return iscube(a / 3)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppkhb4hrn.jl:21\nin expression starting at /tmp/tmppkhb4hrn.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return iscube(a / 3)\n    else:\n        return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5opy2x93.jl:21\nin expression starting at /tmp/tmp5opy2x93.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a % 3 == 0:\n        return False\n    return True\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv5c6gawu.jl:21\nin expression starting at /tmp/tmpv5c6gawu.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a % 3 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpozf2jojs.jl:21\nin expression starting at /tmp/tmpozf2jojs.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    return a % a == 0 and a >= 0\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmp6w83c8lo.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6w83c8lo.jl:20\nin expression starting at /tmp/tmp6w83c8lo.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    return False\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpco7294r0.jl:21\nin expression starting at /tmp/tmpco7294r0.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    return a % a == 0 and a % (a / a) == 0\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmplbd9y8wy.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplbd9y8wy.jl:20\nin expression starting at /tmp/tmplbd9y8wy.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    elif a < 0:\n        return True\n    else:\n        return False\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj39md1xf.jl:21\nin expression starting at /tmp/tmpj39md1xf.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    return a % a == 0 and a % a % a == 0\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpojmx4k5q.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpojmx4k5q.jl:20\nin expression starting at /tmp/tmpojmx4k5q.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    elif a < 0:\n        return True\n    else:\n        return False\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj39md1xf.jl:21\nin expression starting at /tmp/tmpj39md1xf.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return iscube(a // 3)\n    if a % 4 == 0:\n        return iscube(a // 4)\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1jirne32.jl:21\nin expression starting at /tmp/tmp1jirne32.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return iscube(a // 3)\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6htky4se.jl:21\nin expression starting at /tmp/tmp6htky4se.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt6u_045q.jl:21\nin expression starting at /tmp/tmpt6u_045q.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    return a % a == 0 and a >= 0\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmp6w83c8lo.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6w83c8lo.jl:20\nin expression starting at /tmp/tmp6w83c8lo.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    return a % a == 0 and a % a % a == 0\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpwsyhp5c9.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwsyhp5c9.jl:20\nin expression starting at /tmp/tmpwsyhp5c9.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr_vdopks.jl:21\nin expression starting at /tmp/tmpr_vdopks.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    if a % 4 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdioi3zz7.jl:21\nin expression starting at /tmp/tmpdioi3zz7.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return iscube(a // 3)\n    return iscube(a // 4)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphamhsw_s.jl:21\nin expression starting at /tmp/tmphamhsw_s.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    return a % a == 0 and a > 0\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpppsydr5c.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpppsydr5c.jl:20\nin expression starting at /tmp/tmpppsydr5c.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    return a % a == 0 and a >= 0\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmp6w83c8lo.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6w83c8lo.jl:20\nin expression starting at /tmp/tmp6w83c8lo.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return iscube(a / 3)\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmxhx46vi.jl:21\nin expression starting at /tmp/tmpmxhx46vi.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return iscube(a / 3)\n    else:\n        return iscube(a / 3) or iscube(a / 2)\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwz6fo45b.jl:21\nin expression starting at /tmp/tmpwz6fo45b.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return iscube(a // 3)\n    if a % 4 == 0:\n        return iscube(a // 4)\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1jirne32.jl:21\nin expression starting at /tmp/tmp1jirne32.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return iscube(a / 3)\n    if a % 4 == 0:\n        return iscube(a / 4)\n    if a % 9 == 0:\n        return iscube(a / 9)\n    if a % 16 == 0:\n        return iscube(a / 16)\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp55g0ee2c.jl:21\nin expression starting at /tmp/tmp55g0ee2c.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return iscube(a / 3)\n    return iscube(a / 3)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppkhb4hrn.jl:21\nin expression starting at /tmp/tmppkhb4hrn.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    return a % a == 0 and a % (a / 3) == 0\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpok57rzyi.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpok57rzyi.jl:20\nin expression starting at /tmp/tmpok57rzyi.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    return a % a == 0 and a % a % a == 0\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpojmx4k5q.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpojmx4k5q.jl:20\nin expression starting at /tmp/tmpojmx4k5q.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return True\n    if a % 3 != 0:\n        return False\n    return iscube(a // 3)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3rl61h08.jl:21\nin expression starting at /tmp/tmp3rl61h08.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0 or a == 1:\n        return True\n    if a % 3 == 0:\n        return iscube(a / 3)\n    return False\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"a\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoeudp304.jl:20\nin expression starting at /tmp/tmpoeudp304.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0: \n        return True\n    elif a < 0: \n        return False\n    elif a % 3 == 0: \n        return iscube(a // 3)\n    else: \n        return iscube(a // 4)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppc0wfbmk.jl:21\nin expression starting at /tmp/tmppc0wfbmk.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    elif a < 0:\n        return False\n    else:\n        return a % a == 0 and iscube(a // a)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5s9be0ft.jl:21\nin expression starting at /tmp/tmp5s9be0ft.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    return a % a == 0 and a >= 0\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmp6w83c8lo.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6w83c8lo.jl:20\nin expression starting at /tmp/tmp6w83c8lo.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    if a % 5 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_y6mct7o.jl:21\nin expression starting at /tmp/tmp_y6mct7o.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return iscube(a // 3)\n    return iscube(a // 4)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphamhsw_s.jl:21\nin expression starting at /tmp/tmphamhsw_s.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    if a % 4 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdioi3zz7.jl:21\nin expression starting at /tmp/tmpdioi3zz7.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return True\n    if a % 4 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphl11ddpk.jl:21\nin expression starting at /tmp/tmphl11ddpk.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 != 0:\n        return False\n    return iscube(a // 3)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7_u0nbdk.jl:21\nin expression starting at /tmp/tmp7_u0nbdk.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt6u_045q.jl:21\nin expression starting at /tmp/tmpt6u_045q.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    return False\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpco7294r0.jl:21\nin expression starting at /tmp/tmpco7294r0.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0: \n        return True\n    if a % 3 != 0: \n        return False\n    return iscube(a // 3)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpufl_2_aw.jl:21\nin expression starting at /tmp/tmpufl_2_aw.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return iscube(a / 3)\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmxhx46vi.jl:21\nin expression starting at /tmp/tmpmxhx46vi.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    return a % a == 0 and a >= 0\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmp6w83c8lo.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6w83c8lo.jl:20\nin expression starting at /tmp/tmp6w83c8lo.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr_vdopks.jl:21\nin expression starting at /tmp/tmpr_vdopks.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    return a % a == 0 and a >= 0\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpsj2jpbgi.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsj2jpbgi.jl:20\nin expression starting at /tmp/tmpsj2jpbgi.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a % 3 == 0:\n        return False\n    return True\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv5c6gawu.jl:21\nin expression starting at /tmp/tmpv5c6gawu.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    return a % a == 0 and a % (a / 3) == 0\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpok57rzyi.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpok57rzyi.jl:20\nin expression starting at /tmp/tmpok57rzyi.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return True\n    if a % 3 == 0:\n        return False\n    return iscube(a // 3)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc4qgg4e_.jl:21\nin expression starting at /tmp/tmpc4qgg4e_.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return iscube(a / 3)\n    else:\n        return iscube(a / 3) or iscube(a / 2)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnmd36nb.jl:21\nin expression starting at /tmp/tmpcnmd36nb.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return True\n    if a % 3 == 0:\n        return False\n    return iscube(a // 3)\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprd5ckg8s.jl:21\nin expression starting at /tmp/tmprd5ckg8s.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    elif a < 0:\n        return False\n    else:\n        return iscube(a // 3) and iscube(a % 3)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4yk5zudz.jl:21\nin expression starting at /tmp/tmp4yk5zudz.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return iscube(a // 3)\n    if a % 4 == 0:\n        return iscube(a // 4)\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1jirne32.jl:21\nin expression starting at /tmp/tmp1jirne32.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0 or a == 1:\n        return True\n    elif a % 3 == 0:\n        return iscube(a / 3)\n    else:\n        return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"a\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxir8a6y9.jl:20\nin expression starting at /tmp/tmpxir8a6y9.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return True\n    return False\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5bh9tcuw.jl:21\nin expression starting at /tmp/tmp5bh9tcuw.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    return a % a == 0 and a >= 0\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmp6w83c8lo.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6w83c8lo.jl:20\nin expression starting at /tmp/tmp6w83c8lo.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0: \n        return True\n    elif a < 0: \n        return False\n    else: \n        return iscube(a//3) and iscube(a%3)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprtfi9dk2.jl:21\nin expression starting at /tmp/tmprtfi9dk2.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return iscube(a // 3)\n    if a % 4 == 0:\n        return iscube(a // 4)\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1jirne32.jl:21\nin expression starting at /tmp/tmp1jirne32.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return iscube(a / 3)\n    return iscube(a / 3) or iscube(a / 2)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv1vu3p2h.jl:21\nin expression starting at /tmp/tmpv1vu3p2h.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt6u_045q.jl:21\nin expression starting at /tmp/tmpt6u_045q.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    if a % 4 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdioi3zz7.jl:21\nin expression starting at /tmp/tmpdioi3zz7.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return iscube(a / 3)\n    else:\n        return iscube(a / 3) or iscube(a / 3)\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr9o3mypo.jl:21\nin expression starting at /tmp/tmpr9o3mypo.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    elif a % 3 == 0:\n        return iscube(a // 3)\n    else:\n        return False\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpszqgzt83.jl:21\nin expression starting at /tmp/tmpszqgzt83.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return iscube(a // 3)\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6htky4se.jl:21\nin expression starting at /tmp/tmp6htky4se.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    if a % 4 == 0:\n        return True\n    if a % 5 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1gx0z5ag.jl:21\nin expression starting at /tmp/tmp1gx0z5ag.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return iscube(a / 3)\n    else:\n        return iscube(a / 3) or iscube(a / 2)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnmd36nb.jl:21\nin expression starting at /tmp/tmpcnmd36nb.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return iscube(a / 3)\n    if a % 4 == 0:\n        return iscube(a / 4)\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp39pabgvo.jl:21\nin expression starting at /tmp/tmp39pabgvo.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a % 3 == 0:\n        return True\n    return False\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkl221rwo.jl:21\nin expression starting at /tmp/tmpkl221rwo.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return iscube(a / 3)\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmxhx46vi.jl:21\nin expression starting at /tmp/tmpmxhx46vi.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return True\n    if a % 3 == 0:\n        return iscube(a // 3)\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6hzpnbbq.jl:21\nin expression starting at /tmp/tmp6hzpnbbq.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    return a % a == 0 and a >= 0\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpsj2jpbgi.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsj2jpbgi.jl:20\nin expression starting at /tmp/tmpsj2jpbgi.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt6u_045q.jl:21\nin expression starting at /tmp/tmpt6u_045q.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    if a % 5 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_y6mct7o.jl:21\nin expression starting at /tmp/tmp_y6mct7o.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a % 3 == 0:\n        return True\n    if a % 4 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4ne3clb2.jl:21\nin expression starting at /tmp/tmp4ne3clb2.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return iscube(a // 3)\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6htky4se.jl:21\nin expression starting at /tmp/tmp6htky4se.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return iscube(a / 3)\n    else:\n        return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptsn6wm99.jl:21\nin expression starting at /tmp/tmptsn6wm99.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    elif a < 0:\n        return True\n    else:\n        return False\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj39md1xf.jl:21\nin expression starting at /tmp/tmpj39md1xf.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt6u_045q.jl:21\nin expression starting at /tmp/tmpt6u_045q.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt6u_045q.jl:21\nin expression starting at /tmp/tmpt6u_045q.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr_vdopks.jl:21\nin expression starting at /tmp/tmpr_vdopks.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    return a % a == 0 and a >= 0\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmp6w83c8lo.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6w83c8lo.jl:20\nin expression starting at /tmp/tmp6w83c8lo.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 != 0:\n        return False\n    return iscube(a // 3)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7_u0nbdk.jl:21\nin expression starting at /tmp/tmp7_u0nbdk.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    return a % a == 0\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6hxo_4vs.jl:19 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6hxo_4vs.jl:1\nin expression starting at /tmp/tmp6hxo_4vs.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    elif a < 0:\n        return True\n    else:\n        return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4o7cqqid.jl:21\nin expression starting at /tmp/tmp4o7cqqid.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    return False\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpco7294r0.jl:21\nin expression starting at /tmp/tmpco7294r0.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return iscube(a / 3)\n    return iscube(a / 3)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppkhb4hrn.jl:21\nin expression starting at /tmp/tmppkhb4hrn.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    if a % 4 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdioi3zz7.jl:21\nin expression starting at /tmp/tmpdioi3zz7.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return iscube(a // 3)\n    return iscube(a // 4)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphamhsw_s.jl:21\nin expression starting at /tmp/tmphamhsw_s.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr_vdopks.jl:21\nin expression starting at /tmp/tmpr_vdopks.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return iscube(a / 3)\n    else:\n        return iscube(a / 3) or iscube(a / 2)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnmd36nb.jl:21\nin expression starting at /tmp/tmpcnmd36nb.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    if a % 4 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdioi3zz7.jl:21\nin expression starting at /tmp/tmpdioi3zz7.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    return a % a == 0 and a >= 0\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmp6w83c8lo.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6w83c8lo.jl:20\nin expression starting at /tmp/tmp6w83c8lo.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr_vdopks.jl:21\nin expression starting at /tmp/tmpr_vdopks.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    elif a < 0:\n        return False\n    else:\n        return iscube(a // 3) and iscube(a % 3)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4yk5zudz.jl:21\nin expression starting at /tmp/tmp4yk5zudz.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    return False\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpco7294r0.jl:21\nin expression starting at /tmp/tmpco7294r0.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return True\n    if a % 3 == 0:\n        return iscube(a // 3)\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6hzpnbbq.jl:21\nin expression starting at /tmp/tmp6hzpnbbq.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    return a % a == 0 and a % a % a == 0\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpwsyhp5c9.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwsyhp5c9.jl:20\nin expression starting at /tmp/tmpwsyhp5c9.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    elif a < 0:\n        return False\n    else:\n        return a % a == 0\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn5_uutky.jl:21\nin expression starting at /tmp/tmpn5_uutky.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return iscube(a / 3)\n    else:\n        return iscube(a / 3) or iscube(a / 2)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnmd36nb.jl:21\nin expression starting at /tmp/tmpcnmd36nb.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0: \n        return True\n    elif a < 0: \n        return True\n    elif a % 3 == 0: \n        return True\n    else: \n        return False\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1rvuhipj.jl:21\nin expression starting at /tmp/tmp1rvuhipj.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return True\n    if a % 3 == 1:\n        return False\n    if a % 3 == 2:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1kyhmpka.jl:21\nin expression starting at /tmp/tmp1kyhmpka.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return iscube(a // 3)\n    if a % 4 == 0:\n        return iscube(a // 4)\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1jirne32.jl:21\nin expression starting at /tmp/tmp1jirne32.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    if a % 4 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdioi3zz7.jl:21\nin expression starting at /tmp/tmpdioi3zz7.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return True\n    if a % 3 == 0:\n        return False\n    if a % 4 == 0:\n        return False\n    return True\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsfq9gekc.jl:21\nin expression starting at /tmp/tmpsfq9gekc.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0: \n        return True\n    elif a < 0: \n        return False\n    else: \n        return iscube(a // 3) and iscube(a % 3)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj06o_zqf.jl:21\nin expression starting at /tmp/tmpj06o_zqf.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return True\n    if a % 3 == 0:\n        return False\n    if a % 4 == 0:\n        return False\n    return True\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsfq9gekc.jl:21\nin expression starting at /tmp/tmpsfq9gekc.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    return a % a == 0 and a >= 0\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpsj2jpbgi.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsj2jpbgi.jl:20\nin expression starting at /tmp/tmpsj2jpbgi.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return False\n    return True\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfbg0m6np.jl:21\nin expression starting at /tmp/tmpfbg0m6np.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    if a % 4 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdioi3zz7.jl:21\nin expression starting at /tmp/tmpdioi3zz7.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return iscube(a // 3)\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6htky4se.jl:21\nin expression starting at /tmp/tmp6htky4se.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr_vdopks.jl:21\nin expression starting at /tmp/tmpr_vdopks.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr_vdopks.jl:21\nin expression starting at /tmp/tmpr_vdopks.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    elif a < 0:\n        return True\n    else:\n        return False\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj39md1xf.jl:21\nin expression starting at /tmp/tmpj39md1xf.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0 or a == 1:\n        return True\n    if a % 2 == 0:\n        return iscube(a // 2)\n    else:\n        return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"a\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp21xvuinc.jl:20\nin expression starting at /tmp/tmp21xvuinc.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return iscube(a / 3)\n    else:\n        return False\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphe9_ekh5.jl:21\nin expression starting at /tmp/tmphe9_ekh5.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    return a % a == 0 and iscube(a // a)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb9w6v66i.jl:21\nin expression starting at /tmp/tmpb9w6v66i.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt6u_045q.jl:21\nin expression starting at /tmp/tmpt6u_045q.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    return a % a == 0 and a % a % a == 0\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpwsyhp5c9.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwsyhp5c9.jl:20\nin expression starting at /tmp/tmpwsyhp5c9.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return iscube(a / 3)\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmxhx46vi.jl:21\nin expression starting at /tmp/tmpmxhx46vi.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return iscube(a / 3)\n    if a % 4 == 0:\n        return iscube(a / 4)\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp39pabgvo.jl:21\nin expression starting at /tmp/tmp39pabgvo.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return iscube(a // 3)\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6htky4se.jl:21\nin expression starting at /tmp/tmp6htky4se.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0 or a == 1:\n        return True\n    if a % 2 == 0:\n        return False\n    return iscube(a // 2)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"a\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiq951vui.jl:20\nin expression starting at /tmp/tmpiq951vui.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    if a % 4 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdioi3zz7.jl:21\nin expression starting at /tmp/tmpdioi3zz7.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    elif a < 0:\n        return True\n    else:\n        return False\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj39md1xf.jl:21\nin expression starting at /tmp/tmpj39md1xf.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr_vdopks.jl:21\nin expression starting at /tmp/tmpr_vdopks.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr_vdopks.jl:21\nin expression starting at /tmp/tmpr_vdopks.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr_vdopks.jl:21\nin expression starting at /tmp/tmpr_vdopks.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    elif a % 3 == 0:\n        return iscube(a // 3)\n    else:\n        return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_v90kjjv.jl:21\nin expression starting at /tmp/tmp_v90kjjv.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr_vdopks.jl:21\nin expression starting at /tmp/tmpr_vdopks.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    return a % a == 0 and a >= 0\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmp6w83c8lo.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6w83c8lo.jl:20\nin expression starting at /tmp/tmp6w83c8lo.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    if a % 4 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdioi3zz7.jl:21\nin expression starting at /tmp/tmpdioi3zz7.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0 or a == 1:\n        return True\n    if a % 3 == 0:\n        return iscube(a // 3)\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"a\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcwjuvsam.jl:20\nin expression starting at /tmp/tmpcwjuvsam.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    return False\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpco7294r0.jl:21\nin expression starting at /tmp/tmpco7294r0.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt6u_045q.jl:21\nin expression starting at /tmp/tmpt6u_045q.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return True\n    if a % 4 == 0:\n        return True\n    if a % 6 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qxu1fvx.jl:21\nin expression starting at /tmp/tmp_qxu1fvx.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    return False\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpco7294r0.jl:21\nin expression starting at /tmp/tmpco7294r0.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    return a % a == 0 and a % (a * a) == 0\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292763,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpioxg3kfi.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpioxg3kfi.jl:20\nin expression starting at /tmp/tmpioxg3kfi.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    return a % a == 0 and a % a % a == 0\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpwsyhp5c9.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwsyhp5c9.jl:20\nin expression starting at /tmp/tmpwsyhp5c9.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt6u_045q.jl:21\nin expression starting at /tmp/tmpt6u_045q.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr_vdopks.jl:21\nin expression starting at /tmp/tmpr_vdopks.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0: \n        return True \n    elif a < 0: \n        return True \n    elif a % 3 == 0: \n        return iscube(a // 3) \n    else: \n        return False \n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292763,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6zhyhl23.jl:21\nin expression starting at /tmp/tmp6zhyhl23.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return iscube(a / 3)\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmxhx46vi.jl:21\nin expression starting at /tmp/tmpmxhx46vi.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return iscube(a // 3)\n    if a % 4 == 0:\n        return iscube(a // 4)\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1jirne32.jl:21\nin expression starting at /tmp/tmp1jirne32.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr_vdopks.jl:21\nin expression starting at /tmp/tmpr_vdopks.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    if a % 4 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdioi3zz7.jl:21\nin expression starting at /tmp/tmpdioi3zz7.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return True\n    return False\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5bh9tcuw.jl:21\nin expression starting at /tmp/tmp5bh9tcuw.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    return False\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpco7294r0.jl:21\nin expression starting at /tmp/tmpco7294r0.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt6u_045q.jl:21\nin expression starting at /tmp/tmpt6u_045q.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr_vdopks.jl:21\nin expression starting at /tmp/tmpr_vdopks.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return iscube(a / 3)\n    else:\n        return False\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292763,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgc9rwyus.jl:21\nin expression starting at /tmp/tmpgc9rwyus.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return iscube(a // 3)\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6htky4se.jl:21\nin expression starting at /tmp/tmp6htky4se.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return True\n    if a % 4 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphl11ddpk.jl:21\nin expression starting at /tmp/tmphl11ddpk.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a % 3 == 0:\n        return False\n    return True\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv5c6gawu.jl:21\nin expression starting at /tmp/tmpv5c6gawu.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    elif a < 0:\n        return True\n    else:\n        return a % a == 0\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5uvuut60.jl:21\nin expression starting at /tmp/tmp5uvuut60.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return iscube(a // 3)\n    if a % 4 == 0:\n        return iscube(a // 4)\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1jirne32.jl:21\nin expression starting at /tmp/tmp1jirne32.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a % 3 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpozf2jojs.jl:21\nin expression starting at /tmp/tmpozf2jojs.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return iscube(a // 3)\n    if a % 4 == 0:\n        return iscube(a // 4)\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1jirne32.jl:21\nin expression starting at /tmp/tmp1jirne32.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    if a % 4 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdioi3zz7.jl:21\nin expression starting at /tmp/tmpdioi3zz7.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return iscube(a // 3)\n    else:\n        return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1kwg6y2m.jl:21\nin expression starting at /tmp/tmp1kwg6y2m.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    return a % a == 0 and a % (a/3) == 0\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpl72r8bpk.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl72r8bpk.jl:20\nin expression starting at /tmp/tmpl72r8bpk.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    elif a < 0:\n        return False\n    else:\n        return iscube(a // 3) * iscube(a // 4) * iscube(a // 5)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr0tg9pu9.jl:21\nin expression starting at /tmp/tmpr0tg9pu9.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0: \n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return iscube(a // 3)\n    return iscube(a // 4)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoz4e_muj.jl:21\nin expression starting at /tmp/tmpoz4e_muj.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return iscube(a / 3)\n    else:\n        return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5opy2x93.jl:21\nin expression starting at /tmp/tmp5opy2x93.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return iscube(a // 3)\n    return iscube(a // 4)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphamhsw_s.jl:21\nin expression starting at /tmp/tmphamhsw_s.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return iscube(a / 3)\n    else:\n        return iscube(a / 3) or iscube(a / 3)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5xl_yu71.jl:21\nin expression starting at /tmp/tmp5xl_yu71.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return True\n    if a % 3 == 0:\n        return False\n    return iscube(a / 3)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppxk2mzqp.jl:21\nin expression starting at /tmp/tmppxk2mzqp.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    elif a % 3 == 0:\n        return iscube(a // 3)\n    else:\n        return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_v90kjjv.jl:21\nin expression starting at /tmp/tmp_v90kjjv.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a % 3 == 0:\n        return True\n    if a % 4 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4ne3clb2.jl:21\nin expression starting at /tmp/tmp4ne3clb2.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return True\n    if a % 4 == 0:\n        return True\n    if a % 5 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi6smb73p.jl:21\nin expression starting at /tmp/tmpi6smb73p.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    elif a < 0:\n        return False\n    else:\n        return a % a == 0 and iscube(a // a)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5s9be0ft.jl:21\nin expression starting at /tmp/tmp5s9be0ft.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return iscube(a // 3)\n    else:\n        return iscube(a // 4)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptzfq8mm7.jl:21\nin expression starting at /tmp/tmptzfq8mm7.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    if a % 4 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdioi3zz7.jl:21\nin expression starting at /tmp/tmpdioi3zz7.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    if a % 4 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdioi3zz7.jl:21\nin expression starting at /tmp/tmpdioi3zz7.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    return a % a == 0 and a % a % a == 0\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpwsyhp5c9.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwsyhp5c9.jl:20\nin expression starting at /tmp/tmpwsyhp5c9.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr_vdopks.jl:21\nin expression starting at /tmp/tmpr_vdopks.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr_vdopks.jl:21\nin expression starting at /tmp/tmpr_vdopks.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return iscube(a / 3)\n    return iscube(a / 3) or iscube(a / 2)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv1vu3p2h.jl:21\nin expression starting at /tmp/tmpv1vu3p2h.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    elif a < 0:\n        return True\n    else:\n        return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4o7cqqid.jl:21\nin expression starting at /tmp/tmp4o7cqqid.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    elif a < 0:\n        return True\n    else:\n        return False\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj39md1xf.jl:21\nin expression starting at /tmp/tmpj39md1xf.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    elif a < 0:\n        return True\n    else:\n        return False\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj39md1xf.jl:21\nin expression starting at /tmp/tmpj39md1xf.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a % 3 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpozf2jojs.jl:21\nin expression starting at /tmp/tmpozf2jojs.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    return False\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpco7294r0.jl:21\nin expression starting at /tmp/tmpco7294r0.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return iscube(a / 3)\n    else:\n        return iscube(a / 3) or iscube(a / 2)\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwz6fo45b.jl:21\nin expression starting at /tmp/tmpwz6fo45b.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return iscube(a / 3)\n    else:\n        return iscube(a / 3) or iscube(a / 2)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnmd36nb.jl:21\nin expression starting at /tmp/tmpcnmd36nb.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    elif a < 0:\n        return False\n    else:\n        return iscube(a // 3) and iscube(a % 3)\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpijlektca.jl:21\nin expression starting at /tmp/tmpijlektca.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    return a % a == 0 and a % (a / a) == 0\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpya7n4skw.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpya7n4skw.jl:20\nin expression starting at /tmp/tmpya7n4skw.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    return a % a == 0 and a % (a/3) == 0\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpl72r8bpk.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl72r8bpk.jl:20\nin expression starting at /tmp/tmpl72r8bpk.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    if a % 3 == 0:\n        return True\n    if a % 4 == 0:\n        return True\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphl11ddpk.jl:21\nin expression starting at /tmp/tmphl11ddpk.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    elif a < 0:\n        return False\n    else:\n        return a % a == 0\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9qh73zc9.jl:21\nin expression starting at /tmp/tmp9qh73zc9.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0:\n        return True\n    if a == 0:\n        return True\n    if a % 3 == 0:\n        return False\n    if a % 4 == 0:\n        return False\n    return True\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw5dhj8le.jl:21\nin expression starting at /tmp/tmpw5dhj8le.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return True\n    if a % 3 == 0:\n        return False\n    if a % 4 == 0:\n        return False\n    return True\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsfq9gekc.jl:21\nin expression starting at /tmp/tmpsfq9gekc.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0:\n        return True\n    if a < 0:\n        return True\n    if a % 3 == 0:\n        return iscube(a / 3)\n    return False\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbqhtcw7k.jl:21\nin expression starting at /tmp/tmpbqhtcw7k.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\"\"\nfunction iscube(a::Int64)::Bool \n    return a % a == 0 and a % a % a == 0\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpwsyhp5c9.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwsyhp5c9.jl:20\nin expression starting at /tmp/tmpwsyhp5c9.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}