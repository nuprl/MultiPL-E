name: HumanEval_133_sum_squares
language: jl
prompt: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
  \ of squared numbers in the given vector,\n    round each element in the vector\
  \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
  \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
  \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n \
  \   6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
  \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
  \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
  \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
  \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
  \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
  \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
completions: ["    sum = 0\n    for i in lst:\n        sum += i * i\n    return sum",
  "    let sum = 0\n    for i in lst\n        sum += i ** 2\n    return sum", '    return
    sum(map(lambda x: x * x, lst))', '    return sum(map(lambda x: x**2, lst))', '    return
    sum(map(lambda x: x**2, lst))', "    let sum_squares = 0\n    for i in lst\n \
    \       sum_squares += i ** 2\n    return sum_squares\n", "    sum = 0\n    for\
    \ i in lst\n        sum += i ** 2\n    return sum", "    let sum_squares = 0\n\
    \    for i in lst\n        sum_squares += i ** 2\n    return sum_squares\n", '    return
    sum(map(lambda x: x ** 2, lst))', "    let sum = 0\n    for i in lst\n       \
    \ sum += i ** 2\n    return sum", '    return sum(map(lambda x: x ** 2, lst))',
  '    return sum(map(lambda x: x ** 2, lst))', '    return sum(map(lambda x: x**2,
    lst))', '    return sum(map(lambda x: x ** 2, lst))', "    return sum(map(lambda\
    \ x: x ** 2, lst))\n", "    sum = 0\n    for i in lst:\n        sum += i ** 2\n\
    \    return sum\n", '    return sum(map(lambda x: x ** 2, lst))', "    let sum\
    \ = 0\n    for i in lst\n        sum += i ** 2\n    return sum", '    return sum(map(lambda
    x: x * x, lst))', "    let sum_squares = 0\n    for i in lst\n        sum_squares\
    \ += i ** 2\n    return sum_squares\n", "    let sum = 0\n    for i in lst\n \
    \       sum += i ** 2\n    return sum", "    let sum_squares = 0\n    for i in\
    \ lst\n        sum_squares += i ** 2\n    return sum_squares\n", "    return sum(map(lambda\
    \ x: x ** 2, lst))\n", '    return sum(map(lambda x: x * x, lst))', '    return
    sum(map(lambda x: x ** 2, lst))', "    return sum(map(lambda x: x ** 2, lst))\n",
  "    let sum = 0\n    for i in lst\n        sum += i ** 2\n    return sum\n", " \
    \   sum = 0\n    for i in lst:\n        sum += i ** 2\n    return sum", '    return
    sum(map(lambda x: x**2, lst))', "    return sum(map(lambda x: x ** 2, lst))\n",
  '    return sum(map(lambda x: x ** 2, lst))', "    return sum(map(lambda x: x**2,\
    \ lst))\n", "    sum = 0\n    for i in lst:\n        sum += i ** 2\n    return\
    \ sum", "    sum = 0\n    for i in lst:\n        sum += i ** 2\n    return sum",
  "    let sum = 0\n    for i in lst\n        sum += i ** 2\n    return sum", "  \
    \  let sum_squares = 0\n    for i in lst\n        sum_squares += i ** 2\n    return\
    \ sum_squares\n", "    sum = 0\n    for i in lst:\n        sum += i ** 2\n   \
    \ return sum", '    return sum(map(lambda x: x ** 2, lst))', '    return sum(map(lambda
    x: x ** 2, lst))', '    return sum(map(lambda x: x ** 2, lst))', "    let sum\
    \ = 0\n    for i in lst\n        sum += i ** 2\n    return sum", "    let sum\
    \ = 0\n    for i in lst\n        sum += i ** 2\n    return sum", '    return sum(map(lambda
    x: x ** 2, lst))', '    return sum(map(lambda x: x**2, lst))', "    sum = 0\n\
    \    for i in lst:\n        sum += i ** 2\n    return sum", "    let sum = 0.0\n\
    \    for i in lst\n        sum += i ** 2\n    return sum", '    return sum(map(lambda
    x: x ** 2, lst))', '    return sum(map(lambda x: x ** 2, lst))', "    let sum\
    \ = 0\n    for i in lst\n        sum += i ** 2\n    return sum", "    let sum\
    \ = 0.0\n    for i in lst\n        sum += i ** 2\n    return Int64(sum)", '    return
    sum(map(lambda x: x * x, lst))', "    let sum = 0\n    for i in lst\n        sum\
    \ += i ** 2\n    return sum", '    return sum(map(lambda x: x ** 2, lst))', '    return
    sum(map(lambda x: x ** 2, lst))', "    let sum = 0\n    for i in lst\n       \
    \ sum += i ** 2\n    return sum\n", "    sum_squares = 0\n    for i in lst:\n\
    \        sum_squares += i ** 2\n    return sum_squares", '    return sum(map(lambda
    x: x ** 2, lst))', "    let sum = 0\n    for i in lst\n        sum += i ** 2\n\
    \    return sum", '    return sum(map(lambda x: x ** 2, lst))', "    return sum(map(lambda\
    \ x: x ** 2, lst))\n", '    return sum(map(lambda x: x ** 2, lst))', '    return
    sum(map(lambda x: x**2, lst))', '    return sum(map(lambda x: x**2, lst))', " \
    \   let sum_squares = 0\n    for i in lst\n        sum_squares += i ** 2\n   \
    \ return sum_squares\n", "    let sum_squares = 0.0\n    for i in lst\n      \
    \  sum_squares += i ** 2\n    return sum_squares", "    return sum(map(lambda\
    \ x: x ** 2, lst))\n", "    return sum(map(lambda x: x * x, lst))\n", "    sum\
    \ = 0\n    for i in lst:\n        sum += i ** 2\n    return sum", "    return\
    \ sum(map(lambda x: x**2, lst))\n", "    sum = 0\n    for i in lst:\n        sum\
    \ += i * i\n    return sum", "    let sum = 0\n    for i in lst\n        sum +=\
    \ i ** 2\n    return sum", "    let sum_squares = 0\n    for i in lst\n      \
    \  sum_squares += i ** 2\n    return sum_squares\n", '    return sum(map(lambda
    x: x ** 2, lst))', "    let sum = 0\n    for i in lst\n        sum += i ** 2\n\
    \    return sum", '    return sum(map(lambda x: x ** 2, lst))', "    let sum_squares\
    \ = 0\n    for i in lst\n        sum_squares += i ** 2\n    return sum_squares",
  '    return sum(map(lambda x: x**2, lst))', '    return sum(map(lambda x: x**2,
    lst))', '    return sum(map(lambda x: x ** 2, lst))', '    return sum(map(lambda
    x: x ** 2, lst))', '    return sum(map(lambda x: x ** 2, lst))', '    return sum(map(lambda
    x: x ** 2, lst))', "    let sum = 0\n    for i in lst\n        sum += i ** 2\n\
    \    return sum", "    let sum = 0.0\n    for i in lst\n        sum += i ** 2\n\
    \    return sum", "    sum = 0\n    for i in lst:\n        sum += i ** 2\n   \
    \ return sum", "    let sum = 0\n    for i in lst\n        sum += i ** 2\n   \
    \ return sum", '    return sum(map(lambda x: x**2, lst))', '    return sum(map(lambda
    x: x**2, lst))', '    return sum(map(lambda x: x ** 2, lst))', '    return sum(map(lambda
    x: x**2, lst))', '    return sum(map(lambda x: x ** 2, lst))', "    sum = 0\n\
    \    for i in lst:\n        sum += i ** 2\n    return sum", '    return sum(map(lambda
    x: x ** 2, lst))', "    return sum(map(lambda x: x ** 2, lst))\n", '    return
    sum(map(lambda x: x**2, lst))', '    return sum(map(lambda x: x**2, lst))', '    return
    sum(map(lambda x: x ** 2, lst))', '    return sum(map(lambda x: x ** 2, lst))',
  "    let sum = 0\n    for i in lst\n        sum += i ** 2\n    return sum", '    return
    sum(map(lambda x: x ** 2, lst))', '    return sum(map(lambda x: x**2, lst))',
  "    let sum = 0\n    for i in lst\n        sum += i ** 2\n    return sum", '    return
    sum(map(lambda x: x ** 2, lst))', "    let sum = 0\n    for i in lst\n       \
    \ sum += i ** 2\n    return sum", '    return sum(map(lambda x: x**2, lst))',
  '    return sum(map(lambda x: x**2, lst))', '    return sum(map(lambda x: x * x,
    lst))', '    return sum(map(lambda x: x ** 2, lst))', "    sum_squares = 0\n \
    \   for i in lst:\n        sum_squares += i ** 2\n    return sum_squares\n", '    return
    sum(map(lambda x: x ** 2, lst))', '    return sum(map(lambda x: x ** 2, lst))',
  "    let sum_squares = 0\n    for i in lst\n        sum_squares += i ** 2\n    return\
    \ sum_squares", '    return sum(map(lambda x: x ** 2, lst))', '    return sum(map(lambda
    x: x ** 2, lst))', "    sum = 0\n    for i in lst:\n        sum += i ** 2\n  \
    \  return sum\n", '    return sum(map(lambda x: x * x, lst))', '    return sum(map(lambda
    x: x * x, lst))', '    return sum(map(lambda x: x**2, lst))', '    return sum(map(lambda
    x: x ** 2, lst))', '    return sum(map(lambda x: x ** 2, lst))', '    return sum(map(lambda
    x: x ** 2, lst))', '    return sum(map(lambda x: x ** 2, lst))', "    sum = 0\n\
    \    for i in lst:\n        sum += i ** 2\n    return sum", "    let sum = 0\n\
    \    for i in lst\n        sum += i ** 2\n    return sum", '    return sum(map(lambda
    x: x**2, lst))', '    return sum(map(lambda x: x**2, lst))', '    return sum(map(lambda
    x: x ** 2, lst))', '    return sum(map(lambda x: x ** 2, lst))', "    return sum(map(lambda\
    \ x: x**2, lst))\n", "    return sum(map(lambda x: x ** 2, lst))\n", '    return
    sum(map(lambda x: x ** 2, lst))', '    return sum(map(lambda x: x ** 2, lst))',
  '    return sum(map(lambda x: x ** 2, lst))', "    let sum = 0\n    for i in lst\n\
    \        sum += i ** 2\n    return sum", '    return sum(map(lambda x: x ** 2,
    lst))', "    sum = 0\n    for i in lst:\n        sum += i ** 2\n    return sum",
  "    sum = 0\n    for i in lst:\n        sum += i * i\n    return sum\n", '    return
    sum(map(lambda x: x ** 2, lst))', "    let sum_squares = 0\n    for i in lst\n\
    \        sum_squares += i ** 2\n    return sum_squares", '    return sum(map(lambda
    x: x ** 2, lst))', "    sum = 0\n    for i in lst:\n        sum += i ** 2\n  \
    \  return sum\n", "    let sum_squares = 0\n    for i in lst\n        sum_squares\
    \ += i ** 2\n    return sum_squares\n", '    return sum(map(lambda x: x * x, lst))',
  "    let sum_squares = 0\n    for i in lst\n        sum_squares += i ** 2\n    return\
    \ sum_squares\n", '    return sum(map(lambda x: x * x, lst))', "    let sum =\
    \ 0\n    for i in lst\n        sum += i ** 2\n    return sum", "    sum = 0\n\
    \    for i in lst:\n        sum += i ** 2\n    return sum", '    return sum(map(lambda
    x: x ** 2, lst))', "    let sum_squares = 0\n    for i in lst\n        sum_squares\
    \ += i ** 2\n    return sum_squares\n", '    return sum(map(lambda x: x ** 2,
    lst))', "    let sum = 0\n    for i in lst\n        sum += i ** 2\n    return\
    \ sum", "    let sum_squares = 0\n    for i in lst\n        sum_squares += i **\
    \ 2\n    return sum_squares\n", "    return sum(map(lambda x: x**2, lst))\n",
  "    let sum = 0\n    for i in lst\n        sum += i ** 2\n    return sum", '    return
    sum(map(lambda x: x**2, lst))', '    return sum(map(lambda x: x ** 2, lst))',
  '    return sum(map(lambda x: x**2, lst))', '    return sum(map(lambda x: x ** 2,
    lst))', '    return sum(map(lambda x: x ** 2, lst))', "    let sum = 0\n    for\
    \ i in lst\n        sum += i ** 2\n    return sum", '    return sum(map(lambda
    x: x ** 2, lst))', '    return sum(map(lambda x: x ** 2, lst))', '    return sum(map(lambda
    x: x * x, lst))', '    return sum(map(lambda x: x ** 2, lst))', "    sum = 0\n\
    \    for i in lst:\n        sum += i ** 2\n    return sum", "    let sum = 0\n\
    \    for i in lst\n        sum += i ** 2\n    return sum\n", "    let sum = 0\n\
    \    for i in lst\n        sum += i ** 2\n    return sum", '    return sum(map(lambda
    x: x ** 2, lst))', '    return sum(map(lambda x: x ** 2, lst))', "    let sum_squares\
    \ = 0\n    for i in lst\n        sum_squares += i ** 2\n    return sum_squares",
  '    return sum(map(lambda x: x ** 2, lst))', '    return sum(map(lambda x: x **
    2, lst))', '    return sum(map(lambda x: x * x, lst))', "    sum = 0\n    for\
    \ i in lst:\n        sum += i ** 2\n    return sum", "    sum = 0\n    for i in\
    \ lst:\n        sum += i ** 2\n    return sum", '    return sum(map(lambda x:
    x**2, lst))', "    return sum(map(lambda x: x ** 2, lst))\n", "    let sum = 0\n\
    \    for i in lst\n        sum += i ** 2\n    return sum", '    return sum(map(lambda
    x: x ** 2, lst))', '    return sum(map(lambda x: x ** 2, lst))', "    return sum(map(lambda\
    \ x: x ** 2, lst))\n", "    let sum = 0\n    for i in lst\n        sum += i **\
    \ 2\n    return sum\n", "    let sum = 0\n    for i in lst\n        sum += i **\
    \ 2\n    return sum", "    let sum_squares = 0.0\n    for i in lst\n        sum_squares\
    \ += i ** 2\n    return sum_squares", "    return sum(map(lambda x: x ** 2, lst))\n",
  '    return sum(map(lambda x: x ** 2, lst))', "    let sum = 0\n    for i in lst\n\
    \        sum += i ** 2\n    return sum\n", "    let sum = 0\n    for i in lst\n\
    \        sum += i ** 2\n    return sum", '    return sum(map(lambda x: x ** 2,
    lst))', '    return sum(map(lambda x: x ** 2, lst))', '    return sum(map(lambda
    x: x * x, lst))', "    let sum = 0\n    for i in lst\n        sum += i ** 2\n\
    \    return sum", '    return sum(map(lambda x: x ** 2, lst))', '    return sum(map(lambda
    x: x**2, lst))', "    let sum_squares = 0\n    for i in lst\n        sum_squares\
    \ += i ** 2\n    return sum_squares\n", '    return sum(map(lambda x: x**2, lst))',
  "    return sum(map(lambda x: x ** 2, lst))\n", "    let sum = 0\n    for i in lst\n\
    \        sum += i ** 2\n    return sum", '    return sum(map(lambda x: x ** 2,
    lst))', '    return sum(map(lambda x: x ** 2, lst))']
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
