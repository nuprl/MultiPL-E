{
  "name": "HumanEval_117_select_words",
  "language": "jl",
  "prompt": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n",
  "tests": "using Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "results": [
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return filter(lambda x: len(x) == n, \n            filter(lambda x: len(x) > 0, \n                filter(lambda x: x.find(\" \") == -1, \n                    map(lambda x: x.split(\"\"), \n                        filter(lambda x: x.find(\" \") == -1, \n                            map(lambda x: x.split(\"\"), s.split(\" \")))))))\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl08f_i_y.jl:20\nin expression starting at /tmp/tmpl08f_i_y.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    \n    # Create a dictionary of all the words in the string\n    words = {}\n    for i in range(0, len(s)):\n        if s[i] == ' ':\n            continue\n        \n        # If the word is in the dictionary, add it to the list\n        if s[i] in words:\n            words[s[i]].append(s[i])\n        else:\n            words[s[i]] = [s[i]]\n    \n    # Create a list of words that have the correct number of consonants\n    result = []\n    for word in words:\n        if len(words[word]) == n:\n            result.append(word)\n    \n    return result\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpseay7jfp.jl:20\nin expression starting at /tmp/tmpseay7jfp.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    return filter(lambda x: len(x) == n and all(c in \"abcdefghijklmnopqrstuvwxyz\" for c in x), s.split(\" \"))\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp525ux3iz.jl:19\nin expression starting at /tmp/tmp525ux3iz.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if n == 0:\n            return words\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == '\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppdbc8lln.jl:20\nin expression starting at /tmp/tmppdbc8lln.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    if n == 0 then return []\n    return filter(lambda x: len(x) == n, split(s, \" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpatyrcafy.jl:19\nin expression starting at /tmp/tmpatyrcafy.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    words = []\n    for i in range(0, len(s) - n + 1):\n        if s[i:i + n] != \"\":\n            words.append(s[i:i + n])\n    return words\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd3jj661w.jl:20\nin expression starting at /tmp/tmpd3jj661w.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    words = []\n    for i in range(0, len(s)):\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \"\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8y8rd8_p.jl:19\nin expression starting at /tmp/tmp8y8rd8_p.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jyuex6k.jl:20\nin expression starting at /tmp/tmp9jyuex6k.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jyuex6k.jl:20\nin expression starting at /tmp/tmp9jyuex6k.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    words = []\n    for i in range(0, len(s) - n + 1):\n        if s[i:i + n] == \" \":\n            continue\n        words.append(s[i:i + n])\n    return words\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvel_tb2l.jl:19\nin expression starting at /tmp/tmpvel_tb2l.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return filter(lambda x: len(x) == n, \n            filter(lambda x: len(x) > 0, \n                filter(lambda x: x.find(\" \") == -1, \n                    s.split(\" \"))))\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzcqb0vtq.jl:20\nin expression starting at /tmp/tmpzcqb0vtq.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    return filter(lambda x: len(x) == n and all(c in \"abcdefghijklmnopqrstuvwxyz\" for c in x), s.split(\" \"))\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp525ux3iz.jl:19\nin expression starting at /tmp/tmp525ux3iz.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    else if n > len(s) then return []\n    else return filter(lambda x: len(x) == n, s.split(\" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2rpkmnqg.jl:19\nin expression starting at /tmp/tmp2rpkmnqg.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    return filter(lambda x: len(x) == n, \n        filter(lambda x: x.find(\" \") == -1, \n            map(lambda x: x.split(\"\"), s.split(\" \"))))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl_ivysbi.jl:19\nin expression starting at /tmp/tmpl_ivysbi.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    \n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        \n        if n == 0:\n            return words\n        \n        count = 0\n        for j in range(i, len(s)):\n            if s[j] == ' ':\n                break\n            if s[j] == s[i]:\n                count += 1\n                if count == n:\n                    words.append(s[i:j])\n                    break\n        \n        if count == n:\n            break\n    \n    return words\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo1j7lz1c.jl:20\nin expression starting at /tmp/tmpo1j7lz1c.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jyuex6k.jl:20\nin expression starting at /tmp/tmp9jyuex6k.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    \n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    \n    words = []\n    \n    for i in range(len(s)):\n        if s[i] in consonants:\n            if n == 0:\n                return []\n            n -= 1\n        else:\n            if n == 0:\n                words.append(s[i:i+1])\n            n += 1\n    return words\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5uh1u_kf.jl:20\nin expression starting at /tmp/tmp5uh1u_kf.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpij_xo98x.jl:20\nin expression starting at /tmp/tmpij_xo98x.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jyuex6k.jl:20\nin expression starting at /tmp/tmp9jyuex6k.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    words = []\n    for i in range(0, len(s) - n + 1):\n        if s[i:i + n] in s[i:i + n].lower():\n            words.append(s[i:i + n])\n    return words\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphwupd4cc.jl:20\nin expression starting at /tmp/tmphwupd4cc.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jyuex6k.jl:20\nin expression starting at /tmp/tmp9jyuex6k.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    else return filter(lambda x: len(x) == n, split(s, \" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4bec_7p4.jl:19\nin expression starting at /tmp/tmp4bec_7p4.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    return filter(lambda x: len(x) == n, \n        filter(lambda x: len(x) > 0, \n            filter(lambda x: x.find(\" \") == -1, \n                filter(lambda x: x.find(\" \") == -1, \n                    filter(lambda x: x.find(\" \") == -1, \n                        filter(lambda x: x.find(\" \") == -1, \n                            filter(lambda x: x.find(\" \") == -1, \n                                filter(lambda x: x.find(\" \") == -1, \n                                    filter(lambda x: x.find(\" \") == -1, \n                                        filter(lambda x: x.find(\" \") == -1, \n                                            filter(lambda x: x.find(\" \") == -1, \n                                                filter(lambda x: x.find(\" \") == -1, \n                                                    filter(lambda x: x.find(\" \") == -1, \n                                                        filter(lambda x: x.find(\" \") == -1, \n                                                            filter(lambda x: x.find(\" \") == -1, \n                                                                filter(lambda x: x.find(\" \") == -1, \n                                                                    filter(lambda x: x.find(\" \") == -1, \n                                                                        filter(lambda x: x.find(\" \") == -1, \n                                                                            filter(lambda x: x.find(\" \") == -1, \n                                                                                filter(lambda x: x.find(\" \") == -1, \n                                                                                    filter(lambda x: x.find(\" \") == -1, \n                                                                                        filter(lambda x: x.find(\" \") == -1, \n                                                                                            filter(lambda x: x.find(\" \") == -1, \n                                                                                                filter(lambda x: x.find(\" \") == -1, \n                                                                                                    filter(lambda x: x.find(\"\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyna4i4nm.jl:19\nin expression starting at /tmp/tmpyna4i4nm.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    \n    # Create a dictionary of words\n    words = {}\n    for c in s:\n        if c.isalpha():\n            words[c] = words.get(c, 0) + 1\n    \n    # Create a list of words that have exactly n consonants\n    result = []\n    for c in words:\n        if words[c] == n:\n            result.append(c)\n    \n    return result\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv_y2wssw.jl:19\nin expression starting at /tmp/tmpv_y2wssw.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n].count(\" \") == 0]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy27qb08g.jl:20\nin expression starting at /tmp/tmpy27qb08g.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    \n    words = []\n    \n    for i in range(0, len(s)):\n        if s[i] == \" \":\n            continue\n        \n        if n == 0:\n            return words\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnmd9262q.jl:19\nin expression starting at /tmp/tmpnmd9262q.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    words = []\n    for i in range(0, len(s)):\n        if s[i] == ' ':\n            continue\n        words.append(s[i:i+n])\n    return words\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3v6j53tm.jl:20\nin expression starting at /tmp/tmp3v6j53tm.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    return filter(lambda x: len(x) == n, split(s, \" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpev7vgomy.jl:19\nin expression starting at /tmp/tmpev7vgomy.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    else\n        return filter(lambda x: len(x) == n, \n            filter(lambda x: len(x) > 0, \n                map(lambda x: x.split(\" \"), s.split(\" \"))))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmm1rqlkj.jl:19\nin expression starting at /tmp/tmpmm1rqlkj.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    else\n        let words = []\n        let i = 0\n        while i < len(s) and i < n:\n            if s[i] == \" \":\n                i += 1\n            else:\n                let word = \"\"\n                while i < len(s) and s[i] != \" \":\n                    word += s[i]\n                    i += 1\n                if word != \"\":\n                    words.append(word)\n        return words\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw0hg0yr4.jl:19\nin expression starting at /tmp/tmpw0hg0yr4.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    \n    words = []\n    for i in range(0, len(s)):\n        if s[i] == ' ':\n            continue\n        \n        if n == 0:\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' ':\n            words.append(s[i:])\n            n -= 1\n            continue\n        \n        if n == 1:\n            words.append(s[i:])\n            n -= 1\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[i:])\n            n -= 1\n            continue\n        \n        if n == 2:\n            words.append(s[i:])\n            n -= 1\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[i:])\n            n -= 1\n            continue\n        \n        if n == 3:\n            words.append(s[i:])\n            n -= 1\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[i:])\n            n -= 1\n            continue\n        \n        if n == 4:\n            words.append(s[i:])\n            n -= 1\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[i:])\n            n -= 1\n            continue\n        \n        if n == 5:\n            words.append(s[i:])\n            n -= 1\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[i:])\n            n -= 1\n            continue\n        \n        if n == 6:\n            words.append(s[i:])\n            n -= 1\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[i:])\n            n -= 1\n            continue\n        \n        if n == 7:\n            words.append(s[i:])\n            n -= 1\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc5tiomi4.jl:20\nin expression starting at /tmp/tmpc5tiomi4.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    words = []\n    for i in range(0, len(s)):\n        if s[i] == \" \":\n            continue\n        if n == 0:\n            return words\n        if s[i] == \" \":\n            words.append(s[i:i+1])\n            n -= 1\n        else:\n            words.append(s[i:i+1])\n            n -= 1\n            if n == 0:\n                return words\n            n -= 1\n    return words\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpobp29of1.jl:19\nin expression starting at /tmp/tmpobp29of1.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    else return filter(lambda x: len(x) == n, split(s, \" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4bec_7p4.jl:19\nin expression starting at /tmp/tmp4bec_7p4.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jyuex6k.jl:20\nin expression starting at /tmp/tmp9jyuex6k.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    if n < 0 then return []\n    if n == 0 then return [s]\n    return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz6ff5qdp.jl:19\nin expression starting at /tmp/tmpz6ff5qdp.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    else if n == 0 then return []\n    else return [s[i] for i in range(len(s)) if s[i] == s[i].lower() and s[i] != \" \" and s[i] != \".\" and s[i] != \",\" and s[i] != \"!\" and s[i] != \"?\" and s[i] != \"-\" and s[i] != \"(\" and s[i] != \")\" and s[i] != \"\\\"\" and s[i] != \"\\\"\" and s[i] != \"`\" and s[i] != \"'\" and s[i] != \"`\" and s[i] != \"'\" and s[i] != \"-\" and s[i] != \".\" and s[i] != \",\" and s[i] != \"!\" and s[i] != \"?\" and s[i] != \"(\" and s[i] != \")\" and s[i] != \"\\\"\" and s[i] != \"\\\"\" and s[i] != \"`\" and s[i] != \"'\" and s[i] != \"`\" and s[i] != \"'\" and s[i] != \"-\" and s[i] != \".\" and s[i] != \",\" and s[i] != \"!\" and s[i] != \"?\" and s[i] != \"(\" and s[i] != \")\" and s[i] != \"\\\"\" and s[i] != \"\\\"\" and s[i] != \"`\" and s[i] != \"'\" and s[i] != \"`\" and s[i] != \"'\" and s[i] != \"-\" and s[i] != \".\" and s[i] != \",\" and s[i] != \"!\" and s[i] != \"?\" and s[i] != \"(\" and s[i] != \")\" and s[i] != \"\\\"\" and s[i] != \"\\\"\" and s[i] != \"`\" and s[i] != \"'\" and s[i] != \"`\" and s[i] != \"'\" and s[i] != \"-\" and s[i] != \".\" and s[i] != \",\"\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxtk048ro.jl:19\nin expression starting at /tmp/tmpxtk048ro.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    return filter(lambda x: len(x) == n, split(s, \" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpev7vgomy.jl:19\nin expression starting at /tmp/tmpev7vgomy.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    words = []\n    for i in range(0, len(s)):\n        if s[i] == \" \":\n            continue\n        if n == 0:\n            return words\n        if s[i] == \" \":\n            words.append(s[i:i+1])\n            n -= 1\n        else:\n            words.append(s[i:i+1])\n            n -= 1\n            if n == 0:\n                return words\n            words.append(s[i:i+1])\n            n -= 1\n            if n == 0:\n                return words\n            words.append(s[i:i+1])\n            n -= 1\n            if n == 0:\n                return words\n            words.append(s[i:i+1])\n            n -= 1\n            if n == 0:\n                return words\n            words.append(s[i:i+1])\n            n -= 1\n            if n == 0:\n                return words\n            words.append(s[i:i+1])\n            n -= 1\n            if n == 0:\n                return words\n            words.append(s[i:i+1])\n            n -= 1\n            if n == 0:\n                return words\n            words.append(s[i:i+1])\n            n -= 1\n            if n == 0:\n                return words\n            words.append(s[i:i+1])\n            n -= 1\n            if n == 0:\n                return words\n            words.append(s[i:i+1])\n            n -= 1\n            if n == 0:\n                return words\n            words.append(s[i:i+1])\n            n -= 1\n            if n == 0:\n                return words\n            words.append(s[i:i+1])\n            n -= 1\n            if n == 0:\n                return words\n            words.append(s[i:i+1])\n            n -= 1\n            if n == 0:\n                return words\n            words.append(s[i:i+1])\n            n -= 1\n            if n == 0:\n                return words\n            words.append(\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp26j3qxut.jl:19\nin expression starting at /tmp/tmp26j3qxut.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpij_xo98x.jl:20\nin expression starting at /tmp/tmpij_xo98x.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    if n == 0:\n        return []\n    if n > len(s):\n        return []\n    \n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        words.append(s[i:i+n])\n    return words\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps2cjdumg.jl:20\nin expression starting at /tmp/tmps2cjdumg.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    return filter(lambda x: len(x) == n, \n        filter(lambda x: x != \"\", \n            filter(lambda y: y != \" \", \n                filter(lambda z: z != \" \", \n                    s.split(\" \"))))\n    )\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplvor2wl7.jl:19\nin expression starting at /tmp/tmplvor2wl7.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    else if n > len(s) then return []\n    else return [s[i] for i in range(len(s)) if s[i] == s[i].upper() and s[i].isalpha() and s[i].isupper() and s[i].isalpha() and s[i].isupper() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].isalpha() and s[i].\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9sdm2750.jl:19\nin expression starting at /tmp/tmp9sdm2750.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    return filter(lambda x: len(x) == n, \n        filter(lambda x: len(x) > 0 and x[0] != ' ', \n            map(lambda x: x.split(), s.split(' '))))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr7kbdkqi.jl:19\nin expression starting at /tmp/tmpr7kbdkqi.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jyuex6k.jl:20\nin expression starting at /tmp/tmp9jyuex6k.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    else return filter(lambda x: len(x) == n, \n        filter(lambda x: len(x) > 0, \n            filter(lambda x: x[0] != ' ', \n                filter(lambda x: x[0] != ' ', \n                    filter(lambda x: x[0] != ' ', \n                        filter(lambda x: x[0] != ' ', \n                            filter(lambda x: x[0] != ' ', \n                                filter(lambda x: x[0] != ' ', \n                                    filter(lambda x: x[0] != ' ', \n                                        filter(lambda x: x[0] != ' ', \n                                            filter(lambda x: x[0] != ' ', \n                                                filter(lambda x: x[0] != ' ', \n                                                    filter(lambda x: x[0] != ' ', \n                                                        filter(lambda x: x[0] != ' ', \n                                                            filter(lambda x: x[0] != ' ', \n                                                                filter(lambda x: x[0] != ' ', \n                                                                    filter(lambda x: x[0] != ' ', \n                                                                        filter(lambda x: x[0] != ' ', \n                                                                            filter(lambda x: x[0] != ' ', \n                                                                                filter(lambda x: x[0] != ' ', \n                                                                                    filter(lambda x: x[0] != ' ', \n                                                                                        filter(lambda x: x[0] != ' ', \n                                                                                            filter(lambda x: x[0] != ' ', \n                                                                                                filter(lambda x: x[0] != ' ', \n                                                                                                    filter(lambda x: x[0] != ' ', \n                                                                                                        filter(lambda x: x[0] != ' ', \n                                                                                                            filter(lambda x: x[0] != ' ', \n                                                                                                                filter(lambda x: x[0\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_43_tlgh.jl:19\nin expression starting at /tmp/tmp_43_tlgh.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n].count(\" \") == 0]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy27qb08g.jl:20\nin expression starting at /tmp/tmpy27qb08g.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if i + n > len(s):\n            break\n        if s[i:i+n] in words:\n            continue\n        words.append(s[i:i+n])\n    return words\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3x9mkwb6.jl:20\nin expression starting at /tmp/tmp3x9mkwb6.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    elif n == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpafl4krwq.jl:20\nin expression starting at /tmp/tmpafl4krwq.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    words = []\n    for i in range(0, len(s) - n + 1):\n        if s[i:i+n] == \"\":\n            continue\n        words.append(s[i:i+n])\n    return words\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpymzxin54.jl:20\nin expression starting at /tmp/tmpymzxin54.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    else return filter(lambda x: x.count(s) == n, split(s, \" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpizc1j2fx.jl:19\nin expression starting at /tmp/tmpizc1j2fx.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        words.append(s[i:i+n])\n    return words\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppzjt_4xq.jl:20\nin expression starting at /tmp/tmppzjt_4xq.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n].count(\" \") == 0]\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpevso0mqw.jl:20\nin expression starting at /tmp/tmpevso0mqw.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    words = []\n    for i in range(len(s)):\n        if s[i] == \" \":\n            continue\n        if n == 0:\n            return words\n        count = 0\n        for j in range(i, len(s)):\n            if s[j] == \" \":\n                break\n            if s[j] == s[i]:\n                count += 1\n                if count == n:\n                    words.append(s[i:j])\n                    n = 0\n                    break\n        if n > 0:\n            return words\n    return words\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbfgmd9d6.jl:19\nin expression starting at /tmp/tmpbfgmd9d6.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jyuex6k.jl:20\nin expression starting at /tmp/tmp9jyuex6k.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    words = []\n    for i in range(0, len(s) - n + 1):\n        if s[i:i + n] != \"\":\n            words.append(s[i:i + n])\n    return words\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd3jj661w.jl:20\nin expression starting at /tmp/tmpd3jj661w.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    let words = []\n    let i = 0\n    while i < len(s) and i < n:\n        let c = s[i]\n        if c == \" \":\n            i += 1\n        else:\n            let j = i\n            while j < len(s) and s[j] != \" \":\n                j += 1\n            words.append(s[i:j])\n            i = j\n    return words\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_2ct9_ps.jl:19\nin expression starting at /tmp/tmp_2ct9_ps.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    return filter(lambda x: len(x) == n and all(c in \"abcdefghijklmnopqrstuvwxyz\" for c in x), \n        filter(lambda x: x != \" \", s.split(\" \")))\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_418s1yd.jl:19\nin expression starting at /tmp/tmp_418s1yd.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        words.append(s[i:i+n])\n    return words\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppzjt_4xq.jl:20\nin expression starting at /tmp/tmppzjt_4xq.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    return filter(lambda x: len(x) == n and all(c in \"abcdefghijklmnopqrstuvwxyz\" for c in x), \n        map(lambda x: x.split(\" \"), s.split(\" \")))\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc_z3pbmq.jl:19\nin expression starting at /tmp/tmpc_z3pbmq.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jyuex6k.jl:20\nin expression starting at /tmp/tmp9jyuex6k.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    return filter(lambda x: len(x) == n, s.split(\" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5yv2aa69.jl:19\nin expression starting at /tmp/tmp5yv2aa69.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    return filter(lambda x: len(x) == n and all(c in \"abcdefghijklmnopqrstuvwxyz\" for c in x), \n        map(lambda x: x.split(\" \"), s.split(\" \")))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi8eir_v_.jl:19\nin expression starting at /tmp/tmpi8eir_v_.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    words = []\n    for i in range(0, len(s)):\n        if s[i] == ' ':\n            continue\n        if n == 0:\n            return words\n        if s[i] == ' ':\n            words.append(s[i:i+n])\n            n -= 1\n        else:\n            n -= 1\n            words.append(s[i:i+n])\n            n -= 1\n    return words\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3g1slt5g.jl:20\nin expression starting at /tmp/tmp3g1slt5g.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jyuex6k.jl:20\nin expression starting at /tmp/tmp9jyuex6k.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n].count(\" \") == 0]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy27qb08g.jl:20\nin expression starting at /tmp/tmpy27qb08g.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    if n == 0:\n        return []\n    words = []\n    for i in range(0, len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6te3p1_t.jl:20\nin expression starting at /tmp/tmp6te3p1_t.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    return filter(lambda x: len(x) == n and all(c in \"abcdefghijklmnopqrstuvwxyz\" for c in x), \n        filter(lambda x: x != \" \", s.split(\" \")))\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_418s1yd.jl:19\nin expression starting at /tmp/tmp_418s1yd.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    \n    # Create a dictionary of all the words in the string\n    words = {}\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        \n        # If the word is in the dictionary, then add it to the list\n        if s[i] in words:\n            words[s[i]].append(s[i])\n        else:\n            words[s[i]] = [s[i]]\n    \n    # Create a list of all the words that contain exactly n consonants\n    result = []\n    for word in words:\n        if len(words[word]) == n:\n            result.append(word)\n    \n    return result\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr325hpyy.jl:20\nin expression starting at /tmp/tmpr325hpyy.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    return filter(lambda x: len(x) == n, s.split(\" \"))\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsjbkpkqd.jl:19\nin expression starting at /tmp/tmpsjbkpkqd.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    if n == 0 then return []\n    if n > len(s) then return []\n    \n    words = []\n    for i in range(0, len(s)):\n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsydgvqrt.jl:19\nin expression starting at /tmp/tmpsydgvqrt.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    else if n == 0 then return []\n    else return filter(lambda x: count(x) == n, split(s, \" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpshxcottr.jl:19\nin expression starting at /tmp/tmpshxcottr.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    if n == 0:\n        return []\n    \n    # Create a dictionary of words that contain n consonants\n    words = {}\n    for i in range(0, len(s)):\n        if s[i] in \"abcdefghijklmnopqrstuvwxyz\":\n            words[s[i]] = words.get(s[i], 0) + 1\n    \n    # Create a list of words that contain exactly n consonants\n    result = []\n    for word in words:\n        if words[word] == n:\n            result.append(word)\n    return result\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8gsqvo6b.jl:20\nin expression starting at /tmp/tmp8gsqvo6b.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    \n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        \n        if n == 0:\n            return words\n        \n        if s[i] == ' ':\n            words.append(s[i:i+n])\n            n -= 1\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[i:i+n])\n            n -= 1\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[i:i+n])\n            n -= 1\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[i:i+n])\n            n -= 1\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[i:i+n])\n            n -= 1\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[i:i+n])\n            n -= 1\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[i:i+n])\n            n -= 1\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[i:i+n])\n            n -= 1\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[i:i+n])\n            n -= 1\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[i:i+n])\n            n -= 1\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[i:i+n])\n            n -= 1\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[i:i+n])\n            n -= 1\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[i:i+n])\n            n -= 1\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxxu3os0q.jl:20\nin expression starting at /tmp/tmpxxu3os0q.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    \n    words = []\n    \n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        \n        if n == 0:\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' ':\n            continue\n        \n        if n == 1:\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' ':\n            continue\n        \n        if n == 2:\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' ':\n            continue\n        \n        if n == 3:\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' ':\n            continue\n        \n        if n == 4:\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' ':\n            continue\n        \n        if n == 5:\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' ':\n            continue\n        \n        if n == 6:\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' ':\n            continue\n        \n        if n == 7:\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' ':\n            continue\n        \n        if n == 8:\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' ':\n            continue\n        \n        if n == 9:\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' ':\n            continue\n        \n        if n == 10:\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' ':\n            continue\n        \n        if n == 11:\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' '\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp05fhl7xk.jl:20\nin expression starting at /tmp/tmp05fhl7xk.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    words = []\n    for i in range(0, len(s)):\n        if s[i] == \" \":\n            continue\n        if n == 0:\n            return words\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmy6e3_75.jl:19\nin expression starting at /tmp/tmpmy6e3_75.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpln9vv6r4.jl:20\nin expression starting at /tmp/tmpln9vv6r4.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    words = []\n    for i in range(0, len(s) - n + 1):\n        if s[i:i+n] == \" \":\n            continue\n        words.append(s[i:i+n])\n    return words\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplkovs417.jl:19\nin expression starting at /tmp/tmplkovs417.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n].count(\" \") == 0]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy27qb08g.jl:20\nin expression starting at /tmp/tmpy27qb08g.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n].count(\" \") == 0]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy27qb08g.jl:20\nin expression starting at /tmp/tmpy27qb08g.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jyuex6k.jl:20\nin expression starting at /tmp/tmp9jyuex6k.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    words = []\n    for i in range(0, len(s) - n + 1):\n        if s[i:i+n] == \" \":\n            continue\n        words.append(s[i:i+n])\n    return words\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplkovs417.jl:19\nin expression starting at /tmp/tmplkovs417.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    else\n        return filter(lambda x: x.count(s) == n, s.split(\" \"))\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw5v9f75s.jl:19\nin expression starting at /tmp/tmpw5v9f75s.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jyuex6k.jl:20\nin expression starting at /tmp/tmp9jyuex6k.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    else if n == 0 then return []\n    else return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn54xvd2_.jl:19\nin expression starting at /tmp/tmpn54xvd2_.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    return filter(lambda x: len(x) == n and all(c in \"abcdefghijklmnopqrstuvwxyz\" for c in x), \n                  map(lambda x: x.split(\" \"), s.split(\" \")))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjo9y_wr9.jl:19\nin expression starting at /tmp/tmpjo9y_wr9.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    \n    words = []\n    \n    for i in range(0, len(s)):\n        if s[i] == ' ':\n            continue\n        \n        if n == 0:\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[i:])\n            break\n        \n        if s[i]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpefux8n0e.jl:20\nin expression starting at /tmp/tmpefux8n0e.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpij_xo98x.jl:20\nin expression starting at /tmp/tmpij_xo98x.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    return filter(lambda x: len(x) == n and all(c in \"abcdefghijklmnopqrstuvwxyz\" for c in x), \n        filter(lambda x: x != \" \", s.split(\" \")))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk0qrpmjb.jl:19\nin expression starting at /tmp/tmpk0qrpmjb.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    \n    # Create a dictionary of all words in the string\n    words = dict()\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        \n        # If the word is in the dictionary, then add it to the vector\n        if s[i:i+n] in words:\n            words[s[i:i+n]].append(s[i])\n        else:\n            words[s[i:i+n]] = [s[i]]\n    \n    # Return the vector of words\n    return [k for k, v in words.items() if len(v) == n]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb0zcgtxz.jl:20\nin expression starting at /tmp/tmpb0zcgtxz.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    \n    words = []\n    for i in range(0, len(s) - n + 1):\n        if s[i:i + n] == \"\":\n            continue\n        words.append(s[i:i + n])\n    return words\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmbo4qptq.jl:20\nin expression starting at /tmp/tmpmbo4qptq.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return filter(lambda x: len(x) == n and all(c in \"abcdefghijklmnopqrstuvwxyz\" for c in x), s.split(\" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292940,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi5a_fz_a.jl:20\nin expression starting at /tmp/tmpi5a_fz_a.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return filter(lambda x: len(x) == n and all(c in \"abcdefghijklmnopqrstuvwxyz\" for c in x), s.split(\" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292940,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi5a_fz_a.jl:20\nin expression starting at /tmp/tmpi5a_fz_a.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    words = []\n    for i in range(0, len(s)):\n        if s[i] == ' ':\n            continue\n        if n == 0:\n            return []\n        if n == 1:\n            words.append(s[i:])\n            return words\n        if s[i] == ' ':\n            words.append(s[i:])\n            n -= 1\n            continue\n        if s[i] == ' ':\n            words.append(s[i:])\n            n -= 1\n            continue\n        if s[i] == ' ':\n            words.append(s[i:])\n            n -= 1\n            continue\n        if s[i] == ' ':\n            words.append(s[i:])\n            n -= 1\n            continue\n        if s[i] == ' ':\n            words.append(s[i:])\n            n -= 1\n            continue\n        if s[i] == ' ':\n            words.append(s[i:])\n            n -= 1\n            continue\n        if s[i] == ' ':\n            words.append(s[i:])\n            n -= 1\n            continue\n        if s[i] == ' ':\n            words.append(s[i:])\n            n -= 1\n            continue\n        if s[i] == ' ':\n            words.append(s[i:])\n            n -= 1\n            continue\n        if s[i] == ' ':\n            words.append(s[i:])\n            n -= 1\n            continue\n        if s[i] == ' ':\n            words.append(s[i:])\n            n -= 1\n            continue\n        if s[i] == ' ':\n            words.append(s[i:])\n            n -= 1\n            continue\n        if s[i] == ' ':\n            words.append(s[i:])\n            n -= 1\n            continue\n        if s[i] == ' ':\n            words.append(s[i:])\n            n -= 1\n            continue\n        if s[i] == ' ':\n            \nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292940,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvyah34de.jl:20\nin expression starting at /tmp/tmpvyah34de.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n].count(\" \") == 0]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy27qb08g.jl:20\nin expression starting at /tmp/tmpy27qb08g.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    \n    words = []\n    \n    for i in range(0, len(s)):\n        if s[i] == \" \":\n            continue\n        \n        if n == 0:\n            break\n        \n        if s[i] in \"abcdefghijklmnopqrstuvwxyz\":\n            n -= 1\n        \n        if n == 0:\n            words.append(s[i:i+1])\n            n = n + 1\n    \n    return words\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292940,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvrk0it19.jl:19\nin expression starting at /tmp/tmpvrk0it19.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpln9vv6r4.jl:20\nin expression starting at /tmp/tmpln9vv6r4.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jyuex6k.jl:20\nin expression starting at /tmp/tmp9jyuex6k.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    if n == 0:\n        return []\n    \n    # Create a dictionary of words with the number of consonants\n    # in each word.\n    words = {}\n    for word in s.split():\n        consonants = 0\n        for char in word:\n            if char.isalpha():\n                if char.isupper():\n                    consonants += 1\n                else:\n                    consonants += 1\n        words[word] = consonants\n    \n    # Create a list of words that have exactly n consonants.\n    result = []\n    for word in words:\n        if words[word] == n:\n            result.append(word)\n    return result\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292941,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s0d4hlo.jl:20\nin expression starting at /tmp/tmp3s0d4hlo.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    else if n == 0 then return []\n    else return filter(lambda x: len(x) == n, s.split(\" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292941,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdp3t_73h.jl:19\nin expression starting at /tmp/tmpdp3t_73h.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    return filter(lambda x: len(x) == n, split(s, \" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpev7vgomy.jl:19\nin expression starting at /tmp/tmpev7vgomy.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jyuex6k.jl:20\nin expression starting at /tmp/tmp9jyuex6k.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    elif len(s) < n:\n        return []\n    else:\n        return filter(lambda x: x.count(s[0]) == n, s.split(\" \"))\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292941,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdvk55wq1.jl:20\nin expression starting at /tmp/tmpdvk55wq1.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    v = []\n    for i in range(0, len(s)):\n        if s[i] == \" \":\n            continue\n        if n == 0:\n            return v\n        v.append(s[i:i+n])\n    return v\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292941,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyfl0iyit.jl:19\nin expression starting at /tmp/tmpyfl0iyit.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    if n == 0:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n].count(\" \") == 0]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292941,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp380vxhir.jl:20\nin expression starting at /tmp/tmp380vxhir.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    else if n == 0 then return []\n    else return filter(lambda x: n == len(x), \n        filter(lambda x: len(x) == n, \n            filter(lambda x: x != \" \", \n                filter(lambda x: x != \" \", \n                    filter(lambda x: x != \" \", \n                        filter(lambda x: x != \" \", \n                            filter(lambda x: x != \" \", \n                                filter(lambda x: x != \" \", \n                                    filter(lambda x: x != \" \", \n                                        filter(lambda x: x != \" \", \n                                            filter(lambda x: x != \" \", \n                                                filter(lambda x: x != \" \", \n                                                    filter(lambda x: x != \" \", \n                                                        filter(lambda x: x != \" \", \n                                                            filter(lambda x: x != \" \", \n                                                                filter(lambda x: x != \" \", \n                                                                    filter(lambda x: x != \" \", \n                                                                        filter(lambda x: x != \" \", \n                                                                            filter(lambda x: x != \" \", \n                                                                                filter(lambda x: x != \" \", \n                                                                                    filter(lambda x: x != \" \", \n                                                                                        filter(lambda x: x != \" \", \n                                                                                            filter(lambda x: x != \" \", \n                                                                                                filter(lambda x: x != \" \", \n                                                                                                    filter(lambda x: x != \" \", \n                                                                                                        filter(lambda x: x != \" \", \n                                                                                                            filter(lambda x: x != \" \", \n                                                                                                                        filter(lambda x: x != \" \", \n                                                                                                                                filter(lambda x: x != \" \", \n                                                                                                                                          filter(lambda x: x != \" \", \n                                                                                                                                                  filter(lambda x: x != \" \", \n                                                                                                                                                           filter(\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292941,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp75hpxdwu.jl:19\nin expression starting at /tmp/tmp75hpxdwu.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jyuex6k.jl:20\nin expression starting at /tmp/tmp9jyuex6k.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jyuex6k.jl:20\nin expression starting at /tmp/tmp9jyuex6k.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return filter(lambda x: len(x) == n and s.contains(x), s.split(\" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292941,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpye15nmyk.jl:20\nin expression starting at /tmp/tmpye15nmyk.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jyuex6k.jl:20\nin expression starting at /tmp/tmp9jyuex6k.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jyuex6k.jl:20\nin expression starting at /tmp/tmp9jyuex6k.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    words = []\n    for i in range(0, len(s)):\n        if s[i] == \" \":\n            continue\n        if n == 0:\n            return words\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmy6e3_75.jl:19\nin expression starting at /tmp/tmpmy6e3_75.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return filter(lambda x: len(x) == n, \n            filter(lambda x: x.count(' ') == 0, \n                filter(lambda x: x.count(' ') == 0, \n                    filter(lambda x: x.count(' ') == 0, \n                        filter(lambda x: x.count(' ') == 0, \n                            filter(lambda x: x.count(' ') == 0, \n                                filter(lambda x: x.count(' ') == 0, \n                                    filter(lambda x: x.count(' ') == 0, \n                                        filter(lambda x: x.count(' ') == 0, \n                                            filter(lambda x: x.count(' ') == 0, \n                                                filter(lambda x: x.count(' ') == 0, \n                                                    filter(lambda x: x.count(' ') == 0, \n                                                        filter(lambda x: x.count(' ') == 0, \n                                                            filter(lambda x: x.count(' ') == 0, \n                                                                filter(lambda x: x.count(' ') == 0, \n                                                                    filter(lambda x: x.count(' ') == 0, \n                                                                        filter(lambda x: x.count(' ') == 0, \n                                                                            filter(lambda x: x.count(' ') == 0, \n                                                                                filter(lambda x: x.count(' ') == 0, \n                                                                                    filter(lambda x: x.count(' ') == 0, \n                                                                                        filter(lambda x: x.count(' ') == 0, \n                                                                                            filter(lambda x: x.count(' ') == 0, \n                                                                                                filter(lambda x: x.count(' ') == 0, \n                                                                                                    filter(lambda x: x.count(' ') == 0, \n                                                                                                        filter(lambda x: x.count(' ') == 0,\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292941,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu2hmn77k.jl:20\nin expression starting at /tmp/tmpu2hmn77k.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    else\n        return filter(lambda x: len(x) == n and all(c in \"abcdefghijklmnopqrstuvwxyz\" for c in x), s.split(\" \"))\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292941,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdmv9a36u.jl:19\nin expression starting at /tmp/tmpdmv9a36u.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n].count(\" \") == 0]\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpevso0mqw.jl:20\nin expression starting at /tmp/tmpevso0mqw.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    return filter(lambda x: len(x) == n, \n        filter(lambda x: s.contains(x), \n            split(s, \" \")))\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292941,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy3bjhm36.jl:19\nin expression starting at /tmp/tmpy3bjhm36.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    words = []\n    for i in range(0, len(s)):\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \"\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8y8rd8_p.jl:19\nin expression starting at /tmp/tmp8y8rd8_p.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    words = []\n    for i in range(0, len(s)):\n        if s[i] == \" \":\n            continue\n        if n == 0:\n            return words\n        if n > 0 and n <= len(s[i]):\n            words.append(s[i])\n            n -= 1\n            continue\n        if s[i] in words:\n            continue\n        words.append(s[i])\n        n -= 1\n        continue\n    return words\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292941,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7ur2b3hg.jl:19\nin expression starting at /tmp/tmp7ur2b3hg.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    if n == 0:\n        return []\n    return filter(lambda x: len(x) == n, \n        filter(lambda x: len(x) > 0, \n            filter(lambda x: len(x) > 0, \n                filter(lambda x: len(x) > 0, \n                    filter(lambda x: len(x) > 0, \n                        filter(lambda x: len(x) > 0, \n                            filter(lambda x: len(x) > 0, \n                                filter(lambda x: len(x) > 0, \n                                    filter(lambda x: len(x) > 0, \n                                        filter(lambda x: len(x) > 0, \n                                            filter(lambda x: len(x) > 0, \n                                                filter(lambda x: len(x) > 0, \n                                                    filter(lambda x: len(x) > 0, \n                                                        filter(lambda x: len(x) > 0, \n                                                            filter(lambda x: len(x) > 0, \n                                                                filter(lambda x: len(x) > 0, \n                                                                    filter(lambda x: len(x) > 0, \n                                                                        filter(lambda x: len(x) > 0, \n                                                                            filter(lambda x: len(x) > 0, \n                                                                                filter(lambda x: len(x) > 0, \n                                                                                    filter(lambda x: len(x) > 0, \n                                                                                        filter(lambda x: len(x) > 0, \n                                                                                            filter(lambda x: len(x) > 0, \n                                                                                                filter(lambda x: len(x) > 0, \n                                                                                                    filter(lambda x: len(x) > 0, \n                                                                                                        filter(lambda x: len(x) > 0, \n                                                                                                            filter(lambda x: len(x) > 0, \n                               \nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292941,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpae35n4im.jl:20\nin expression starting at /tmp/tmpae35n4im.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    else if n == 0 then return []\n    else return filter(lambda x: len(x) == n, s.split(\" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292941,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdp3t_73h.jl:19\nin expression starting at /tmp/tmpdp3t_73h.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    words = []\n    for i in range(0, len(s)):\n        if s[i] == \" \":\n            continue\n        if n == 0:\n            return words\n        count = 0\n        for j in range(i, len(s)):\n            if s[j] == \" \":\n                break\n            if s[j] == s[i]:\n                count += 1\n                if count == n:\n                    words.append(s[i:j])\n                    break\n        i = j\n    return words\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292941,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpolj43m4g.jl:19\nin expression starting at /tmp/tmpolj43m4g.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    return filter(lambda x: len(x) == n and all(c in \"abcdefghijklmnopqrstuvwxyz\" for c in x), \n                  map(lambda x: x.split(\" \"), s.split(\" \")))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjo9y_wr9.jl:19\nin expression starting at /tmp/tmpjo9y_wr9.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jyuex6k.jl:20\nin expression starting at /tmp/tmp9jyuex6k.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    return filter(lambda x: len(x) == n, split(s, \" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpev7vgomy.jl:19\nin expression starting at /tmp/tmpev7vgomy.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n].count(\" \") == 0]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy27qb08g.jl:20\nin expression starting at /tmp/tmpy27qb08g.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    return filter(lambda x: len(x) == n, split(s, \" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpev7vgomy.jl:19\nin expression starting at /tmp/tmpev7vgomy.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    else\n        if n == 0 then return []\n        else\n            return filter(lambda x: len(x) == n, \n                filter(lambda x: x != \"\", \n                    map(lambda x: x.split(\" \"), \n                        filter(lambda x: x != \"\", s.split(\" \"))))\n            )\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292941,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppkyt8px8.jl:19\nin expression starting at /tmp/tmppkyt8px8.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return filter(lambda x: len(x) == n and all(c in \"abcdefghijklmnopqrstuvwxyz\" for c in x), s.split(\" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292940,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi5a_fz_a.jl:20\nin expression starting at /tmp/tmpi5a_fz_a.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    if n == 0:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292941,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsrtxm4c0.jl:20\nin expression starting at /tmp/tmpsrtxm4c0.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    \n    # Create a dictionary of all the words in the string\n    words = {}\n    for i in range(0, len(s)):\n        if s[i] == ' ':\n            continue\n        \n        # If the word is in the dictionary, then add it to the list\n        if s[i] in words:\n            words[s[i]].append(s[i])\n        else:\n            words[s[i]] = [s[i]]\n    \n    # Create a list of words that have the correct number of consonants\n    result = []\n    for word in words:\n        if len(words[word]) == n:\n            result.append(word)\n    \n    return result\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292941,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpik9nm2r6.jl:20\nin expression starting at /tmp/tmpik9nm2r6.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    \n    words = []\n    for i in range(0, len(s) - n + 1):\n        if s[i:i+n] == \"\":\n            continue\n        words.append(s[i:i+n])\n    return words\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292941,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptcj113iq.jl:20\nin expression starting at /tmp/tmptcj113iq.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    if n == 0:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n].count(\" \") == 0]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292941,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp380vxhir.jl:20\nin expression starting at /tmp/tmp380vxhir.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    return filter(lambda x: len(x) == n and all(c in \"abcdefghijklmnopqrstuvwxyz\" for c in x), \n                  map(lambda x: x.split(), s.split(\" \")))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292941,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpemhgjswg.jl:19\nin expression starting at /tmp/tmpemhgjswg.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    \n    words = []\n    for i in range(0, len(s) - n + 1):\n        if s[i:i + n] == \" \":\n            continue\n        words.append(s[i:i + n])\n    return words\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292941,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb5iv6auf.jl:19\nin expression starting at /tmp/tmpb5iv6auf.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    words = []\n    for i in range(0, len(s)):\n        if s[i] == ' ':\n            continue\n        if n == 0:\n            return []\n        if s[i] == ' ':\n            continue\n        if n == 1:\n            words.append(s[i:])\n            return words\n        if s[i] == ' ':\n            continue\n        if n == 2:\n            words.append(s[i:i+2])\n            return words\n        if s[i] == ' ':\n            continue\n        if n == 3:\n            words.append(s[i:i+3])\n            return words\n        if s[i] == ' ':\n            continue\n        if n == 4:\n            words.append(s[i:i+4])\n            return words\n        if s[i] == ' ':\n            continue\n        if n == 5:\n            words.append(s[i:i+5])\n            return words\n        if s[i] == ' ':\n            continue\n        if n == 6:\n            words.append(s[i:i+6])\n            return words\n        if s[i] == ' ':\n            continue\n        if n == 7:\n            words.append(s[i:i+7])\n            return words\n        if s[i] == ' ':\n            continue\n        if n == 8:\n            words.append(s[i:i+8])\n            return words\n        if s[i] == ' ':\n            continue\n        if n == 9:\n            words.append(s[i:i+9])\n            return words\n        if s[i] == ' ':\n            continue\n        if n == 10:\n            words.append(s[i:i+10])\n            return words\n        if s[i] == ' ':\n            continue\n        if n == 11:\n            words.append(s[i:i+11])\n            return words\n        if s[i] == ' ':\n            continue\n        if n == 12:\n            words.append(s[\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292941,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvrqoqeny.jl:20\nin expression starting at /tmp/tmpvrqoqeny.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpln9vv6r4.jl:20\nin expression starting at /tmp/tmpln9vv6r4.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    else return filter(lambda x: x.count(s) == n, split(s))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292941,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp980xzj3_.jl:19\nin expression starting at /tmp/tmp980xzj3_.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    else if n == 0 then return []\n    else return filter(lambda x: contains(x, n), s.split(\" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292942,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx2848r8w.jl:19\nin expression starting at /tmp/tmpx2848r8w.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    return filter(lambda x: len(x) == n, split(s, \" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpev7vgomy.jl:19\nin expression starting at /tmp/tmpev7vgomy.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n].count('a') == n]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292942,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1diku_n0.jl:20\nin expression starting at /tmp/tmp1diku_n0.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    if n == 0:\n        return []\n    if n > len(s):\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1)]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292943,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxq2yhbw7.jl:20\nin expression starting at /tmp/tmpxq2yhbw7.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jyuex6k.jl:20\nin expression starting at /tmp/tmp9jyuex6k.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    words = []\n    for i in range(0, len(s)):\n        if s[i] == \" \":\n            continue\n        if n == 0:\n            return words\n        count = 0\n        for j in range(i, len(s)):\n            if s[j] == \" \":\n                break\n            if s[j] == s[i]:\n                count += 1\n                if count == n:\n                    words.append(s[i:j])\n                    break\n        i = j\n    return words\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292941,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpolj43m4g.jl:19\nin expression starting at /tmp/tmpolj43m4g.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jyuex6k.jl:20\nin expression starting at /tmp/tmp9jyuex6k.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    else return filter(lambda x: len(x) == n, s.split(\" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292943,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc48hlo3j.jl:19\nin expression starting at /tmp/tmpc48hlo3j.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jyuex6k.jl:20\nin expression starting at /tmp/tmp9jyuex6k.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    words = []\n    for i in range(0, len(s)):\n        if s[i] == \" \":\n            continue\n        if n == 0:\n            return words\n        if s[i] == \" \":\n            continue\n        if n == 1:\n            words.append(s[i])\n            return words\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        if s[\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292943,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbz9ou26b.jl:19\nin expression starting at /tmp/tmpbz9ou26b.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    return filter(lambda x: len(x) == n, split(s, \" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpev7vgomy.jl:19\nin expression starting at /tmp/tmpev7vgomy.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    words = []\n    for i in range(len(s)):\n        if s[i] == \" \":\n            continue\n        if n == 0:\n            return words\n        if s[i] == \" \":\n            continue\n        if s[i] == \" \":\n            continue\n        words.append(s[i])\n        n -= 1\n        if n == 0:\n            return words\n        n -= 1\n        if n == 0:\n            return words\n        n -= 1\n        if n == 0:\n            return words\n        n -= 1\n        if n == 0:\n            return words\n        n -= 1\n        if n == 0:\n            return words\n        n -= 1\n        if n == 0:\n            return words\n        n -= 1\n        if n == 0:\n            return words\n        n -= 1\n        if n == 0:\n            return words\n        n -= 1\n        if n == 0:\n            return words\n        n -= 1\n        if n == 0:\n            return words\n        n -= 1\n        if n == 0:\n            return words\n        n -= 1\n        if n == 0:\n            return words\n        n -= 1\n        if n == 0:\n            return words\n        n -= 1\n        if n == 0:\n            return words\n        n -= 1\n        if n == 0:\n            return words\n        n -= 1\n        if n == 0:\n            return words\n        n -= 1\n        if n == 0:\n            return words\n        n -= 1\n        if n == 0:\n            return words\n        n -= 1\n        if n == 0:\n            return words\n        n -= 1\n        if n == 0:\n            return words\n        n -= 1\n        if n == 0:\n            return words\n        n -= 1\n        if n == 0:\n            return words\n        n -= 1\n        if n == 0:\n            return words\n        n -= 1\n        if n == 0:\n            return words\n        n -= 1\n        if n == 0:\n            return words\n        n -= 1\n        if n == 0:\n            return words\n        n -= 1\n        if\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292943,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_b6jpujh.jl:19\nin expression starting at /tmp/tmp_b6jpujh.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jyuex6k.jl:20\nin expression starting at /tmp/tmp9jyuex6k.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    return filter(lambda x: len(x) == n and all(c in \"abcdefghijklmnopqrstuvwxyz\" for c in x), \n        map(lambda x: x.split(\" \"), s.split(\" \")))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi8eir_v_.jl:19\nin expression starting at /tmp/tmpi8eir_v_.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    else if n > len(s) then return []\n    else return [s[i] for i in range(len(s)) if s[i] in \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and s[i] != \" \" and\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292943,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp99qescyw.jl:19\nin expression starting at /tmp/tmp99qescyw.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    return filter(lambda x: len(x) == n, \n        filter(lambda x: x.find(\" \") == -1, \n            filter(lambda x: x.find(\" \") == -1, \n                filter(lambda x: x.find(\" \") == -1, \n                    filter(lambda x: x.find(\" \") == -1, \n                        filter(lambda x: x.find(\" \") == -1, \n                            filter(lambda x: x.find(\" \") == -1, \n                                filter(lambda x: x.find(\" \") == -1, \n                                    filter(lambda x: x.find(\" \") == -1, \n                                        filter(lambda x: x.find(\" \") == -1, \n                                            filter(lambda x: x.find(\" \") == -1, \n                                                filter(lambda x: x.find(\" \") == -1, \n                                                    filter(lambda x: x.find(\" \") == -1, \n                                                        filter(lambda x: x.find(\" \") == -1, \n                                                            filter(lambda x: x.find(\" \") == -1, \n                                                                filter(lambda x: x.find(\" \") == -1, \n                                                                    filter(lambda x: x.find(\" \") == -1, \n                                                                        filter(lambda x: x.find(\" \") == -1, \n                                                                            filter(lambda x: x.find(\" \") == -1, \n                                                                                filter(lambda x: x.find(\" \") == -1, \n                                                                                    filter(lambda x: x.find(\" \") == -1, \n                                                                                        filter(lambda x: x.find(\" \") == -1, \n                                                                                            filter(lambda x: x.find(\" \") == -1, \n                                                                                                filter(lambda x: x.find(\" \") == -1, \n                                                                                                    filter(lambda x: x\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292943,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_c02t1a6.jl:19\nin expression starting at /tmp/tmp_c02t1a6.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jyuex6k.jl:20\nin expression starting at /tmp/tmp9jyuex6k.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    else if n == 0 then return []\n    else return filter(lambda x: len(x) == n, split(s, \" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292943,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn8noo6oy.jl:19\nin expression starting at /tmp/tmpn8noo6oy.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    else return filter(lambda x: len(x) == n, split(s, \" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4bec_7p4.jl:19\nin expression starting at /tmp/tmp4bec_7p4.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jyuex6k.jl:20\nin expression starting at /tmp/tmp9jyuex6k.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    return filter(lambda x: len(x) == n, split(s, \" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpev7vgomy.jl:19\nin expression starting at /tmp/tmpev7vgomy.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    if n == 0 then return []\n    return filter(lambda x: count(x) == n, s.split(\" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292943,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6t479gxd.jl:19\nin expression starting at /tmp/tmp6t479gxd.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    words = []\n    for i in range(0, len(s) - n + 1):\n        if s[i:i + n] != \"\":\n            words.append(s[i:i + n])\n    return words\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292943,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt5vssgd0.jl:19\nin expression starting at /tmp/tmpt5vssgd0.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    \n    words = []\n    for i in range(0, len(s)):\n        if s[i] == ' ':\n            continue\n        \n        if n == 0:\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' ':\n            words.append(s[i:])\n            n -= 1\n            continue\n        \n        if n == 1:\n            words.append(s[i:])\n            n -= 1\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[i:])\n            n -= 1\n            continue\n        \n        if n == 2:\n            words.append(s[i:])\n            n -= 1\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[i:])\n            n -= 1\n            continue\n        \n        if n == 3:\n            words.append(s[i:])\n            n -= 1\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[i:])\n            n -= 1\n            continue\n        \n        if n == 4:\n            words.append(s[i:])\n            n -= 1\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[i:])\n            n -= 1\n            continue\n        \n        if n == 5:\n            words.append(s[i:])\n            n -= 1\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[i:])\n            n -= 1\n            continue\n        \n        if n == 6:\n            words.append(s[i:])\n            n -= 1\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[i:])\n            n -= 1\n            continue\n        \n        if n == 7:\n            words.append(s[i:])\n            n -= 1\n            continue\n        \n        if s[i] == ' ':\n            words.append(s[\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc5tiomi4.jl:20\nin expression starting at /tmp/tmpc5tiomi4.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    words = []\n    for i in range(0, len(s)):\n        if s[i] == ' ':\n            continue\n        if i + n > len(s):\n            break\n        if s[i:i+n] == ' ':\n            continue\n        words.append(s[i:i+n])\n    return words\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292943,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg0rxgacr.jl:20\nin expression starting at /tmp/tmpg0rxgacr.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    return filter(lambda x: len(x) == n, split(s, \" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpev7vgomy.jl:19\nin expression starting at /tmp/tmpev7vgomy.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return filter(lambda x: len(x) == n, \n            filter(lambda x: len(x) > 0, \n                filter(lambda x: x.find(\" \") == -1, \n                    map(lambda x: x.split(\"\"), \n                        filter(lambda x: x.find(\" \") == -1, \n                            map(lambda x: x.split(\"\"), s.split(\" \")))))))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292943,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq3_m_cnh.jl:20\nin expression starting at /tmp/tmpq3_m_cnh.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    \n    words = []\n    \n    for i in range(0, len(s)):\n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n            continue\n        \n        if s[i] == ' ':\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292943,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_e984nbf.jl:20\nin expression starting at /tmp/tmp_e984nbf.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    if n == 0 then return []\n    \n    words = []\n    for i in range(len(s)):\n        if s[i] == \" \":\n            continue\n        \n        if n == 0:\n            return []\n        \n        if s[i] == \" \":\n            words.append(s[i:i+1])\n            n -= 1\n            continue\n        \n        if s[i] == \" \":\n            words.append(s[i:i+1])\n            n -= 1\n            continue\n        \n        words.append(s[i:i+1])\n        n -= 1\n        \n    return words\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292943,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy5b0z7y1.jl:19\nin expression starting at /tmp/tmpy5b0z7y1.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    else if n == 0 then return []\n    else return filter(lambda x: len(x) == n, split(s, \" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292943,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn8noo6oy.jl:19\nin expression starting at /tmp/tmpn8noo6oy.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    if n == 0:\n        return []\n    if n > len(s):\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292943,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0zjv_ngm.jl:20\nin expression starting at /tmp/tmp0zjv_ngm.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jyuex6k.jl:20\nin expression starting at /tmp/tmp9jyuex6k.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return filter(lambda x: len(x) == n and s.contains(x), s.split(\" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292941,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpye15nmyk.jl:20\nin expression starting at /tmp/tmpye15nmyk.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    if n == 0 then return []\n    return filter(lambda x: len(x) == n, s.split(\" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292943,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpri41plzl.jl:19\nin expression starting at /tmp/tmpri41plzl.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    else\n        return filter(lambda x: len(x) == n, \n            filter(lambda x: x.find(\" \") == -1, \n                map(lambda x: x.split(\" \"), s.split(\" \"))))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292943,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps56fgu8f.jl:19\nin expression starting at /tmp/tmps56fgu8f.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    \n    words:Vector[String] = []\n    \n    for i in range(0, len(s)):\n        if s[i] == \" \":\n            continue\n        \n        if n == 0:\n            words.append(s[i:])\n            break\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[i] == \" \":\n            continue\n        \n        if s[\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292943,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp83xk4fc3.jl:19\nin expression starting at /tmp/tmp83xk4fc3.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return filter(lambda x: len(x) == n, \n            filter(lambda x: len(x) > 0, \n                filter(lambda x: x.find(' ') == -1, \n                    filter(lambda x: x.find(' ') == -1, \n                        filter(lambda x: x.find(' ') == -1, \n                            filter(lambda x: x.find(' ') == -1, \n                                filter(lambda x: x.find(' ') == -1, \n                                    filter(lambda x: x.find(' ') == -1, \n                                        filter(lambda x: x.find(' ') == -1, \n                                            filter(lambda x: x.find(' ') == -1, \n                                                filter(lambda x: x.find(' ') == -1, \n                                                    filter(lambda x: x.find(' ') == -1, \n                                                        filter(lambda x: x.find(' ') == -1, \n                                                            filter(lambda x: x.find(' ') == -1, \n                                                                filter(lambda x: x.find(' ') == -1, \n                                                                    filter(lambda x: x.find(' ') == -1, \n                                                                        filter(lambda x: x.find(' ') == -1, \n                                                                            filter(lambda x: x.find(' ') == -1, \n                                                                                filter(lambda x: x.find(' ') == -1, \n                                                                                    filter(lambda x: x.find(' ') == -1, \n                                                                                        filter(lambda x: x.find(' ') == -1, \n                                                                                            filter(lambda x: x.find(' ') == -1, \n                                                                                                filter(lambda x: x.find(' ') == -1, \n                                                                                                    filter(lambda x: x.find(' ') == -1, \n                               \nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292943,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcw6bxq1h.jl:20\nin expression starting at /tmp/tmpcw6bxq1h.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    return filter(lambda x: len(x) == n, \n        filter(lambda x: len(x) > 0, \n            filter(lambda x: x.find(\" \") == -1, \n                filter(lambda x: x.find(\" \") == -1, \n                    filter(lambda x: x.find(\" \") == -1, \n                        filter(lambda x: x.find(\" \") == -1, \n                            filter(lambda x: x.find(\" \") == -1, \n                                filter(lambda x: x.find(\" \") == -1, \n                                    filter(lambda x: x.find(\" \") == -1, \n                                        filter(lambda x: x.find(\" \") == -1, \n                                            filter(lambda x: x.find(\" \") == -1, \n                                                filter(lambda x: x.find(\" \") == -1, \n                                                    filter(lambda x: x.find(\" \") == -1, \n                                                        filter(lambda x: x.find(\" \") == -1, \n                                                            filter(lambda x: x.find(\" \") == -1, \n                                                                filter(lambda x: x.find(\" \") == -1, \n                                                                    filter(lambda x: x.find(\" \") == -1, \n                                                                        filter(lambda x: x.find(\" \") == -1, \n                                                                            filter(lambda x: x.find(\" \") == -1, \n                                                                                filter(lambda x: x.find(\" \") == -1, \n                                                                                    filter(lambda x: x.find(\" \") == -1, \n                                                                                        filter(lambda x: x.find(\" \") == -1, \n                                                                                            filter(lambda x: x.find(\" \") == -1, \n                                                                                                filter(lambda x: x.find(\" \") == -1, \n                                                                                                    filter(lambda x: x.find(\"\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyna4i4nm.jl:19\nin expression starting at /tmp/tmpyna4i4nm.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    if n == 0 then return []\n    return filter(lambda x: len(x) == n, \n        filter(lambda x: len(x) > 0, \n            filter(lambda x: x != \" \", \n                s.split(\" \"))))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292943,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5d19li_j.jl:19\nin expression starting at /tmp/tmp5d19li_j.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292943,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqqhaopy6.jl:20\nin expression starting at /tmp/tmpqqhaopy6.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    words = []\n    for i in range(0, len(s)):\n        if s[i] == \" \":\n            continue\n        if n == 0:\n            return words\n        if s[i] == \" \":\n            continue\n        if s[i] in \"abcdefghijklmnopqrstuvwxyz\":\n            words.append(s[i])\n            n -= 1\n            if n == 0:\n                return words\n        if s[i] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n            words.append(s[i])\n            n -= 1\n            if n == 0:\n                return words\n    return words\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292943,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3zrlcn3t.jl:19\nin expression starting at /tmp/tmp3zrlcn3t.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    else return filter(lambda x: len(x) == n and all(c in \"abcdefghijklmnopqrstuvwxyz\" for c in x), s.split(\" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292943,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpur11fn1s.jl:19\nin expression starting at /tmp/tmpur11fn1s.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    return filter(lambda x: len(x) == n, split(s, \" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpev7vgomy.jl:19\nin expression starting at /tmp/tmpev7vgomy.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    else if n == 0 then return []\n    else return filter(lambda x: len(x) == n, split(s, \" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292943,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn8noo6oy.jl:19\nin expression starting at /tmp/tmpn8noo6oy.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if n == 0:\n            return words\n        count = 0\n        for j in range(i, len(s)):\n            if s[j] == ' ':\n                break\n            if s[j] == s[i]:\n                count += 1\n                if count == n:\n                    words.append(s[i:j])\n                    break\n        i = j\n    return words\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292943,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp21jp8lik.jl:20\nin expression starting at /tmp/tmp21jp8lik.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jyuex6k.jl:20\nin expression starting at /tmp/tmp9jyuex6k.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    return filter(lambda x: len(x) == n and s.contains(x), s.split(\" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292944,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0ini01az.jl:19\nin expression starting at /tmp/tmp0ini01az.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    words = []\n    for i in range(0, len(s) - n + 1):\n        if s[i:i+n] == \" \":\n            continue\n        words.append(s[i:i+n])\n    return words\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplkovs417.jl:19\nin expression starting at /tmp/tmplkovs417.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return filter(lambda x: x.count(s) == n, s.split(\" \"))\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292944,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprqc62883.jl:20\nin expression starting at /tmp/tmprqc62883.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jyuex6k.jl:20\nin expression starting at /tmp/tmp9jyuex6k.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    return filter(lambda x: len(x) == n, split(s, \" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpev7vgomy.jl:19\nin expression starting at /tmp/tmpev7vgomy.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jyuex6k.jl:20\nin expression starting at /tmp/tmp9jyuex6k.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    else\n        return filter(lambda x: len(x) == n and all(c in \"abcdefghijklmnopqrstuvwxyz\" for c in x), \n            filter(lambda x: x != \" \", s.split(\" \")))\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292944,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpimvhocip.jl:19\nin expression starting at /tmp/tmpimvhocip.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return filter(lambda x: x.count(s) == n, s.split(\" \"))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292944,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzpcbln5q.jl:20\nin expression starting at /tmp/tmpzpcbln5q.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    if n == 0:\n        return []\n    words = []\n    for i in range(0, len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6te3p1_t.jl:20\nin expression starting at /tmp/tmp6te3p1_t.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jyuex6k.jl:20\nin expression starting at /tmp/tmp9jyuex6k.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    \n    words = []\n    for i in range(0, len(s)):\n        if s[i] == ' ':\n            continue\n        \n        if n == 0:\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' ':\n            continue\n        \n        if n == 1:\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' ':\n            continue\n        \n        if n == 2:\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' ':\n            continue\n        \n        if n == 3:\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' ':\n            continue\n        \n        if n == 4:\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' ':\n            continue\n        \n        if n == 5:\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' ':\n            continue\n        \n        if n == 6:\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' ':\n            continue\n        \n        if n == 7:\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' ':\n            continue\n        \n        if n == 8:\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' ':\n            continue\n        \n        if n == 9:\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' ':\n            continue\n        \n        if n == 10:\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' ':\n            continue\n        \n        if n == 11:\n            words.append(s[i:])\n            break\n        \n        if s[i] == ' '\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292944,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpemmlxry2.jl:20\nin expression starting at /tmp/tmpemmlxry2.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    \n    words = []\n    for i in range(0, len(s)):\n        if s[i] == ' ':\n            continue\n        \n        if n == 0:\n            return []\n        \n        if s[i] in 'aeiou':\n            n -= 1\n        \n        if n == 0:\n            words.append(s[i:i+1])\n            n = n + 1\n            \n    return words\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292944,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpelfdn12u.jl:20\nin expression starting at /tmp/tmpelfdn12u.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    elif len(s) < n:\n        return []\n    else:\n        return [s[i:i+n] for i in range(0, len(s)-n+1)]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292944,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwf9ji46y.jl:20\nin expression starting at /tmp/tmpwf9ji46y.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    elif len(s) == 1:\n        return [s]\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292944,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnv1gftql.jl:20\nin expression starting at /tmp/tmpnv1gftql.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    if n == 0 then return []\n    if n > len(s) then return []\n    \n    consonants = [c for c in s if c in \"aeiou\"]\n    \n    if n > len(consonants) then return []\n    \n    return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] in consonants]\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292944,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp855ibqvv.jl:19\nin expression starting at /tmp/tmp855ibqvv.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    return filter(lambda x: len(x) == n and all(c in \"abcdefghijklmnopqrstuvwxyz\" for c in x), s.split(\" \"))\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp525ux3iz.jl:19\nin expression starting at /tmp/tmp525ux3iz.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if len(s) == 0:\n        return []\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1) if s[i:i+n] != \" \"]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jyuex6k.jl:20\nin expression starting at /tmp/tmp9jyuex6k.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a vector of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty vector.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n    if s == \"\" then return []\n    words = []\n    for i in range(0, len(s) - n + 1):\n        if s[i:i + n] == \" \":\n            continue\n        words.append(s[i:i + n])\n    return words\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n",
      "timestamp": 1664292944,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjy87x6v7.jl:19\nin expression starting at /tmp/tmpjy87x6v7.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}