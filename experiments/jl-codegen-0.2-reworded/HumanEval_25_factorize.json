{
  "name": "HumanEval_25_factorize",
  "language": "jl",
  "prompt": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n",
  "tests": "using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n",
  "completions": [
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i) * factorize(n / i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    elif n == 3:\n        return Vector{Int64}\n    elif n % 2 == 0:\n        return factorize(n / 2)\n    else:\n        return factorize(n - 1) + Vector{Int64}",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = append(factors, i)\n            factors = append(factors, n / i)\n            break\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i] * factorize(n / i)\n        return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n+1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n+1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i) * factorize(n / i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors + Vector{Int64}(n)",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i) * factorize(n / i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[factorize(n / 2) + factorize(n % 2)]",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n / 2) + factorize(n / 3) + factorize(n / 5) + factorize(n / 7)",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n / 2)",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n / 2) + factorize(n / 3) + factorize(n / 5) + factorize(n / 7)",
    "    if n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    elif n == 3:\n        return Vector{Int64}\n    elif n == 4:\n        return Vector{Int64}\n    elif n == 5:\n        return Vector{Int64}\n    elif n == 6:\n        return Vector{Int64}\n    elif n == 7:\n        return Vector{Int64}\n    elif n == 8:\n        return Vector{Int64}\n    elif n == 9:\n        return Vector{Int64}\n    elif n == 10:\n        return Vector{Int64}\n    elif n == 11:\n        return Vector{Int64}\n    elif n == 12:\n        return Vector{Int64}\n    elif n == 13:\n        return Vector{Int64}\n    elif n == 14:\n        return Vector{Int64}\n    elif n == 15:\n        return Vector{Int64}\n    elif n == 16:\n        return Vector{Int64}\n    elif n == 17:\n        return Vector{Int64}\n    elif n == 18:\n        return Vector{Int64}\n    elif n == 19:\n        return Vector{Int64}\n    elif n == 20:\n        return Vector{Int64}\n    elif n == 21:\n        return Vector{Int64}\n    elif n == 22:\n        return Vector{Int64}\n    elif n == 23:\n        return Vector{Int64}\n    elif n == 24:\n        return Vector{Int64}\n    elif n == 25:\n        return Vector{Int64}\n    elif n == 26:\n        return Vector{Int64}\n    elif n == 27:\n        return Vector{Int64}\n    elif n == 28:\n        return Vector{Int64}\n    elif n == 29:\n        return Vector{Int64}\n    elif n == 30:\n        return Vector{Int64}\n    elif n == 31:\n        return Vector{Int64}\n    elif n == 32:\n        return Vector{Int64}\n    ",
    "    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 2:\n        return Vector{Int64}[2]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)",
    "    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors + Vector{Int64}(n)",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n / 2) + factorize(n / 3) + factorize(n / 5) + factorize(n / 7)",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n / 2)",
    "    if n == 1:\n        return Vector[Int64]()\n    elif n == 0:\n        return Vector[Int64]()\n    else:\n        return Vector[Int64]([n, factorize(n // 2)]) + factorize(n // 2)",
    "    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 2:\n        return Vector{Int64}[2]\n    elif n == 3:\n        return Vector{Int64}[2, 1]\n    elif n == 4:\n        return Vector{Int64}[2, 2]\n    elif n % 2 == 0:\n        return factorize(n / 2) * 2\n    else:\n        return factorize(3 * (n - 1) + 1)",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n+1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(n):\n            factors = factors + factorize(n % i)\n        return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = factorize(n / 2)\n        return Vector{Int64}[factors[0] * 2, factors[1]]",
    "    if n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    elif n == 3:\n        return Vector{Int64}\n    elif n == 4:\n        return Vector{Int64}\n    elif n == 5:\n        return Vector{Int64}\n    elif n == 6:\n        return Vector{Int64}\n    elif n == 7:\n        return Vector{Int64}\n    elif n == 8:\n        return Vector{Int64}\n    elif n == 9:\n        return Vector{Int64}\n    elif n == 10:\n        return Vector{Int64}\n    elif n == 11:\n        return Vector{Int64}\n    elif n == 12:\n        return Vector{Int64}\n    elif n == 13:\n        return Vector{Int64}\n    elif n == 14:\n        return Vector{Int64}\n    elif n == 15:\n        return Vector{Int64}\n    elif n == 16:\n        return Vector{Int64}\n    elif n == 17:\n        return Vector{Int64}\n    elif n == 18:\n        return Vector{Int64}\n    elif n == 19:\n        return Vector{Int64}\n    elif n == 20:\n        return Vector{Int64}\n    elif n == 21:\n        return Vector{Int64}\n    elif n == 22:\n        return Vector{Int64}\n    elif n == 23:\n        return Vector{Int64}\n    elif n == 24:\n        return Vector{Int64}\n    elif n == 25:\n        return Vector{Int64}\n    elif n == 26:\n        return Vector{Int64}\n    elif n == 27:\n        return Vector{Int64}\n    elif n == 28:\n        return Vector{Int64}\n    elif n == 29:\n        return Vector{Int64}\n    elif n == 30:\n        return Vector{Int64}\n    elif n == 31:\n        return Vector{Int64}\n    elif n == 32:\n        return Vector{Int64}\n    ",
    "    if n == 1:\n        return Vector[Int64]()\n    elif n == 0:\n        return Vector[Int64]([0])\n    else:\n        return Vector[Int64]([n, factorize(n % 2), factorize(n % 3), factorize(n % 5), factorize(n % 7)])",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n+1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n / 2) + factorize(n / 3) + factorize(n / 5) + factorize(n / 7)",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return (factorize(n // 2) + factorize(n % 2))",
    "    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i) * factorize(n / i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2)",
    "    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return (factorize(n // 2) * factorize(n % 2))",
    "    if n == 1:\n        return Vector[Int64]()\n    factors = Vector[Int64]()\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector[Int64](i)\n            n = n / i\n    return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(1, i)\n            n = n / i\n    return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2)",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = factorize(n/2)\n        return factors + factorize(n - factors[0]*2)",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i) * factorize(n / i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)",
    "    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n / i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = append(factors, i)\n            factors = append(factors, n/i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = factorize(n / 2)\n        return Vector{Int64}[factors[0] * 2, factors[1]]",
    "    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)",
    "    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n / 2) + factorize(n / 3) + factorize(n / 5) + factorize(n / 7) + factorize(n / 11) + factorize(n / 13) + factorize(n / 17) + factorize(n / 19) + factorize(n / 23) + factorize(n / 29) + factorize(n / 31) + factorize(n / 37) + factorize(n / 41) + factorize(n / 43) + factorize(n / 47) + factorize(n / 53) + factorize(n / 59) + factorize(n / 61) + factorize(n / 67) + factorize(n / 71) + factorize(n / 73) + factorize(n / 79) + factorize(n / 83) + factorize(n / 89) + factorize(n / 97) + factorize(n / 101) + factorize(n / 103) + factorize(n / 107) + factorize(n / 109) + factorize(n / 113) + factorize(n / 127) + factorize(n / 131) + factorize(n / 137) + factorize(n / 139) + factorize(n / 149) + factorize(n / 151) + factorize(n / 157) + factorize(n / 163) + factorize(n / 167) + factorize(n / 173) + factorize(n / 179) + factorize(n / 181) + factorize(n / 191) + factorize(n / 193) + factorize(n / 197) + factorize(n / 199) + factorize(n / 211) + factorize(n / 223) + factorize(n / 227) + factorize(n / 229) + factorize(n / 233) + factorize(n / 239) + factorize(n / 241) + factorize(n / 251) + factorize(n / 257) + factorize(n / 263) + factorize(n / 269) + factorize(n / 271) + factorize(n / 277) + factorize(n / 281)",
    "    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n % 2) + factorize(n % 3) + factorize(n % 5) + factorize(n % 7)",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors = append(factors, i)\n            factors = append(factors, n / i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n / 2)",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = append(factors, i)\n            factors = append(factors, n/i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}\n    else:\n        return factorize(n/2) + factorize(n/3) + factorize(n/5) + factorize(n/7)",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = factorize(n / 2)\n        return Vector{Int64}[factors[0] * 2, factors[1]]",
    "    if n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    elif n == 3:\n        return Vector{Int64}\n    elif n == 4:\n        return Vector{Int64}\n    elif n == 5:\n        return Vector{Int64}\n    elif n == 6:\n        return Vector{Int64}\n    elif n == 7:\n        return Vector{Int64}\n    elif n == 8:\n        return Vector{Int64}\n    elif n == 9:\n        return Vector{Int64}\n    elif n == 10:\n        return Vector{Int64}\n    elif n == 11:\n        return Vector{Int64}\n    elif n == 12:\n        return Vector{Int64}\n    elif n == 13:\n        return Vector{Int64}\n    elif n == 14:\n        return Vector{Int64}\n    elif n == 15:\n        return Vector{Int64}\n    elif n == 16:\n        return Vector{Int64}\n    elif n == 17:\n        return Vector{Int64}\n    elif n == 18:\n        return Vector{Int64}\n    elif n == 19:\n        return Vector{Int64}\n    elif n == 20:\n        return Vector{Int64}\n    elif n == 21:\n        return Vector{Int64}\n    elif n == 22:\n        return Vector{Int64}\n    elif n == 23:\n        return Vector{Int64}\n    elif n == 24:\n        return Vector{Int64}\n    elif n == 25:\n        return Vector{Int64}\n    elif n == 26:\n        return Vector{Int64}\n    elif n == 27:\n        return Vector{Int64}\n    elif n == 28:\n        return Vector{Int64}\n    elif n == 29:\n        return Vector{Int64}\n    elif n == 30:\n        return Vector{Int64}\n    elif n == 31:\n        return Vector{Int64}\n    elif n == 32:\n        return Vector{Int64}\n    ",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = append(factors, i)\n            factors = append(factors, n / i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors + Vector{Int64}(n)",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    factors = factors + Vector{Int64}(n)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = factorize(n / 2)\n        return Vector{Int64}[factors[0] * 2, factors[1]]",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n+1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = append(factors, i)\n            factors = append(factors, n / i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 2:\n        return Vector{Int64}[2]\n    elif n == 3:\n        return Vector{Int64}[3]\n    elif n == 4:\n        return Vector{Int64}[2, 2]\n    elif n == 5:\n        return Vector{Int64}[5]\n    elif n == 6:\n        return Vector{Int64}[3, 2]\n    elif n == 7:\n        return Vector{Int64}[7]\n    elif n == 8:\n        return Vector{Int64}[2, 2, 2]\n    elif n == 9:\n        return Vector{Int64}[3, 3]\n    elif n == 10:\n        return Vector{Int64}[5, 2]\n    elif n == 11:\n        return Vector{Int64}[11]\n    elif n == 12:\n        return Vector{Int64}[2, 2, 2, 2]\n    elif n == 13:\n        return Vector{Int64}[13]\n    elif n == 14:\n        return Vector{Int64}[7, 2]\n    elif n == 15:\n        return Vector{Int64}[3, 5]\n    elif n == 16:\n        return Vector{Int64}[2, 2, 2, 2, 2]\n    elif n == 17:\n        return Vector{Int64}[17]\n    elif n == 18:\n        return Vector{Int64}[3, 3, 2]\n    elif n == 19:\n        return Vector{Int64}[19]\n    elif n == 20:\n        return Vector{Int64}[2, 2, 2, 2, 2, 2]\n    elif n == 21:\n        return Vector{Int64}[3, 7]\n    elif n == 22:\n        return Vector{Int64}[11, 2]\n    elif n == 23:\n        return Vector{Int64}[23]\n    elif n == 24:\n        return Vector{Int64}[2, 2, 2, 2, 2, 2,",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n+1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i) * factorize(n / i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n+1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors",
    "    if n == 1:\n        return Vector[Int64]()\n    elif n == 0:\n        return Vector[Int64]([0])\n    else:\n        return Vector[Int64]([n, factorize(n % 2), factorize(n % 3), factorize(n % 5), factorize(n % 7)])",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors + Vector{Int64}(n)",
    "    if n == 1:\n        return Vector[Int64]()\n    factors = Vector[Int64]()\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n / i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors",
    "    if n == 1:\n        return Vector[Int64]()\n    factors = Vector[Int64]()\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector[Int64](i)\n            n = n / i\n    return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + [i] * factorize(n / i)\n            break\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)",
    "    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(1, i)\n            n = n / i\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    if n == 0:\n        return Vector{Int64}[0]\n    if n == 2:\n        return Vector{Int64}[2]\n    if n == 3:\n        return Vector{Int64}[3]\n    if n % 2 == 0:\n        return factorize(n / 2) * 2\n    if n % 3 == 0:\n        return factorize(n / 3) * 3\n    return factorize(n / 5) * 5",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n / 2) + factorize(n / 3) + factorize(n / 5) + factorize(n / 7)",
    "    if n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    elif n == 3:\n        return Vector{Int64}\n    elif n == 4:\n        return Vector{Int64}\n    elif n == 5:\n        return Vector{Int64}\n    elif n == 6:\n        return Vector{Int64}\n    elif n == 7:\n        return Vector{Int64}\n    elif n == 8:\n        return Vector{Int64}\n    elif n == 9:\n        return Vector{Int64}\n    elif n == 10:\n        return Vector{Int64}\n    elif n == 11:\n        return Vector{Int64}\n    elif n == 12:\n        return Vector{Int64}\n    elif n == 13:\n        return Vector{Int64}\n    elif n == 14:\n        return Vector{Int64}\n    elif n == 15:\n        return Vector{Int64}\n    elif n == 16:\n        return Vector{Int64}\n    elif n == 17:\n        return Vector{Int64}\n    elif n == 18:\n        return Vector{Int64}\n    elif n == 19:\n        return Vector{Int64}\n    elif n == 20:\n        return Vector{Int64}\n    elif n == 21:\n        return Vector{Int64}\n    elif n == 22:\n        return Vector{Int64}\n    elif n == 23:\n        return Vector{Int64}\n    elif n == 24:\n        return Vector{Int64}\n    elif n == 25:\n        return Vector{Int64}\n    elif n == 26:\n        return Vector{Int64}\n    elif n == 27:\n        return Vector{Int64}\n    elif n == 28:\n        return Vector{Int64}\n    elif n == 29:\n        return Vector{Int64}\n    elif n == 30:\n        return Vector{Int64}\n    elif n == 31:\n        return Vector{Int64}\n    elif n == 32:\n        return Vector{Int64}\n    ",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors + Vector{Int64}(n)",
    "    if n == 1:\n        return Vector[Int64]()\n    elif n == 0:\n        return Vector[Int64]([0])\n    else:\n        factors = Vector[Int64]([])\n        for i in range(2, n+1):\n            if n % i == 0:\n                factors = factors + factorize(n / i)\n        return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)",
    "    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 2:\n        return Vector{Int64}[2]\n    elif n == 3:\n        return Vector{Int64}[3]\n    elif n == 4:\n        return Vector{Int64}[2, 2]\n    elif n % 2 == 0:\n        return factorize(n / 2) * 2\n    else:\n        return factorize(3 * (n - 1) + 1)",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i) * factorize(n / i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2)",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = append(factors, i)\n            factors = append(factors, n / i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}\n    else:\n        return Vector{Int64}.append(factorize(n / 2))\n        .append(factorize(n / 3))\n        .append(factorize(n / 5))\n        .append(factorize(n / 7))\n        .append(factorize(n / 11))\n        .append(factorize(n / 13))\n        .append(factorize(n / 17))\n        .append(factorize(n / 19))\n        .append(factorize(n / 23))\n        .append(factorize(n / 29))\n        .append(factorize(n / 31))\n        .append(factorize(n / 37))\n        .append(factorize(n / 41))\n        .append(factorize(n / 43))\n        .append(factorize(n / 47))\n        .append(factorize(n / 53))\n        .append(factorize(n / 59))\n        .append(factorize(n / 61))\n        .append(factorize(n / 67))\n        .append(factorize(n / 71))\n        .append(factorize(n / 73))\n        .append(factorize(n / 79))\n        .append(factorize(n / 83))\n        .append(factorize(n / 89))\n        .append(factorize(n / 97))\n        .append(factorize(n / 101))\n        .append(factorize(n / 103))\n        .append(factorize(n / 107))\n        .append(factorize(n / 109))\n        .append(factorize(n / 113))\n        .append(factorize(n / 127))\n        .append(factorize(n / 131))\n        .append(factorize(n / 137))\n        .append(factorize(n / 139))\n        .append(factorize(n / 149))\n        .append(factorize(n / 151))\n        .append(factorize(n / 157))\n        .append(factorize(n / 163))\n        .append(factorize(n / 167))\n        .append(factorize(n / 173))\n        .append(factorize(n",
    "    if n == 1:\n        return Vector[Int64]()\n    elif n == 2:\n        return Vector[Int64]([2])\n    elif n == 3:\n        return Vector[Int64]([3])\n    elif n % 2 == 0:\n        return factorize(n / 2) + factorize(n / 2)\n    else:\n        return factorize(n - 1) + Vector[Int64]([n])",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n+1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors",
    "    if n == 1:\n        return Vector[Int64]()\n    elif n == 0:\n        return Vector[Int64]()\n    else:\n        factors = Vector[Int64]()\n        for i in range(2, n+1):\n            if n % i == 0:\n                factors.append(i)\n                factors.append(n/i)\n        return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return (factorize(n // 2) * 2) + (factorize(n % 2) * 1)",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n / i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = append(factors, i)\n            factors = append(factors, n/i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n / i)\n            break\n    return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n / i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    if n == 0:\n        return Vector{Int64}[0]\n    factors = Vector{Int64}[0]\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}[i] * factorize(n / i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return (factorize(n / 2) + factorize(n / 3) + factorize(n / 5) + factorize(n / 7) + factorize(n / 11) + factorize(n / 13) + factorize(n / 17) + factorize(n / 19) + factorize(n / 23) + factorize(n / 29) + factorize(n / 31) + factorize(n / 37) + factorize(n / 41) + factorize(n / 43) + factorize(n / 47) + factorize(n / 53) + factorize(n / 59) + factorize(n / 61) + factorize(n / 67) + factorize(n / 71) + factorize(n / 73) + factorize(n / 79) + factorize(n / 83) + factorize(n / 89) + factorize(n / 97) + factorize(n / 101) + factorize(n / 103) + factorize(n / 107) + factorize(n / 109) + factorize(n / 113) + factorize(n / 127) + factorize(n / 131) + factorize(n / 137) + factorize(n / 139) + factorize(n / 149) + factorize(n / 151) + factorize(n / 157) + factorize(n / 163) + factorize(n / 167) + factorize(n / 173) + factorize(n / 179) + factorize(n / 181) + factorize(n / 191) + factorize(n / 193) + factorize(n / 197) + factorize(n / 199) + factorize(n / 211) + factorize(n / 223) + factorize(n / 227) + factorize(n / 229) + factorize(n / 233) + factorize(n / 239) + factorize(n / 241) + factorize(n / 251) + factorize(n / 257) + factorize(n / 263) + factorize(n / 269) + factorize(n / 271) + factorize(n / 277) + factorize(n / 281) + factorize(n / 283)",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i) * factorize(n / i)\n    return factors",
    "    if n == 1:\n        return Vector[Int64]()\n    factors = Vector[Int64]()\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector[Int64]([i, n//i])\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2)",
    "    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)",
    "    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return (factorize(n // 2) + factorize(n % 2))",
    "    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n / 2) + factorize(n / 3) + factorize(n / 5) + factorize(n / 7) + factorize(n / 11) + factorize(n / 13) + factorize(n / 17) + factorize(n / 19) + factorize(n / 23) + factorize(n / 29) + factorize(n / 31) + factorize(n / 37) + factorize(n / 41) + factorize(n / 43) + factorize(n / 47) + factorize(n / 53) + factorize(n / 59) + factorize(n / 61) + factorize(n / 67) + factorize(n / 71) + factorize(n / 73) + factorize(n / 79) + factorize(n / 83) + factorize(n / 89) + factorize(n / 97) + factorize(n / 101) + factorize(n / 103) + factorize(n / 107) + factorize(n / 109) + factorize(n / 113) + factorize(n / 127) + factorize(n / 131) + factorize(n / 137) + factorize(n / 139) + factorize(n / 149) + factorize(n / 151) + factorize(n / 157) + factorize(n / 163) + factorize(n / 167) + factorize(n / 173) + factorize(n / 179) + factorize(n / 181) + factorize(n / 191) + factorize(n / 193) + factorize(n / 197) + factorize(n / 199) + factorize(n / 211) + factorize(n / 223) + factorize(n / 227) + factorize(n / 229) + factorize(n / 233) + factorize(n / 239) + factorize(n / 241) + factorize(n / 251) + factorize(n / 257) + factorize(n / 263) + factorize(n / 269) + factorize(n",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    if n == 0:\n        return Vector{Int64}[0]\n    if n == 2:\n        return Vector{Int64}[2]\n    if n % 2 == 0:\n        return factorize(n / 2) * 2\n    if n % 3 == 0:\n        return factorize(n / 3) * 3\n    if n % 5 == 0:\n        return factorize(n / 5) * 5\n    if n % 7 == 0:\n        return factorize(n / 7) * 7\n    return factorize(n)",
    "    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(n):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 2:\n        return Vector{Int64}[2]\n    elif n == 3:\n        return Vector{Int64}[3]\n    elif n % 2 == 0:\n        return factorize(n / 2) * 2\n    else:\n        return factorize(n) * (n - 1)",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i) * factorize(n / i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(1, i)\n            n = n / i\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    if n == 2:\n        return Vector{Int64}[2]\n    if n == 3:\n        return Vector{Int64}[3]\n    if n == 4:\n        return Vector{Int64}[2, 2]\n    if n == 5:\n        return Vector{Int64}[5]\n    if n == 6:\n        return Vector{Int64}[2, 3]\n    if n == 7:\n        return Vector{Int64}[7]\n    if n == 8:\n        return Vector{Int64}[2, 2, 2]\n    if n == 9:\n        return Vector{Int64}[3, 3]\n    if n == 10:\n        return Vector{Int64}[5, 2]\n    if n == 11:\n        return Vector{Int64}[11]\n    if n == 12:\n        return Vector{Int64}[2, 2, 2, 2]\n    if n == 13:\n        return Vector{Int64}[13]\n    if n == 14:\n        return Vector{Int64}[2, 7]\n    if n == 15:\n        return Vector{Int64}[3, 5]\n    if n == 16:\n        return Vector{Int64}[2, 2, 2, 2, 2]\n    if n == 17:\n        return Vector{Int64}[17]\n    if n == 18:\n        return Vector{Int64}[2, 3, 3]\n    if n == 19:\n        return Vector{Int64}[19]\n    if n == 20:\n        return Vector{Int64}[2, 2, 2, 2, 2, 2]\n    if n == 21:\n        return Vector{Int64}[3, 3, 3]\n    if n == 22:\n        return Vector{Int64}[2, 2, 2, 2, 2, 2, 2]\n    if n == 23:\n        return Vector{Int64}[2, 2, 2, 2, 2, 2, 2, 2]\n    if n == 24:\n        return Vector{Int64}[2, 2, 2, 2, 2",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = append(factors, i)\n            factors = append(factors, n / i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    if n == 0:\n        return Vector{Int64}[0]\n    if n == 2:\n        return Vector{Int64}[2]\n    if n == 3:\n        return Vector{Int64}[1, 1]\n    if n % 2 == 0:\n        return factorize(n / 2) * 2\n    return factorize(n) * (n - 1)",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n / 2)",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return (factorize(n / 2) + factorize(n / 3) + factorize(n / 5) + factorize(n / 7) + factorize(n / 11) + factorize(n / 13) + factorize(n / 17) + factorize(n / 19) + factorize(n / 23) + factorize(n / 29) + factorize(n / 31) + factorize(n / 37) + factorize(n / 41) + factorize(n / 43) + factorize(n / 47) + factorize(n / 53) + factorize(n / 59) + factorize(n / 61) + factorize(n / 67) + factorize(n / 71) + factorize(n / 73) + factorize(n / 79) + factorize(n / 83) + factorize(n / 89) + factorize(n / 97) + factorize(n / 101) + factorize(n / 103) + factorize(n / 107) + factorize(n / 109) + factorize(n / 113) + factorize(n / 127) + factorize(n / 131) + factorize(n / 137) + factorize(n / 139) + factorize(n / 149) + factorize(n / 151) + factorize(n / 157) + factorize(n / 163) + factorize(n / 167) + factorize(n / 173) + factorize(n / 179) + factorize(n / 181) + factorize(n / 191) + factorize(n / 193) + factorize(n / 197) + factorize(n / 199) + factorize(n / 211) + factorize(n / 223) + factorize(n / 227) + factorize(n / 229) + factorize(n / 233) + factorize(n / 239) + factorize(n / 241) + factorize(n / 251) + factorize(n / 257) + factorize(n / 263) + factorize(n / 269) + factorize(n / 271) + factorize(n / 277) + factorize(n / 281) + factorize(n / 283)",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n+1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = append(factors, i)\n            factors = append(factors, n/i)\n    return factors",
    "    if n == 1:\n        return Vector[Int64]()\n    elif n == 0:\n        return Vector[Int64]()\n    else:\n        factors = Vector[Int64]()\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors = factors + Vector[Int64](i)\n                n = n / i\n        return factors",
    "    if n == 1:\n        return Vector[Int64]()\n    elif n == 2:\n        return Vector[Int64](2)\n    elif n == 3:\n        return Vector[Int64](3)\n    elif n % 2 == 0:\n        return factorize(n / 2) + factorize(n / 2)\n    else:\n        return factorize(n - 1) + factorize(n - 1)",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = factorize(n/2)\n        return factors * factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[1] * (n / i)\n        return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 2:\n        return Vector{Int64}[2]\n    elif n == 3:\n        return Vector{Int64}[1, 2]\n    elif n % 2 == 0:\n        return factorize(n / 2) * 2\n    else:\n        return factorize(3 * (n - 1) + 1)",
    "    if n == 1:\n        return Vector[Int64]{1}\n    else:\n        factors = Vector[Int64]{}\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors = append(factors, i)\n                factors = append(factors, n / i)\n        return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors",
    "    if n == 1:\n        return Vector{Int64}\n    elif n == 0:\n        return Vector{Int64}\n    else:\n        return Vector{Int64}.append(n)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
    "    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n / i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n / 2)",
    "    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 2:\n        return Vector{Int64}[2]\n    elif n == 3:\n        return Vector{Int64}[3]\n    elif n == 4:\n        return Vector{Int64}[2, 2]\n    elif n == 5:\n        return Vector{Int64}[5]\n    elif n == 6:\n        return Vector{Int64}[2, 3]\n    elif n == 7:\n        return Vector{Int64}[7]\n    elif n == 8:\n        return Vector{Int64}[2, 2, 2]\n    elif n == 9:\n        return Vector{Int64}[3, 3]\n    elif n == 10:\n        return Vector{Int64}[5, 2]\n    elif n == 11:\n        return Vector{Int64}[11]\n    elif n == 12:\n        return Vector{Int64}[2, 2, 2, 2]\n    elif n == 13:\n        return Vector{Int64}[13]\n    elif n == 14:\n        return Vector{Int64}[2, 7]\n    elif n == 15:\n        return Vector{Int64}[3, 5]\n    elif n == 16:\n        return Vector{Int64}[2, 2, 2, 2, 2]\n    elif n == 17:\n        return Vector{Int64}[17]\n    elif n == 18:\n        return Vector{Int64}[2, 3, 3]\n    elif n == 19:\n        return Vector{Int64}[19]\n    elif n == 20:\n        return Vector{Int64}[2, 2, 2, 2, 2, 2]\n    elif n == 21:\n        return Vector{Int64}[3, 3, 3]\n    elif n == 22:\n        return Vector{Int64}[2, 2, 2, 2, 2, 2, 2]\n    elif n == 23:\n        return Vector{Int64}[2, 2, 2, 2, 2, 2, 2, 2]\n    el",
    "    if n == 1:\n        return Vector{Int64}\n    elif n == 0:\n        return Vector{Int64}\n    else:\n        return Vector{Int64}.append(factorize(n / 2))\n        .append(factorize(n / 3))\n        .append(factorize(n / 5))\n        .append(factorize(n / 7))\n        .append(factorize(n / 11))\n        .append(factorize(n / 13))\n        .append(factorize(n / 17))\n        .append(factorize(n / 19))\n        .append(factorize(n / 23))\n        .append(factorize(n / 29))\n        .append(factorize(n / 31))\n        .append(factorize(n / 37))\n        .append(factorize(n / 41))\n        .append(factorize(n / 43))\n        .append(factorize(n / 47))\n        .append(factorize(n / 53))\n        .append(factorize(n / 59))\n        .append(factorize(n / 61))\n        .append(factorize(n / 67))\n        .append(factorize(n / 71))\n        .append(factorize(n / 73))\n        .append(factorize(n / 79))\n        .append(factorize(n / 83))\n        .append(factorize(n / 89))\n        .append(factorize(n / 97))\n        .append(factorize(n / 101))\n        .append(factorize(n / 103))\n        .append(factorize(n / 107))\n        .append(factorize(n / 109))\n        .append(factorize(n / 113))\n        .append(factorize(n / 127))\n        .append(factorize(n / 131))\n        .append(factorize(n / 137))\n        .append(factorize(n / 139))\n        .append(factorize(n / 149))\n        .append(factorize(n / 151))\n        .append(factorize(n / 157))\n        .append(factorize(n / 163))\n        .append(factorize(n / 167))\n        .append(",
    "    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors",
    "    if n == 1:\n        return Vector[Int64]()\n    elif n == 2:\n        return Vector[Int64](2)\n    elif n == 3:\n        return Vector[Int64](3)\n    elif n % 2 == 0:\n        return factorize(n / 2) + factorize(n / 2)\n    else:\n        return factorize(n - 1) + factorize(n - 1)",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = factorize(n / 2)\n        return Vector{Int64}[factors[0] * 2, factors[1]]",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)",
    "    if n == 1:\n        return Vector[Int64]()\n    elif n == 2:\n        return Vector[Int64](2)\n    elif n == 3:\n        return Vector[Int64](3)\n    elif n % 2 == 0:\n        return factorize(n / 2) * 2\n    else:\n        return factorize(n - 1) + Vector[Int64](1)",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + [i] * factorize(n / i)\n            break\n    return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = append(factors, i)\n            factors = append(factors, n // i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n / i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n / 2) + factorize(n / 3) + factorize(n / 5) + factorize(n / 7) + factorize(n / 11) + factorize(n / 13) + factorize(n / 17) + factorize(n / 19) + factorize(n / 23) + factorize(n / 29) + factorize(n / 31) + factorize(n / 37) + factorize(n / 41) + factorize(n / 43) + factorize(n / 47) + factorize(n / 53) + factorize(n / 59) + factorize(n / 61) + factorize(n / 67) + factorize(n / 71) + factorize(n / 73) + factorize(n / 79) + factorize(n / 83) + factorize(n / 89) + factorize(n / 97) + factorize(n / 101) + factorize(n / 103) + factorize(n / 107) + factorize(n / 109) + factorize(n / 113) + factorize(n / 127) + factorize(n / 131) + factorize(n / 137) + factorize(n / 139) + factorize(n / 149) + factorize(n / 151) + factorize(n / 157) + factorize(n / 163) + factorize(n / 167) + factorize(n / 173) + factorize(n / 179) + factorize(n / 181) + factorize(n / 191) + factorize(n / 193) + factorize(n / 197) + factorize(n / 199) + factorize(n / 211) + factorize(n / 223) + factorize(n / 227) + factorize(n / 229) + factorize(n / 233) + factorize(n / 239) + factorize(n / 241) + factorize(n / 251) + factorize(n / 257) + factorize(n / 263) + factorize(n / 269) + factorize(n / 271) + factorize(n / 277) + factorize(n / 281)",
    "    if n == 1:\n        return Vector[Int64]()\n    elif n == 2:\n        return Vector[Int64]([2])\n    elif n == 3:\n        return Vector[Int64]([3])\n    elif n % 2 == 0:\n        return factorize(n / 2) + factorize(n / 2)\n    else:\n        return factorize(n / 2) + factorize(n / 3)",
    "    if n == 1:\n        return Vector[Int64]()\n    elif n == 2:\n        return Vector[Int64](2)\n    elif n == 3:\n        return Vector[Int64](3)\n    elif n == 4:\n        return Vector[Int64](2, 2)\n    elif n == 5:\n        return Vector[Int64](5)\n    elif n == 6:\n        return Vector[Int64](2, 3)\n    elif n == 7:\n        return Vector[Int64](7)\n    elif n == 8:\n        return Vector[Int64](2, 2, 2)\n    elif n == 9:\n        return Vector[Int64](3, 3)\n    elif n == 10:\n        return Vector[Int64](5, 2)\n    elif n == 11:\n        return Vector[Int64](11)\n    elif n == 12:\n        return Vector[Int64](2, 2, 2, 2)\n    elif n == 13:\n        return Vector[Int64](13)\n    elif n == 14:\n        return Vector[Int64](2, 7)\n    elif n == 15:\n        return Vector[Int64](3, 5)\n    elif n == 16:\n        return Vector[Int64](2, 2, 2, 2, 2)\n    elif n == 17:\n        return Vector[Int64](17)\n    elif n == 18:\n        return Vector[Int64](2, 3, 3)\n    elif n == 19:\n        return Vector[Int64](19)\n    elif n == 20:\n        return Vector[Int64](2, 2, 2, 2, 2, 2)\n    elif n == 21:\n        return Vector[Int64](3, 3, 3)\n    elif n == 22:\n        return Vector[Int64](2, 7, 2)\n    elif n == 23:\n        return Vector[Int64](2, 2, 2, 2, 2, 2)\n    elif n == 24:\n        return Vector[Int64](2, 2, 2, 2, 2, 2, 2)\n    elif n == 25:\n",
    "    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i) * factorize(n / i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    if n == 0:\n        return Vector{Int64}[0]\n    factors = Vector{Int64}[0]\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}[i]\n            n = n / i\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = factorize(n / 2)\n        return Vector{Int64}[factors[0] * 2, factors[1]]",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n+1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    elif n == 0:\n        return Vector{Int64}[0]\n    else:\n        return Vector{Int64}[n] + factorize(n // 2) + factorize(n % 2)",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + [i] * factorize(n / i)\n            break\n    return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i)\n            n = n / i\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    if n == 0:\n        return Vector{Int64}[0]\n    if n == 2:\n        return Vector{Int64}[2]\n    if n == 3:\n        return Vector{Int64}[1, 1]\n    if n == 4:\n        return Vector{Int64}[2, 1]\n    if n == 5:\n        return Vector{Int64}[1, 2]\n    if n == 6:\n        return Vector{Int64}[2, 2]\n    if n == 7:\n        return Vector{Int64}[1, 1, 1]\n    if n == 8:\n        return Vector{Int64}[2, 1, 1]\n    if n == 9:\n        return Vector{Int64}[1, 2, 1]\n    if n == 10:\n        return Vector{Int64}[2, 2, 1]\n    if n == 11:\n        return Vector{Int64}[1, 1, 2]\n    if n == 12:\n        return Vector{Int64}[2, 1, 2]\n    if n == 13:\n        return Vector{Int64}[1, 2, 2]\n    if n == 14:\n        return Vector{Int64}[2, 2, 2]\n    if n == 15:\n        return Vector{Int64}[1, 1, 1, 1]\n    if n == 16:\n        return Vector{Int64}[2, 1, 1, 1]\n    if n == 17:\n        return Vector{Int64}[1, 2, 1, 1]\n    if n == 18:\n        return Vector{Int64}[2, 2, 1, 1]\n    if n == 19:\n        return Vector{Int64}[1, 1, 2, 1]\n    if n == 20:\n        return Vector{Int64}[2, 1, 2, 1]\n    if n == 21:\n        return Vector{Int64}[1, 2, 2, 1]\n    if n == 22:\n        return Vector{Int64}[2, 2, 2, 1]\n    if n == 23:\n        return Vector",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(i) * factorize(n / i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        factors = Vector{Int64}[0]\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors = factors + Vector{Int64}[i]\n                n = n / i\n        return factors",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors = factors + Vector{Int64}(1, i)\n            n = n / i\n    return factors",
    "    if n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    elif n == 3:\n        return Vector{Int64}\n    elif n == 4:\n        return Vector{Int64}\n    elif n == 5:\n        return Vector{Int64}\n    elif n == 6:\n        return Vector{Int64}\n    elif n == 7:\n        return Vector{Int64}\n    elif n == 8:\n        return Vector{Int64}\n    elif n == 9:\n        return Vector{Int64}\n    elif n == 10:\n        return Vector{Int64}\n    elif n == 11:\n        return Vector{Int64}\n    elif n == 12:\n        return Vector{Int64}\n    elif n == 13:\n        return Vector{Int64}\n    elif n == 14:\n        return Vector{Int64}\n    elif n == 15:\n        return Vector{Int64}\n    elif n == 16:\n        return Vector{Int64}\n    elif n == 17:\n        return Vector{Int64}\n    elif n == 18:\n        return Vector{Int64}\n    elif n == 19:\n        return Vector{Int64}\n    elif n == 20:\n        return Vector{Int64}\n    elif n == 21:\n        return Vector{Int64}\n    elif n == 22:\n        return Vector{Int64}\n    elif n == 23:\n        return Vector{Int64}\n    elif n == 24:\n        return Vector{Int64}\n    elif n == 25:\n        return Vector{Int64}\n    elif n == 26:\n        return Vector{Int64}\n    elif n == 27:\n        return Vector{Int64}\n    elif n == 28:\n        return Vector{Int64}\n    elif n == 29:\n        return Vector{Int64}\n    elif n == 30:\n        return Vector{Int64}\n    elif n == 31:\n        return Vector{Int64}\n    elif n == 32:\n        return Vector{Int64}\n    ",
    "    if n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    elif n == 3:\n        return Vector{Int64}\n    elif n == 4:\n        return Vector{Int64}\n    elif n == 5:\n        return Vector{Int64}\n    elif n == 6:\n        return Vector{Int64}\n    elif n == 7:\n        return Vector{Int64}\n    elif n == 8:\n        return Vector{Int64}\n    elif n == 9:\n        return Vector{Int64}\n    elif n == 10:\n        return Vector{Int64}\n    elif n == 11:\n        return Vector{Int64}\n    elif n == 12:\n        return Vector{Int64}\n    elif n == 13:\n        return Vector{Int64}\n    elif n == 14:\n        return Vector{Int64}\n    elif n == 15:\n        return Vector{Int64}\n    elif n == 16:\n        return Vector{Int64}\n    elif n == 17:\n        return Vector{Int64}\n    elif n == 18:\n        return Vector{Int64}\n    elif n == 19:\n        return Vector{Int64}\n    elif n == 20:\n        return Vector{Int64}\n    elif n == 21:\n        return Vector{Int64}\n    elif n == 22:\n        return Vector{Int64}\n    elif n == 23:\n        return Vector{Int64}\n    elif n == 24:\n        return Vector{Int64}\n    elif n == 25:\n        return Vector{Int64}\n    elif n == 26:\n        return Vector{Int64}\n    elif n == 27:\n        return Vector{Int64}\n    elif n == 28:\n        return Vector{Int64}\n    elif n == 29:\n        return Vector{Int64}\n    elif n == 30:\n        return Vector{Int64}\n    elif n == 31:\n        return Vector{Int64}\n    elif n == 32:\n        return Vector{Int64}\n    ",
    "    if n == 1:\n        return Vector{Int64}\n    factors = Vector{Int64}\n    for i in range(2, n):\n        if n % i == 0:\n            factors = factors.append(i)\n            factors = factors.append(n/i)\n    return factors",
    "    if n == 1:\n        return Vector{Int64}[1]\n    else:\n        return Vector{Int64}[n] + factorize(n / 2) + factorize(n / 3) + factorize(n / 5) + factorize(n / 7)",
    "    if n == 1:\n        return Vector[Int64]()\n    elif n == 2:\n        return Vector[Int64](2)\n    elif n == 3:\n        return Vector[Int64](3)\n    elif n % 2 == 0:\n        return factorize(n / 2) + factorize(n / 2)\n    else:\n        return factorize(n - 1) + factorize(n - 1)"
  ],
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ]
}