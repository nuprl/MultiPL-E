{
  "name": "HumanEval_120_maximum",
  "language": "jl",
  "prompt": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n",
  "tests": "using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "results": [
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return [arr[i] for i in range(k) if arr[i] > arr[i+1]]\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy1fbowmf.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy1fbowmf.jl:1\nin expression starting at /tmp/tmpy1fbowmf.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0:\n        return []\n    if k == 1:\n        return max_k_1(arr)\n    if k == 2:\n        return max_k_2(arr)\n    return max_k_3(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptdvglfsu.jl:27\nin expression starting at /tmp/tmptdvglfsu.jl:27\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0:\n        return []\n    if k == 1:\n        return max_k_1(arr)\n    if k == 2:\n        return max_k_2(arr)\n    if k == 3:\n        return max_k_3(arr)\n    if k == 4:\n        return max_k_4(arr)\n    if k == 5:\n        return max_k_5(arr)\n    if k == 6:\n        return max_k_6(arr)\n    if k == 7:\n        return max_k_7(arr)\n    if k == 8:\n        return max_k_8(arr)\n    if k == 9:\n        return max_k_9(arr)\n    if k == 10:\n        return max_k_10(arr)\n    if k == 11:\n        return max_k_11(arr)\n    if k == 12:\n        return max_k_12(arr)\n    if k == 13:\n        return max_k_13(arr)\n    if k == 14:\n        return max_k_14(arr)\n    if k == 15:\n        return max_k_15(arr)\n    if k == 16:\n        return max_k_16(arr)\n    if k == 17:\n        return max_k_17(arr)\n    if k == 18:\n        return max_k_18(arr)\n    if k == 19:\n        return max_k_19(arr)\n    if k == 20:\n        return max_k_20(arr)\n    if k == 21:\n        return max_k_21(arr)\n    if k == 22:\n        return max_k_22(arr)\n    if k == 23:\n        return max_k_23(arr)\n    if k == 24:\n        return max_k_24(arr)\n    if k == 25:\n        return max_k_25(arr)\n    if k == 26:\n        return max_k_26(arr)\n    if k == 27:\n        return max_k_27(arr)\n    if k == 28:\n        return max_k_28(\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi6uc1est.jl:27\nin expression starting at /tmp/tmpi6uc1est.jl:27\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return maximum_rec(arr, k, 0, len(arr) - 1)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0uu4h9cr.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0uu4h9cr.jl:1\nin expression starting at /tmp/tmp0uu4h9cr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return maximum_rec(arr, k, 0, len(arr))\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn950a8hq.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn950a8hq.jl:1\nin expression starting at /tmp/tmpn950a8hq.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return [max(arr[i] for i in range(k)) for i in range(k)]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp11sme16c.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp11sme16c.jl:1\nin expression starting at /tmp/tmp11sme16c.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0:\n        return []\n    if k == 1:\n        return max_k(arr)\n    return max_k(arr) + max_k(arr[k:])\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpudaznvks.jl:27\nin expression starting at /tmp/tmpudaznvks.jl:27\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0:\n        return []\n    elif k == 1:\n        return max_k_1(arr)\n    else:\n        return max_k_2(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6wcq0fal.jl:27\nin expression starting at /tmp/tmp6wcq0fal.jl:27\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return maximum_rec(arr, k, 0, len(arr) - 1)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0uu4h9cr.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0uu4h9cr.jl:1\nin expression starting at /tmp/tmp0uu4h9cr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > len(arr) or k < 0:\n        return arr\n    elif k == 0:\n        return []\n    else:\n        return [max(arr[i:i+k]) for i in range(0, len(arr), k)]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"k\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdb_d4opm.jl:26\nin expression starting at /tmp/tmpdb_d4opm.jl:26\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return [max(arr, k)]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpferwvvb_.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpferwvvb_.jl:1\nin expression starting at /tmp/tmpferwvvb_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k_numbers(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph971yi__.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph971yi__.jl:1\nin expression starting at /tmp/tmph971yi__.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    def findMax(arr, k):\n        if k == 0:\n            return arr\n        elif k == 1:\n            return max(arr)\n        else:\n            return max(findMax(arr[:k], k - 1), findMax(arr[k:], k))\n    return findMax(arr, k)\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpkny31xvv.jl:25 expected \"end\", got \"findMax\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkny31xvv.jl:26\nin expression starting at /tmp/tmpkny31xvv.jl:26\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0:\n        return []\n    if k == 1:\n        return max_k_1(arr)\n    if k == 2:\n        return max_k_2(arr)\n    if k == 3:\n        return max_k_3(arr)\n    if k == 4:\n        return max_k_4(arr)\n    if k == 5:\n        return max_k_5(arr)\n    if k == 6:\n        return max_k_6(arr)\n    if k == 7:\n        return max_k_7(arr)\n    if k == 8:\n        return max_k_8(arr)\n    if k == 9:\n        return max_k_9(arr)\n    if k == 10:\n        return max_k_10(arr)\n    if k == 11:\n        return max_k_11(arr)\n    if k == 12:\n        return max_k_12(arr)\n    if k == 13:\n        return max_k_13(arr)\n    if k == 14:\n        return max_k_14(arr)\n    if k == 15:\n        return max_k_15(arr)\n    if k == 16:\n        return max_k_16(arr)\n    if k == 17:\n        return max_k_17(arr)\n    if k == 18:\n        return max_k_18(arr)\n    if k == 19:\n        return max_k_19(arr)\n    if k == 20:\n        return max_k_20(arr)\n    if k == 21:\n        return max_k_21(arr)\n    if k == 22:\n        return max_k_22(arr)\n    if k == 23:\n        return max_k_23(arr)\n    if k == 24:\n        return max_k_24(arr)\n    if k == 25:\n        return max_k_25(arr)\n    if k == 26:\n        return max_k_26(arr)\n    if k == 27:\n        return max_k_27(arr)\n    if k == 28:\n        return max_k_28(\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi6uc1est.jl:27\nin expression starting at /tmp/tmpi6uc1est.jl:27\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return [max(arr, k)]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpferwvvb_.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpferwvvb_.jl:1\nin expression starting at /tmp/tmpferwvvb_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k_numbers(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph971yi__.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph971yi__.jl:1\nin expression starting at /tmp/tmph971yi__.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0:\n        return []\n    elif k == 1:\n        return max_k(arr)\n    else:\n        return max_k(max_k(arr, k - 1))\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7qacuxi0.jl:27\nin expression starting at /tmp/tmp7qacuxi0.jl:27\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return maximum_helper(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr94hdd97.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr94hdd97.jl:1\nin expression starting at /tmp/tmpr94hdd97.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return [arr[i] for i in range(k) if arr[i] > arr[i+1]]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8_ejhzth.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8_ejhzth.jl:1\nin expression starting at /tmp/tmp8_ejhzth.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return [max(arr, k)]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpferwvvb_.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpferwvvb_.jl:1\nin expression starting at /tmp/tmpferwvvb_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return [arr[i] for i in range(len(arr)) if arr[i] >= arr[i - k]][:k]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkcyagv9h.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkcyagv9h.jl:1\nin expression starting at /tmp/tmpkcyagv9h.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    def helper(arr, k):\n        if k == 0:\n            return []\n        if k == 1:\n            return max(arr)\n        if arr[k - 1] >= arr[k - 2]:\n            return [arr[k - 1]] + helper(arr[:k - 1], k - 1)\n        else:\n            return helper(arr[:k - 1], k - 1) + [arr[k - 2]]\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpaizjtozk.jl:25 expected \"end\", got \"helper\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaizjtozk.jl:26\nin expression starting at /tmp/tmpaizjtozk.jl:26\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return [max(arr, k)]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpferwvvb_.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpferwvvb_.jl:1\nin expression starting at /tmp/tmpferwvvb_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    def helper(arr, k):\n        if k == 0:\n            return []\n        if k == 1:\n            return max(arr)\n        if k == 2:\n            return arr[0], arr[1]\n        if arr[0] > arr[1]:\n            arr[0], arr[1] = arr[1], arr[0]\n        if arr[0] > arr[2]:\n            arr[0], arr[2] = arr[2], arr[0]\n        if arr[1] > arr[2]:\n            arr[1], arr[2] = arr[2], arr[1]\n        if arr[0] > arr[1]:\n            arr[0], arr[1] = arr[1], arr[0]\n        if arr[1] > arr[2]:\n            arr[1], arr[2] = arr[2], arr[1]\n        if arr[0] > arr[1]:\n            arr[0], arr[1] = arr[1], arr[0]\n        if arr[0] > arr[2]:\n            arr[0], arr[2] = arr[2], arr[0]\n        if arr[1] > arr[2]:\n            arr[1], arr[2] = arr[2], arr[1]\n        if arr[0] > arr[1]:\n            arr[0], arr[1] = arr[1], arr[0]\n        if arr[1] > arr[2]:\n            arr[1], arr[2] = arr[2], arr[1]\n        if arr[0] > arr[1]:\n            arr[0], arr[1] = arr[1], arr[0]\n        if arr[0] > arr[2]:\n            arr[0], arr[2] = arr[2], arr[0]\n        if arr[1] > arr[2]:\n            arr[1], arr[2] = arr[2], arr[1]\n        if arr[0] > arr[1]:\n            arr[0], arr[1] = arr[1], arr[0]\n        if arr[1] > arr[2]:\n            arr[1], arr[2] = arr[2],\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpfy8chzcg.jl:25 expected \"end\", got \"helper\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfy8chzcg.jl:26\nin expression starting at /tmp/tmpfy8chzcg.jl:26\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return [max(arr, k)]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpferwvvb_.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpferwvvb_.jl:1\nin expression starting at /tmp/tmpferwvvb_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    def find_max(arr, k):\n        if k == 0:\n            return arr\n        else:\n            return find_max(arr[1:], k - 1)\n    return find_max(arr, k)\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpo243f2gi.jl:25 expected \"end\", got \"find_max\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo243f2gi.jl:26\nin expression starting at /tmp/tmpo243f2gi.jl:26\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return [max(arr[i:i+k]) for i in range(0, len(arr), k)]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdxldsj0u.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdxldsj0u.jl:1\nin expression starting at /tmp/tmpdxldsj0u.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    def helper(arr, k):\n        if k == 0:\n            return []\n        if k == 1:\n            return [max(arr)]\n        if k == 2:\n            return [max(arr[0], arr[1])]\n        if k == 3:\n            return [max(arr[0], max(arr[1], arr[2]))]\n        if k == 4:\n            return [max(arr[0], max(arr[1], max(arr[2], arr[3])))]\n        if k == 5:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], arr[4]))))]\n        if k == 6:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], arr[5])))))]\n        if k == 7:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], arr[6]))))))]\n        if k == 8:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], arr[7])))))))]\n        if k == 9:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], max(arr[7], arr[8]))))))))]\n        if k == 10:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], max(arr[7], max(arr[8], arr[9])))))))))]\n        if k == 11:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmppvvlw2mx.jl:25 expected \"end\", got \"helper\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppvvlw2mx.jl:26\nin expression starting at /tmp/tmppvvlw2mx.jl:26\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return sorted(arr)[:k]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxqf9drb9.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxqf9drb9.jl:1\nin expression starting at /tmp/tmpxqf9drb9.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return [max(arr[i:i + k]) for i in range(0, len(arr), k)]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_ovwhu2n.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_ovwhu2n.jl:1\nin expression starting at /tmp/tmp_ovwhu2n.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    def find_maximum(arr, k):\n        if k == 0:\n            return arr\n        else:\n            return find_maximum(arr[1:], k - 1)\n    return find_maximum(arr, k)\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmp06i7lhc5.jl:25 expected \"end\", got \"find_maximum\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp06i7lhc5.jl:26\nin expression starting at /tmp/tmp06i7lhc5.jl:26\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return [max(arr[i] for i in range(k)) for i in range(k)]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp11sme16c.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp11sme16c.jl:1\nin expression starting at /tmp/tmp11sme16c.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return [max(arr, k)]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpferwvvb_.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpferwvvb_.jl:1\nin expression starting at /tmp/tmpferwvvb_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return maximum_rec(arr, k, 0, len(arr) - 1)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0uu4h9cr.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0uu4h9cr.jl:1\nin expression starting at /tmp/tmp0uu4h9cr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    def helper(arr, k):\n        if k == 0:\n            return []\n        if k == 1:\n            return [max(arr)]\n        if k == 2:\n            return [max(arr[0], arr[1])]\n        if k == 3:\n            return [max(arr[0], max(arr[1], arr[2]))]\n        if k == 4:\n            return [max(arr[0], max(arr[1], max(arr[2], arr[3])))]\n        if k == 5:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], arr[4]))))]\n        if k == 6:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], arr[5])))))]\n        if k == 7:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], arr[6]))))))]\n        if k == 8:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], arr[7])))))))]\n        if k == 9:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], max(arr[7], arr[8]))))))))]\n        if k == 10:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], max(arr[7], max(arr[8], arr[9])))))))))]\n        if k == 11:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmppvvlw2mx.jl:25 expected \"end\", got \"helper\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppvvlw2mx.jl:26\nin expression starting at /tmp/tmppvvlw2mx.jl:26\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    def helper(arr, k):\n        if k == 0:\n            return []\n        if k == 1:\n            return [max(arr)]\n        if k == 2:\n            return [max(arr[0], arr[1])]\n        if k == 3:\n            return [max(arr[0], max(arr[1], arr[2]))]\n        if k == 4:\n            return [max(arr[0], max(arr[1], max(arr[2], arr[3])))]\n        if k == 5:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], arr[4]))))]\n        if k == 6:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], arr[5])))))]\n        if k == 7:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], arr[6]))))))]\n        if k == 8:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], arr[7])))))))]\n        if k == 9:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], max(arr[7], arr[8]))))))))]\n        if k == 10:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], max(arr[7], max(arr[8], arr[9])))))))))]\n        if k == 11:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmppvvlw2mx.jl:25 expected \"end\", got \"helper\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppvvlw2mx.jl:26\nin expression starting at /tmp/tmppvvlw2mx.jl:26\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    def compare(a, b):\n        return a > b\n    \n    def max_k_numbers(arr, k):\n        if k == 0:\n            return []\n        elif k == 1:\n            return max(arr, key=lambda x: x)\n        else:\n            return max(arr, key=lambda x: x, compare=compare)\n    \n    return max_k_numbers(arr, k)\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmppqf2uxo3.jl:25 expected \"end\", got \"compare\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppqf2uxo3.jl:26\nin expression starting at /tmp/tmppqf2uxo3.jl:26\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    def findMax(arr, k):\n        if len(arr) < k:\n            return arr\n        else:\n            return arr[0:k]\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293036,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpm37jkoje.jl:25 expected \"end\", got \"findMax\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm37jkoje.jl:26\nin expression starting at /tmp/tmpm37jkoje.jl:26\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    def find_max_index(arr, k):\n        max_index = 0\n        for i in range(len(arr)):\n            if arr[i] > arr[max_index]:\n                max_index = i\n        return max_index\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293036,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpcw13rplk.jl:25 expected \"end\", got \"find_max_index\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcw13rplk.jl:26\nin expression starting at /tmp/tmpcw13rplk.jl:26\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0:\n        return []\n    if k == 1:\n        return max_k(arr)\n    if k == len(arr):\n        return arr\n    if k > len(arr):\n        return arr\n    if k == len(arr) - 1:\n        return arr\n    return max_k(arr[:k]) + max_k(arr[k:])\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293036,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph2jqh9lg.jl:27\nin expression starting at /tmp/tmph2jqh9lg.jl:27\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > len(arr) or k < 0:\n        return arr\n    \n    max_index = 0\n    max_value = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_value:\n            max_value = arr[i]\n            max_index = i\n    \n    return arr[0:k] + arr[max_index:k] + arr[k:len(arr)]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293036,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"k\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpekfet3fw.jl:26\nin expression starting at /tmp/tmpekfet3fw.jl:26\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0:\n        return []\n    if k == 1:\n        return max_k_1(arr)\n    if k == 2:\n        return max_k_2(arr)\n    if k == 3:\n        return max_k_3(arr)\n    if k == 4:\n        return max_k_4(arr)\n    if k == 5:\n        return max_k_5(arr)\n    if k == 6:\n        return max_k_6(arr)\n    if k == 7:\n        return max_k_7(arr)\n    if k == 8:\n        return max_k_8(arr)\n    if k == 9:\n        return max_k_9(arr)\n    if k == 10:\n        return max_k_10(arr)\n    if k == 11:\n        return max_k_11(arr)\n    if k == 12:\n        return max_k_12(arr)\n    if k == 13:\n        return max_k_13(arr)\n    if k == 14:\n        return max_k_14(arr)\n    if k == 15:\n        return max_k_15(arr)\n    if k == 16:\n        return max_k_16(arr)\n    if k == 17:\n        return max_k_17(arr)\n    if k == 18:\n        return max_k_18(arr)\n    if k == 19:\n        return max_k_19(arr)\n    if k == 20:\n        return max_k_20(arr)\n    if k == 21:\n        return max_k_21(arr)\n    if k == 22:\n        return max_k_22(arr)\n    if k == 23:\n        return max_k_23(arr)\n    if k == 24:\n        return max_k_24(arr)\n    if k == 25:\n        return max_k_25(arr)\n    if k == 26:\n        return max_k_26(arr)\n    if k == 27:\n        return max_k_27(arr)\n    if k == 28:\n        return max_k_28(\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi6uc1est.jl:27\nin expression starting at /tmp/tmpi6uc1est.jl:27\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0:\n        return []\n    if k == 1:\n        return max_k_1(arr)\n    if k == 2:\n        return max_k_2(arr)\n    return max_k_3(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptdvglfsu.jl:27\nin expression starting at /tmp/tmptdvglfsu.jl:27\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return [max(arr[i:i+k]) for i in range(0, len(arr), k)]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdxldsj0u.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdxldsj0u.jl:1\nin expression starting at /tmp/tmpdxldsj0u.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return [max(arr[i] for i in range(len(arr)) if i < k)]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293036,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2h4butn7.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2h4butn7.jl:1\nin expression starting at /tmp/tmp2h4butn7.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return [max(arr[i:i+k]) for i in range(0, len(arr), k)]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdxldsj0u.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdxldsj0u.jl:1\nin expression starting at /tmp/tmpdxldsj0u.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return maximum_rec(arr, k, 0, len(arr) - 1)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0uu4h9cr.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0uu4h9cr.jl:1\nin expression starting at /tmp/tmp0uu4h9cr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0:\n        return []\n    elif k == 1:\n        return max_k(arr)\n    else:\n        return max_k(max_k(arr, k - 1))\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7qacuxi0.jl:27\nin expression starting at /tmp/tmp7qacuxi0.jl:27\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    def compare(a, b):\n        if a > b:\n            return 1\n        elif a < b:\n            return -1\n        else:\n            return 0\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpme1jjis3.jl:25 expected \"end\", got \"compare\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpme1jjis3.jl:26\nin expression starting at /tmp/tmpme1jjis3.jl:26\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0:\n        return []\n    elif k == 1:\n        return max_k_1(arr)\n    else:\n        return max_k_2(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6wcq0fal.jl:27\nin expression starting at /tmp/tmp6wcq0fal.jl:27\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return [max(arr[i] for i in range(k)) for i in range(k)]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp11sme16c.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp11sme16c.jl:1\nin expression starting at /tmp/tmp11sme16c.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    def find_max_index(arr, k):\n        max_index = 0\n        for i in range(len(arr)):\n            if arr[i] > arr[max_index]:\n                max_index = i\n        return max_index\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293036,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpcw13rplk.jl:25 expected \"end\", got \"find_max_index\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcw13rplk.jl:26\nin expression starting at /tmp/tmpcw13rplk.jl:26\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return [arr[i] for i in range(k) if arr[i] > arr[i+1]]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8_ejhzth.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8_ejhzth.jl:1\nin expression starting at /tmp/tmp8_ejhzth.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    def helper(arr, k):\n        if k == 0:\n            return []\n        if k == 1:\n            return [max(arr)]\n        if k == 2:\n            return [max(arr[0], arr[1])]\n        if k == 3:\n            return [max(arr[0], max(arr[1], arr[2]))]\n        if k == 4:\n            return [max(arr[0], max(arr[1], max(arr[2], arr[3])))]\n        if k == 5:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], arr[4]))))]\n        if k == 6:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], arr[5])))))]\n        if k == 7:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], arr[6]))))))]\n        if k == 8:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], arr[7])))))))]\n        if k == 9:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], max(arr[7], arr[8]))))))))]\n        if k == 10:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], max(arr[7], max(arr[8], arr[9])))))))))]\n        if k == 11:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmppvvlw2mx.jl:25 expected \"end\", got \"helper\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppvvlw2mx.jl:26\nin expression starting at /tmp/tmppvvlw2mx.jl:26\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return [max(arr[i] for i in range(k)) for i in range(k)]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp11sme16c.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp11sme16c.jl:1\nin expression starting at /tmp/tmp11sme16c.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return [arr[i] for i in range(k) if arr[i] > arr[i - 1]]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0qo75fe1.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0qo75fe1.jl:1\nin expression starting at /tmp/tmp0qo75fe1.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return [max(arr, k)]\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppzw6wtfr.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppzw6wtfr.jl:1\nin expression starting at /tmp/tmppzw6wtfr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0:\n        return []\n    if k == 1:\n        return max_k_1(arr)\n    if k == 2:\n        return max_k_2(arr)\n    if k == 3:\n        return max_k_3(arr)\n    if k == 4:\n        return max_k_4(arr)\n    if k == 5:\n        return max_k_5(arr)\n    if k == 6:\n        return max_k_6(arr)\n    if k == 7:\n        return max_k_7(arr)\n    if k == 8:\n        return max_k_8(arr)\n    if k == 9:\n        return max_k_9(arr)\n    if k == 10:\n        return max_k_10(arr)\n    if k == 11:\n        return max_k_11(arr)\n    if k == 12:\n        return max_k_12(arr)\n    if k == 13:\n        return max_k_13(arr)\n    if k == 14:\n        return max_k_14(arr)\n    if k == 15:\n        return max_k_15(arr)\n    if k == 16:\n        return max_k_16(arr)\n    if k == 17:\n        return max_k_17(arr)\n    if k == 18:\n        return max_k_18(arr)\n    if k == 19:\n        return max_k_19(arr)\n    if k == 20:\n        return max_k_20(arr)\n    if k == 21:\n        return max_k_21(arr)\n    if k == 22:\n        return max_k_22(arr)\n    if k == 23:\n        return max_k_23(arr)\n    if k == 24:\n        return max_k_24(arr)\n    if k == 25:\n        return max_k_25(arr)\n    if k == 26:\n        return max_k_26(arr)\n    if k == 27:\n        return max_k_27(arr)\n    if k == 28:\n        return max_k_28(\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi6uc1est.jl:27\nin expression starting at /tmp/tmpi6uc1est.jl:27\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k_subset(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps3fdtj4v.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps3fdtj4v.jl:1\nin expression starting at /tmp/tmps3fdtj4v.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    def helper(arr, k):\n        if k == 0:\n            return []\n        if k == 1:\n            return [max(arr)]\n        if k == 2:\n            return [max(arr[0], arr[1])]\n        if k == 3:\n            return [max(arr[0], max(arr[1], arr[2]))]\n        if k == 4:\n            return [max(arr[0], max(arr[1], max(arr[2], arr[3])))]\n        if k == 5:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], arr[4]))))]\n        if k == 6:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], arr[5])))))]\n        if k == 7:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], arr[6]))))))]\n        if k == 8:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], arr[7])))))))]\n        if k == 9:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], max(arr[7], arr[8]))))))))]\n        if k == 10:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], max(arr[7], max(arr[8], arr[9])))))))))]\n        if k == 11:\n            return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmppvvlw2mx.jl:25 expected \"end\", got \"helper\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppvvlw2mx.jl:26\nin expression starting at /tmp/tmppvvlw2mx.jl:26\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return maximum_rec(arr, k, 0, len(arr) - 1)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0uu4h9cr.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0uu4h9cr.jl:1\nin expression starting at /tmp/tmp0uu4h9cr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return maximum_helper(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr94hdd97.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr94hdd97.jl:1\nin expression starting at /tmp/tmpr94hdd97.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k_subset(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps3fdtj4v.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps3fdtj4v.jl:1\nin expression starting at /tmp/tmps3fdtj4v.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k_numbers(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph971yi__.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph971yi__.jl:1\nin expression starting at /tmp/tmph971yi__.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return [max(arr[i] for i in range(len(arr)) if i < k)]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293036,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2h4butn7.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2h4butn7.jl:1\nin expression starting at /tmp/tmp2h4butn7.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0:\n        return []\n    elif k == 1:\n        return max(arr)\n    else:\n        return max(arr, k)\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7nkt2w8v.jl:27\nin expression starting at /tmp/tmp7nkt2w8v.jl:27\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0:\n        return []\n    if k == 1:\n        return max_k_1(arr)\n    if k == 2:\n        return max_k_2(arr)\n    if k == 3:\n        return max_k_3(arr)\n    if k == 4:\n        return max_k_4(arr)\n    if k == 5:\n        return max_k_5(arr)\n    if k == 6:\n        return max_k_6(arr)\n    if k == 7:\n        return max_k_7(arr)\n    if k == 8:\n        return max_k_8(arr)\n    if k == 9:\n        return max_k_9(arr)\n    if k == 10:\n        return max_k_10(arr)\n    if k == 11:\n        return max_k_11(arr)\n    if k == 12:\n        return max_k_12(arr)\n    if k == 13:\n        return max_k_13(arr)\n    if k == 14:\n        return max_k_14(arr)\n    if k == 15:\n        return max_k_15(arr)\n    if k == 16:\n        return max_k_16(arr)\n    if k == 17:\n        return max_k_17(arr)\n    if k == 18:\n        return max_k_18(arr)\n    if k == 19:\n        return max_k_19(arr)\n    if k == 20:\n        return max_k_20(arr)\n    if k == 21:\n        return max_k_21(arr)\n    if k == 22:\n        return max_k_22(arr)\n    if k == 23:\n        return max_k_23(arr)\n    if k == 24:\n        return max_k_24(arr)\n    if k == 25:\n        return max_k_25(arr)\n    if k == 26:\n        return max_k_26(arr)\n    if k == 27:\n        return max_k_27(arr)\n    if k == 28:\n        return max_k_28(\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi6uc1est.jl:27\nin expression starting at /tmp/tmpi6uc1est.jl:27\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return [max(arr[i] for i in range(k)) for i in range(k)]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp11sme16c.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp11sme16c.jl:1\nin expression starting at /tmp/tmp11sme16c.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0:\n        return []\n    elif k == 1:\n        return max_k_1(arr)\n    else:\n        return max_k_2(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6wcq0fal.jl:27\nin expression starting at /tmp/tmp6wcq0fal.jl:27\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return maximum_rec(arr, k, 0, len(arr) - 1)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0uu4h9cr.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0uu4h9cr.jl:1\nin expression starting at /tmp/tmp0uu4h9cr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    def compare(a, b):\n        if a > b:\n            return 1\n        elif a < b:\n            return -1\n        else:\n            return 0\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpme1jjis3.jl:25 expected \"end\", got \"compare\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpme1jjis3.jl:26\nin expression starting at /tmp/tmpme1jjis3.jl:26\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return [arr[i] for i in range(len(arr)) if arr[i] > arr[i-k] and i >= k]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbrcgc4mu.jl:26\nin expression starting at /tmp/tmpbrcgc4mu.jl:26\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0:\n        return []\n    elif k == 1:\n        return max(arr)\n    else:\n        return max(arr[0:k])\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293036,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpex71_fef.jl:27\nin expression starting at /tmp/tmpex71_fef.jl:27\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0:\n        return []\n    if k == 1:\n        return max_k_1(arr)\n    if k == 2:\n        return max_k_2(arr)\n    if k == 3:\n        return max_k_3(arr)\n    if k == 4:\n        return max_k_4(arr)\n    if k == 5:\n        return max_k_5(arr)\n    if k == 6:\n        return max_k_6(arr)\n    if k == 7:\n        return max_k_7(arr)\n    if k == 8:\n        return max_k_8(arr)\n    if k == 9:\n        return max_k_9(arr)\n    if k == 10:\n        return max_k_10(arr)\n    if k == 11:\n        return max_k_11(arr)\n    if k == 12:\n        return max_k_12(arr)\n    if k == 13:\n        return max_k_13(arr)\n    if k == 14:\n        return max_k_14(arr)\n    if k == 15:\n        return max_k_15(arr)\n    if k == 16:\n        return max_k_16(arr)\n    if k == 17:\n        return max_k_17(arr)\n    if k == 18:\n        return max_k_18(arr)\n    if k == 19:\n        return max_k_19(arr)\n    if k == 20:\n        return max_k_20(arr)\n    if k == 21:\n        return max_k_21(arr)\n    if k == 22:\n        return max_k_22(arr)\n    if k == 23:\n        return max_k_23(arr)\n    if k == 24:\n        return max_k_24(arr)\n    if k == 25:\n        return max_k_25(arr)\n    if k == 26:\n        return max_k_26(arr)\n    if k == 27:\n        return max_k_27(arr)\n    if k == 28:\n        return max_k_28(\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi6uc1est.jl:27\nin expression starting at /tmp/tmpi6uc1est.jl:27\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0:\n        return []\n    if k == 1:\n        return max_k_1(arr)\n    if k == 2:\n        return max_k_2(arr)\n    return max_k_3(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptdvglfsu.jl:27\nin expression starting at /tmp/tmptdvglfsu.jl:27\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return [arr[i] for i in range(len(arr)) if arr[i] >= arr[i - k] and arr[i] >= arr[i + k]]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8iek7iwb.jl:26\nin expression starting at /tmp/tmp8iek7iwb.jl:26\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0:\n        return []\n    if k == 1:\n        return max_k_1(arr)\n    if k == 2:\n        return max_k_2(arr)\n    return max_k_3(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptdvglfsu.jl:27\nin expression starting at /tmp/tmptdvglfsu.jl:27\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0:\n        return []\n    if k == 1:\n        return max_k(arr)\n    if k == 2:\n        return max_k(arr) + max_k(arr + 1)\n    if k == 3:\n        return max_k(arr) + max_k(arr + 1) + max_k(arr + 2)\n    if k == 4:\n        return max_k(arr) + max_k(arr + 1) + max_k(arr + 2) + max_k(arr + 3)\n    if k == 5:\n        return max_k(arr) + max_k(arr + 1) + max_k(arr + 2) + max_k(arr + 3) + max_k(arr + 4)\n    if k == 6:\n        return max_k(arr) + max_k(arr + 1) + max_k(arr + 2) + max_k(arr + 3) + max_k(arr + 4) + max_k(arr + 5)\n    if k == 7:\n        return max_k(arr) + max_k(arr + 1) + max_k(arr + 2) + max_k(arr + 3) + max_k(arr + 4) + max_k(arr + 5) + max_k(arr + 6)\n    if k == 8:\n        return max_k(arr) + max_k(arr + 1) + max_k(arr + 2) + max_k(arr + 3) + max_k(arr + 4) + max_k(arr + 5) + max_k(arr + 6) + max_k(arr + 7)\n    if k == 9:\n        return max_k(arr) + max_k(arr + 1) + max_k(arr + 2) + max_k(arr + 3) + max_k(arr + 4) + max_k(arr + 5) + max_k(arr + 6) + max_k(arr + 7) + max_k(arr + 8)\n    if k == 10:\n        return max_k(arr) + max_k(arr + 1) + max_k(arr + 2)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1macrcw6.jl:27\nin expression starting at /tmp/tmp1macrcw6.jl:27\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return maximum_rec(arr, k, 0, len(arr) - 1)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0uu4h9cr.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0uu4h9cr.jl:1\nin expression starting at /tmp/tmp0uu4h9cr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return sorted(arr)[:k]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxqf9drb9.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxqf9drb9.jl:1\nin expression starting at /tmp/tmpxqf9drb9.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return [max(arr[i:i+k]) for i in range(len(arr)-k+1)]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293036,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0qmfr01i.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0qmfr01i.jl:1\nin expression starting at /tmp/tmp0qmfr01i.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    def helper(arr, k):\n        if k == 0:\n            return []\n        if k == 1:\n            return [max(arr)]\n        if k == 2:\n            return [max(arr[0], arr[1])]\n        if arr[0] > arr[1]:\n            arr[0], arr[1] = arr[1], arr[0]\n        if arr[0] > arr[2]:\n            arr[0], arr[2] = arr[2], arr[0]\n        if arr[1] > arr[2]:\n            arr[1], arr[2] = arr[2], arr[1]\n        if arr[0] > arr[1]:\n            arr[0], arr[1] = arr[1], arr[0]\n        if arr[0] > arr[2]:\n            arr[0], arr[2] = arr[2], arr[0]\n        if arr[1] > arr[2]:\n            arr[1], arr[2] = arr[2], arr[1]\n        if arr[0] > arr[1]:\n            arr[0], arr[1] = arr[1], arr[0]\n        if arr[0] > arr[2]:\n            arr[0], arr[2] = arr[2], arr[0]\n        if arr[1] > arr[2]:\n            arr[1], arr[2] = arr[2], arr[1]\n        if arr[0] > arr[1]:\n            arr[0], arr[1] = arr[1], arr[0]\n        if arr[0] > arr[2]:\n            arr[0], arr[2] = arr[2], arr[0]\n        if arr[1] > arr[2]:\n            arr[1], arr[2] = arr[2], arr[1]\n        if arr[0] > arr[1]:\n            arr[0], arr[1] = arr[1], arr[0]\n        if arr[0] > arr[2]:\n            arr[0], arr[2] = arr[2], arr[0]\n        if arr[1] > arr[2]:\n            arr[1], arr[2]\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293036,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmprn_ciwoo.jl:25 expected \"end\", got \"helper\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprn_ciwoo.jl:26\nin expression starting at /tmp/tmprn_ciwoo.jl:26\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    def helper(arr, k):\n        if k == 0:\n            return []\n        if k == 1:\n            return max(arr)\n        if k == 2:\n            return max(arr[0], arr[1])\n        if arr[0] >= arr[1]:\n            return helper(arr[1:], k - 1)\n        else:\n            return helper(arr[0:], k - 1)\n    return helper(arr, k)\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpkndmpzpy.jl:25 expected \"end\", got \"helper\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkndmpzpy.jl:26\nin expression starting at /tmp/tmpkndmpzpy.jl:26\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return maximum_helper(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr94hdd97.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr94hdd97.jl:1\nin expression starting at /tmp/tmpr94hdd97.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k_numbers(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph971yi__.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph971yi__.jl:1\nin expression starting at /tmp/tmph971yi__.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    def get_max_k_numbers(arr, k):\n        max_k_numbers = []\n        for i in range(len(arr)):\n            if len(max_k_numbers) < k:\n                max_k_numbers.append(arr[i])\n            else:\n                if arr[i] > max_k_numbers[k - 1]:\n                    max_k_numbers[k - 1] = arr[i]\n        return max_k_numbers\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpifkk9h63.jl:25 expected \"end\", got \"get_max_k_numbers\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpifkk9h63.jl:26\nin expression starting at /tmp/tmpifkk9h63.jl:26\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    def find_max(arr, k):\n        if k == 0:\n            return arr\n        else:\n            return find_max(arr[1:], k - 1)\n    return find_max(arr, k)\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpo243f2gi.jl:25 expected \"end\", got \"find_max\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo243f2gi.jl:26\nin expression starting at /tmp/tmpo243f2gi.jl:26\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return sorted(arr)[:k]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxqf9drb9.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxqf9drb9.jl:1\nin expression starting at /tmp/tmpxqf9drb9.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0:\n        return []\n    if k == 1:\n        return max(arr)\n    if k == 2:\n        return max(arr[0], arr[1])\n    if k == len(arr):\n        return arr\n    return arr[0] + max(arr[1:k])\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjj2g2b8l.jl:27\nin expression starting at /tmp/tmpjj2g2b8l.jl:27\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return [arr[i] for i in range(k) if arr[i] > arr[i+1]]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8_ejhzth.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8_ejhzth.jl:1\nin expression starting at /tmp/tmp8_ejhzth.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return [arr[i] for i in range(len(arr)) if arr[i] > arr[i-k] and i >= k]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbrcgc4mu.jl:26\nin expression starting at /tmp/tmpbrcgc4mu.jl:26\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0:\n        return []\n    if k == 1:\n        return max_k_1(arr)\n    if k == 2:\n        return max_k_2(arr)\n    if k == 3:\n        return max_k_3(arr)\n    if k == 4:\n        return max_k_4(arr)\n    if k == 5:\n        return max_k_5(arr)\n    if k == 6:\n        return max_k_6(arr)\n    if k == 7:\n        return max_k_7(arr)\n    if k == 8:\n        return max_k_8(arr)\n    if k == 9:\n        return max_k_9(arr)\n    if k == 10:\n        return max_k_10(arr)\n    if k == 11:\n        return max_k_11(arr)\n    if k == 12:\n        return max_k_12(arr)\n    if k == 13:\n        return max_k_13(arr)\n    if k == 14:\n        return max_k_14(arr)\n    if k == 15:\n        return max_k_15(arr)\n    if k == 16:\n        return max_k_16(arr)\n    if k == 17:\n        return max_k_17(arr)\n    if k == 18:\n        return max_k_18(arr)\n    if k == 19:\n        return max_k_19(arr)\n    if k == 20:\n        return max_k_20(arr)\n    if k == 21:\n        return max_k_21(arr)\n    if k == 22:\n        return max_k_22(arr)\n    if k == 23:\n        return max_k_23(arr)\n    if k == 24:\n        return max_k_24(arr)\n    if k == 25:\n        return max_k_25(arr)\n    if k == 26:\n        return max_k_26(arr)\n    if k == 27:\n        return max_k_27(arr)\n    if k == 28:\n        return max_k_28(\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi6uc1est.jl:27\nin expression starting at /tmp/tmpi6uc1est.jl:27\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return [max(arr, k)]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpferwvvb_.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpferwvvb_.jl:1\nin expression starting at /tmp/tmpferwvvb_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return maximum_rec(arr, k, 0, len(arr) - 1)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0uu4h9cr.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0uu4h9cr.jl:1\nin expression starting at /tmp/tmp0uu4h9cr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    def helper(arr, k):\n        if len(arr) < k:\n            return arr\n        else:\n            return [max(arr[i], arr[i + 1]) for i in range(len(arr) - k + 1)]\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmprbq3ev6c.jl:25 expected \"end\", got \"helper\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprbq3ev6c.jl:26\nin expression starting at /tmp/tmprbq3ev6c.jl:26\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0:\n        return []\n    if k == 1:\n        return [max(arr)]\n    if k == 2:\n        return [max(arr[0], arr[1])]\n    if k == 3:\n        return [max(arr[0], max(arr[1], arr[2]))]\n    if k == 4:\n        return [max(arr[0], max(arr[1], max(arr[2], arr[3])))]\n    if k == 5:\n        return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], arr[4]))))]\n    if k == 6:\n        return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], arr[5])))))]\n    if k == 7:\n        return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], arr[6]))))))]\n    if k == 8:\n        return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], arr[7])))))))]\n    if k == 9:\n        return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], max(arr[7], arr[8]))))))))]\n    if k == 10:\n        return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], max(arr[7], max(arr[8], arr[9])))))))))]\n    if k == 11:\n        return [max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], max(arr[7], max(\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp42wru7zy.jl:27\nin expression starting at /tmp/tmp42wru7zy.jl:27\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return [max(arr[i] for i in range(k)) for i in range(k)]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp11sme16c.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp11sme16c.jl:1\nin expression starting at /tmp/tmp11sme16c.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k_numbers(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph971yi__.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph971yi__.jl:1\nin expression starting at /tmp/tmph971yi__.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return [arr[i] for i in range(k) if arr[i] > arr[i + 1]]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpudebsl8b.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpudebsl8b.jl:1\nin expression starting at /tmp/tmpudebsl8b.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return maximum_helper(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr94hdd97.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr94hdd97.jl:1\nin expression starting at /tmp/tmpr94hdd97.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return [max(arr[i:i+k]) for i in range(len(arr) - k + 1)]\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprmhe_tkz.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprmhe_tkz.jl:1\nin expression starting at /tmp/tmprmhe_tkz.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0:\n        return []\n    elif k == 1:\n        return max_k_1(arr)\n    else:\n        return max_k_2(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6wcq0fal.jl:27\nin expression starting at /tmp/tmp6wcq0fal.jl:27\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0:\n        return []\n    elif k == 1:\n        return max_k_1(arr)\n    else:\n        return max_k_2(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6wcq0fal.jl:27\nin expression starting at /tmp/tmp6wcq0fal.jl:27\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a vector arr of integers and a positive integer k, return a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector will be in the range of [1, 1000].\n        2. The elements in the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return max_k(arr, k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoplj6k7z.jl:25 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoplj6k7z.jl:1\nin expression starting at /tmp/tmpoplj6k7z.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}