name: HumanEval_58_common
language: jl
prompt: "\"\"\"Return sorted unique common elements for two vectors.\n    >>> common([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5,\
  \ 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\nfunction common(l1::Vector{Int64},\
  \ l2::Vector{Int64})::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = common;\n\t@test(candidate([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5,\
  \ 3, 2, 8], [3, 2]) == [2, 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2,\
  \ 3, 4])\n\t@test(candidate([4, 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\n\
  end\n"
completions: ['    return l1.filter(l2, lambda x: x in l2)', "    return l1.filter(l2.filter(l1.zip(l2).map(lambda\
    \ (x, y): x == y))).toList()\n\"\"\"", '    return l1.filter(lambda x: l2.contains(x))',
  '    return common(l1, l2)', '    return l1.filter(l2, lambda x: x in l2)', '    return
    common(l1, l2)', '    return l1.filter(lambda x: x in l2)', '    return l1.filter(l2,
    lambda x: x in l2)', '    return common(l1, l2)', '    return l1.filter(l2, lambda
    x: x in l2)', '    return l1.filter(l2, lambda x: x in l2)', '    return l1.filter(l2,
    lambda x: x in l2)', '    return l1.filter(l2, lambda x: x in l2)', '    return
    sorted(set(l1) & set(l2))', '    return l1.filter(l2, lambda x: x in l2)', '    return
    l1.filter(l2.map(l1.length()).reduce(lambda x, y: x & y))', '    return common(l1,
    l2)', '    return sorted(set(l1) & set(l2))', '    return _common(l1, l2)', '    return
    l1.filter(l2, lambda x: x in l2)', '    return l1.filter(l2.contains)', '    return
    l1.filter(l2, lambda x: x in l2)', '    return _common(l1, l2)', '    return common(l1,
    l2)', '    return l1.filter(lambda x: l2.contains(x))', '    return l1.filter(l2,
    lambda x: x in l2)', '    return l1.filter(l2, lambda x: x in l2)', '    return
    l1.filter(l2, lambda x: x in l2)', '    return l1.filter(l2, lambda x: x in l2)',
  '    return l1.filter(l2, lambda x: x in l2)', '    return common(l1, l2)', '    return
    sort(uniq(l1) & uniq(l2))', "    return l1.filter(l2, lambda x: x in l2)\n", '    return
    l1.filter(l2, lambda x: x in l2)', '    return l1.filter(l2.map(lambda x: x ==
    l1.head()))', '    return l1.filter(l2, lambda x: x in l2)', '    return l1.filter(l2,
    lambda x: x in l2)', '    return l1.filter(l2, lambda x: x in l2)', '    return
    _common(l1, l2)', "    return l1.filter(l2, lambda x: x in l2)\n", "    return\
    \ l1.filter(l2, lambda x: x in l2)\n", '    return l1.filter(l2, lambda x: x in
    l2)', '    return common(l1, l2)', '    return l1.filter(l2.map(l1.head)).toList()',
  '    return l1.filter(l2, lambda x: x in l2)', '    return l1.filter(l2, lambda
    x: x in l2)', '    return l1.filter(l2.map(lambda x: x == l2.head(l2.length()))).to_list()',
  '    return l1.filter(l2, lambda x: x in l2)', '    return l1.filter(l2, lambda
    x: x in l2)', '    return l1.filter(l2, lambda x: x in l2)', '    return common(l1,
    l2)', '    return l1.filter(l2, lambda x: x in l2)', '    return l1.filter(l2,
    lambda x: x in l2)', '    return l1.filter(l2, lambda x: x in l2)', '    return
    l1.filter(l2, lambda x: x in l2)', '    return common(l1, l2)', '    return l1.filter(l2,
    lambda x: x in l2)', '    return l1.filter(l2, lambda x: x in l2)', '    return
    _common(l1, l2)', '    return l1.filter(l2, lambda x: x in l2)', '    return common(l1,
    l2)', '    return common(l1, l2)', '    return l1.filter(l2, lambda x: x in l2)',
  '    return l1.filter(l2, lambda x: x in l2)', '    return l1.filter(l2, lambda
    x: x in l2)', "    return l1.filter(l2, lambda x: x in l2)\n", '    return l1.filter(lambda
    x: l2.contains(x))', '    return sorted(set(l1) & set(l2))', '    return l1.filter(l2,
    lambda x: x in l2)', '    return l1.filter(l2, lambda x: x in l2)', '    return
    sorted(set(l1) & set(l2))', "    return l1.filter(l2, lambda x: x in l2)\n", " \
    \   return l1.filter(lambda x: x in l2)\n", '    return _common(l1, l2)', '    return
    l1.filter(l2, lambda x: x in l2)', '    return common(l1, l2)', '    return l1.filter(l2,
    lambda x: x in l2)', '    return l1.filter(l2, lambda x: x in l2)', '    return
    l1.filter(l2, lambda x: x in l2)', '    return l1.filter(l2, lambda x: x in l2)',
  '    return l1.filter(l2, lambda x: x in l2)', '    return l1.filter(l2, lambda
    x: x in l2)', '    return l1.filter(l2, lambda x: x in l2)', '    return l1.filter(l2,
    lambda x: x in l2)', '    return _common(l1, l2)', '    return common(l1, l2)',
  '    return l1.filter(l2, lambda x: x in l2)', '    return sorted(set(l1) & set(l2))',
  "    return sorted(set(l1) & set(l2))\n", '    return l1.filter(l2, lambda x: x
    in l2)', '    return common(l1, l2)', '    return l1.filter(l2, lambda x: x in
    l2)', '    return l1.filter(lambda x: l2.contains(x))', '    return l1.filter(l2,
    lambda x: x in l2)', '    return l1.filter(lambda x: l2.contains(x))', '    return
    sorted(set(l1) & set(l2))', '    return l1.filter(lambda x: x in l2)', '    return
    l1.filter(l2, lambda x: x in l2)', '    return l1.filter(l2, lambda x: x in l2)',
  '    return l1.filter(l2, lambda x: x in l2)', '    return sort(uniq(l1::Vector{Int64}
    & l2::Vector{Int64}))', "    return l1.filter(l2, lambda x: x in l2)\n", "   \
    \ return sorted(set(l1) & set(l2))\n", '    return sorted(set(l1) & set(l2))',
  '    return sorted(set(l1) & set(l2))', '    return common(l1, l2)', '    return
    l1.filter(l2, lambda x: x in l2)', "    return l1.filter(l2, lambda x: x in l2)\n",
  '    return common(l1, l2)', '    return l1.filter(l2, lambda x: x in l2)', '    return
    common(l1, l2)', '    return l1.filter(l2, lambda x: x in l2)', '    return l1.filter(l2,
    lambda x: x in l2)', '    return l1.filter(l2, lambda x: x in l2)', '    return
    l1.filter(l2, lambda x: x in l2)', '    return common(l1, l2)', "    return sort(uniq(l1::Vector{Int64}\
    \ & l2::Vector{Int64}))\n\"\"\"", '    return l1.filter(lambda x: x in l2)', '    return
    l1.filter(l2, lambda x: x in l2)', '    return l1.filter(l2, lambda x: x in l2)',
  '    return common(l1, l2)', '    return l1.filter(l2, lambda x: x in l2)', '    return
    common(l1, l2)', '    return l1.filter(l2, lambda x: x in l2)', "    return sorted(set(l1)\
    \ & set(l2))\n", '    return l1.filter(lambda x: x in l2)', '    return l1.filter(l2,
    lambda x: x in l2)', '    return l1.filter(l2, lambda x: x in l2)', '    return
    common(l1, l2)', '    return sorted(set(l1) & set(l2))', '    return l1.filter(l2.map(lambda
    x: x == l1.head()))', '    return l1.filter(l2, lambda x: x in l2)', '    return
    l1.filter(lambda x: l2.contains(x))', '    return common(l1, l2)', '    return
    l1.filter(l2.map(l1.head)).toList()', '    return l1.filter(l2, lambda x: x in
    l2)', '    return l1.filter(l2, lambda x: x in l2)', '    return l1.filter(l2,
    lambda x: x in l2)', '    return l1.filter(l2, lambda x: x in l2)', '    return
    _common(l1, l2)', '    return _common(l1, l2)', '    return common_sorted(l1,
    l2)', "    return l1.filter(l2, lambda x: x in l2)\n", '    return l1.filter(l2,
    lambda x: x in l2)', '    return sort(uniq(l1) & uniq(l2))', '    return l1.filter(l2,
    lambda x: x in l2)', "    return l1.filter(l2.filter(l1.zip(l2).map(lambda (x,\
    \ y): x == y))).sort()\n\"\"\"", '    return l1.filter(l2, lambda x: x in l2)',
  '    return l1.filter(l2, lambda x: x in l2)', '    return l1.filter(l2, lambda
    x: x in l2)', '    return l1.filter(l2, lambda x: x in l2)', '    return _py_common(l1,
    l2)', "    return l1.filter(l2.filter(l1.map(l2.map(l1.head()))).toList()).toList()\n\
    \"\"\"", "    return sorted(set(l1) & set(l2))\n", '    return l1.filter(l2.filter(l1.zip(l2).map(lambda
    (x, y): x == y)).toList())', '    return l1.filter(l2, lambda x: x in l2)', '    return
    sorted(set(l1) & set(l2))', '    return l1.filter(l2, lambda x: x in l2)', '    return
    l1.filter(l2, lambda x: x in l2)', '    return l1.filter(l2, lambda x: x in l2)',
  '    return sorted(set(l1) & set(l2))', "    return sorted(set(l1) & set(l2))\n",
  '    return sorted(set(l1) & set(l2))', "    return l1.filter(lambda x: l2.contains(x))\n\
    \"\"\"", '    return _common(l1, l2)', '    return l1.filter(l2, lambda x: x in
    l2)', '    return l1.filter(l2, lambda x: x in l2)', '    return l1.filter(l2,
    lambda x: x in l2)', '    return l1.filter(l2, lambda x: x in l2)', '    return
    l1.filter(l2, lambda x: x in l2)', '    return l1.filter(l2.map(lambda x: x ==
    l1.head()))', '    return _common(l1, l2)', "    return l1.filter(l2, lambda x:\
    \ x in l2)\n", '    return l1.filter(lambda x: x in l2)', '    return sorted(set(l1)
    & set(l2))', '    return l1.filter(l2, lambda x: x in l2)', "    return sorted(set(l1)\
    \ & set(l2))\n", '    return l1.filter(l2, lambda x: x in l2)', '    return l1.filter(l2,
    lambda x: x in l2)', '    return l1.filter(l2, lambda x: x in l2)', '    return
    common(l1, l2)', '    return l1.filter(lambda x: l2.contains(x))', "    return\
    \ sorted(set(l1) & set(l2))\n", '    return l1.filter(l2, lambda x: x in l2)',
  '    return l1.filter(l2, lambda x: x in l2)', '    return _common(l1, l2)', '    return
    l1.filter(l2, lambda x: x in l2)', '    return l1.filter(l2, lambda x: x in l2)',
  '    return l1.filter(l2, lambda x: x in l2)', "    return l1.filter(l2, lambda\
    \ x: x in l2)\n", '    return l1.filter(l2, lambda x: x in l2)', '    return _common(l1,
    l2)', '    return l1.filter(l2, lambda x: x in l2)', "    return sorted(set(l1)\
    \ & set(l2))\n", '    return l1.filter(l2, lambda x: x in l2)', '    return common(l1,
    l2)', '    return l1.filter(l2, lambda x: x in l2)', '    return l1.filter(l2.map(lambda
    x: x == l1.head()))', '    return sort(uniq(l1::Vector{Int64} & l2::Vector{Int64}))',
  '    return l1.filter(l2, lambda x: x in l2)']
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
