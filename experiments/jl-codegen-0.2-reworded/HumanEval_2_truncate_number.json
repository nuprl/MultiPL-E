{
  "name": "HumanEval_2_truncate_number",
  "language": "jl",
  "prompt": "\"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64 \n",
  "tests": "using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n",
  "completions": [
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    integer = int(number)\n    decimal = number - integer\n    return decimal",
    "    if number < 0:\n        raise ValueError(\"Negative numbers not supported\")\n    integer, decimals = math.modf(number)\n    return decimals",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    if number < 0:\n        raise ValueError(\"number must be positive\")\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part",
    "    if number < 0:\n        raise ValueError(\"Negative numbers not supported\")\n    integer, decimals = math.modf(number)\n    return decimals",
    "    if number < 0:\n        raise ValueError(\"number must be positive\")\n    integer, decimals = math.modf(number)\n    return decimals",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    if number == 0.0:\n        return 0.0\n    else:\n        return number - floor(number)",
    "    return number - floor(number)",
    "    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    integer, decimals = math.modf(number)\n    return decimals",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    if number < 0:\n        raise Exception(\"Negative numbers are not supported\")\n    if number == 0:\n        return 0\n    integer, decimals = math.modf(number)\n    return decimals",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - (number % 1)",
    "    return number - (number % 1)",
    "    if number < 0:\n        raise ValueError(\"number must be positive\")\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part",
    "    if number < 0:\n        raise ValueError(\"Negative numbers are not supported\")\n    if number == 0:\n        return 0\n    int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    if number < 0:\n        raise ValueError(\"number must be positive\")\n    integer, decimals = math.modf(number)\n    return decimals",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    if number < 0:\n        raise Exception(\"Negative numbers are not supported\")\n    if number == 0:\n        return 0\n    integer, decimals = math.frexp(number)\n    return decimals",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    if number < 0:\n        raise Exception(\"Can't truncate a negative number\")\n    \n    integer, decimals = math.modf(number)\n    return decimals",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    if number < 0:\n        raise Exception(\"Can't truncate a negative number\")\n    if number == 0:\n        return 0\n    int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part",
    "    return number - floor(number)",
    "    if number < 0:\n        return -truncate_number(-number)\n    decimals = number - floor(number)\n    return decimals",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    integer, decimals = math.modf(number)\n    return decimals",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    if number < 0:\n        raise ValueError(\"Negative numbers not supported\")\n    if number == 0:\n        return 0\n    int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part",
    "    return number - floor(number)",
    "    if number < 0:\n        raise ValueError(\"Negative numbers are not supported\")\n    if number == 0:\n        return 0\n    integer, decimals = math.modf(number)\n    return decimals",
    "    return number - floor(number)",
    "    if number == 0.0:\n        return 0.0\n    else:\n        return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    if number < 0:\n        raise ValueError(\"number must be positive\")\n    integer = int(number)\n    decimal = number - integer\n    return decimal",
    "    if number < 0:\n        raise ValueError(\"Can't truncate negative number\")\n    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    if number < 0:\n        return -truncate_number(-number)\n    \n    integer, decimals = math.modf(number)\n    return decimals",
    "    if number < 0:\n        raise ValueError(\"number must be positive\")\n    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    if number < 0:\n        raise ValueError(\"Negative numbers not supported\")\n    if number == 0:\n        return 0\n    int_part, dec_part = math.modf(number)\n    return dec_part",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    if number < 0:\n        raise ValueError(\"Negative numbers not supported\")\n    if number == 0:\n        return 0\n    integer, decimals = math.modf(number)\n    return decimals",
    "    if number == 0.0:\n        return 0.0\n    else:\n        return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    if number < 0:\n        raise ValueError(\"Negative numbers are not supported\")\n    if number == 0:\n        return 0\n    integer_part = int(number)\n    decimals = number - integer_part\n    return decimals",
    "    return number - floor(number)",
    "    if number < 0:\n        raise ValueError(\"Negative numbers are not supported\")\n    integer, decimals = math.modf(number)\n    return decimals",
    "    return number - (number % 1)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    integer, decimals = math.modf(number)\n    return decimals",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    integer, decimals = math.modf(number)\n    return decimals",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    if number < 0:\n        raise Exception(\"Negative numbers are not supported\")\n    if number == 0:\n        return 0\n    return number - int(number)",
    "    if number < 0:\n        raise ValueError(\"Negative numbers are not supported\")\n    if number == 0:\n        return 0\n    decimals = number - int(number)\n    return decimals",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    if number < 0:\n        raise ValueError(\"Negative numbers not supported\")\n    return number - floor(number)",
    "    return number - floor(number)",
    "    if number < 0:\n        raise ValueError(\"Negative numbers not supported\")\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    if number < 0:\n        raise Exception(\"Negative numbers are not supported\")\n    return number - floor(number)",
    "    if number < 0:\n        raise ValueError(\"Negative numbers are not supported\")\n    if number == 0:\n        return 0\n    integer, decimals = math.modf(number)\n    return decimals",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    if number < 0:\n        raise ValueError(\"Negative numbers not supported\")\n    return number - int(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    if number < 0:\n        raise ValueError(\"Negative numbers are not supported\")\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part",
    "    if number < 0:\n        raise ValueError(\"Negative numbers are not supported\")\n    if number == 0:\n        return 0\n    integer, decimals = math.modf(number)\n    return decimals",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - (number % 1)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    if number < 0:\n        raise ValueError(\"Negative numbers not supported\")\n    if number == 0:\n        return 0\n    integer, decimals = math.modf(number)\n    return decimals",
    "    if number < 0:\n        raise ValueError(\"Negative numbers are not supported\")\n    integer = int(number)\n    decimal = number - integer\n    return decimal",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - (number % 1)",
    "    return number - floor(number)",
    "    if number < 0:\n        raise ValueError(\"Negative numbers are not supported\")\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part",
    "    return number - floor(number)",
    "    if number < 0:\n        raise Exception(\"Negative numbers not supported\")\n    if number == 0:\n        return 0\n    integer, decimals = math.modf(number)\n    return decimals",
    "    return number - floor(number)",
    "    if number < 0:\n        raise ValueError(\"Negative numbers are not supported\")\n    integer_part, decimals = math.modf(number)\n    return decimals",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    if number < 0:\n        raise ValueError(\"Negative numbers not supported\")\n    if number == 0:\n        return 0\n    integer, decimals = math.modf(number)\n    return decimals",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    if number < 0:\n        raise Exception(\"Negative numbers are not supported\")\n    integer = int(number)\n    decimal = number - integer\n    return decimal",
    "    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    integer, decimals = math.modf(number)\n    return decimals",
    "    return number - floor(number)",
    "    if number < 0:\n        raise ValueError(\"Negative numbers are not supported\")\n    integer_part = floor(number)\n    decimal_part = number - integer_part\n    return decimal_part",
    "    return number - floor(number)",
    "    if number < 0:\n        raise ValueError(\"Negative numbers are not supported\")\n    if number == 0:\n        return 0\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part",
    "    if number < 0:\n        raise ValueError(\"Negative numbers not supported\")\n    if number == 0:\n        return 0\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - (number % 1)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)",
    "    return number - floor(number)"
  ],
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ]
}