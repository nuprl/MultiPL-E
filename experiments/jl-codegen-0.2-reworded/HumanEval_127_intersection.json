{
  "name": "HumanEval_127_intersection",
  "language": "jl",
  "prompt": "\"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1, 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64, Int64})::String \n",
  "tests": "using Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n",
  "completions": [
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    if interval1[0] > interval2[1] or interval1[1] < interval2[0]:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"",
    "    return \"YES\" if (interval1[1] - interval1[0]) * (interval2[1] - interval2[0]) == interval1[0] * interval2[1] - interval1[1] * interval2[0] else \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) and is_prime(interval1[1] - interval1[0]) else \"NO\"",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] or interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n    if interval1[1] == interval2[1]:\n        return \"YES\"\n    return \"NO\"\n",
    "    if interval1[0] > interval2[1] or interval1[1] < interval2[0]:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] or interval1[1] < interval2[1]:\n        return \"NO\"\n    return \"YES\"\n",
    "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] or interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n    if interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[0] + 1:\n        return \"YES\"\n    if interval1[1] == interval2[1] - 1:\n        return \"YES\"\n    return \"NO\"\n",
    "    if interval1[1] > interval2[0] or interval2[1] > interval1[0]:\n        return \"NO\"\n    \n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    if start1 <= end2 and start2 <= end1:\n        return \"YES\"\n    \n    if start1 <= end2 and end1 >= start2:\n        return \"YES\"\n    \n    if start2 <= end1 and end2 >= start1:\n        return \"YES\"\n    \n    return \"NO\"",
    "    return \"YES\" if (interval1[1] - interval1[0]) % (interval2[1] - interval2[0]) == 0 else \"NO\"\n",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] or interval1[1] < interval2[1]:\n        return \"NO\"\n    return \"YES\"\n",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if (interval1[1] - interval1[0]) % (interval2[1] - interval2[0]) == 0 else \"NO\"\n",
    "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] or interval1[1] < interval2[1]:\n        return \"NO\"\n    return \"YES\"\n",
    "    return \"YES\" if (interval1[1] - interval1[0]) % (interval2[1] - interval2[0]) == 0 else \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) and is_prime(interval1[1] - interval1[0]) else \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    if interval1[1] > interval2[0] or interval2[1] > interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    if interval1[0] > interval2[1] or interval1[1] < interval2[0]:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) and is_prime(interval1[1] - interval1[0]) else \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] or interval1[1] < interval2[1]:\n        return \"NO\"\n    return \"YES\"\n",
    "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] >= interval2[0] and interval1[1] <= interval2[1]:\n        return \"YES\"\n    if interval1[0] <= interval2[0] and interval1[1] >= interval2[1]:\n        return \"YES\"\n    return \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) and is_prime(interval1[1] - interval1[0]) else \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    if interval1[0] > interval2[1] or interval1[1] < interval2[0]:\n        return \"NO\"\n    if interval1[0] > interval2[0]:\n        interval1 = (interval1[0], interval1[1])\n    if interval1[1] < interval2[1]:\n        interval2 = (interval2[0], interval2[1])\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n    if interval1[0] == interval2[1]:\n        return \"YES\"\n    if interval1[1] == interval2[0]:\n        return \"YES\"\n    if interval1[1] == interval2[1]:\n        return \"YES\"\n    return \"NO\"\n",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] or interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    return \"NO\"\n",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) and is_prime(interval1[1] - interval1[0]) else \"NO\"",
    "    if interval1[0] > interval2[1] or interval1[1] < interval2[0]:\n        return \"NO\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    return \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    if interval1[0] > interval2[1] or interval1[1] < interval2[0]:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
    "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] or interval1[1] < interval2[1]:\n        return \"NO\"\n    return \"YES\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] or interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    return \"NO\"\n",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] or interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    return \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] or interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n    if interval1[1] == interval2[1]:\n        return \"YES\"\n    return \"NO\"\n",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] or interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n    if interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] < interval2[0]:\n        return \"NO\"\n    if interval1[1] > interval2[1]:\n        return \"NO\"\n    return \"YES\"\n",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if is_prime(intersection_length(interval1, interval2)) else \"NO\"",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] or interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n    if interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[0] + 1:\n        return \"YES\"\n    if interval1[1] == interval2[1] - 1:\n        return \"YES\"\n    if interval1[0] == interval2[1] - 1:\n        return \"YES\"\n    if interval1[1] == interval2[0] + 1:\n        return \"YES\"\n    return \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if (interval1[1] - interval1[0]) % (interval2[1] - interval2[0]) == 0 else \"NO\"\n",
    "    if interval1[0] > interval2[1] or interval1[1] < interval2[0]:\n        return \"NO\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    return \"NO\"",
    "    return \"YES\" if (interval1[1] - interval1[0]) % (interval2[1] - interval2[0]) == 0 else \"NO\"\n",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if (interval1[1] - interval1[0]) % (interval2[1] - interval2[0]) == 0 else \"NO\"\n",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    if interval1[1] > interval2[0] or interval2[1] > interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if is_prime(intersection_length(interval1, interval2)) else \"NO\"",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    if interval1[0] > interval2[1] or interval1[1] < interval2[0]:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] or interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n    if interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] < interval2[0]:\n        return \"NO\"\n    if interval1[1] > interval2[1]:\n        return \"NO\"\n    return \"YES\"",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if is_prime(intersection_length(interval1, interval2)) else \"NO\"",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"",
    "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] or interval1[1] < interval2[1]:\n        return \"NO\"\n    return \"YES\"\n",
    "    return \"YES\" if (interval1[1] - interval1[0]) % (interval2[1] - interval2[0]) == 0 else \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] or interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n    if interval1[1] == interval2[1]:\n        return \"YES\"\n    return \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"",
    "    return \"YES\" if (interval1[1] - interval1[0]) * (interval2[1] - interval2[0]) == interval1[1] - interval1[0] and interval1[1] - interval1[0] == interval2[1] - interval2[0] else \"NO\"\n",
    "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] >= interval2[0] and interval1[1] <= interval2[1]:\n        return \"YES\"\n    if interval1[0] <= interval2[0] and interval1[1] >= interval2[1]:\n        return \"YES\"\n    return \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] or interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    return \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"",
    "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] or interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n    if interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[1]:\n        return \"YES\"\n    if interval1[1] == interval2[0]:\n        return \"YES\"\n    return \"NO\"\n",
    "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] or interval1[1] < interval2[1]:\n        return \"NO\"\n    return \"YES\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] or interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n    if interval1[1] == interval2[1]:\n        return \"YES\"\n    return \"NO\"\n",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) and is_prime(interval1[1] - interval1[0]) else \"NO\"",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] >= interval2[0] and interval1[1] <= interval2[1]:\n        return \"YES\"\n    return \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] >= interval2[0] and interval1[1] <= interval2[1]:\n        return \"YES\"\n    if interval2[0] >= interval1[0] and interval2[1] <= interval1[1]:\n        return \"YES\"\n    return \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] or interval1[1] < interval2[1]:\n        return \"NO\"\n    return \"YES\"\n",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) and is_prime(interval1[1] - interval1[0]) else \"NO\"",
    "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] >= interval2[0] and interval1[1] <= interval2[1]:\n        return \"YES\"\n    return \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] or interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n    if interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[0] and interval1[1] > interval2[1]:\n        return \"YES\"\n    if interval1[0] > interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] > interval2[0] and interval1[1] > interval2[1]:\n        return \"YES\"\n    if interval1[0] > interval2[0] and interval1[1] < interval2[1]:\n        return \"YES\"\n    if interval1[0] < interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] < interval2[0] and interval1[1] > interval2[1]:\n        return \"YES\"\n    if interval1[0] < interval2[0] and interval1[1] < interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[0] and interval1[1] < interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[0] and interval1[1] > interval2[1]:\n        return \"YES\"\n    return \"NO\"\n",
    "    return \"YES\" if (interval1[1] - interval1[0]) * (interval2[1] - interval2[0]) == interval1[1] - interval1[0] else \"NO\"\n",
    "    if interval1[0] > interval2[1] or interval1[1] < interval2[0]:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] or interval1[1] < interval2[1]:\n        return \"NO\"\n    return \"YES\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if (interval1[1] - interval1[0]) % (interval2[1] - interval2[0]) == 0 else \"NO\"\n",
    "    if interval1[1] > interval2[0] or interval2[1] > interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] or interval1[1] < interval2[1]:\n        return \"NO\"\n    return \"YES\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if is_prime(intersection(interval1, interval2)) else \"NO\"",
    "    return \"YES\" if (interval1.start <= interval2.start and interval1.end >= interval2.end) and is_prime(interval1.end - interval1.start + 1) else \"NO\"",
    "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] >= interval2[0] and interval1[1] <= interval2[1]:\n        return \"YES\"\n    if interval1[0] <= interval2[0] and interval1[1] >= interval2[1]:\n        return \"YES\"\n    return \"NO\"\n",
    "    return \"YES\" if (interval1[1] - interval1[0]) % (interval2[1] - interval2[0]) == 0 else \"NO\"\n",
    "    return \"YES\" if (interval1[1] - interval1[0]) * (interval2[1] - interval2[0]) == interval1[1] - interval1[0] else \"NO\"\n",
    "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] or interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n    if interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] < interval2[0]:\n        return \"NO\"\n    if interval1[1] > interval2[1]:\n        return \"NO\"\n    return \"YES\"\n",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
    "    return \"YES\" if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else \"NO\"",
    "    return \"YES\" if (interval1[1] - interval1[0]) % (interval2[1] - interval2[0]) == 0 else \"NO\"\n"
  ],
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ]
}