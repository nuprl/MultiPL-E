{
  "name": "HumanEval_6_parse_nested_parens",
  "language": "jl",
  "prompt": "\"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64} \n",
  "tests": "using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n",
  "completions": [
    "    return parse_nested_parens_helper(paren_string, 0)",
    "    return parse_nested_parens_helper(paren_string, 0)",
    "    var i = 0\n    var result = []\n    while i < paren_string.length:\n        if paren_string[i] == \"(\":\n            result.append(i)\n        i += 1\n    return result",
    "    return parse_nested_parens_aux(paren_string, 0, 0)",
    "    return parse_nested_parens_aux(paren_string, 0)",
    "    if paren_string ==\"\":\n        return []\n    else:\n        paren_list = paren_string.split(\" \")\n        paren_list = [int(x) for x in paren_list]\n        return max(parse_nested_parens(paren_list[0]),\n                   parse_nested_parens(paren_list[1]),\n                   parse_nested_parens(paren_list[2]),\n                   parse_nested_parens(paren_list[3]),\n                   parse_nested_parens(paren_list[4]))",
    "    def parse_nested_parens(paren_string::String)::Vector{Int64}\n        def parse_nested_parens(paren_string::String)::Vector{Int64}\n            def parse_nested_parens(paren_string::String)::Vector{Int64}\n                def parse_nested_parens(paren_string::String)::Vector{Int64}\n                    def parse_nested_parens(paren_string::String)::Vector{Int64}\n                        def parse_nested_parens(paren_string::String)::Vector{Int64}\n                            def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                    def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                        def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                            def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                return [len(paren_string) - 1]\n                                            return [len(paren_string) - 2]\n                                        return [len(paren_string) - 3]\n                                return [len(paren_string) - 4]\n                            return [len(paren_string) - 5]\n                        return [len(paren_string) - 6]\n                    return [len(paren_string) - 7]\n                return [len(paren_string) - 8]\n            return [len(paren_string) - 9]\n        return [len(paren_string) - 10]\n    return [len(paren_string) - 11]",
    "    \"\"\"\n    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n    \"\"\"\n    return [len(paren_string.split(\" \")[i].split(\"(\")) - 1 for i in range(len(paren_string.split(\" \")))]",
    "    \"\"\"\n    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n    \"\"\"\n    return [len(paren_string.split('(')[-1].split(')')[0]) for paren_string in paren_string.split('(')[1:]]",
    "    var result:Vector{Int64} = Vector.empty\n    var paren_stack:Vector{Int64} = Vector.empty\n    var paren_count:Int64 = 0\n    var paren_level:Int64 = 0\n    var paren_stack_index:Int64 = 0\n    var paren_stack_size:Int64 = 0\n    var paren_stack_size_max:Int64 = 0\n    var paren_stack_size_min:Int64 = 0\n    var paren_stack_size_max_index:Int64 = 0\n    var paren_stack_size_min_index:Int64 = 0\n    var paren_stack_size_max_index_found:Bool = False\n    var paren_stack_size_min_index_found:Bool = False\n    var paren_stack_index_found:Bool = False\n    var paren_count_found:Bool = False\n    var paren_level_found:Bool = False\n    var paren_level_max:Int64 = 0\n    var paren_level_min:Int64 = 0\n    var paren_level_max_index:Int64 = 0\n    var paren_level_min_index:Int64 = 0\n    var paren_level_max_index_found:Bool = False\n    var paren_level_min_index_found:Bool = False\n    var paren_stack_index_found:Bool = False\n    var paren_stack_index_max:Int64 = 0\n    var paren_stack_index_min:Int64 = 0\n    var paren_stack_index_max_index:Int64 = 0\n    var paren_stack_index_min_index:Int64 = 0\n    var paren_stack_index_max_index_found:Bool = False\n    var paren_stack_index_min_index_found:Bool = False\n    var paren_stack_index_max_index_found:Bool = False\n    var paren_stack_index_min_index_found:Bool = False\n    var paren_stack_index_max_index_found:Bool",
    "    def parse_parens(paren_string::String)::String\n        def parse_nested_parens(paren_string::String)::Vector{Int64}\n            def parse_parens(paren_string::String)::String\n                def parse_nested_parens(paren_string::String)::Vector{Int64}\n                    def parse_parens(paren_string::String)::String\n                        def parse_nested_parens(paren_string::String)::Vector{Int64}\n                            def parse_parens(paren_string::String)::String\n                                def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                    def parse_parens(paren_string::String)::String\n                                        def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                            def parse_parens(paren_string::String)::String\n                                                def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                    def parse_parens(paren_string::String)::String\n                                                        def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                            def parse_parens(paren_string::String)::String\n                                                                def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                                    def parse_parens(paren_string::String)::String\n                                                                        def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                                            def parse_parens(paren_string::String)::String\n                                                                                def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                                                    def parse_parens(paren_string::String)::String\n                                                                                        def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                                                            def parse_parens(paren_string::String)::String\n                                                                                        def parse_",
    "    if paren_string == \"\" then\n        return Vector{}\n    else\n        return parse_nested_parens(paren_string[1:]) + [len(paren_string)]",
    "    return parse_nested_parens_rec(paren_string, 0)",
    "    return parse_nested_parens_helper(paren_string, 0)",
    "    if paren_string == \"\" then return []\n    group_count = count_parens(paren_string)\n    result = []\n    for i in range(0, group_count):\n        group_string = paren_string[0:i]\n        result.append(count_nested_parens(group_string))\n    return result",
    "    def parse_paren(paren_string::String)::Int64\n        def parse_group(paren_string::String)::Int64\n            def parse_group_inner(paren_string::String)::Int64\n                def parse_group_inner_inner(paren_string::String)::Int64\n                    def parse_group_inner_inner_inner(paren_string::String)::Int64\n                        return 1\n                    return 0\n                return 1\n            return 0\n        return 1\n    return Vector.map(parse_paren, paren_string)",
    "    return parse_nested_parens_helper(paren_string, 0, 0)",
    "    var i:Int64 = 0\n    var j:Int64 = 0\n    var level:Int64 = 0\n    var max_level:Int64 = 0\n    var result:Vector{Int64} = Vector.empty\n    while i < len(paren_string) {\n        if paren_string[i] == \"(\" {\n            level += 1\n            if level > max_level {\n                max_level = level\n            }\n        } else if paren_string[i] == \")\" {\n            level -= 1\n        }\n        if level == 0 {\n            result = result.append(j - i + 1)\n            j = i\n        }\n        i += 1\n    }\n    return result",
    "    if paren_string == \"\" then\n        return []\n    else\n        return parse_nested_parens(paren_string[1:]) + [len(paren_string)]",
    "    if paren_string == \"\" then\n        return []\n    else\n        return parse_nested_parens(paren_string[1:]) + [len(paren_string)]",
    "    if paren_string == \"\" then\n        return Vector{}\n    else\n        return parse_nested_parens(paren_string[1:]) + [len(paren_string)]",
    "    def parse_paren(paren_string::String)::Vector{Int64}\n        def parse_paren_level(paren_string::String)::Vector{Int64}\n            def parse_paren_level_level(paren_string::String)::Vector{Int64}\n                def parse_paren_level_level_level(paren_string::String)::Vector{Int64}\n                    def parse_paren_level_level_level_level(paren_string::String)::Vector{Int64}\n                        def parse_paren_level_level_level_level_level(paren_string::String)::Vector{Int64}\n                            def parse_paren_level_level_level_level_level_level(paren_string::String)::Vector{Int64}\n                                def parse_paren_level_level_level_level_level_level_level(paren_string::String)::Vector{Int64}\n                                    def parse_paren_level_level_level_level_level_level_level_level(paren_string::String)::Vector{Int64}\n                                        def parse_paren_level_level_level_level_level_level_level_level_level(paren_string::String)::Vector{Int64}\n                                            def parse_paren_level_level_level_level_level_level_level_level_level_level(paren_string::String)::Vector{Int64}\n                                                def parse_paren_level_level_level_level_level_level_level_level_level_level_level(paren_string::String)::Vector{Int64}\n                                                    def parse_paren_level_level_level_level_level_level_level_level_level_level_level_level(paren_string::String)::Vector{Int64}\n                                                        def parse_paren_level_level_level_level_level_level_level_level_level_level_level_level(paren_string::String)::Vector{Int64}\n                                                            def parse_paren_level_level_level_level_level_level_level_level_level_level_level_level(paren_string::String):",
    "    var i:Int64 = 0\n    var paren_stack:Vector[Int64] = Vector.empty\n    var max_depth:Int64 = 0\n    while i < paren_string.length:\n        if paren_string[i] == \" \":\n            i += 1\n            continue\n        if paren_string[i] == \"(\":\n            paren_stack.append(i)\n            i += 1\n            continue\n        if paren_string[i] == \")\":\n            if paren_stack.isEmpty:\n                raise Exception(\"Unexpected ')'\")\n            depth = paren_stack.pop()\n            if depth > max_depth:\n                max_depth = depth\n            i += 1\n            continue\n        raise Exception(\"Unexpected character '\" + paren_string[i] + \"'\")\n    return max_depth",
    "    def parse_parens(paren_string::String)::Vector{Int64}\n        def parse_paren(paren_string::String)::Vector{Int64}\n            def parse_paren_group(paren_string::String)::Vector{Int64}\n                def parse_paren_group_group(paren_string::String)::Vector{Int64}\n                    def parse_paren_group_group_group(paren_string::String)::Vector{Int64}\n                        def parse_paren_group_group_group_group(paren_string::String)::Vector{Int64}\n                            def parse_paren_group_group_group_group_group(paren_string::String)::Vector{Int64}\n                                def parse_paren_group_group_group_group_group_group(paren_string::String)::Vector{Int64}\n                                    return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,",
    "    def parse_paren(paren_string::String)::Int64\n        def parse_paren_inner(paren_string::String)::Int64\n            def parse_paren_inner_inner(paren_string::String)::Int64\n                def parse_paren_inner_inner_inner(paren_string::String)::Int64\n                    def parse_paren_inner_inner_inner_inner(paren_string::String)::Int64\n                        def parse_paren_inner_inner_inner_inner_inner(paren_string::String)::Int64\n                            def parse_paren_inner_inner_inner_inner_inner_inner(paren_string::String)::Int64\n                                def parse_paren_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Int64\n                                    def parse_paren_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Int64\n                                        def parse_paren_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Int64\n                                            def parse_paren_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Int64\n                                                def parse_paren_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Int64\n                                                    def parse_paren_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Int64\n                                                        def parse_paren_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Int64\n                                                            def parse_paren_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Int64\n                                                                def parse_paren_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Int64\n                                                                    def parse_paren_inner_inner_inner_inner_inner_inner_inner_inner_",
    "    return parse_nested_parens_helper(paren_string, 0)",
    "    if paren_string == \"\" \n        return Vector{Int64} \n    else \n        return parse_nested_parens(paren_string[1:]) + [len(paren_string) - 1]",
    "    return parse_nested_parens_helper(paren_string, 0, 0)",
    "    var result = []\n    var stack = []\n    for i in range(0, len(paren_string)):\n        if paren_string[i] == \"(\":\n            stack.append(i)\n        elif paren_string[i] == \")\":\n            if len(stack) == 0:\n                raise Exception(\"Mismatched parentheses\")\n            result.append(len(stack) - 1)\n            stack.pop()\n    if len(stack) != 0:\n        raise Exception(\"Mismatched parentheses\")\n    return result",
    "    var result = Vector.new(0)\n    var stack = Vector.new(0)\n    var depth = 0\n    for i in range(0, paren_string.length):\n        if paren_string[i] == \" \":\n            continue\n        if paren_string[i] == \"(\":\n            stack.add(i)\n            depth += 1\n        elif paren_string[i] == \")\":\n            if depth == 0:\n                raise Exception(\"Mismatched parentheses\")\n            stack.pop()\n            depth -= 1\n        result.add(depth)\n    if depth != 0:\n        raise Exception(\"Mismatched parentheses\")\n    return result",
    "    return parse_nested_parens_helper(paren_string, 0, 0)",
    "    return parse_nested_parens_helper(paren_string, 0, 0)",
    "    if paren_string == \"\"\n        return []\n    \n    paren_stack = []\n    for i in range(0, len(paren_string)):\n        if paren_string[i] == \"(\":\n            paren_stack.append(i)\n        elif paren_string[i] == \")\":\n            if len(paren_stack) == 0:\n                return [0]\n            else:\n                paren_stack.pop()\n    return [len(paren_stack)]",
    "    var i = 0\n    var result = []\n    while i < len(paren_string) {\n        var paren_count = 0\n        var j = i\n        while j < len(paren_string) and paren_string[j] == '(' {\n            j++\n            paren_count += 1\n        }\n        i = j\n        while j < len(paren_string) and paren_string[j] == ')' {\n            j++\n            paren_count -= 1\n        }\n        if paren_count > 0 {\n            result.append(paren_count)\n        }\n    }\n    return result",
    "    var result = Vector.new()\n    var paren_stack = Vector.new()\n    var paren_count = 0\n    var paren_depth = 0\n    var paren_index = 0\n    var paren_count = 0\n    var paren_depth = 0\n    var paren_index = 0\n    var paren_stack = Vector.new()\n    var paren_count = 0\n    var paren_depth = 0\n    var paren_index = 0\n    var paren_count = 0\n    var paren_depth = 0\n    var paren_index = 0\n    var paren_stack = Vector.new()\n    var paren_count = 0\n    var paren_depth = 0\n    var paren_index = 0\n    var paren_count = 0\n    var paren_depth = 0\n    var paren_index = 0\n    var paren_stack = Vector.new()\n    var paren_count = 0\n    var paren_depth = 0\n    var paren_index = 0\n    var paren_count = 0\n    var paren_depth = 0\n    var paren_index = 0\n    var paren_stack = Vector.new()\n    var paren_count = 0\n    var paren_depth = 0\n    var paren_index = 0\n    var paren_count = 0\n    var paren_depth = 0\n    var paren_index = 0\n    var paren_stack = Vector.new()\n    var paren_count = 0\n    var paren_depth = 0\n    var paren_index = 0\n    var paren_count = 0\n    var paren_depth = 0\n    var paren_index = 0\n    var paren_stack = Vector.new()\n    var paren_count = 0\n    var paren_depth = 0\n    var paren_index = 0\n    var paren_count = 0\n    var paren_depth = 0\n    var paren_index = 0\n    var paren_stack = Vector.new()\n    var paren_count = 0\n    var paren_depth = 0\n    var paren_index = 0\n    var",
    "    var result:Vector[Int64] = Vector[Int64]()\n    var paren_stack:Vector[Int64] = Vector[Int64]()\n    var paren_count:Int64 = 0\n    var paren_stack_index:Int64 = 0\n    var paren_stack_top:Int64 = 0\n    var paren_stack_top_index:Int64 = 0\n    var paren_stack_top_index_next:Int64 = 0\n    var paren_stack_top_index_next_next:Int64 = 0\n    var paren_stack_top_index_next_next_next:Int64 = 0\n    var paren_stack_top_index_next_next_next_next:Int64 = 0\n    var paren_stack_top_index_next_next_next_next_next:Int64 = 0\n    var paren_stack_top_index_next_next_next_next_next_next:Int64 = 0\n    var paren_stack_top_index_next_next_next_next_next_next_next:Int64 = 0\n    var paren_stack_top_index_next_next_next_next_next_next_next_next:Int64 = 0\n    var paren_stack_top_index_next_next_next_next_next_next_next_next_next:Int64 = 0\n    var paren_stack_top_index_next_next_next_next_next_next_next_next_next_next:Int64 = 0\n    var paren_stack_top_index_next_next_next_next_next_next_next_next_next_next_next:Int64 = 0\n    var paren_stack_top_index_next_next_next_next_next_next_next_next_next_next_next_next:Int64 = 0\n    var paren_stack_top_index_next_next_next_next_next_next_next_next_next_next_next_next_next:Int64 = 0\n    var paren_stack_top_index_next_next_next_next_next_next_next_next_next_",
    "    var result = []\n    var stack = []\n    var paren_count = 0\n    var paren_stack = []\n    var paren_stack_count = 0\n    var paren_stack_index = 0\n    var paren_stack_top = 0\n    var paren_stack_top_count = 0\n    var paren_stack_top_index = 0\n    var paren_stack_top_top = 0\n    var paren_stack_top_top_count = 0\n    var paren_stack_top_top_index = 0\n    var paren_stack_top_top_top = 0\n    var paren_stack_top_top_top_count = 0\n    var paren_stack_top_top_top_index = 0\n    var paren_stack_top_top_top_top = 0\n    var paren_stack_top_top_top_top_count = 0\n    var paren_stack_top_top_top_top_index = 0\n    var paren_stack_top_top_top_top_top = 0\n    var paren_stack_top_top_top_top_top_count = 0\n    var paren_stack_top_top_top_top_top_index = 0\n    var paren_stack_top_top_top_top_top_top = 0\n    var paren_stack_top_top_top_top_top_top_count = 0\n    var paren_stack_top_top_top_top_top_top_index = 0\n    var paren_stack_top_top_top_top_top_top_top = 0\n    var paren_stack_top_top_top_top_top_top_top_count = 0\n    var paren_stack_top_top_top_top_top_top_top_index = 0\n    var paren_stack_top_top_top_top_top_top_top_top = 0\n    var paren_stack_top_top_top_top_top_top_top_top_count = 0\n    var paren_stack_top_top_top_top_top_top_top_top_",
    "    return parse_nested_parens_helper(paren_string, 0, 0)",
    "    if paren_string == \"\" then return []\n    group_count = count_groups(paren_string)\n    result = [0] * group_count\n    for i in range(0, group_count):\n        result[i] = count_nested_parens(paren_string, i)\n    return result",
    "    var result:Vector{Int64} = Vector{Int64}()\n    var paren_stack:Vector{Int64} = Vector{Int64}()\n    var paren_count:Int64 = 0\n    var paren_level:Int64 = 0\n    var paren_count_stack:Vector{Int64} = Vector{Int64}()\n    var paren_level_stack:Vector{Int64} = Vector{Int64}()\n    var paren_count_stack_top:Int64 = 0\n    var paren_level_stack_top:Int64 = 0\n    var paren_count_stack_top_index:Int64 = 0\n    var paren_level_stack_top_index:Int64 = 0\n    var paren_count_stack_top_index_stack:Vector{Int64} = Vector{Int64}()\n    var paren_level_stack_top_index_stack:Vector{Int64} = Vector{Int64}()\n    var paren_count_stack_top_index_stack_top:Int64 = 0\n    var paren_level_stack_top_index_stack_top:Int64 = 0\n    var paren_count_stack_top_index_stack_top_index:Int64 = 0\n    var paren_level_stack_top_index_stack_top_index:Int64 = 0\n    var paren_count_stack_top_index_stack_top_index_stack:Vector{Int64} = Vector{Int64}()\n    var paren_level_stack_top_index_stack_top_index_stack_top:Int64 = 0\n    var paren_count_stack_top_index_stack_top_index_stack_top_index:Int64 = 0\n    var paren_count_stack_top_index_stack_top_index_stack_top_index_stack:Vector{Int64} = Vector{Int64}()\n    var paren_count_stack_top_index_stack_top_index_stack_top_index_stack_top:Int64 = 0\n    var paren_count_stack_top_index_stack_top_index_stack_top_index_",
    "    var i = 0\n    var j = 0\n    var result = []\n    while i < paren_string.length:\n        if paren_string[i] == '(':\n            j = i\n            while j < paren_string.length and paren_string[j] != ')':\n                j += 1\n            if j == paren_string.length:\n                result.append(j - i)\n            else:\n                result.append(j - i + 1)\n            i = j + 1\n        i += 1\n    return result",
    "    var result:Vector[Int64] = Vector[Int64](0)\n    var paren_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_count:Int64 = 0\n    var paren_depth:Int64 = 0\n    var paren_start:Int64 = 0\n    var paren_end:Int64 = 0\n    var paren_count_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_depth_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_start_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_end_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_count_stack_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_depth_stack_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_start_stack_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_end_stack_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_count_stack_stack_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_depth_stack_stack_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_start_stack_stack_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_end_stack_stack_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_count_stack_stack_stack_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_depth_stack_stack_stack_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_start_stack_stack_stack_stack_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_end_stack_stack_stack_stack_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_",
    "    if paren_string == \"\" then\n        return []\n    else\n        return parse_nested_parens(paren_string[1:]) + [len(paren_string)]",
    "    return parse_nested_parens_helper(paren_string, 0)",
    "    return parse_nested_parens_helper(paren_string, 0, 0)",
    "    var result:Vector[Int64] = Vector[Int64]()\n    var paren_stack:Vector[Int64] = Vector[Int64]()\n    var i:Int64 = 0\n    while i < len(paren_string):\n        if paren_string[i] == \" \":\n            i += 1\n            continue\n        if paren_string[i] == \"(\":\n            paren_stack.append(i)\n        elif paren_string[i] == \")\":\n            if len(paren_stack) == 0:\n                result.append(i)\n            else:\n                result.append(paren_stack.pop())\n        i += 1\n    return result",
    "    return parse_nested_parens_aux(paren_string, 0, 0)",
    "    def parse_paren(paren_string::String)::Vector{Int64} \n        def parse_paren_inner(paren_string::String)::Vector{Int64} \n            def parse_paren_inner_inner(paren_string::String)::Vector{Int64} \n                def parse_paren_inner_inner_inner(paren_string::String)::Vector{Int64} \n                    def parse_paren_inner_inner_inner_inner(paren_string::String)::Vector{Int64} \n                        def parse_paren_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64} \n                            def parse_paren_inner_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64} \n                                def parse_paren_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64} \n                                    def parse_paren_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64} \n                                        def parse_paren_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64} \n                                            def parse_paren_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64} \n                                                def parse_paren_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64} \n                                                    def parse_paren_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64} \n                                                        def parse_paren_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64} \n                                                            def parse_paren_inner_inner_inner_inner_inner_inner_inner_",
    "    return parse_nested_parens_aux(paren_string, 0, 0)",
    "    def parse_parens(paren_string::String)::Vector{Int64}\n        def parse_paren(paren_string::String)::Vector{Int64}\n            def parse_paren_inner(paren_string::String)::Vector{Int64}\n                def parse_paren_inner_inner(paren_string::String)::Vector{Int64}\n                    def parse_paren_inner_inner_inner(paren_string::String)::Vector{Int64}\n                        def parse_paren_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                            return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",
    "    def parse_parens(paren_string::String)::String\n        def parse_group(paren_string::String)::String\n            def parse_group_inner(paren_string::String)::String\n                def parse_group_inner_inner(paren_string::String)::String\n                    def parse_group_inner_inner_inner(paren_string::String)::String\n                        def parse_group_inner_inner_inner_inner(paren_string::String)::String\n                            def parse_group_inner_inner_inner_inner_inner(paren_string::String)::String\n                                def parse_group_inner_inner_inner_inner_inner_inner(paren_string::String)::String\n                                    def parse_group_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::String\n                                        def parse_group_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::String\n                                            def parse_group_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::String\n                                                def parse_group_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::String\n                                                    def parse_group_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::String\n                                                        def parse_group_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::String\n                                                            def parse_group_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::String\n                                                                def parse_group_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::String\n                                                                    def parse_group_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner",
    "    if paren_string == \"\" then\n        return []\n    else\n        return parse_nested_parens(paren_string[1:]) + [len(paren_string)]",
    "    var result = []\n    var paren_stack = []\n    for i in range(0, len(paren_string)):\n        if paren_string[i] == '(':\n            paren_stack.append(i)\n        elif paren_string[i] == ')':\n            if len(paren_stack) > 0:\n                result.append(len(paren_stack) - 1)\n                paren_stack.pop()\n            else:\n                result.append(0)\n        else:\n            pass\n    return result",
    "    return parse_nested_parens_aux(paren_string, 0, 0)",
    "    return parse_nested_parens_helper(paren_string, 0)",
    "    var result:Vector[Int64] = Vector[Int64]()\n    var paren_stack:Vector[Int64] = Vector[Int64]()\n    var paren_count:Int64 = 0\n    var i:Int64 = 0\n    while i < len(paren_string):\n        if paren_string[i] == \" \":\n            i += 1\n            continue\n        if paren_string[i] == \"(\":\n            paren_count += 1\n            paren_stack.append(paren_count)\n            i += 1\n            continue\n        if paren_string[i] == \")\":\n            if paren_count == 0:\n                raise Exception(\"Mismatched parentheses\")\n            paren_count -= 1\n            if paren_count == 0:\n                result.append(paren_stack.pop())\n            i += 1\n            continue\n        raise Exception(\"Invalid character in paren string\")\n    if paren_count != 0:\n        raise Exception(\"Mismatched parentheses\")\n    return result",
    "    return parse_nested_parens_aux(paren_string, 0, 0)",
    "    return parse_nested_parens_helper(paren_string, 0, 0)",
    "    return parse_nested_parens_helper(paren_string, 0)",
    "    return parse_nested_parens_helper(paren_string, 0)",
    "    var result:Vector[Int64] = Vector[Int64](0)\n    var paren_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_count:Int64 = 0\n    var paren_index:Int64 = 0\n    var paren_char:Char = \"\"\n    var paren_count:Int64 = 0\n    var paren_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_count:Int64 = 0\n    var paren_index:Int64 = 0\n    var paren_char:Char = \"\"\n    var paren_count:Int64 = 0\n    var paren_index:Int64 = 0\n    var paren_char:Char = \"\"\n    var paren_count:Int64 = 0\n    var paren_index:Int64 = 0\n    var paren_char:Char = \"\"\n    var paren_count:Int64 = 0\n    var paren_index:Int64 = 0\n    var paren_char:Char = \"\"\n    var paren_count:Int64 = 0\n    var paren_index:Int64 = 0\n    var paren_char:Char = \"\"\n    var paren_count:Int64 = 0\n    var paren_index:Int64 = 0\n    var paren_char:Char = \"\"\n    var paren_count:Int64 = 0\n    var paren_index:Int64 = 0\n    var paren_char:Char = \"\"\n    var paren_count:Int64 = 0\n    var paren_index:Int64 = 0\n    var paren_char:Char = \"\"\n    var paren_count:Int64 = 0\n    var paren_index:Int64 = 0\n    var paren_char:Char = \"\"\n    var paren_count:Int64 = 0\n    var paren_index:Int64 = 0\n    var paren_char:Char = \"\"\n    var paren_count:Int64 = 0\n    var paren_index:Int64 = 0\n    var paren_char:Char = \"\"\n    var paren_count:Int64 = 0\n    var paren_index:Int",
    "    def parse_parens(paren_string::String)::Vector{Int64}\n        def parse_paren(paren_string::String)::Vector{Int64}\n            def parse_paren_inner(paren_string::String)::Vector{Int64}\n                def parse_paren_inner_inner(paren_string::String)::Vector{Int64}\n                    def parse_paren_inner_inner_inner(paren_string::String)::Vector{Int64}\n                        return [0, 1, 2, 3]\n                    return [0, 1, 2]\n                return [0, 1]\n            return [0]\n        return [0]\n    return parse_parens(paren_string)",
    "    var result:Vector[Int64] = Vector[Int64](0)\n    var paren_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_count:Int64 = 0\n    var i:Int64 = 0\n    var j:Int64 = 0\n    var paren_count_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_count_stack_index:Int64 = 0\n    var paren_count_stack_top:Int64 = 0\n    var paren_count_stack_top_index:Int64 = 0\n    var paren_count_stack_top_top:Int64 = 0\n    var paren_count_stack_top_top_index:Int64 = 0\n    var paren_count_stack_top_top_top:Int64 = 0\n    var paren_count_stack_top_top_top_index:Int64 = 0\n    var paren_count_stack_top_top_top_top:Int64 = 0\n    var paren_count_stack_top_top_top_top_index:Int64 = 0\n    var paren_count_stack_top_top_top_top_top:Int64 = 0\n    var paren_count_stack_top_top_top_top_top_index:Int64 = 0\n    var paren_count_stack_top_top_top_top_top_top:Int64 = 0\n    var paren_count_stack_top_top_top_top_top_top_index:Int64 = 0\n    var paren_count_stack_top_top_top_top_top_top_top:Int64 = 0\n    var paren_count_stack_top_top_top_top_top_top_top_index:Int64 = 0\n    var paren_count_stack_top_top_top_top_top_top_top_top:Int64 = 0\n    var paren_count_stack_top_top_top_top_top_top_top_top_index:Int64 = 0\n    var paren_count_stack_top_top_top_top_top_top",
    "    var result = Vector[Int64]\n    var paren_stack = Vector[Int64]\n    paren_stack.Push(0)\n    for i in range(0, len(paren_string)):\n        if paren_string[i] == \"(\":\n            paren_stack.Push(i)\n        elif paren_string[i] == \")\":\n            if paren_stack.Size == 0:\n                raise Exception(\"Invalid paren string\")\n            if paren_stack.Peek() == 0:\n                paren_stack.Pop()\n            else:\n                result.Push(paren_stack.Pop() - 1)\n                paren_stack.Push(i)\n    if paren_stack.Size > 0:\n        raise Exception(\"Invalid paren string\")\n    return result",
    "    return parse_nested_parens_helper(paren_string, 0)",
    "    return parse_nested_parens_helper(paren_string, 0, 0)",
    "    var result:Vector[Int64] = []\n    var paren_stack:Vector[Int64] = []\n    var paren_count:Int64 = 0\n    var paren_index:Int64 = 0\n    var paren_char:Char = \"\"\n    var paren_count_stack:Vector[Int64] = []\n    var paren_count_stack_index:Int64 = 0\n    var paren_count_stack_count:Int64 = 0\n    var paren_count_stack_count_stack:Vector[Int64] = []\n    var paren_count_stack_count_stack_index:Int64 = 0\n    var paren_count_stack_count_stack_count:Int64 = 0\n    var paren_count_stack_count_stack_count_stack:Vector[Int64] = []\n    var paren_count_stack_count_stack_count_stack_index:Int64 = 0\n    var paren_count_stack_count_stack_count_stack_count:Int64 = 0\n    var paren_count_stack_count_stack_count_stack_count_stack:Vector[Int64] = []\n    var paren_count_stack_count_stack_count_stack_count_stack_index:Int64 = 0\n    var paren_count_stack_count_stack_count_stack_count_stack_count:Int64 = 0\n    var paren_count_stack_count_stack_count_stack_count_stack_count_stack:Vector[Int64] = []\n    var paren_count_stack_count_stack_count_stack_count_stack_count_stack_index:Int64 = 0\n    var paren_count_stack_count_stack_count_stack_count_stack_count_stack_count:Int64 = 0\n    var paren_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack:Vector[Int64] = []\n    var paren_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_index:Int64 = 0\n    var paren_count_stack_count_stack",
    "    var result:Vector[Int64] = Vector[Int64]()\n    var paren_stack:Vector[Int64] = Vector[Int64]()\n    var paren_count:Int64 = 0\n    var depth:Int64 = 0\n    var paren_string_index:Int64 = 0\n    var paren_string_length:Int64 = len(paren_string)\n    while paren_string_index < paren_string_length:\n        if paren_string[paren_string_index] == \" \":\n            paren_string_index += 1\n            continue\n        if paren_string[paren_string_index] == \"(\":\n            paren_stack.append(paren_count)\n            paren_count += 1\n            paren_string_index += 1\n            continue\n        if paren_string[paren_string_index] == \")\":\n            if paren_count == 0:\n                raise Exception(\"Mismatched parentheses\")\n            paren_count -= 1\n            if paren_count == 0:\n                depth = paren_stack.pop()\n            paren_string_index += 1\n            continue\n        raise Exception(\"Invalid character in parentheses string\")\n    return result",
    "    def parse_nested_parens_helper(paren_string::String, depth::Int64)::Vector{Int64} \n        if depth > 0:\n            return [depth, parse_nested_parens_helper(paren_string::String, depth - 1)]\n        else:\n            return [0]\n    return parse_nested_parens_helper(paren_string::String, 1)",
    "    var result:Vector[Int64] = Vector[Int64]()\n    var paren_stack:Vector[Int64] = Vector[Int64]()\n    var depth:Int64 = 0\n    var paren_count:Int64 = 0\n    var paren_index:Int64 = 0\n    var paren_char:Char = \"\"\n    var paren_count_stack:Vector[Int64] = Vector[Int64]()\n    var paren_count_stack_index:Int64 = 0\n    var paren_count_stack_top:Int64 = 0\n    var paren_count_stack_top_index:Int64 = 0\n    var paren_count_stack_top_top:Int64 = 0\n    var paren_count_stack_top_top_index:Int64 = 0\n    var paren_count_stack_top_top_top:Int64 = 0\n    var paren_count_stack_top_top_top_index:Int64 = 0\n    var paren_count_stack_top_top_top_top:Int64 = 0\n    var paren_count_stack_top_top_top_top_index:Int64 = 0\n    var paren_count_stack_top_top_top_top_top:Int64 = 0\n    var paren_count_stack_top_top_top_top_top_index:Int64 = 0\n    var paren_count_stack_top_top_top_top_top_top:Int64 = 0\n    var paren_count_stack_top_top_top_top_top_top_index:Int64 = 0\n    var paren_count_stack_top_top_top_top_top_top_top:Int64 = 0\n    var paren_count_stack_top_top_top_top_top_top_top_index:Int64 = 0\n    var paren_count_stack_top_top_top_top_top_top_top_top:Int64 = 0\n    var paren_count_stack_top_top_top_top_top_top_top_top_index:Int64 = 0\n    var paren_count_stack_",
    "    def parse_parens(paren_string::String)::Vector{Int64} \n        def parse_paren(paren_string::String)::Vector{Int64} \n            def parse_paren_group(paren_string::String)::Vector{Int64} \n                def parse_paren_group_group(paren_string::String)::Vector{Int64} \n                    def parse_paren_group_group_group(paren_string::String)::Vector{Int64} \n                        def parse_paren_group_group_group_group(paren_string::String)::Vector{Int64} \n                            def parse_paren_group_group_group_group_group(paren_string::String)::Vector{Int64} \n                                def parse_paren_group_group_group_group_group_group(paren_string::String)::Vector{Int64} \n                                    def parse_paren_group_group_group_group_group_group_group(paren_string::String)::Vector{Int64} \n                                        def parse_paren_group_group_group_group_group_group_group_group(paren_string::String)::Vector{Int64} \n                                            def parse_paren_group_group_group_group_group_group_group_group_group(paren_string::String)::Vector{Int64} \n                                                def parse_paren_group_group_group_group_group_group_group_group_group(paren_string::String)::Vector{Int64} \n                                                    def parse_paren_group_group_group_group_group_group_group_group_group(paren_string::String)::Vector{Int64} \n                                                        def parse_paren_group_group_group_group_group_group_group_group_group(paren_string::String)::Vector{Int64} \n                                                            def parse_paren_group_group_group_group_group_group_group_group_group(paren_string::String)::Vector{Int64} \n                                                                def parse_paren_group_group_group_group_group_group",
    "    if paren_string == \"\" then\n        return []\n    else\n        return parse_nested_parens(paren_string[1:]) + [len(paren_string)]",
    "    var result = Vector.new()\n    var stack = Vector.new()\n    var index = 0\n    while index < paren_string.length:\n        if paren_string[index] == \" \":\n            index += 1\n            continue\n        if paren_string[index] == \"(\":\n            stack.add(index)\n        elif paren_string[index] == \")\":\n            if stack.size() == 0:\n                result.add(0)\n            else:\n                result.add(stack.size())\n                stack.pop()\n        index += 1\n    if stack.size() > 0:\n        result.add(stack.size())\n    return result",
    "    var i = 0\n    var result = []\n    while i < paren_string.length:\n        var paren = paren_string[i]\n        if paren == \"(\":\n            result.append(1)\n        elif paren == \")\":\n            result.pop()\n        i += 1\n    return result",
    "    def parse_parens(paren_string::String)::Vector{Int64}\n        def parse_group(paren_string::String)::Vector{Int64}\n            def parse_group_inner(paren_string::String)::Vector{Int64}\n                def parse_group_inner_inner(paren_string::String)::Vector{Int64}\n                    def parse_group_inner_inner_inner(paren_string::String)::Vector{Int64}\n                        def parse_group_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                            def parse_group_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                                def parse_group_inner_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                                    return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",
    "    def parse_nested_parens(paren_string::String)::Vector{Int64}\n        def parse_nested_parens(paren_string::String)::Vector{Int64}\n            def parse_nested_parens(paren_string::String)::Vector{Int64}\n                def parse_nested_parens(paren_string::String)::Vector{Int64}\n                    def parse_nested_parens(paren_string::String)::Vector{Int64}\n                        def parse_nested_parens(paren_string::String)::Vector{Int64}\n                            def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                    def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                        def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                            def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                return [0, 0, 0, 0]\n                                            def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                return [0, 0, 0, 1]\n                                        def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                            return [0, 0, 1, 0]\n                                    def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                        return [0, 0, 1, 1]\n                                def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                    return [0, 1, 0, 0]\n                            def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                return [0, 1, 0, 1]\n                        def parse_nested_parens(paren_string::String)::Vector{Int64}\n                            return [0, 1, 1, 0]\n                    def parse_nested_parens(paren_",
    "    return parse_nested_parens_aux(paren_string, 0, 0)",
    "    def parse_parens(paren_string::String)::Vector{Int64}\n        def parse_paren(paren_string::String)::Vector{Int64}\n            def parse_paren_inner(paren_string::String)::Vector{Int64}\n                def parse_paren_inner_inner(paren_string::String)::Vector{Int64}\n                    def parse_paren_inner_inner_inner(paren_string::String)::Vector{Int64}\n                        def parse_paren_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                            return [0, 1, 2, 3]\n                        return [0, 1, 2, 3]\n                    return [0, 1, 2, 3]\n                return [0, 1, 2, 3]\n            return [0, 1, 2, 3]\n        return [0, 1, 2, 3]\n    return parse_parens(paren_string)",
    "    return parse_nested_parens_helper(paren_string, 0)",
    "    var result:Vector[Int64] = []\n    var stack:Vector[Int64] = []\n    var paren_count:Int64 = 0\n    var i:Int64 = 0\n    while i < len(paren_string):\n        if paren_string[i] == \"(\":\n            paren_count += 1\n            stack.append(paren_count)\n        elif paren_string[i] == \")\":\n            paren_count -= 1\n            if paren_count == 0:\n                result.append(stack.pop())\n            else:\n                stack.append(paren_count)\n        i += 1\n    return result",
    "    def parse_paren(paren_string::String)::Vector{Int64}\n        def parse_paren_level(paren_string::String)::Vector{Int64}\n            def parse_paren_level_inner(paren_string::String)::Vector{Int64}\n                def parse_paren_level_inner_inner(paren_string::String)::Vector{Int64}\n                    def parse_paren_level_inner_inner_inner(paren_string::String)::Vector{Int64}\n                        return 1\n                    return 0\n                return 1\n            return 0\n        return 1\n    return parse_paren(paren_string)",
    "    if paren_string == \"\" then\n        return []\n    else\n        return parse_nested_parens(paren_string[1:]) + [len(paren_string)]",
    "    var result:Vector[Int64] = Vector[Int64](0)\n    var paren_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_count:Int64 = 0\n    var paren_level:Int64 = 0\n    var paren_index:Int64 = 0\n    var paren_string:String = \"\"\n    var paren_count:Int64 = 0\n    var paren_level:Int64 = 0\n    var paren_index:Int64 = 0\n    var paren_string:String = \"\"\n    var paren_count:Int64 = 0\n    var paren_level:Int64 = 0\n    var paren_index:Int64 = 0\n    var paren_string:String = \"\"\n    var paren_count:Int64 = 0\n    var paren_level:Int64 = 0\n    var paren_index:Int64 = 0\n    var paren_string:String = \"\"\n    var paren_count:Int64 = 0\n    var paren_level:Int64 = 0\n    var paren_index:Int64 = 0\n    var paren_string:String = \"\"\n    var paren_count:Int64 = 0\n    var paren_level:Int64 = 0\n    var paren_index:Int64 = 0\n    var paren_string:String = \"\"\n    var paren_count:Int64 = 0\n    var paren_level:Int64 = 0\n    var paren_index:Int64 = 0\n    var paren_string:String = \"\"\n    var paren_count:Int64 = 0\n    var paren_level:Int64 = 0\n    var paren_index:Int64 = 0\n    var paren_string:String = \"\"\n    var paren_count:Int64 = 0\n    var paren_level:Int64 = 0\n    var paren_index:Int64 = 0\n    var paren_string:String = \"\"\n    var paren_count:Int64 = 0\n    var paren_level:Int64 = 0\n    var paren_index:Int64 = 0\n    var paren_string:String = \"\"\n    var p",
    "    def parse_nested_parens(paren_string::String)::Vector{Int64}\n        def parse_nested_parens(paren_string::String)::Vector{Int64}\n            def parse_nested_parens(paren_string::String)::Vector{Int64}\n                def parse_nested_parens(paren_string::String)::Vector{Int64}\n                    def parse_nested_parens(paren_string::String)::Vector{Int64}\n                        def parse_nested_parens(paren_string::String)::Vector{Int64}\n                            def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                    def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                        def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                            def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                    def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                        def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                            def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                                def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                                    def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                                        def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                                            def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                                                def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                                                        ",
    "    var result:Vector{Int64} = Vector.empty\n    var paren_stack:Vector{Int64} = Vector.empty\n    var paren_count:Int64 = 0\n    var paren_depth:Int64 = 0\n    var paren_index:Int64 = 0\n    var paren_count_stack:Vector{Int64} = Vector.empty\n    var paren_depth_stack:Vector{Int64} = Vector.empty\n    var paren_index_stack:Vector{Int64} = Vector.empty\n    var paren_count_stack_index:Int64 = 0\n    var paren_depth_stack_index:Int64 = 0\n    var paren_index_stack_index:Int64 = 0\n    var paren_count_stack_index_stack:Vector{Int64} = Vector.empty\n    var paren_depth_stack_index_stack:Vector{Int64} = Vector.empty\n    var paren_index_stack_index_stack:Vector{Int64} = Vector.empty\n    var paren_count_stack_index_stack_index:Int64 = 0\n    var paren_depth_stack_index_stack_index:Int64 = 0\n    var paren_index_stack_index_stack_index:Int64 = 0\n    var paren_count_stack_index_stack_index_stack:Vector{Int64} = Vector.empty\n    var paren_depth_stack_index_stack_index_stack:Vector{Int64} = Vector.empty\n    var paren_index_stack_index_stack_index_stack:Vector{Int64} = Vector.empty\n    var paren_count_stack_index_stack_index_stack_index:Int64 = 0\n    var paren_depth_stack_index_stack_index_stack_index:Int64 = 0\n    var paren_index_stack_index_stack_index_stack_index:Int64 = 0\n    var paren_count_stack_index_stack_index_stack_index_stack:Vector{Int64} = Vector.empty\n    var paren_depth_stack_index_stack_index_stack_index_stack:Vector{Int64} =",
    "    def parse_paren(paren_string::String)::Vector{Int64}\n        def parse_group(group_string::String)::Vector{Int64}\n            def parse_paren(group_string::String)::Vector{Int64}\n                def parse_group(group_string::String)::Vector{Int64}\n                    def parse_paren(group_string::String)::Vector{Int64}\n                        def parse_group(group_string::String)::Vector{Int64}\n                            def parse_paren(group_string::String)::Vector{Int64}\n                                def parse_group(group_string::String)::Vector{Int64}\n                                    def parse_paren(group_string::String)::Vector{Int64}\n                                        def parse_group(group_string::String)::Vector{Int64}\n                                            def parse_paren(group_string::String)::Vector{Int64}\n                                                def parse_group(group_string::String)::Vector{Int64}\n                                                    def parse_paren(group_string::String)::Vector{Int64}\n                                                        def parse_group(group_string::String)::Vector{Int64}\n                                                            def parse_paren(group_string::String)::Vector{Int64}\n                                                                def parse_group(group_string::String)::Vector{Int64}\n                                                                    def parse_paren(group_string::String)::Vector{Int64}\n                                                                        def parse_group(group_string::String)::Vector{Int64}\n                                                                            def parse_paren(group_string::String)::Vector{Int64}\n                                                                                def parse_group(group_string::String)::Vector{Int64}\n                                                                                    def parse_paren(group_string::String)::Vector{Int64}\n                                                                                        def parse_group(group_string::String)::Vector{Int64}\n                                                                                            def parse_paren(group_string::String)::Vector{Int64}\n                                                                                                def parse_group(group_string::String)::Vector",
    "    var i:Int64 = 0\n    var result:Vector{Int64} = Vector.empty\n    while i < len(paren_string) {\n        var paren_count:Int64 = 0\n        var paren_level:Int64 = 0\n        while i < len(paren_string) and paren_string[i] == \" \" {\n            i = i + 1\n        }\n        while i < len(paren_string) and paren_string[i] != \" \" {\n            if paren_string[i] == \"(\" {\n                paren_count = paren_count + 1\n            } else if paren_string[i] == \")\" {\n                paren_count = paren_count - 1\n            }\n            i = i + 1\n        }\n        if paren_count == 0 {\n            result = result + [paren_level]\n        }\n    }\n    return result",
    "    def parse_paren(paren_string::String)::Vector{Int64}\n        def parse_group(group_string::String)::Vector{Int64}\n            def parse_group_paren(group_string::String)::Vector{Int64}\n                def parse_group_paren_paren(group_string::String)::Vector{Int64}\n                    def parse_group_paren_paren_paren(group_string::String)::Vector{Int64}\n                        def parse_group_paren_paren_paren_paren(group_string::String)::Vector{Int64}\n                            def parse_group_paren_paren_paren_paren_paren(group_string::String)::Vector{Int64}\n                                def parse_group_paren_paren_paren_paren_paren_paren(group_string::String)::Vector{Int64}\n                                    return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
    "    if paren_string == \"\" then return []\n    \n    result = []\n    \n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == \" \":\n            i += 1\n            continue\n        \n        if paren_string[i] == \"(\":\n            result.append(i)\n            i += 1\n            while i < len(paren_string) and paren_string[i] != \")\":\n                i += 1\n            result.append(i)\n            i += 1\n        else:\n            i += 1\n    \n    return result",
    "    return parse_nested_parens_helper(paren_string, 0, 0)",
    "    var result:Vector[Int64] = Vector[Int64](0)\n    var paren_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_count:Int64 = 0\n    var paren_depth:Int64 = 0\n    var paren_count_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_depth_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_stack_index:Int64 = 0\n    var paren_count_stack_index:Int64 = 0\n    var paren_depth_stack_index:Int64 = 0\n    var paren_stack_index_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_count_stack_index_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_depth_stack_index_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_stack_index_stack_index:Int64 = 0\n    var paren_count_stack_index_stack_index:Int64 = 0\n    var paren_depth_stack_index_stack_index:Int64 = 0\n    var paren_stack_index_stack_index_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_count_stack_index_stack_index_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_depth_stack_index_stack_index_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_stack_index_stack_index_stack_index:Int64 = 0\n    var paren_count_stack_index_stack_index_stack_index:Int64 = 0\n    var paren_depth_stack_index_stack_index_stack_index:Int64 = 0\n    var paren_stack_index_stack_index_stack_index_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_count_stack_index_stack_index_stack_index_stack:Vector[Int64]",
    "    if len(paren_string) == 0:\n        return []\n    \n    nested_parens = []\n    for i in range(0, len(paren_string)):\n        if paren_string[i] == '(':\n            nested_parens.append(i)\n        elif paren_string[i] == ')':\n            nested_parens.pop()\n    \n    return nested_parens",
    "    var result:Vector[Int64] = Vector[Int64]()\n    var paren_stack:Vector[Int64] = Vector[Int64]()\n    var paren_count:Int64 = 0\n    var paren_level:Int64 = 0\n    var paren_index:Int64 = 0\n    var paren_char:Char = \"\"\n    var paren_count_stack:Vector[Int64] = Vector[Int64]()\n    var paren_level_stack:Vector[Int64] = Vector[Int64]()\n    var paren_index_stack:Vector[Int64] = Vector[Int64]()\n    var paren_char_stack:Vector[Char] = Vector[Char]()\n    var paren_count_stack_stack:Vector[Vector[Int64]] = Vector[Vector[Int64]]()\n    var paren_level_stack_stack:Vector[Vector[Int64]] = Vector[Vector[Int64]]()\n    var paren_index_stack_stack:Vector[Vector[Int64]] = Vector[Vector[Int64]]()\n    var paren_char_stack_stack:Vector[Vector[Char]] = Vector[Vector[Char]]()\n    var paren_count_stack_stack_stack:Vector[Vector[Vector[Int64]]] = Vector[Vector[Vector[Int64]]]()\n    var paren_level_stack_stack_stack:Vector[Vector[Vector[Int64]]] = Vector[Vector[Vector[Int64]]]()\n    var paren_index_stack_stack_stack:Vector[Vector[Vector[Int64]]] = Vector[Vector[Vector[Int64]]]()\n    var paren_char_stack_stack_stack:Vector[Vector[Vector[Char]]] = Vector[Vector[Vector[Char]]]()\n    var paren_count_stack_stack_stack_stack:Vector[Vector[Vector[Vector[Int64]]]] = Vector[Vector[Vector[Vector[Int64]]]]()\n    var paren_level_stack_stack_stack_stack:Vector[Vector[Vector[Vector[Int64]]]] = Vector[Vector[Vector[Vector[Int64]]]]()\n    var paren_index",
    "    var result:Vector[Int64] = Vector[Int64]()\n    var paren_stack:Vector[Int64] = Vector[Int64]()\n    var i:Int64 = 0\n    while i < len(paren_string):\n        if paren_string[i] == \"(\":\n            paren_stack.append(i)\n        elif paren_string[i] == \")\":\n            if len(paren_stack) == 0:\n                result.append(i)\n            else:\n                result.append(paren_stack.pop())\n        i += 1\n    return result",
    "    return parse_nested_parens_helper(paren_string, 0)",
    "    def parse_parens(paren_string::String)::Vector{Int64}\n        def parse_nested_parens(paren_string::String)::Vector{Int64}\n            def parse_parens(paren_string::String)::Vector{Int64}\n                def parse_nested_parens(paren_string::String)::Vector{Int64}\n                    def parse_parens(paren_string::String)::Vector{Int64}\n                        def parse_nested_parens(paren_string::String)::Vector{Int64}\n                            def parse_parens(paren_string::String)::Vector{Int64}\n                                def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                    def parse_parens(paren_string::String)::Vector{Int64}\n                                        def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                            def parse_parens(paren_string::String)::Vector{Int64}\n                                                def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                    def parse_parens(paren_string::String)::Vector{Int64}\n                                                        def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                            def parse_parens(paren_string::String)::Vector{Int64}\n                                                                def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                                    def parse_parens(paren_string::String)::Vector{Int64}\n                                                                        def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                                            def parse_parens(paren_string::String)::Vector{Int64}\n                                                                                def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                                                    def parse_parens(paren_string::String)::Vector{Int64}\n                                                                                        def parse_nested_paren",
    "    var result:Vector[Int64] = Vector[Int64]()\n    var paren_stack:Vector[Int64] = Vector[Int64]()\n    var paren_count:Int64 = 0\n    var paren_stack_index:Int64 = 0\n    var paren_stack_top:Int64 = 0\n    var paren_stack_top_index:Int64 = 0\n    var paren_stack_top_index_end:Int64 = 0\n    var paren_stack_top_index_start:Int64 = 0\n    var paren_stack_top_index_start_end:Int64 = 0\n    var paren_stack_top_index_start_end_end:Int64 = 0\n    var paren_stack_top_index_start_end_end_end:Int64 = 0\n    var paren_stack_top_index_start_end_end_end_end:Int64 = 0\n    var paren_stack_top_index_start_end_end_end_end_end:Int64 = 0\n    var paren_stack_top_index_start_end_end_end_end_end_end:Int64 = 0\n    var paren_stack_top_index_start_end_end_end_end_end_end_end:Int64 = 0\n    var paren_stack_top_index_start_end_end_end_end_end_end_end_end:Int64 = 0\n    var paren_stack_top_index_start_end_end_end_end_end_end_end_end_end:Int64 = 0\n    var paren_stack_top_index_start_end_end_end_end_end_end_end_end_end_end:Int64 = 0\n    var paren_stack_top_index_start_end_end_end_end_end_end_end_end_end_end_end:Int64 = 0\n    var paren_stack_top_index_start_end_end_end_end_end_end_end_end_end_end_end_end:Int64 = 0\n    var paren_stack_top_index_",
    "    def parse_paren(paren_string::String)::Vector{Int64}\n        def parse_paren_level(paren_string::String)::Vector{Int64}\n            def parse_paren_level_inner(paren_string::String)::Vector{Int64}\n                def parse_paren_level_inner_inner(paren_string::String)::Vector{Int64}\n                    def parse_paren_level_inner_inner_inner(paren_string::String)::Vector{Int64}\n                        def parse_paren_level_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                            return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
    "    def parse_nested_parens(paren_string::String)::Vector{Int64}\n        def parse_nested_parens(paren_string::String)::Vector{Int64}\n            def parse_nested_parens(paren_string::String)::Vector{Int64}\n                def parse_nested_parens(paren_string::String)::Vector{Int64}\n                    def parse_nested_parens(paren_string::String)::Vector{Int64}\n                        def parse_nested_parens(paren_string::String)::Vector{Int64}\n                            def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                    def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                        def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                            def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                return [0, 0, 0, 0]\n                                            def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                return [0, 0, 0, 0]\n                                        def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                            return [0, 0, 0, 0]\n                                    def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                        return [0, 0, 0, 0]\n                                def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                    return [0, 0, 0, 0]\n                            def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                return [0, 0, 0, 0]\n                        def parse_nested_parens(paren_string::String)::Vector{Int64}\n                            return [0, 0, 0, 0]\n                    def parse_nested_parens(paren_",
    "    return parse_nested_parens_helper(paren_string, 0)",
    "    \"\"\"\n    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n    \"\"\"\n    return [len(paren_string.split(\" \")[i].split(\"(\")) - 1 for i in range(len(paren_string.split(\" \")))]",
    "    if len(paren_string) == 0:\n        return Vector[Int64]\n    else:\n        return parse_nested_parens(paren_string[1:]) + [len(paren_string) - 1]",
    "    return parse_nested_parens_helper(paren_string, 0)",
    "    return parse_nested_parens_aux(paren_string, 0, 0)",
    "    return parse_nested_parens_helper(paren_string, 0, 0)",
    "    return parse_nested_parens_helper(paren_string, 0)",
    "    def parse_parens(paren_string::String)::String {\n        def parse_paren(paren_string::String)::String {\n            def parse_paren_inner(paren_string::String)::String {\n                def parse_paren_inner_inner(paren_string::String)::String {\n                    return paren_string::String\n                }\n                return parse_paren_inner_inner(paren_string::String)\n            }\n            return parse_paren_inner(paren_string::String)\n        }\n        return parse_paren(paren_string::String)\n    }\n    return parse_parens(paren_string::String)",
    "    return parse_nested_parens_aux(paren_string, 0)",
    "    def parse_paren(paren_string::String)::Vector{Int64}\n        def parse_group(group_string::String)::Vector{Int64}\n            def parse_group_inner(group_string::String)::Vector{Int64}\n                def parse_group_inner_inner(group_string::String)::Vector{Int64}\n                    def parse_group_inner_inner_inner(group_string::String)::Vector{Int64}\n                        return 1\n                    return 0\n                return 1\n            return 0\n        return 1\n    return parse_paren(paren_string)",
    "    var i:Int64 = 0\n    var paren_stack:Vector[Int64] = Vector.empty\n    var paren_count:Int64 = 0\n    var max_paren_count:Int64 = 0\n    var max_paren_count_index:Int64 = 0\n    var max_paren_count_index_stack:Vector[Int64] = Vector.empty\n    while i < paren_string.length:\n        if paren_string[i] == \"(\":\n            paren_stack = paren_stack.append(i)\n            paren_count += 1\n            if paren_count > max_paren_count:\n                max_paren_count = paren_count\n                max_paren_count_index = paren_stack.length - 1\n                max_paren_count_index_stack = paren_stack\n        elif paren_string[i] == \")\":\n            if paren_count == 0:\n                raise Exception(\"Invalid input string\")\n            paren_count -= 1\n            if paren_count == 0:\n                max_paren_count_index_stack = paren_stack.pop()\n                max_paren_count_index = max_paren_count_index_stack.pop()\n                max_paren_count = max_paren_count_index_stack.pop()\n        i += 1\n    return max_paren_count_index",
    "    if paren_string == \"\" then return []\n    result = []\n    paren_stack = [0]\n    for i in range(0, len(paren_string)):\n        if paren_string[i] == \" \":\n            continue\n        if paren_string[i] == \"(\":\n            paren_stack.append(0)\n        elif paren_string[i] == \")\":\n            if len(paren_stack) == 0:\n                raise Exception(\"Mismatched parentheses\")\n            paren_stack.pop()\n        else:\n            raise Exception(\"Invalid character in paren string\")\n        if len(paren_stack) == 0:\n            result.append(i - 1)\n    if len(paren_stack) != 0:\n        raise Exception(\"Mismatched parentheses\")\n    return result",
    "    def parse_parens(paren_string::String)::Vector{Int64}\n        def parse_nested_parens(paren_string::String)::Vector{Int64}\n            def parse_parens(paren_string::String)::Vector{Int64}\n                def parse_nested_parens(paren_string::String)::Vector{Int64}\n                    def parse_parens(paren_string::String)::Vector{Int64}\n                        def parse_nested_parens(paren_string::String)::Vector{Int64}\n                            def parse_parens(paren_string::String)::Vector{Int64}\n                                def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                    def parse_parens(paren_string::String)::Vector{Int64}\n                                        def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                            def parse_parens(paren_string::String)::Vector{Int64}\n                                                def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                    def parse_parens(paren_string::String)::Vector{Int64}\n                                                        def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                            def parse_parens(paren_string::String)::Vector{Int64}\n                                                                def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                                    def parse_parens(paren_string::String)::Vector{Int64}\n                                                                        def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                                            def parse_parens(paren_string::String)::Vector{Int64}\n                                                                                def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                                                    def parse_parens(paren_string::String)::Vector{Int64}\n                                                                                        def parse_nested_paren",
    "    var result:Vector[Int64] = Vector[Int64]()\n    var paren_stack:Vector[Int64] = Vector[Int64]()\n    var paren_count:Int64 = 0\n    var paren_index:Int64 = 0\n    var paren_depth:Int64 = 0\n    var paren_string:String = \"\"\n    var paren_string_index:Int64 = 0\n    var paren_string_length:Int64 = 0\n    var paren_string_length_index:Int64 = 0\n    var paren_string_length_length:Int64 = 0\n    var paren_string_length_length_index:Int64 = 0\n    var paren_string_length_length_length:Int64 = 0\n    var paren_string_length_length_length_index:Int64 = 0\n    var paren_string_length_length_length_length:Int64 = 0\n    var paren_string_length_length_length_length_index:Int64 = 0\n    var paren_string_length_length_length_length_length:Int64 = 0\n    var paren_string_length_length_length_length_length_index:Int64 = 0\n    var paren_string_length_length_length_length_length_length:Int64 = 0\n    var paren_string_length_length_length_length_length_length_index:Int64 = 0\n    var paren_string_length_length_length_length_length_length_length:Int64 = 0\n    var paren_string_length_length_length_length_length_length_length_index:Int64 = 0\n    var paren_string_length_length_length_length_length_length_length_length:Int64 = 0\n    var paren_string_length_length_length_length_length_length_length_length_index:Int64 = 0\n    var paren_string_length_length_length_length_length_length_length_length_length:Int64 = 0\n    var paren_string_length_length_length_length_length_length_length_length_length_index:Int64 = 0\n",
    "    return parse_nested_parens_helper(paren_string, 0, 0)",
    "    return parse_nested_parens_helper(paren_string, 0, 0)",
    "    var i:Int64 = 0\n    var j:Int64 = 0\n    var paren_count:Int64 = 0\n    var max_nesting:Int64 = 0\n    var max_nesting_index:Int64 = 0\n    var paren_stack:List[Int64] = []\n    while i < len(paren_string):\n        if paren_string[i] == \"(\":\n            paren_count += 1\n            paren_stack.append(paren_count)\n        elif paren_string[i] == \")\":\n            paren_count -= 1\n            if paren_count == 0:\n                if max_nesting < paren_stack[len(paren_stack) - 1]:\n                    max_nesting = paren_stack[len(paren_stack) - 1]\n                    max_nesting_index = len(paren_stack) - 1\n                paren_stack.pop()\n        i += 1\n    return max_nesting_index",
    "    var result:Vector[Int64] = Vector[Int64]()\n    var stack:Vector[Int64] = Vector[Int64]()\n    var current_level:Int64 = 0\n    var current_index:Int64 = 0\n    var paren_count:Int64 = 0\n    var paren_stack:Vector[Int64] = Vector[Int64]()\n    var paren_stack_index:Int64 = 0\n    var paren_stack_count:Int64 = 0\n    var paren_stack_index_count:Int64 = 0\n    var paren_stack_count_count:Int64 = 0\n    var paren_stack_count_index:Int64 = 0\n    var paren_stack_count_index_count:Int64 = 0\n    var paren_stack_count_index_count_count:Int64 = 0\n    var paren_stack_count_index_count_index:Int64 = 0\n    var paren_stack_count_index_count_index_count:Int64 = 0\n    var paren_stack_count_index_count_index_index:Int64 = 0\n    var paren_stack_count_index_count_index_index_count:Int64 = 0\n    var paren_stack_count_index_count_index_index_index:Int64 = 0\n    var paren_stack_count_index_count_index_index_index_count:Int64 = 0\n    var paren_stack_count_index_count_index_index_index_index:Int64 = 0\n    var paren_stack_count_index_count_index_index_index_index_count:Int64 = 0\n    var paren_stack_count_index_count_index_index_index_index_index:Int64 = 0\n    var paren_stack_count_index_count_index_index_index_index_index_count:Int64 = 0\n    var paren_stack_count_index_count_index_index_index_index_index_index:Int64 = 0\n    var paren_stack_count_index_count_index_index_index_index_index_index_count:Int64 =",
    "    if paren_string == \"\" then\n        return []\n    else\n        return parse_nested_parens(paren_string[1:]) + [len(paren_string)]",
    "    if paren_string ==\"\":\n        return Vector{Int64}\n    else:\n        return parse_nested_parens(paren_string.substring(1, paren_string.length() - 1)) + [paren_string.length()]",
    "    if paren_string == \"\" then\n        return []\n    else\n        return parse_nested_parens(paren_string[1:]) + [len(paren_string) - 1]",
    "    var result:Vector[Int64] = Vector[Int64]()\n    var stack:Vector[Int64] = Vector[Int64]()\n    var paren_count:Int64 = 0\n    var depth:Int64 = 0\n    var i:Int64 = 0\n    var j:Int64 = 0\n    var paren_count_stack:Vector[Int64] = Vector[Int64]()\n    var depth_stack:Vector[Int64] = Vector[Int64]()\n    var paren_count_stack_index:Int64 = 0\n    var depth_stack_index:Int64 = 0\n    var paren_count_stack_top:Int64 = 0\n    var depth_stack_top:Int64 = 0\n    var paren_count_stack_top_index:Int64 = 0\n    var depth_stack_top_index:Int64 = 0\n    var paren_count_stack_top_top:Int64 = 0\n    var depth_stack_top_top:Int64 = 0\n    var paren_count_stack_top_top_index:Int64 = 0\n    var depth_stack_top_top_index:Int64 = 0\n    var paren_count_stack_top_top_top:Int64 = 0\n    var depth_stack_top_top_top:Int64 = 0\n    var paren_count_stack_top_top_top_index:Int64 = 0\n    var depth_stack_top_top_top_index:Int64 = 0\n    var paren_count_stack_top_top_top_top:Int64 = 0\n    var depth_stack_top_top_top_top:Int64 = 0\n    var paren_count_stack_top_top_top_top_index:Int64 = 0\n    var depth_stack_top_top_top_top_index:Int64 = 0\n    var paren_count_stack_top_top_top_top_top:Int64 = 0\n    var depth_stack_top_top_top_top_index:Int64 = 0\n    var paren_count_stack_top_top_top_top_top:Int64 = 0\n    var depth_",
    "    return parse_nested_parens_aux(paren_string, 0, 0)",
    "    \"\"\"\n    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n    \"\"\"\n    return [len(paren_string.split(\" \")[i].split(\"(\")) - 1 for i in range(len(paren_string.split(\" \")))]",
    "    return parse_nested_parens_aux(paren_string, 0, 0)",
    "    return parse_nested_parens_helper(paren_string, 0)",
    "    \"\"\"\n    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n    \"\"\"\n    return [len(paren_string.split(\" \")[i].split(\"(\")) - 1 for i in range(len(paren_string.split(\" \")))]",
    "    return parse_nested_parens_helper(paren_string, 0, 0)",
    "    def parse_parens(paren_string::String)::Vector{Int64}\n        def parse_group(paren_string::String)::Vector{Int64}\n            def parse_group_inner(paren_string::String)::Vector{Int64}\n                def parse_group_inner_inner(paren_string::String)::Vector{Int64}\n                    def parse_group_inner_inner_inner(paren_string::String)::Vector{Int64}\n                        def parse_group_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                            def parse_group_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                                def parse_group_inner_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                                    def parse_group_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                                        def parse_group_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                                            def parse_group_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                                                def parse_group_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                                                    def parse_group_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                                                        def parse_group_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                                                            def parse_group_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                                                                def parse_group_inner_inner_inner_",
    "    var result:Vector[Int64] = Vector[Int64]()\n    var paren_stack:Vector[Int64] = Vector[Int64]()\n    var paren_count:Int64 = 0\n    var paren_index:Int64 = 0\n    var paren_depth:Int64 = 0\n    var paren_count_stack:Vector[Int64] = Vector[Int64]()\n    var paren_index_stack:Vector[Int64] = Vector[Int64]()\n    var paren_depth_stack:Vector[Int64] = Vector[Int64]()\n    var paren_count_stack_index:Int64 = 0\n    var paren_index_stack_index:Int64 = 0\n    var paren_depth_stack_index:Int64 = 0\n    var paren_count_stack_index_stack:Vector[Int64] = Vector[Int64]()\n    var paren_index_stack_index_stack:Vector[Int64] = Vector[Int64]()\n    var paren_depth_stack_index_stack:Vector[Int64] = Vector[Int64]()\n    var paren_count_stack_index_stack_index:Int64 = 0\n    var paren_index_stack_index_stack_index:Int64 = 0\n    var paren_depth_stack_index_stack_index:Int64 = 0\n    var paren_count_stack_index_stack_index_stack:Vector[Int64] = Vector[Int64]()\n    var paren_index_stack_index_stack_index_stack:Vector[Int64] = Vector[Int64]()\n    var paren_depth_stack_index_stack_index_stack:Vector[Int64] = Vector[Int64]()\n    var paren_count_stack_index_stack_index_stack_index:Int64 = 0\n    var paren_index_stack_index_stack_index_stack_index:Int64 = 0\n    var paren_depth_stack_index_stack_index_stack_index:Int64 = 0\n    var paren_count_stack_index_stack_index_stack_index_stack:Vector[Int64",
    "    def parse_paren(paren_string::String)::Vector{Int64}\n        def parse_bracket(bracket_string::String)::Vector{Int64}\n            def parse_bracket(bracket_string::String)::Vector{Int64}\n                def parse_bracket(bracket_string::String)::Vector{Int64}\n                    def parse_bracket(bracket_string::String)::Vector{Int64}\n                        def parse_bracket(bracket_string::String)::Vector{Int64}\n                            def parse_bracket(bracket_string::String)::Vector{Int64}\n                                def parse_bracket(bracket_string::String)::Vector{Int64}\n                                    def parse_bracket(bracket_string::String)::Vector{Int64}\n                                        def parse_bracket(bracket_string::String)::Vector{Int64}\n                                            def parse_bracket(bracket_string::String)::Vector{Int64}\n                                                def parse_bracket(bracket_string::String)::Vector{Int64}\n                                                    def parse_bracket(bracket_string::String)::Vector{Int64}\n                                                        def parse_bracket(bracket_string::String)::Vector{Int64}\n                                                            def parse_bracket(bracket_string::String)::Vector{Int64}\n                                                                def parse_bracket(bracket_string::String)::Vector{Int64}\n                                                                    def parse_bracket(bracket_string::String)::Vector{Int64}\n                                                                        def parse_bracket(bracket_string::String)::Vector{Int64}\n                                                                            def parse_bracket(bracket_string::String)::Vector{Int64}\n                                                                                def parse_bracket(bracket_string::String)::Vector{Int64}\n                                                                                        def parse_bracket(bracket_string::String)::Vector{Int64}\n                                                                                            def parse_bracket(bracket_string::String)::Vector{Int",
    "    if paren_string == \"\" then\n        return []\n    else\n        return parse_nested_parens(paren_string[1:]) + [len(paren_string)]",
    "    return parse_nested_parens_helper(paren_string, 0, 0)",
    "    return parse_nested_parens_helper(paren_string, 0, 0)",
    "    return parse_nested_parens_aux(paren_string, 0, 0)",
    "    def parse_paren(paren_string::String)::Int64\n        def parse_paren_level(paren_string::String)::Int64\n            def parse_paren_level_inner(paren_string::String)::Int64\n                def parse_paren_level_inner_inner(paren_string::String)::Int64\n                    def parse_paren_level_inner_inner_inner(paren_string::String)::Int64\n                        def parse_paren_level_inner_inner_inner_inner(paren_string::String)::Int64\n                            def parse_paren_level_inner_inner_inner_inner_inner(paren_string::String)::Int64\n                                def parse_paren_level_inner_inner_inner_inner_inner_inner(paren_string::String)::Int64\n                                    def parse_paren_level_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Int64\n                                        def parse_paren_level_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Int64\n                                            def parse_paren_level_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Int64\n                                                def parse_paren_level_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Int64\n                                                    def parse_paren_level_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Int64\n                                                        def parse_paren_level_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Int64\n                                                            def parse_paren_level_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Int64\n                                                                def parse_paren_level_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(",
    "    \"\"\"\n    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n    \"\"\"\n    return [len(paren_string.split(\" \")[i].split(\"(\")[1]) for i in range(len(paren_string.split(\" \")))]",
    "    def parse_parens(paren_string::String)::String -> Int64\n        def parse_paren(paren_string::String)::String -> Int64\n            def parse_paren_inner(paren_string::String)::String -> Int64\n                def parse_paren_inner_inner(paren_string::String)::String -> Int64\n                    def parse_paren_inner_inner_inner(paren_string::String)::String -> Int64\n                        def parse_paren_inner_inner_inner_inner(paren_string::String)::String -> Int64\n                            def parse_paren_inner_inner_inner_inner_inner(paren_string::String)::String -> Int64\n                                def parse_paren_inner_inner_inner_inner_inner_inner(paren_string::String)::String -> Int64\n                                    def parse_paren_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::String -> Int64\n                                        def parse_paren_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::String -> Int64\n                                            def parse_paren_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::String -> Int64\n                                                def parse_paren_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::String -> Int64\n                                                    def parse_paren_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::String -> Int64\n                                                        def parse_paren_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::String -> Int64\n                                                            def parse_paren_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::String -> Int64\n                                                                def parse_paren_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner",
    "    if paren_string == \"\" then\n        return []\n    else\n        return parse_nested_parens(paren_string[1:]) + [len(paren_string)]",
    "    if paren_string == \"\" then\n        return []\n    else\n        return parse_nested_parens(paren_string[1:]) + [len(paren_string)]",
    "    def parse_nested_parens(paren_string::String)::Vector{Int64} \n        def parse_nested_parens(paren_string::String)::Vector{Int64} \n            def parse_nested_parens(paren_string::String)::Vector{Int64} \n                def parse_nested_parens(paren_string::String)::Vector{Int64} \n                    def parse_nested_parens(paren_string::String)::Vector{Int64} \n                        def parse_nested_parens(paren_string::String)::Vector{Int64} \n                            def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                    def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                        def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                            def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                                def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                                    def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                                        def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                                            def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                                                def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                                                    def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                                                        def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                                                            def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                                                                def parse_nested_parens",
    "    if paren_string == \"\" then return []\n    group_count = count_groups(paren_string)\n    result = [0] * group_count\n    for i in range(0, group_count):\n        result[i] = count_nested_parens(paren_string, i)\n    return result",
    "    \"\"\"\n    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n    \"\"\"\n    return [len(paren_string.split(\" \")[i]) - 1 for i in range(len(paren_string.split(\" \")))]",
    "    var i = 0\n    var result = []\n    while i < len(paren_string):\n        var paren_count = 0\n        var j = i\n        while j < len(paren_string) and paren_string[j] == '(' and paren_count < paren_string[i]:\n            paren_count += 1\n            j += 1\n        if paren_count == paren_string[i]:\n            result.append(paren_count)\n            i = j\n        else:\n            break\n    return result",
    "    return parse_nested_parens_aux(paren_string, 0, 0)",
    "    if paren_string == \"\" then return []\n    group_count = count_groups(paren_string)\n    result = []\n    for i in range(0, group_count):\n        group_string = get_group(paren_string, i)\n        result.append(count_nested_parens(group_string))\n    return result",
    "    \"\"\"\n    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n    \"\"\"\n    return [len(paren_string.split(\" \")[i].split(\"(\")) - 1 for i in range(len(paren_string.split(\" \")))]",
    "    return parse_nested_parens_aux(paren_string, 0)",
    "    if paren_string == \"\" then\n        return []\n    else\n        return parse_nested_parens(paren_string[1:]) + [len(paren_string)]",
    "    if len(paren_string) == 0:\n        return Vector[Int64]\n    \n    # Find the deepest level of nesting\n    max_nesting = 0\n    for i in range(0, len(paren_string)):\n        if paren_string[i] == '(':\n            nesting = 1\n            for j in range(i + 1, len(paren_string)):\n                if paren_string[j] == '(':\n                    nesting += 1\n                elif paren_string[j] == ')':\n                    nesting -= 1\n                    if nesting == 0:\n                        break\n            if nesting > max_nesting:\n                max_nesting = nesting\n    \n    # Return the deepest level of nesting\n    return Vector[Int64]([max_nesting] * len(paren_string))",
    "    var result:Vector[Int64] = Vector[Int64](0)\n    var paren_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_count:Int64 = 0\n    var paren_index:Int64 = 0\n    var paren_char:Char = ' '\n    var paren_count_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_count_stack_index:Int64 = 0\n    var paren_count_stack_size:Int64 = 0\n    var paren_count_stack_max:Int64 = 0\n    var paren_count_stack_max_index:Int64 = 0\n    var paren_count_stack_max_size:Int64 = 0\n    var paren_count_stack_max_max:Int64 = 0\n    var paren_count_stack_max_max_index:Int64 = 0\n    var paren_count_stack_max_max_size:Int64 = 0\n    var paren_count_stack_max_max_max:Int64 = 0\n    var paren_count_stack_max_max_max_index:Int64 = 0\n    var paren_count_stack_max_max_max_size:Int64 = 0\n    var paren_count_stack_max_max_max_max:Int64 = 0\n    var paren_count_stack_max_max_max_max_index:Int64 = 0\n    var paren_count_stack_max_max_max_max_size:Int64 = 0\n    var paren_count_stack_max_max_max_max_max:Int64 = 0\n    var paren_count_stack_max_max_max_max_max_index:Int64 = 0\n    var paren_count_stack_max_max_max_max_max_size:Int64 = 0\n    var paren_count_stack_max_max_max_max_max_max:Int64 = 0\n    var paren_count_stack_max_max_max_max_max_max_index:Int64 = 0\n    var paren_count_stack",
    "    \"\"\"\n    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n    \"\"\"\n    return [len(paren_string.split(\" \")[i]) for i in range(len(paren_string.split(\" \")))]",
    "    \"\"\"\n    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n    \"\"\"\n    return [len(paren_string.split(\" \")[i].split(\"(\")[1].split(\")\")[0]) for i in range(len(paren_string.split(\" \")))]",
    "    return parse_nested_parens_helper(paren_string, 0)",
    "    return parse_nested_parens_aux(paren_string, 0)",
    "    def parse_parens(paren_string::String)::Vector{Int64}\n        def parse_group(paren_string::String)::Vector{Int64}\n            def parse_group_inner(paren_string::String)::Vector{Int64}\n                def parse_group_inner_inner(paren_string::String)::Vector{Int64}\n                    def parse_group_inner_inner_inner(paren_string::String)::Vector{Int64}\n                        def parse_group_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                            def parse_group_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                                def parse_group_inner_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                                    return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",
    "    var i:Int64 = 0\n    var j:Int64 = 0\n    var paren_count:Int64 = 0\n    var max_nesting:Int64 = 0\n    var paren_stack:Vector[Int64] = Vector[Int64]()\n    while i < len(paren_string):\n        if paren_string[i] == \" \":\n            i += 1\n            continue\n        if paren_string[i] == \"(\":\n            paren_count += 1\n            paren_stack.append(paren_count)\n            i += 1\n            continue\n        if paren_string[i] == \")\":\n            paren_count -= 1\n            if paren_count == 0:\n                max_nesting = max(max_nesting, paren_stack.pop())\n            i += 1\n            continue\n    return max_nesting",
    "    var result = []\n    var paren_stack = []\n    for i in range(0, len(paren_string)):\n        if paren_string[i] == '(':\n            paren_stack.append(i)\n        elif paren_string[i] == ')':\n            if len(paren_stack) == 0:\n                result.append(i)\n            else:\n                result.append(paren_stack.pop())\n    return result",
    "    def parse_parens(paren_string::String)::Vector{Int64}\n        def parse_paren(paren_string::String)::Vector{Int64}\n            def parse_paren_inner(paren_string::String)::Vector{Int64}\n                def parse_paren_inner_inner(paren_string::String)::Vector{Int64}\n                    def parse_paren_inner_inner_inner(paren_string::String)::Vector{Int64}\n                        def parse_paren_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                            def parse_paren_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                                def parse_paren_inner_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                                    def parse_paren_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                                        def parse_paren_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                                            def parse_paren_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                                                return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",
    "    var result:Vector[Int64] = Vector[Int64]()\n    var stack:Vector[Int64] = Vector[Int64]()\n    var i:Int64 = 0\n    while i < len(paren_string):\n        if paren_string[i] == \"(\":\n            stack.add(i)\n        elif paren_string[i] == \")\":\n            if stack.size == 0:\n                raise Exception(\"Mismatched parentheses\")\n            stack.pop()\n            if stack.size == 0:\n                result.add(i - stack.last)\n        i += 1\n    return result",
    "    var result:Vector[Int64] = Vector[Int64]()\n    var paren_stack:Vector[Int64] = Vector[Int64]()\n    var paren_count:Int64 = 0\n    var paren_index:Int64 = 0\n    var paren_char:Char = \"\"\n    var paren_count_stack:Vector[Int64] = Vector[Int64]()\n    var paren_count_stack_index:Int64 = 0\n    var paren_count_stack_count:Int64 = 0\n    var paren_count_stack_count_stack:Vector[Int64] = Vector[Int64]()\n    var paren_count_stack_count_stack_index:Int64 = 0\n    var paren_count_stack_count_stack_count:Int64 = 0\n    var paren_count_stack_count_stack_count_stack:Vector[Int64] = Vector[Int64]()\n    var paren_count_stack_count_stack_count_stack_index:Int64 = 0\n    var paren_count_stack_count_stack_count_stack_count:Int64 = 0\n    var paren_count_stack_count_stack_count_stack_count_stack:Vector[Int64] = Vector[Int64]()\n    var paren_count_stack_count_stack_count_stack_count_stack_index:Int64 = 0\n    var paren_count_stack_count_stack_count_stack_count_stack_count:Int64 = 0\n    var paren_count_stack_count_stack_count_stack_count_stack_count_stack:Vector[Int64] = Vector[Int64]()\n    var paren_count_stack_count_stack_count_stack_count_stack_count_stack_index:Int64 = 0\n    var paren_count_stack_count_stack_count_stack_count_stack_count_stack_count:Int64 = 0\n    var paren_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack:Vector[Int64] = Vector[Int64]()\n    var paren_count_stack",
    "    def parse_parens(paren_string::String)::Vector{Int64}\n        def parse_nested_parens(paren_string::String)::Vector{Int64}\n            def parse_parens(paren_string::String)::Vector{Int64}\n                def parse_nested_parens(paren_string::String)::Vector{Int64}\n                    def parse_parens(paren_string::String)::Vector{Int64}\n                        def parse_nested_parens(paren_string::String)::Vector{Int64}\n                            def parse_parens(paren_string::String)::Vector{Int64}\n                                def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                    def parse_parens(paren_string::String)::Vector{Int64}\n                                        def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                            def parse_parens(paren_string::String)::Vector{Int64}\n                                                def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                    def parse_parens(paren_string::String)::Vector{Int64}\n                                                        def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                            def parse_parens(paren_string::String)::Vector{Int64}\n                                                                def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                                    def parse_parens(paren_string::String)::Vector{Int64}\n                                                                        def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                                            def parse_parens(paren_string::String)::Vector{Int64}\n                                                                                def parse_nested_parens(paren_string::String)::Vector{Int64}\n                                                                                        def parse_parens(paren_string::String)::Vector{Int64}\n                                                                                            def parse_nested_",
    "    if paren_string ==\"\" then\n        return []\n    else\n        return parse_nested_parens(paren_string[1..]) + [len(paren_string)]",
    "    if paren_string = \"\" then return []\n    result = []\n    i = 0\n    while i < len(paren_string) do\n        if paren_string[i] = \"(\" then\n            result = result + [0]\n            i = i + 1\n            while i < len(paren_string) and paren_string[i] != \")\" do\n                i = i + 1\n            result[-1] = result[-1] + 1\n            i = i + 1\n        else if paren_string[i] = \")\" then\n            result[-1] = result[-1] - 1\n            if result[-1] < 0 then raise Exception(\"Invalid parentheses\")\n            i = i + 1\n        else i = i + 1\n    end\n    return result",
    "    def parse_parens(paren_string::String)::Vector{Int64}\n        def parse_paren(paren_string::String)::Vector{Int64}\n            def parse_paren_inner(paren_string::String)::Vector{Int64}\n                def parse_paren_inner_inner(paren_string::String)::Vector{Int64}\n                    def parse_paren_inner_inner_inner(paren_string::String)::Vector{Int64}\n                        return [0, 0, 0]\n                    return [0, 0, 1]\n                return [0, 1, 0]\n            return [1, 0, 0]\n        return [0, 0, 0]\n    return parse_parens(paren_string)",
    "    def parse_paren(paren_string::String)::Int64\n        def parse_paren_level(paren_string::String)::Int64\n            def parse_paren_level_inner(paren_string::String)::Int64\n                def parse_paren_level_inner_inner(paren_string::String)::Int64\n                    def parse_paren_level_inner_inner_inner(paren_string::String)::Int64\n                        return 1\n                    return 2\n                return 3\n            return 4\n        return 5\n    return Vector{Int64}(parse_paren(paren_string))",
    "    var result:Vector[Int64] = Vector.empty\n    var paren_stack:Vector[Int64] = Vector.empty\n    var paren_count:Int64 = 0\n    var paren_depth:Int64 = 0\n    var paren_count_stack:Vector[Int64] = Vector.empty\n    var paren_depth_stack:Vector[Int64] = Vector.empty\n    var paren_stack_count:Int64 = 0\n    var paren_stack_depth:Int64 = 0\n    var paren_count_stack_count:Int64 = 0\n    var paren_count_stack_depth:Int64 = 0\n    var paren_stack_count_stack:Vector[Int64] = Vector.empty\n    var paren_stack_depth_stack:Vector[Int64] = Vector.empty\n    var paren_stack_count_stack_count:Int64 = 0\n    var paren_stack_depth_stack_depth:Int64 = 0\n    var paren_stack_count_stack_depth:Int64 = 0\n    var paren_stack_depth_stack_count:Int64 = 0\n    var paren_stack_depth_stack_depth_stack:Vector[Int64] = Vector.empty\n    var paren_stack_depth_stack_count_stack:Vector[Int64] = Vector.empty\n    var paren_stack_depth_stack_depth_stack_count:Int64 = 0\n    var paren_stack_depth_stack_depth_stack_depth:Int64 = 0\n    var paren_stack_depth_stack_count_stack_count:Int64 = 0\n    var paren_stack_depth_stack_depth_stack_depth_stack:Vector[Int64] = Vector.empty\n    var paren_stack_depth_stack_count_stack_count_stack:Vector[Int64] = Vector.empty\n    var paren_stack_depth_stack_depth_stack_depth_stack_count:Int64 = 0\n    var paren_stack_depth_stack_depth_stack_depth_stack_depth:Int64 = 0\n    var paren_stack_depth_stack_count_stack_count_stack:",
    "    def parse_paren(paren_string::String)::Vector{Int64} \n        def parse_nested_paren(paren_string::String)::Vector{Int64} \n            def parse_nested_paren(paren_string::String)::Vector{Int64} \n                def parse_nested_paren(paren_string::String)::Vector{Int64} \n                    def parse_nested_paren(paren_string::String)::Vector{Int64} \n                        def parse_nested_paren(paren_string::String)::Vector{Int64} \n                            def parse_nested_paren(paren_string::String)::Vector{Int64} \n                                def parse_nested_paren(paren_string::String)::Vector{Int64} \n                                    def parse_nested_paren(paren_string::String)::Vector{Int64} \n                                        def parse_nested_paren(paren_string::String)::Vector{Int64} \n                                            def parse_nested_paren(paren_string::String)::Vector{Int64} \n                                                def parse_nested_paren(paren_string::String)::Vector{Int64} \n                                                    def parse_nested_paren(paren_string::String)::Vector{Int64} \n                                                        def parse_nested_paren(paren_string::String)::Vector{Int64} \n                                                            def parse_nested_paren(paren_string::String)::Vector{Int64} \n                                                                def parse_nested_paren(paren_string::String)::Vector{Int64} \n                                                                    def parse_nested_paren(paren_string::String)::Vector{Int64} \n                                                                        def parse_nested_paren(paren_string::String)::Vector{Int64} \n                                                                            def parse_nested_paren(paren_string::String)::Vector{Int64} \n                                                                                def parse_nested_paren(paren_string::String)::Vector{Int64} \n                                                                                    def parse_n",
    "    var i:Int64 = 0\n    var result:Vector{Int64} = Vector.empty\n    while i < paren_string.length {\n        var paren_count:Int64 = 0\n        var paren_char:Char = paren_string[i]\n        while i < paren_string.length {\n            if paren_string[i] == paren_char {\n                paren_count += 1\n            } else if paren_string[i] == \" \" {\n                break\n            } else {\n                i += 1\n            }\n        }\n        result = result.append(paren_count)\n        i += 1\n    }\n    return result",
    "    if paren_string == \"\" then return []\n    group_count = count_parens(paren_string)\n    result = [0] * group_count\n    for i in range(0, group_count):\n        result[i] = count_nested_parens(paren_string, i)\n    return result",
    "    var i = 0\n    var result = []\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            result.append(parse_nested_parens(paren_string[i:]))\n            i = 0\n        else:\n            i += 1\n    return result",
    "    var result:Vector{Int64} = Vector{Int64}()\n    var paren_stack:Vector{Int64} = Vector{Int64}()\n    var paren_count:Int64 = 0\n    var paren_stack_index:Int64 = 0\n    var paren_stack_top:Int64 = 0\n    var paren_stack_top_index:Int64 = 0\n    var paren_stack_top_count:Int64 = 0\n    var paren_stack_top_count_index:Int64 = 0\n    var paren_stack_top_count_count:Int64 = 0\n    var paren_stack_top_count_count_index:Int64 = 0\n    var paren_stack_top_count_count_count:Int64 = 0\n    var paren_stack_top_count_count_count_index:Int64 = 0\n    var paren_stack_top_count_count_count_count:Int64 = 0\n    var paren_stack_top_count_count_count_count_index:Int64 = 0\n    var paren_stack_top_count_count_count_count_count:Int64 = 0\n    var paren_stack_top_count_count_count_count_count_index:Int64 = 0\n    var paren_stack_top_count_count_count_count_count_count:Int64 = 0\n    var paren_stack_top_count_count_count_count_count_count_index:Int64 = 0\n    var paren_stack_top_count_count_count_count_count_count_count:Int64 = 0\n    var paren_stack_top_count_count_count_count_count_count_count_index:Int64 = 0\n    var paren_stack_top_count_count_count_count_count_count_count_count:Int64 = 0\n    var paren_stack_top_count_count_count_count_count_count_count_count_index:Int64 = 0\n    var paren_stack_top_count_count_count_count_count_count_count_count_count:Int64 = 0\n    var p",
    "    var i = 0\n    var paren_stack = []\n    var paren_count = 0\n    var max_paren_count = 0\n    while i < len(paren_string):\n        if paren_string[i] == \" \":\n            i += 1\n            continue\n        if paren_string[i] == \"(\":\n            paren_stack.append(paren_count)\n            paren_count += 1\n            i += 1\n            continue\n        if paren_string[i] == \")\":\n            paren_count -= 1\n            if paren_stack[-1] == paren_count:\n                max_paren_count = max(max_paren_count, paren_count)\n                paren_stack.pop()\n            i += 1\n            continue\n    return max_paren_count",
    "    return parse_nested_parens_helper(paren_string, 0)",
    "    def parse_parens(paren_string::String)::String -> Int64\n        def parse_paren(paren_string::String)::String -> Int64\n            def parse_paren_pair(paren_string::String)::String -> Int64\n                def parse_paren_pair_pair(paren_string::String)::String -> Int64\n                    def parse_paren_pair_pair_pair(paren_string::String)::String -> Int64\n                        def parse_paren_pair_pair_pair_pair(paren_string::String)::String -> Int64\n                            def parse_paren_pair_pair_pair_pair_pair(paren_string::String)::String -> Int64\n                                def parse_paren_pair_pair_pair_pair_pair_pair(paren_string::String)::String -> Int64\n                                    def parse_paren_pair_pair_pair_pair_pair_pair_pair(paren_string::String)::String -> Int64\n                                        def parse_paren_pair_pair_pair_pair_pair_pair_pair_pair(paren_string::String)::String -> Int64\n                                            def parse_paren_pair_pair_pair_pair_pair_pair_pair_pair(paren_string::String)::String -> Int64\n                                                def parse_paren_pair_pair_pair_pair_pair_pair_pair_pair(paren_string::String)::String -> Int64\n                                                    def parse_paren_pair_pair_pair_pair_pair_pair_pair_pair(paren_string::String)::String -> Int64\n                                                        def parse_paren_pair_pair_pair_pair_pair_pair_pair_pair(paren_string::String)::String -> Int64\n                                                            def parse_paren_pair_pair_pair_pair_pair_pair_pair_pair(paren_string::String)::String -> Int64\n                                                                def parse_paren_pair_pair_pair_pair_pair_pair_pair_pair(paren_string::String)::String -> Int64\n                                                                    def parse_paren_pair_pair_pair_pair_pair_pair_pair",
    "    var result = Vector[Int64]\n    var stack = Vector[Int64]\n    var paren_count = 0\n    var paren_stack_count = 0\n    var paren_stack = Vector[Int64]\n    var paren_stack_index = 0\n    var paren_stack_count = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index = 0\n    var paren_stack_index",
    "    return parse_nested_parens_helper(paren_string, 0)",
    "    if paren_string == \"\" then\n        return []\n    else\n        return parse_nested_parens(paren_string[1:]) + [len(paren_string)]",
    "    var i = 0\n    var result = []\n    while i < paren_string.length:\n        var paren_count = 0\n        var j = i\n        while j < paren_string.length and paren_string[j] == \" \":\n            j += 1\n        while j < paren_string.length and paren_string[j] != \" \":\n            if paren_string[j] == \"(\":\n                paren_count += 1\n            if paren_string[j] == \")\":\n                paren_count -= 1\n            j += 1\n        if paren_count == 0:\n            result.append(paren_count)\n        i = j\n    return result",
    "    var result:Vector[Int64] = Vector[Int64](0)\n    var paren_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_count:Int64 = 0\n    var i:Int64 = 0\n    var j:Int64 = 0\n    var paren_count_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_count_stack_top:Int64 = 0\n    var paren_count_stack_bottom:Int64 = 0\n    var paren_count_stack_top_prev:Int64 = 0\n    var paren_count_stack_bottom_prev:Int64 = 0\n    var paren_count_stack_top_prev_prev:Int64 = 0\n    var paren_count_stack_bottom_prev_prev:Int64 = 0\n    var paren_count_stack_top_prev_prev_prev:Int64 = 0\n    var paren_count_stack_bottom_prev_prev_prev:Int64 = 0\n    var paren_count_stack_top_prev_prev_prev_prev:Int64 = 0\n    var paren_count_stack_bottom_prev_prev_prev_prev:Int64 = 0\n    var paren_count_stack_top_prev_prev_prev_prev_prev:Int64 = 0\n    var paren_count_stack_bottom_prev_prev_prev_prev_prev:Int64 = 0\n    var paren_count_stack_top_prev_prev_prev_prev_prev_prev:Int64 = 0\n    var paren_count_stack_bottom_prev_prev_prev_prev_prev_prev:Int64 = 0\n    var paren_count_stack_top_prev_prev_prev_prev_prev_prev_prev:Int64 = 0\n    var paren_count_stack_bottom_prev_prev_prev_prev_prev_prev_prev:Int64 = 0\n    var paren_count_stack_top_prev_prev_prev_prev_prev_prev_prev_prev:Int64 = 0\n    var paren_count_stack_bottom_prev_prev_prev_prev_prev",
    "    if paren_string == \"\" then\n        return []\n    else\n        return parse_nested_parens(paren_string[1:]) + [len(paren_string)]",
    "    \"\"\"\n    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n    \"\"\"\n    return [len(paren_string.split(\" \")[i]) - 1 for i in range(len(paren_string.split(\" \")))]",
    "    return parse_nested_parens_helper(paren_string, 0)",
    "    \"\"\"\n    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n    \"\"\"\n    return [len(paren_string.split(\" \")[i].split(\"(\")) - 1 for i in range(len(paren_string.split(\" \")))]",
    "    def parse_nested_parens(paren_string::String)::Vector{Int64} \n        def parse_nested_parens(paren_string::String)::Vector{Int64} \n            def parse_nested_parens(paren_string::String)::Vector{Int64} \n                def parse_nested_parens(paren_string::String)::Vector{Int64} \n                    def parse_nested_parens(paren_string::String)::Vector{Int64} \n                        def parse_nested_parens(paren_string::String)::Vector{Int64} \n                            def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                    def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                        def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                            def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                                def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                                    def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                                        def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                                            def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                                                def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                                                    def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                                                        def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                                                            def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                                                                def parse_nested_parens",
    "    var result:Vector[Int64] = Vector[Int64](0)\n    var paren_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_count:Int64 = 0\n    var paren_level:Int64 = 0\n    var paren_count_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_level_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_count_stack_index:Int64 = 0\n    var paren_level_stack_index:Int64 = 0\n    var paren_count_stack_index_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_level_stack_index_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_count_stack_index_stack_index:Int64 = 0\n    var paren_level_stack_index_stack_index:Int64 = 0\n    var paren_count_stack_index_stack_index_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_level_stack_index_stack_index_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_count_stack_index_stack_index_stack_index:Int64 = 0\n    var paren_level_stack_index_stack_index_stack_index:Int64 = 0\n    var paren_count_stack_index_stack_index_stack_index_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_level_stack_index_stack_index_stack_index_stack:Vector[Int64] = Vector[Int64](0)\n    var paren_count_stack_index_stack_index_stack_index_stack_index:Int64 = 0\n    var paren_level_stack_index_stack_index_stack_index_stack_index:Int64 = 0\n    var paren_count_stack_index_stack_index_stack_index_stack_index_stack:Vector[Int64] = Vector[Int64](0)\n    var",
    "    if paren_string == \"\" then return Vector{}\n    result = Vector{}\n    paren_stack = Vector{}\n    for i in range(0, len(paren_string)):\n        if paren_string[i] == \" \":\n            continue\n        if paren_string[i] == \"(\":\n            paren_stack.append(i)\n        elif paren_string[i] == \")\":\n            if len(paren_stack) == 0:\n                raise Exception(\"Mismatched parentheses\")\n            result.append(len(paren_stack) - 1)\n            paren_stack.pop()\n        else:\n            raise Exception(\"Invalid character in parens string\")\n    if len(paren_stack) > 0:\n        raise Exception(\"Mismatched parentheses\")\n    return result",
    "    def parse_nested_parens(paren_string::String)::Vector{Int64} \n        def parse_nested_parens(paren_string::String)::Vector{Int64} \n            def parse_nested_parens(paren_string::String)::Vector{Int64} \n                def parse_nested_parens(paren_string::String)::Vector{Int64} \n                    def parse_nested_parens(paren_string::String)::Vector{Int64} \n                        def parse_nested_parens(paren_string::String)::Vector{Int64} \n                            def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                    def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                        def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                            def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                                def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                                    def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                                        def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                                            def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                                                def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                                                    def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                                                        def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                                                            def parse_nested_parens(paren_string::String)::Vector{Int64} \n                                                                                def parse_nested_parens",
    "    def parse_parens(paren_string::String)::Vector{Int64}\n        def parse_paren(paren_string::String)::Vector{Int64}\n            def parse_paren_inner(paren_string::String)::Vector{Int64}\n                def parse_paren_inner_inner(paren_string::String)::Vector{Int64}\n                    def parse_paren_inner_inner_inner(paren_string::String)::Vector{Int64}\n                        def parse_paren_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                            return [0, 0, 0, 0]\n                        return [0, 0, 0, 1]\n                    return [0, 0, 1, 0]\n                return [0, 1, 0, 0]\n            return [1, 0, 0, 0]\n        return [0, 0, 0, 0]\n    return parse_parens(paren_string)",
    "    return parse_nested_parens_helper(paren_string, 0)",
    "    return parse_nested_parens_helper(paren_string, 0)",
    "    def parse_parens(paren_string::String)::String -> Int64\n        def parse_paren(paren_string::String)::String -> Int64\n            def parse_paren_pair(paren_string::String)::String -> Int64\n                def parse_paren_pair_pair(paren_string::String)::String -> Int64\n                    def parse_paren_pair_pair_pair(paren_string::String)::String -> Int64\n                        def parse_paren_pair_pair_pair_pair(paren_string::String)::String -> Int64\n                            def parse_paren_pair_pair_pair_pair_pair(paren_string::String)::String -> Int64\n                                def parse_paren_pair_pair_pair_pair_pair_pair(paren_string::String)::String -> Int64\n                                    return 0\n                            return 0\n                        return 0\n                    return 0\n                return 0\n            return 0\n        return 0\n    return Vector.map(parse_paren, paren_string)",
    "    return parse_nested_parens_aux(paren_string, 0, 0)",
    "    return parse_nested_parens_aux(paren_string, 0)",
    "    if len(paren_string) == 0:\n        return []\n    else:\n        return parse_nested_parens(paren_string[1:]) + [len(paren_string) - 1]",
    "    return parse_nested_parens_helper(paren_string, 0, 0)",
    "    if len(paren_string) == 0:\n        return Vector{Int64}\n    else:\n        return parse_nested_parens(paren_string[1:]) + [len(paren_string) - 1]",
    "    def parse_parens(paren_string::String)::Vector{Int64}\n        def parse_paren(paren_string::String)::Vector{Int64}\n            def parse_paren_inner(paren_string::String)::Vector{Int64}\n                def parse_paren_inner_inner(paren_string::String)::Vector{Int64}\n                    def parse_paren_inner_inner_inner(paren_string::String)::Vector{Int64}\n                        return 1\n                    return 0\n                return 1\n            return 0\n        return 1\n    return parse_parens(paren_string)",
    "    def parse_parens(paren_string::String)::Vector{Int64}\n        def parse_group(paren_string::String)::Vector{Int64}\n            def parse_group_inner(paren_string::String)::Vector{Int64}\n                def parse_group_inner_inner(paren_string::String)::Vector{Int64}\n                    def parse_group_inner_inner_inner(paren_string::String)::Vector{Int64}\n                        def parse_group_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                            def parse_group_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                                def parse_group_inner_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                                    def parse_group_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                                        def parse_group_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                                            def parse_group_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                                                def parse_group_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                                                    def parse_group_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                                                        def parse_group_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                                                            def parse_group_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(paren_string::String)::Vector{Int64}\n                                                                def parse_group_inner_inner_inner_",
    "    return parse_nested_parens_helper(paren_string, 0, 0)",
    "    def parse_parens(paren_string::String)::String\n        def parse_paren(paren_string::String)::String\n            def parse_paren_pair(paren_string::String)::String\n                def parse_paren_pair_pair(paren_string::String)::String\n                    def parse_paren_pair_pair_pair(paren_string::String)::String\n                        def parse_paren_pair_pair_pair_pair(paren_string::String)::String\n                            def parse_paren_pair_pair_pair_pair_pair(paren_string::String)::String\n                                def parse_paren_pair_pair_pair_pair_pair_pair(paren_string::String)::String\n                                    def parse_paren_pair_pair_pair_pair_pair_pair_pair(paren_string::String)::String\n                                        def parse_paren_pair_pair_pair_pair_pair_pair_pair_pair(paren_string::String)::String\n                                            def parse_paren_pair_pair_pair_pair_pair_pair_pair_pair_pair(paren_string::String)::String\n                                                def parse_paren_pair_pair_pair_pair_pair_pair_pair_pair_pair(paren_string::String)::String\n                                                    def parse_paren_pair_pair_pair_pair_pair_pair_pair_pair_pair(paren_string::String)::String\n                                                        def parse_paren_pair_pair_pair_pair_pair_pair_pair_pair_pair(paren_string::String)::String\n                                                            def parse_paren_pair_pair_pair_pair_pair_pair_pair_pair_pair(paren_string::String)::String\n                                                                def parse_paren_pair_pair_pair_pair_pair_pair_pair_pair_pair(paren_string::String)::String\n                                                                    def parse_paren_pair_pair_pair_pair_pair_pair_pair_pair_pair(paren_string::String)::String\n                                                                        def parse_paren_pair_pair_pair_pair_pair_pair_pair"
  ],
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ]
}