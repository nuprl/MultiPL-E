{
  "name": "HumanEval_132_is_nested",
  "language": "jl",
  "prompt": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n",
  "tests": "using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "results": [
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[len(string) - 1] = \"]\" then return false\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    return is_nested(string[1:len(string) - 1]) or is_nested(string[1:len(string) - 1] + \"]\")\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg7xn9nqz.jl:20\nin expression starting at /tmp/tmpg7xn9nqz.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    for i in range(1, len(string)):\n        if string[i] = \"]\" and string[i-1] = \"[\":\n            return true\n        if string[i] = \"[\" and string[i-1] = \"]\":\n            return false\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6_anbydf.jl:20\nin expression starting at /tmp/tmp6_anbydf.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string = \"]\" then return false\n    if string = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[1] = \"]\" then return false\n    if string[1] = \"[\" then return true\n    if string[1] = \"]\" then return false\n    if string[2] = \"]\" then return false\n    if string[2] = \"[\" then return true\n    if string[2] = \"]\" then return false\n    if string[3] = \"]\" then return false\n    if string[3] = \"[\" then return true\n    if string[3] = \"]\" then return false\n    if string[4] = \"]\" then return false\n    if string[4] = \"[\" then return true\n    if string[4] = \"]\" then return false\n    if string[5] = \"]\" then return false\n    if string[5] = \"[\" then return true\n    if string[5] = \"]\" then return false\n    if string[6] = \"]\" then return false\n    if string[6] = \"[\" then return true\n    if string[6] = \"]\" then return false\n    if string[7] = \"]\" then return false\n    if string[7] = \"[\" then return true\n    if string[7] = \"]\" then return false\n    if string[8] = \"]\" then return false\n    if string[8] = \"[\" then return true\n    if string[8] = \"]\" then return false\n    if string[9] = \"]\" then return false\n    if string[9] = \"[\" then return true\n    if string[9] = \"]\" then return false\n    if string[10] = \"]\" then return false\n    if string[10] = \"[\" then return true\n    if string[10] = \"]\" then return false\n    if string[11] = \"]\" then return false\n    if string[11] = \"[\" then return true\n    if string[11] = \"]\" then return false\n    if string[12] = \"]\" then return false\n    if\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb5aqux8w.jl:20\nin expression starting at /tmp/tmpb5aqux8w.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string == \"\"\n        return false\n    else\n        return is_nested(string[1:]) or is_nested(string[0:len(string)-1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5d5tytk_.jl:23\nin expression starting at /tmp/tmp5d5tytk_.jl:23\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    for i in range(1, len(string)):\n        if string[i] = \"]\" and string[i-1] = \"[\":\n            return true\n        if string[i] = \"[\" and string[i-1] = \"]\":\n            return false\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6_anbydf.jl:20\nin expression starting at /tmp/tmp6_anbydf.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return string.find('[') != -1 and string.find(']') != -1 and string.find('[', string.find('[')) != -1\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpcqvfo7ed.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcqvfo7ed.jl:20\nin expression starting at /tmp/tmpcqvfo7ed.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string == \"\"\n        return False\n    else\n        return is_nested(string[1:]) or is_nested(string[:-1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3_mbs_va.jl:23\nin expression starting at /tmp/tmp3_mbs_va.jl:23\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string =~ /^\\[\\]$/\n        return false\n    else\n        return true\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1dkbpm1o.jl:20\nin expression starting at /tmp/tmp1dkbpm1o.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string = \"]\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    return is_nested(string[1:]) or is_nested(string[0:1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4v_5pvhv.jl:20\nin expression starting at /tmp/tmp4v_5pvhv.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"[\" and string[len(string)-1] = \"]\" then return true\n    return is_nested(string[1:len(string)-1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdxn0tp9h.jl:20\nin expression starting at /tmp/tmpdxn0tp9h.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    for i = 1 to len(string) - 1 do\n        if string[i] = \"]\" and string[i - 1] = \"[\" then return true\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptorgzqxt.jl:20\nin expression starting at /tmp/tmptorgzqxt.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if len(string) == 0:\n        return False\n    if string[0] == '[':\n        return is_nested(string[1:])\n    if string[0] == ']':\n        return is_nested(string[1:])\n    return False\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcu9mhclu.jl:21\nin expression starting at /tmp/tmpcu9mhclu.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[1] = \"]\" then return false\n    if string[0] = \"[\" and string[len(string)-1] = \"]\" then return true\n    return is_nested(string[1:len(string)-1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxc1j0ees.jl:20\nin expression starting at /tmp/tmpxc1j0ees.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    for i = 1 to len(string) - 1 do\n        if string[i] = \"]\" and string[i - 1] = \"[\" then return true\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptorgzqxt.jl:20\nin expression starting at /tmp/tmptorgzqxt.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    return is_nested(string[1:])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjgo3gppa.jl:20\nin expression starting at /tmp/tmpjgo3gppa.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string = \"]\" then return false\n    if string = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[1] = \"]\" then return false\n    if string[1] = \"[\" then return true\n    if string[1] = \"]\" then return false\n    if string[2] = \"]\" then return false\n    if string[2] = \"[\" then return true\n    if string[2] = \"]\" then return false\n    if string[3] = \"]\" then return false\n    if string[3] = \"[\" then return true\n    if string[3] = \"]\" then return false\n    if string[4] = \"]\" then return false\n    if string[4] = \"[\" then return true\n    if string[4] = \"]\" then return false\n    if string[5] = \"]\" then return false\n    if string[5] = \"[\" then return true\n    if string[5] = \"]\" then return false\n    if string[6] = \"]\" then return false\n    if string[6] = \"[\" then return true\n    if string[6] = \"]\" then return false\n    if string[7] = \"]\" then return false\n    if string[7] = \"[\" then return true\n    if string[7] = \"]\" then return false\n    if string[8] = \"]\" then return false\n    if string[8] = \"[\" then return true\n    if string[8] = \"]\" then return false\n    if string[9] = \"]\" then return false\n    if string[9] = \"[\" then return true\n    if string[9] = \"]\" then return false\n    if string[10] = \"]\" then return false\n    if string[10] = \"[\" then return true\n    if string[10] = \"]\" then return false\n    if string[11] = \"]\" then return false\n    if string[11] = \"[\" then return true\n    if string[11] = \"]\" then return false\n    if string[12] = \"]\" then return false\n    if\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb5aqux8w.jl:20\nin expression starting at /tmp/tmpb5aqux8w.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    for i in range(1, len(string)):\n        if string[i] = \"]\" and string[i-1] = \"[\":\n            return true\n        if string[i] = \"[\" and string[i-1] = \"]\":\n            return false\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6_anbydf.jl:20\nin expression starting at /tmp/tmp6_anbydf.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return is_valid(string) and is_nested_rec(string, 0, len(string) - 1)\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmp_dpklnnr.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_dpklnnr.jl:20\nin expression starting at /tmp/tmp_dpklnnr.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string == \"\" or string == \"[]\" or string == \"[[][]]\" or string == \"[][]\":\n        return False\n    else:\n        return True\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"string\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptdmngbr2.jl:20\nin expression starting at /tmp/tmptdmngbr2.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string =~ /^\\[\\]$/\n        return false\n    else\n        return true\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1dkbpm1o.jl:20\nin expression starting at /tmp/tmp1dkbpm1o.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string == \"\" or string == \" \":\n        return False\n    if string[0] == \"[\" and string[-1] == \"]\":\n        return is_nested(string[1:-1])\n    return is_nested(string[1:]) or is_nested(string[:-1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"string\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5cjxkrz1.jl:20\nin expression starting at /tmp/tmp5cjxkrz1.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string =~ /^\\[\\]$/\n        return false\n    else\n        return true\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1dkbpm1o.jl:20\nin expression starting at /tmp/tmp1dkbpm1o.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string = \"]\" then return false\n    if string[0] = \"]\" then return false\n    if string[-1] = \"]\" then return false\n    if string[0] = \"[\" and string[-1] = \"]\" then return true\n    if string[0] = \"(\" and string[-1] = \")\" then return true\n    if string[0] = \"{\" and string[-1] = \"}\" then return true\n    if string[0] = \"[\" and string[-1] = \"]\" then return true\n    if string[0] = \"(\" and string[-1] = \")\" then return true\n    if string[0] = \"{\" and string[-1] = \"}\" then return true\n    return is_nested(string[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp33yhsddy.jl:20\nin expression starting at /tmp/tmp33yhsddy.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return True if string.find(\"[[\") != -1 else False\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293222,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpvphz4jgo.jl:19 expected \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvphz4jgo.jl:20\nin expression starting at /tmp/tmpvphz4jgo.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return True if string.find(\"[[\") != -1 else False\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293222,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpvphz4jgo.jl:19 expected \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvphz4jgo.jl:20\nin expression starting at /tmp/tmpvphz4jgo.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string == \"\" or string == \"[]\":\n        return True\n    else:\n        return is_nested(string[1:]) and is_nested(string[:-1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"string\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4ie7jodj.jl:20\nin expression starting at /tmp/tmp4ie7jodj.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string == \"\" or string == \"[]\":\n        return False\n    else:\n        return is_nested(string[1:]) or is_nested(string[:-1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"string\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd7ay2412.jl:20\nin expression starting at /tmp/tmpd7ay2412.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\"\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293222,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl3gb55f8.jl:20\nin expression starting at /tmp/tmpl3gb55f8.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return is_valid(string) and is_nested_rec(string, 0, 0)\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpadbt2ijr.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpadbt2ijr.jl:20\nin expression starting at /tmp/tmpadbt2ijr.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string ==\"\"\n        return False\n    else\n        return True\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp07gzagjx.jl:20 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp07gzagjx.jl:1\nin expression starting at /tmp/tmp07gzagjx.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[1] = \"]\" then return false\n    if string[0] = \"[\" and string[-1] = \"]\" then return true\n    return is_nested(string[1:]) or is_nested(string[:-1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpari96k4c.jl:20\nin expression starting at /tmp/tmpari96k4c.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[1] = \"]\" then return false\n    if string[1] = \"[\" then return true\n    if string[2] = \"]\" then return false\n    if string[2] = \"[\" then return true\n    if string[3] = \"]\" then return false\n    if string[3] = \"[\" then return true\n    if string[4] = \"]\" then return false\n    if string[4] = \"[\" then return true\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvoctahy7.jl:20\nin expression starting at /tmp/tmpvoctahy7.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string == \"\"\n        return False\n    else\n        return is_nested(string[1:]) or is_nested(string[:-1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3_mbs_va.jl:23\nin expression starting at /tmp/tmp3_mbs_va.jl:23\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string = \"]\" then return false\n    if string = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[1] = \"]\" then return false\n    if string[1] = \"[\" then return true\n    if string[2] = \"]\" then return false\n    if string[2] = \"[\" then return true\n    if string[3] = \"]\" then return false\n    if string[3] = \"[\" then return true\n    if string[4] = \"]\" then return false\n    if string[4] = \"[\" then return true\n    if string[5] = \"]\" then return false\n    if string[5] = \"[\" then return true\n    if string[6] = \"]\" then return false\n    if string[6] = \"[\" then return true\n    if string[7] = \"]\" then return false\n    if string[7] = \"[\" then return true\n    if string[8] = \"]\" then return false\n    if string[8] = \"[\" then return true\n    if string[9] = \"]\" then return false\n    if string[9] = \"[\" then return true\n    if string[10] = \"]\" then return false\n    if string[10] = \"[\" then return true\n    if string[11] = \"]\" then return false\n    if string[11] = \"[\" then return true\n    if string[12] = \"]\" then return false\n    if string[12] = \"[\" then return true\n    if string[13] = \"]\" then return false\n    if string[13] = \"[\" then return true\n    if string[14] = \"]\" then return false\n    if string[14] = \"[\" then return true\n    if string[15] = \"]\" then return false\n    if string[15] = \"[\" then return true\n    if string[16] = \"]\" then return false\n    if string[16] = \"[\" then return true\n    if string[17] = \"]\" then return false\n    if string[17] = \"[\" then return true\n    if\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9o9ufbgx.jl:20\nin expression starting at /tmp/tmp9o9ufbgx.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string == \"\" or string == \" \":\n        return False\n    else:\n        return is_nested_rec(string, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"string\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdbnnqlwp.jl:20\nin expression starting at /tmp/tmpdbnnqlwp.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    return is_nested(string[1:])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcfo_1zkq.jl:20\nin expression starting at /tmp/tmpcfo_1zkq.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    for i = 1 to len(string) - 1 do\n        if string[i] = \"]\" and string[i-1] = \"[\" then return true\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2txmjgsm.jl:20\nin expression starting at /tmp/tmp2txmjgsm.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string == \"\"\n        return False\n    else\n        return is_nested(string[1:]) or is_nested(string[:-1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3_mbs_va.jl:23\nin expression starting at /tmp/tmp3_mbs_va.jl:23\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if len(string) == 0:\n        return False\n    if string[0] == '[':\n        return is_nested(string[1:])\n    else:\n        return is_nested(string[1:]) or is_nested(string[0:len(string)-1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp467dw9kl.jl:21\nin expression starting at /tmp/tmp467dw9kl.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string = \"]\" then return false\n    if string[0] = \"]\" then return false\n    if string[len(string) - 1] = \"]\" then return false\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" then return false\n    if string[len(string) - 1] = \"[\" then return false\n    if string[0] = \"(\" and string[len(string) - 1] = \")\" then return true\n    if string[0] = \"(\" then return false\n    if string[len(string) - 1] = \"(\" then return false\n    if string[0] = \"{\" and string[len(string) - 1] = \"}\" then return true\n    if string[0] = \"{\" then return false\n    if string[len(string) - 1] = \"{\" then return false\n    if string[0] = \")\" and string[len(string) - 1] = \"(\" then return true\n    if string[0] = \")\" then return false\n    if string[len(string) - 1] = \"(\" then return false\n    if string[0] = \"}\" and string[len(string) - 1] = \"{\" then return true\n    if string[0] = \"}\" then return false\n    if string[len(string) - 1] = \"{\" then return false\n    if string[0] = \"]\" and string[len(string) - 1] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[len(string) - 1] = \"[\" then return false\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprx237wao.jl:20\nin expression starting at /tmp/tmprx237wao.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string ==\"\" then return false\n    if string[0] = \"[\" and string[len(string)-1] = \"]\" then return true\n    return is_nested(string[1:len(string)-1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg3zdv29z.jl:20\nin expression starting at /tmp/tmpg3zdv29z.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    return is_nested(string[1:])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjgo3gppa.jl:20\nin expression starting at /tmp/tmpjgo3gppa.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return True if is_valid(string) and is_nested_brackets(string) else False\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpnivyworg.jl:19 expected \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnivyworg.jl:20\nin expression starting at /tmp/tmpnivyworg.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if len(string) == 0:\n        return False\n    elif len(string) == 1:\n        return True\n    else:\n        return is_nested(string[1:]) or is_nested(string[:-1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuem1ndw7.jl:21\nin expression starting at /tmp/tmpuem1ndw7.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return True if is_nested_rec(string, 0, 0) else False\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpu60t1chl.jl:19 expected \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu60t1chl.jl:20\nin expression starting at /tmp/tmpu60t1chl.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string = \"]\" then return true\n    if string[0] = \"[\" then return is_nested(string[1:])\n    if string[len(string) - 1] = \"]\" then return is_nested(string[0:len(string) - 1])\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzpsu_zab.jl:20\nin expression starting at /tmp/tmpzpsu_zab.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    for i in range(1, len(string)):\n        if string[i] = \"]\" and string[i-1] = \"[\":\n            return true\n        if string[i] = \"[\" and string[i-1] = \"]\":\n            return false\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6_anbydf.jl:20\nin expression starting at /tmp/tmp6_anbydf.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string ==\"\"\n        return False\n    else:\n        if string[0]==\"[\" and string[-1]==\"]\":\n            return True\n        else:\n            return is_nested(string[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphhbah3jm.jl:23\nin expression starting at /tmp/tmphhbah3jm.jl:23\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return is_valid(string) and is_nested_rec(string, 0, 0)\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpadbt2ijr.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpadbt2ijr.jl:20\nin expression starting at /tmp/tmpadbt2ijr.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if len(string) == 0:\n        return False\n    else:\n        return is_nested(string[1:]) or is_nested(string[:-1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuj881pul.jl:21\nin expression starting at /tmp/tmpuj881pul.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    return is_nested(string[1:])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjgo3gppa.jl:20\nin expression starting at /tmp/tmpjgo3gppa.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string =~ /^\\[\\]$/\n        return false\n    else\n        return true\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1dkbpm1o.jl:20\nin expression starting at /tmp/tmp1dkbpm1o.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return True if string.find('[') != -1 and string.find(']') != -1 and string.find('[', string.find('[')) != -1 else False\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpcbup413j.jl:19 expected \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcbup413j.jl:20\nin expression starting at /tmp/tmpcbup413j.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string =~ /^\\[\\]$/\n        return false\n    else\n        return true\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1dkbpm1o.jl:20\nin expression starting at /tmp/tmp1dkbpm1o.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[1] = \"]\" then return false\n    if string[1] = \"[\" then return true\n    if string[2] = \"]\" then return false\n    if string[2] = \"[\" then return true\n    if string[3] = \"]\" then return false\n    if string[3] = \"[\" then return true\n    if string[4] = \"]\" then return false\n    if string[4] = \"[\" then return true\n    if string[5] = \"]\" then return false\n    if string[5] = \"[\" then return true\n    if string[6] = \"]\" then return false\n    if string[6] = \"[\" then return true\n    if string[7] = \"]\" then return false\n    if string[7] = \"[\" then return true\n    if string[8] = \"]\" then return false\n    if string[8] = \"[\" then return true\n    if string[9] = \"]\" then return false\n    if string[9] = \"[\" then return true\n    if string[10] = \"]\" then return false\n    if string[10] = \"[\" then return true\n    if string[11] = \"]\" then return false\n    if string[11] = \"[\" then return true\n    if string[12] = \"]\" then return false\n    if string[12] = \"[\" then return true\n    if string[13] = \"]\" then return false\n    if string[13] = \"[\" then return true\n    if string[14] = \"]\" then return false\n    if string[14] = \"[\" then return true\n    if string[15] = \"]\" then return false\n    if string[15] = \"[\" then return true\n    if string[16] = \"]\" then return false\n    if string[16] = \"[\" then return true\n    if string[17] = \"]\" then return false\n    if string[17] = \"[\" then return true\n    if string[18] = \"]\" then return false\n    if string[18] = \"[\"\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzd3o6app.jl:20\nin expression starting at /tmp/tmpzd3o6app.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string == \"\"\n        return false\n    else\n        return is_nested(string[1:]) or is_nested(string[:-1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9c1i07o2.jl:23\nin expression starting at /tmp/tmp9c1i07o2.jl:23\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string =~ /^\\[\\[.*\\]\\]$/\n        return true\n    else\n        return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmvfime02.jl:20\nin expression starting at /tmp/tmpmvfime02.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string = \"]\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[1] = \"]\" then return false\n    if string[1] = \"[\" then return true\n    if string[2] = \"]\" then return false\n    if string[2] = \"[\" then return true\n    if string[3] = \"]\" then return false\n    if string[3] = \"[\" then return true\n    if string[4] = \"]\" then return false\n    if string[4] = \"[\" then return true\n    if string[5] = \"]\" then return false\n    if string[5] = \"[\" then return true\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4hm91c86.jl:20\nin expression starting at /tmp/tmp4hm91c86.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    for i in range(1, len(string)):\n        if string[i] = \"]\" and string[i-1] = \"[\":\n            return true\n        if string[i] = \"[\" and string[i-1] = \"]\":\n            return true\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwdam86oh.jl:20\nin expression starting at /tmp/tmpwdam86oh.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string ==\"\": return False\n    if string[0] ==\"[\": return True\n    if string[0] ==\"]\": return False\n    if string[0] ==\"]\": return False\n    if string[0] ==\"[\": return True\n    if string[0] ==\"]\": return False\n    if string[0] ==\"[\": return True\n    if string[0] ==\"]\": return False\n    if string[0] ==\"[\": return True\n    if string[0] ==\"]\": return False\n    if string[0] ==\"[\": return True\n    if string[0] ==\"]\": return False\n    if string[0] ==\"[\": return True\n    if string[0] ==\"]\": return False\n    if string[0] ==\"[\": return True\n    if string[0] ==\"]\": return False\n    if string[0] ==\"[\": return True\n    if string[0] ==\"]\": return False\n    if string[0] ==\"[\": return True\n    if string[0] ==\"]\": return False\n    if string[0] ==\"[\": return True\n    if string[0] ==\"]\": return False\n    if string[0] ==\"[\": return True\n    if string[0] ==\"]\": return False\n    if string[0] ==\"[\": return True\n    if string[0] ==\"]\": return False\n    if string[0] ==\"[\": return True\n    if string[0] ==\"]\": return False\n    if string[0] ==\"[\": return True\n    if string[0] ==\"]\": return False\n    if string[0] ==\"[\": return True\n    if string[0] ==\"]\": return False\n    if string[0] ==\"[\": return True\n    if string[0] ==\"]\": return False\n    if string[0] ==\"[\": return True\n    if string[0] ==\"]\": return False\n    if string[0] ==\"[\": return True\n    if string[0] ==\"]\": return False\n    if string[0] ==\"[\": return True\n    if string[0] ==\"]\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2754_jjy.jl:65\nin expression starting at /tmp/tmp2754_jjy.jl:65\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string == \"\" or string == \"[]\":\n        return False\n    else:\n        return is_nested_rec(string, 0, 0)\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"string\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1avcirj0.jl:20\nin expression starting at /tmp/tmp1avcirj0.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string =~ /^\\[\\]$/ then return false\n    else\n        if string =~ /^\\[\\]\\[\\]\\[\\]$/ then return true\n        else\n            if string =~ /^\\[\\]\\[\\]\\[\\]\\[\\]$/ then return true\n            else\n                if string =~ /^\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]$/ then return true\n                else\n                    if string =~ /^\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]$/ then return true\n                    else\n                        if string =~ /^\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]$/ then return true\n                        else\n                            if string =~ /^\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]$/ then return true\n                            else\n                                if string =~ /^\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]$/ then return true\n                                else\n                                    if string =~ /^\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]$/ then return true\n                                    else\n                                        if string =~ /^\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]$/ then return true\n                                        else\n                                            if string =~ /^\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]\\[\\]$/ then return true\n                                            else\n                                                if string =~ /^\\[\\]\\[\\]\\\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsrq7f1h2.jl:20\nin expression starting at /tmp/tmpsrq7f1h2.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    for i = 1 to len(string) - 1 do\n        if string[i] = \"]\" and string[i-1] = \"[\" then return true\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2txmjgsm.jl:20\nin expression starting at /tmp/tmp2txmjgsm.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    for i in range(1, len(string)):\n        if string[i] = \"]\" and string[i-1] = \"[\":\n            return true\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5dsd9wya.jl:20\nin expression starting at /tmp/tmp5dsd9wya.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string ==\"\": return False\n    else:\n        if string[0]==\"[\" and string[-1]==\"]\":\n            return is_nested(string[1:-1])\n        else:\n            return is_nested(string[1:])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp49447kni.jl:22\nin expression starting at /tmp/tmp49447kni.jl:22\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    for i in range(1, len(string)):\n        if string[i] = \"]\" and string[i-1] = \"[\":\n            return true\n        if string[i] = \"[\" and string[i-1] = \"]\":\n            return true\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwdam86oh.jl:20\nin expression starting at /tmp/tmpwdam86oh.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    for i = 1 to len(string) - 1 do\n        if string[i] = \"]\" and string[i - 1] = \"[\" then return true\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptorgzqxt.jl:20\nin expression starting at /tmp/tmptorgzqxt.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\"\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293222,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl3gb55f8.jl:20\nin expression starting at /tmp/tmpl3gb55f8.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string = \"]\" then return false\n    if string[0] = \"]\" then return false\n    if string[len(string) - 1] = \"]\" then return false\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] =\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuylvwgbj.jl:20\nin expression starting at /tmp/tmpuylvwgbj.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return True if string[0] == \"[\" and string[-1] == \"]\" else False\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpkuv0v7c0.jl:19 expected \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkuv0v7c0.jl:20\nin expression starting at /tmp/tmpkuv0v7c0.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string == \"\"\n        return False\n    else\n        return is_nested(string[1:]) or is_nested(string[:-1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3_mbs_va.jl:23\nin expression starting at /tmp/tmp3_mbs_va.jl:23\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string == \"\" or string == \"[]\":\n        return False\n    else:\n        stack = []\n        for i in range(len(string)):\n            if string[i] == \"[\":\n                stack.append(i)\n            elif string[i] == \"]\":\n                if len(stack) == 0:\n                    return False\n                else:\n                    stack.pop()\n        return True\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"string\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_c97r9cn.jl:20\nin expression starting at /tmp/tmp_c97r9cn.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if len(string) == 0:\n        return False\n    if string[0] == '[':\n        return is_nested(string[1:])\n    if string[0] == ']':\n        return is_nested(string[1:])\n    return False\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcu9mhclu.jl:21\nin expression starting at /tmp/tmpcu9mhclu.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string ==\"\" then return false\n    if string[0] = \"]\" then return false\n    if string[len(string)-1] = \"]\" then return false\n    if string[0] = \"[\" and string[len(string)-1] = \"]\" then return true\n    return is_nested(string[1:len(string)-1]) or is_nested(string[1:len(string)-1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5v68gygu.jl:20\nin expression starting at /tmp/tmp5v68gygu.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string.length == 0:\n        return False\n    if string[0] == '[':\n        return is_nested(string[1:])\n    else:\n        return is_nested(string[1:]) or is_nested(string[0:string.length - 1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1kufdi0r.jl:21\nin expression starting at /tmp/tmp1kufdi0r.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[1] = \"]\" then return false\n    if string[1] = \"[\" then return true\n    if string[2] = \"]\" then return false\n    if string[2] = \"[\" then return true\n    if string[3] = \"]\" then return false\n    if string[3] = \"[\" then return true\n    if string[4] = \"]\" then return false\n    if string[4] = \"[\" then return true\n    if string[5] = \"]\" then return false\n    if string[5] = \"[\" then return true\n    return is_nested(string[1:])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplppuam45.jl:20\nin expression starting at /tmp/tmplppuam45.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"(\" then return true\n    if string[0] = \"{\" then return true\n    if string[0] = \"|\" then return true\n    if string[0] = \"^\" then return true\n    if string[0] = \"!\" then return true\n    if string[0] = \"&\" then return true\n    if string[0] = \"-\" then return true\n    if string[0] = \"*\" then return true\n    if string[0] = \"+\" then return true\n    if string[0] = \"=\" then return true\n    if string[0] = \":\" then return true\n    if string[0] = \";\" then return true\n    if string[0] = \",\" then return true\n    if string[0] = \".\" then return true\n    if string[0] = \"\\\"\" then return true\n    if string[0] = \"'\" then return true\n    if string[0] = \"`\" then return true\n    if string[0] = \"|\" then return true\n    if string[0] = \"^\" then return true\n    if string[0] = \"!\" then return true\n    if string[0] = \"&\" then return true\n    if string[0] = \"-\" then return true\n    if string[0] = \"*\" then return true\n    if string[0] = \"+\" then return true\n    if string[0] = \"=\" then return true\n    if string[0] = \":\" then return true\n    if string[0] = \";\" then return true\n    if string[0] = \",\" then return true\n    if string[0] = \".\" then return true\n    if string[0] = \"\\\"\" then return true\n    if string[0] = \"'\" then return true\n    if string[0] = \"`\" then return true\n    if string[0] = \"|\" then return true\n    if string[0] = \"^\" then return true\n    if string[0] = \"!\" then return true\n    if string[0] = \"&\" then return true\n    if string[0] =\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg6_mb3xs.jl:20\nin expression starting at /tmp/tmpg6_mb3xs.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return True if string.find('[') != -1 and string.find(']') != -1 and string.find('[', string.find('[')) != -1 else False\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpcbup413j.jl:19 expected \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcbup413j.jl:20\nin expression starting at /tmp/tmpcbup413j.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string = \"]\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    return is_nested(string[1:]) or is_nested(string[0:1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4v_5pvhv.jl:20\nin expression starting at /tmp/tmp4v_5pvhv.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    for i in range(1, len(string)):\n        if string[i] = \"]\" and string[i-1] = \"[\":\n            return true\n        if string[i] = \"[\" and string[i-1] = \"]\":\n            return false\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6_anbydf.jl:20\nin expression starting at /tmp/tmp6_anbydf.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[len(string) - 1] = \"]\" then return false\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    return is_nested(string[1:len(string) - 1]) or is_nested(string[1:len(string)])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5hvn5llv.jl:20\nin expression starting at /tmp/tmp5hvn5llv.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    for i = 1 to len(string) - 1 do\n        if string[i] = \"]\" and string[i - 1] = \"[\" then return true\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptorgzqxt.jl:20\nin expression starting at /tmp/tmptorgzqxt.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if len(string) == 0:\n        return False\n    else:\n        return is_nested(string[1:]) or is_nested(string[:-1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuj881pul.jl:21\nin expression starting at /tmp/tmpuj881pul.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if len(string) == 0:\n        return False\n    \n    stack = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            stack.append(i)\n        elif string[i] == ']':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo_7bwzaf.jl:21\nin expression starting at /tmp/tmpo_7bwzaf.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[len(string) - 1] = \"]\" then return false\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    for i in range(1, len(string) - 1):\n        if string[i] = \"]\" and string[i - 1] = \"[\" and string[i + 1] = \"[\":\n            return true\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6nf95esr.jl:20\nin expression starting at /tmp/tmp6nf95esr.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return True if string.find(\"[[\") != -1 else False\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293222,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpvphz4jgo.jl:19 expected \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvphz4jgo.jl:20\nin expression starting at /tmp/tmpvphz4jgo.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string = \"]\" then return false\n    if string = \"[\" then return true\n    if string = \"]\" then return false\n    if string[0] = \"[\" then return is_nested(string[1:])\n    if string[len(string) - 1] = \"]\" then return is_nested(string[0:len(string) - 1])\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiglhvb0p.jl:20\nin expression starting at /tmp/tmpiglhvb0p.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return True if string.find('[') != -1 and string.find(']') != -1 and string.find('[', string.find('[')) != -1 else False\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpcbup413j.jl:19 expected \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcbup413j.jl:20\nin expression starting at /tmp/tmpcbup413j.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string.length == 0:\n        return False\n    else:\n        return is_nested(string.substring(1, string.length - 1))\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbmdt56er.jl:21\nin expression starting at /tmp/tmpbmdt56er.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string = \"]\" then return false\n    if string = \"[\" then return true\n    if string = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[1] = \"[\" then return true\n    if string[1] = \"]\" then return false\n    if string[2] = \"[\" then return true\n    if string[2] = \"]\" then return false\n    if string[3] = \"[\" then return true\n    if string[3] = \"]\" then return false\n    if string[4] = \"[\" then return true\n    if string[4] = \"]\" then return false\n    if string[5] = \"[\" then return true\n    if string[5] = \"]\" then return false\n    if string[6] = \"[\" then return true\n    if string[6] = \"]\" then return false\n    if string[7] = \"[\" then return true\n    if string[7] = \"]\" then return false\n    if string[8] = \"[\" then return true\n    if string[8] = \"]\" then return false\n    if string[9] = \"[\" then return true\n    if string[9] = \"]\" then return false\n    if string[10] = \"[\" then return true\n    if string[10] = \"]\" then return false\n    if string[11] = \"[\" then return true\n    if string[11] = \"]\" then return false\n    if string[12] = \"[\" then return true\n    if string[12] = \"]\" then return false\n    if string[13] = \"[\" then return true\n    if string[13] = \"]\" then return false\n    if string[14] = \"[\" then return true\n    if string[14] = \"]\" then return false\n    if string[15] = \"[\" then return true\n    if string[15] = \"]\" then return false\n    if string[16] = \"[\" then return true\n    if string[16] = \"]\" then return false\n    if string[17] = \"[\" then return true\n    if string[17] = \"]\" then return false\n    if string[18\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm2yr0468.jl:20\nin expression starting at /tmp/tmpm2yr0468.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    return is_nested(string[1:len(string) - 1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwrm3jwr4.jl:20\nin expression starting at /tmp/tmpwrm3jwr4.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string == \"\"\n        return False\n    if string[0] == \"[\" and string[-1] == \"]\":\n        return is_nested(string[1:-1])\n    else:\n        return is_nested(string[1:]) or is_nested(string[:-1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"string\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0omoy2vh.jl:22\nin expression starting at /tmp/tmp0omoy2vh.jl:22\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return True if is_valid(string) and is_nested_rec(string) else False\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmp1x1pbn7z.jl:19 expected \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1x1pbn7z.jl:20\nin expression starting at /tmp/tmp1x1pbn7z.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return is_valid(string) and is_nested_rec(string, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpga1g43d3.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpga1g43d3.jl:20\nin expression starting at /tmp/tmpga1g43d3.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string = \"]\" then return false\n    if string[0] = \"]\" then return false\n    if string[len(string) - 1] = \"]\" then return false\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    return is_nested(string[1:]) or is_nested(string[0:len(string) - 1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8oxjuand.jl:20\nin expression starting at /tmp/tmp8oxjuand.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string = \"]\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    return is_nested(string[1:])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7g9j5f7f.jl:20\nin expression starting at /tmp/tmp7g9j5f7f.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    for i in range(1, len(string)):\n        if string[i] = \"]\" and string[i-1] = \"[\":\n            return true\n        if string[i] = \"[\" and string[i-1] = \"]\":\n            return true\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwdam86oh.jl:20\nin expression starting at /tmp/tmpwdam86oh.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string =~ /^\\[\\]$/\n        return false\n    else\n        return true\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1dkbpm1o.jl:20\nin expression starting at /tmp/tmp1dkbpm1o.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return True if is_valid(string) and is_nested_rec(string, 0, len(string) - 1) else False\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpyuamcr66.jl:19 expected \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyuamcr66.jl:20\nin expression starting at /tmp/tmpyuamcr66.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return True if string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -1 and string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -1 and string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -1 and string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -1 and string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -1 and string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -1 and string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -1 and string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -1 and string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -1 and string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -1 and string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -1 and string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -1 and string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -1 and string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -1 and string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -1 and string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -1 and string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpicw2b2mt.jl:19 expected \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpicw2b2mt.jl:20\nin expression starting at /tmp/tmpicw2b2mt.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string == \"\" or string == \"[]\" or string == \"[]\":\n        return False\n    else:\n        return is_nested(string[1:]) or is_nested(string[0:len(string)-1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"string\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp648_ptcw.jl:20\nin expression starting at /tmp/tmp648_ptcw.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if len(string) == 0:\n        return False\n    if string[0] == '[':\n        return is_nested(string[1:])\n    else:\n        return is_nested(string[1:]) or is_nested(string[1:])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcrt_7p7j.jl:21\nin expression starting at /tmp/tmpcrt_7p7j.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string =~ /^\\[\\]$/\n        return false\n    else\n        return true\n\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpty5losz6.jl:20\nin expression starting at /tmp/tmpty5losz6.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return is_valid(string) and is_nested_rec(string, 0)\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpzrmw3dr9.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzrmw3dr9.jl:20\nin expression starting at /tmp/tmpzrmw3dr9.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string = \"]\" then return false\n    if string[0] = \"]\" then return false\n    if string[len(string) - 1] = \"]\" then return false\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" then return false\n    if string[len(string) - 1] = \"[\" then return false\n    if string[0] = \"(\" and string[len(string) - 1] = \")\" then return true\n    if string[0] = \"(\" then return false\n    if string[len(string) - 1] = \"(\" then return false\n    if string[0] = \"{\" and string[len(string) - 1] = \"}\" then return true\n    if string[0] = \"{\" then return false\n    if string[len(string) - 1] = \"{\" then return false\n    if string[0] = \")\" and string[len(string) - 1] = \"(\" then return true\n    if string[0] = \")\" then return false\n    if string[len(string) - 1] = \"(\" then return false\n    if string[0] = \"}\" and string[len(string) - 1] = \"{\" then return true\n    if string[0] = \"}\" then return false\n    if string[len(string) - 1] = \"{\" then return false\n    if string[0] = \"]\" and string[len(string) - 1] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[len(string) - 1] = \"[\" then return false\n    if string[0] = \"(\" and string[len(string) - 1] = \")\" then return true\n    if string[0] = \"(\" then return false\n    if string[len(string) - 1] = \")\" then return false\n    if string[0] = \"{\" and string[len(string) - 1] = \"}\" then return true\n    if string[0] = \"{\" then return false\n    if string[len(string) - 1] = \"}\" then return false\n    if string[0]\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv8b33mer.jl:20\nin expression starting at /tmp/tmpv8b33mer.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[1] = \"]\" then return false\n    if string[0] = \"[\" and string[-1] = \"]\" then return true\n    return is_nested(string[1:]) or is_nested(string[:-1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpari96k4c.jl:20\nin expression starting at /tmp/tmpari96k4c.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return is_valid(string) and is_nested_rec(string, 0, len(string) - 1)\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmp_dpklnnr.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_dpklnnr.jl:20\nin expression starting at /tmp/tmp_dpklnnr.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if len(string) == 0:\n        return False\n    \n    stack = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            stack.append(i)\n        elif string[i] == ']':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo_7bwzaf.jl:21\nin expression starting at /tmp/tmpo_7bwzaf.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string = \"]\" then return false\n    if string[0] = \"]\" then return false\n    if string[len(string) - 1] = \"]\" then return false\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" then return is_nested(string[1:len(string) - 1])\n    if string[len(string) - 1] = \"]\" then return is_nested(string[0:len(string) - 2])\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph28u8dc2.jl:20\nin expression starting at /tmp/tmph28u8dc2.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string = \"]\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[1] = \"]\" then return false\n    if string[1] = \"[\" then return true\n    if string[1] = \"]\" then return false\n    if string[2] = \"]\" then return false\n    if string[2] = \"[\" then return true\n    if string[2] = \"]\" then return false\n    if string[3] = \"]\" then return false\n    if string[3] = \"[\" then return true\n    if string[3] = \"]\" then return false\n    if string[4] = \"]\" then return false\n    if string[4] = \"[\" then return true\n    if string[4] = \"]\" then return false\n    if string[5] = \"]\" then return false\n    if string[5] = \"[\" then return true\n    if string[5] = \"]\" then return false\n    if string[6] = \"]\" then return false\n    if string[6] = \"[\" then return true\n    if string[6] = \"]\" then return false\n    if string[7] = \"]\" then return false\n    if string[7] = \"[\" then return true\n    if string[7] = \"]\" then return false\n    if string[8] = \"]\" then return false\n    if string[8] = \"[\" then return true\n    if string[8] = \"]\" then return false\n    if string[9] = \"]\" then return false\n    if string[9] = \"[\" then return true\n    if string[9] = \"]\" then return false\n    if string[10] = \"]\" then return false\n    if string[10] = \"[\" then return true\n    if string[10] = \"]\" then return false\n    if string[11] = \"]\" then return false\n    if string[11] = \"[\" then return true\n    if string[11] = \"]\" then return false\n    if string[12] = \"]\" then return false\n    if string[12] = \"[\" then return true\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2myt07gi.jl:20\nin expression starting at /tmp/tmp2myt07gi.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return (string.count(\"[\") > string.count(\"]\")) and (string.count(\"[\") < string.count(\"]\"))\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmp1i2bqf2u.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1i2bqf2u.jl:20\nin expression starting at /tmp/tmp1i2bqf2u.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if len(string) == 0:\n        return False\n    if string[0] == '[':\n        return is_nested(string[1:])\n    else:\n        return is_nested(string[1:]) or is_nested(string[1:])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcrt_7p7j.jl:21\nin expression starting at /tmp/tmpcrt_7p7j.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return True\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsmst15pe.jl:19 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsmst15pe.jl:1\nin expression starting at /tmp/tmpsmst15pe.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    for i = 1 to len(string) - 1 do\n        if string[i] = \"]\" and string[i - 1] = \"[\" then return true\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptorgzqxt.jl:20\nin expression starting at /tmp/tmptorgzqxt.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string ==\"\": return False\n    if string[0] ==\"[\": return True\n    if string[0] ==\"]\": return False\n    if string[0] ==\"]\": return False\n    if string[0] ==\"[\": return True\n    if string[0] ==\"]\": return False\n    if string[0] ==\"]\": return False\n    if string[0] ==\"[\": return True\n    if string[0] ==\"]\": return False\n    if string[0] ==\"]\": return False\n    if string[0] ==\"[\": return True\n    if string[0] ==\"]\": return False\n    if string[0] ==\"]\": return False\n    if string[0] ==\"[\": return True\n    if string[0] ==\"]\": return False\n    if string[0] ==\"]\": return False\n    if string[0] ==\"[\": return True\n    if string[0] ==\"]\": return False\n    if string[0] ==\"]\": return False\n    if string[0] ==\"[\": return True\n    if string[0] ==\"]\": return False\n    if string[0] ==\"]\": return False\n    if string[0] ==\"[\": return True\n    if string[0] ==\"]\": return False\n    if string[0] ==\"]\": return False\n    if string[0] ==\"[\": return True\n    if string[0] ==\"]\": return False\n    if string[0] ==\"]\": return False\n    if string[0] ==\"[\": return True\n    if string[0] ==\"]\": return False\n    if string[0] ==\"]\": return False\n    if string[0] ==\"[\": return True\n    if string[0] ==\"]\": return False\n    if string[0] ==\"]\": return False\n    if string[0] ==\"[\": return True\n    if string[0] ==\"]\": return False\n    if string[0] ==\"]\": return False\n    if string[0] ==\"[\": return True\n    if string[0] ==\"]\": return False\n    if string[0] ==\"]\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4dgmqhcx.jl:65\nin expression starting at /tmp/tmp4dgmqhcx.jl:65\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string = \"]\" then return false\n    if string[0] = \"]\" then return false\n    if string[len(string) - 1] = \"]\" then return false\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] =\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuylvwgbj.jl:20\nin expression starting at /tmp/tmpuylvwgbj.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string == \"\" or string == \"[]\" or string == \"[]\":\n        return False\n    else:\n        return is_nested(string[1:]) or is_nested(string[:-1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"string\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjk2ptdeu.jl:20\nin expression starting at /tmp/tmpjk2ptdeu.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    for i = 1 to len(string) - 1 do\n        if string[i] = \"]\" and string[i - 1] = \"[\" then return true\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptorgzqxt.jl:20\nin expression starting at /tmp/tmptorgzqxt.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    for i = 1 to len(string) - 1 do\n        if string[i] = \"]\" and string[i - 1] = \"[\" then return true\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptorgzqxt.jl:20\nin expression starting at /tmp/tmptorgzqxt.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return is_valid(string) and is_nested_rec(string, 0, len(string) - 1)\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmp_dpklnnr.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_dpklnnr.jl:20\nin expression starting at /tmp/tmp_dpklnnr.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string = \"]\" then return true\n    if string[0] = \"[\" then return is_nested(string[1:])\n    return is_nested(string[1:])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq3v2rqzr.jl:20\nin expression starting at /tmp/tmpq3v2rqzr.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string = \"]\" then return true\n    if string[1] = \"]\" then return false\n    if string[0] = \"]\" then return false\n    if string[-1] = \"]\" then return false\n    if string[-2] = \"]\" then return false\n    if string[-3] = \"]\" then return false\n    if string[-4] = \"]\" then return false\n    if string[-5] = \"]\" then return false\n    if string[-6] = \"]\" then return false\n    if string[-7] = \"]\" then return false\n    if string[-8] = \"]\" then return false\n    if string[-9] = \"]\" then return false\n    if string[-10] = \"]\" then return false\n    if string[-11] = \"]\" then return false\n    if string[-12] = \"]\" then return false\n    if string[-13] = \"]\" then return false\n    if string[-14] = \"]\" then return false\n    if string[-15] = \"]\" then return false\n    if string[-16] = \"]\" then return false\n    if string[-17] = \"]\" then return false\n    if string[-18] = \"]\" then return false\n    if string[-19] = \"]\" then return false\n    if string[-20] = \"]\" then return false\n    if string[-21] = \"]\" then return false\n    if string[-22] = \"]\" then return false\n    if string[-23] = \"]\" then return false\n    if string[-24] = \"]\" then return false\n    if string[-25] = \"]\" then return false\n    if string[-26] = \"]\" then return false\n    if string[-27] = \"]\" then return false\n    if string[-28] = \"]\" then return false\n    if string[-29] = \"]\" then return false\n    if string[-30] = \"]\" then return false\n    if string[-31] = \"]\" then return false\n    if string[-32] = \"]\" then return false\n    if string[-33] = \"]\" then return false\n    if string[-\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0ncxe5x6.jl:20\nin expression starting at /tmp/tmp0ncxe5x6.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return is_valid(string) and is_nested_rec(string, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpga1g43d3.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpga1g43d3.jl:20\nin expression starting at /tmp/tmpga1g43d3.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string == \"\" or string == \" \":\n        return False\n    if string[0] == \"]\":\n        return False\n    if string[0] == \"[\":\n        return True\n    if string[0] == \"]\":\n        return False\n    if string[0] == \"[\":\n        return True\n    if string[0] == \"]\":\n        return False\n    if string[0] == \"[\":\n        return True\n    if string[0] == \"]\":\n        return False\n    if string[0] == \"[\":\n        return True\n    if string[0] == \"]\":\n        return False\n    if string[0] == \"[\":\n        return True\n    if string[0] == \"]\":\n        return False\n    if string[0] == \"[\":\n        return True\n    if string[0] == \"]\":\n        return False\n    if string[0] == \"[\":\n        return True\n    if string[0] == \"]\":\n        return False\n    if string[0] == \"[\":\n        return True\n    if string[0] == \"]\":\n        return False\n    if string[0] == \"[\":\n        return True\n    if string[0] == \"]\":\n        return False\n    if string[0] == \"[\":\n        return True\n    if string[0] == \"]\":\n        return False\n    if string[0] == \"[\":\n        return True\n    if string[0] == \"]\":\n        return False\n    if string[0] == \"[\":\n        return True\n    if string[0] == \"]\":\n        return False\n    if string[0] == \"[\":\n        return True\n    if string[0] == \"]\":\n        return False\n    if string[0] == \"[\":\n        return True\n    if string[0] == \"]\":\n        return False\n    if string[0] == \"[\":\n        return True\n    if string[0] == \"]\":\n        return False\n    if string[0] == \"[\":\n        return True\n    if string[0] == \"]\":\n        return False\n    if string[0] == \"[\":\n        return True\n    if string\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"string\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp33d00z26.jl:20\nin expression starting at /tmp/tmp33d00z26.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    for i = 1 to len(string) - 1 do\n        if string[i] = \"]\" and string[i - 1] = \"[\" then return true\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptorgzqxt.jl:20\nin expression starting at /tmp/tmptorgzqxt.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    for i = 1 to len(string) - 1 do\n        if string[i] = \"]\" and string[i - 1] = \"[\" then return true\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptorgzqxt.jl:20\nin expression starting at /tmp/tmptorgzqxt.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string == \"\" or string == \" \":\n        return False\n    \n    stack = []\n    for i in range(len(string)):\n        if string[i] == \"[\":\n            stack.append(i)\n        elif string[i] == \"]\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"string\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg8m_xa2c.jl:20\nin expression starting at /tmp/tmpg8m_xa2c.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    return is_nested(string[1:])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjgo3gppa.jl:20\nin expression starting at /tmp/tmpjgo3gppa.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string == \"\" or string == \"[]\":\n        return False\n    else:\n        return is_nested_helper(string, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"string\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpak476db7.jl:20\nin expression starting at /tmp/tmpak476db7.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return True if string.find('[') != -1 and string.find(']') != -1 and string.find('[', string.find('[')) != -1 else False\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpcbup413j.jl:19 expected \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcbup413j.jl:20\nin expression starting at /tmp/tmpcbup413j.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if len(string) == 0:\n        return False\n    if string[0] == '[':\n        return is_nested(string[1:])\n    if string[0] == ']':\n        return is_nested(string[1:])\n    return False\n\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx688zhvf.jl:21\nin expression starting at /tmp/tmpx688zhvf.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string == \"\"\n        return false\n    else\n        return is_nested(string[1:]) or is_nested(string[:-1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9c1i07o2.jl:23\nin expression starting at /tmp/tmp9c1i07o2.jl:23\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if len(string) == 0:\n        return False\n    if string[0] == '[':\n        return is_nested(string[1:])\n    else:\n        return is_nested(string[1:]) or is_nested(string[0:])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0d4a94ib.jl:21\nin expression starting at /tmp/tmp0d4a94ib.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string == \"\" or string[0] != \"[\" or string[-1] != \"]\":\n        return False\n    stack = []\n    for i in range(len(string)):\n        if string[i] == \"[\":\n            stack.append(i)\n        elif string[i] == \"]\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"string\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw22ianxc.jl:20\nin expression starting at /tmp/tmpw22ianxc.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[len(string) - 1] = \"]\" then return false\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    return is_nested(string[1:len(string) - 1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd4uguc3s.jl:20\nin expression starting at /tmp/tmpd4uguc3s.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    for i in range(1, len(string)):\n        if string[i] = \"]\" and string[i-1] = \"[\":\n            return true\n        if string[i] = \"[\" and string[i-1] = \"]\":\n            return false\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6_anbydf.jl:20\nin expression starting at /tmp/tmp6_anbydf.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return True if string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -1 and string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -1 and string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -1 and string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -1 and string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -1 and string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -1 and string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -1 and string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -1 and string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -1 and string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -1 and string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -1 and string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -1 and string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -1 and string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -1 and string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -1 and string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -1 and string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpicw2b2mt.jl:19 expected \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpicw2b2mt.jl:20\nin expression starting at /tmp/tmpicw2b2mt.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    return is_nested(string[1:])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjgo3gppa.jl:20\nin expression starting at /tmp/tmpjgo3gppa.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string = \"]\" then return true\n    if string[1] = \"]\" then return false\n    if string[0] = \"[\" and string[len(string)-1] = \"]\" then return true\n    return is_nested(string[1:]) or is_nested(string[0:len(string)-1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpse0yxaix.jl:20\nin expression starting at /tmp/tmpse0yxaix.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string = \"]\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[1] = \"]\" then return false\n    if string[1] = \"[\" then return true\n    if string[2] = \"]\" then return false\n    if string[2] = \"[\" then return true\n    if string[3] = \"]\" then return false\n    if string[3] = \"[\" then return true\n    if string[4] = \"]\" then return false\n    if string[4] = \"[\" then return true\n    if string[5] = \"]\" then return false\n    if string[5] = \"[\" then return true\n    if string[6] = \"]\" then return false\n    if string[6] = \"[\" then return true\n    if string[7] = \"]\" then return false\n    if string[7] = \"[\" then return true\n    if string[8] = \"]\" then return false\n    if string[8] = \"[\" then return true\n    if string[9] = \"]\" then return false\n    if string[9] = \"[\" then return true\n    if string[10] = \"]\" then return false\n    if string[10] = \"[\" then return true\n    if string[11] = \"]\" then return false\n    if string[11] = \"[\" then return true\n    if string[12] = \"]\" then return false\n    if string[12] = \"[\" then return true\n    if string[13] = \"]\" then return false\n    if string[13] = \"[\" then return true\n    if string[14] = \"]\" then return false\n    if string[14] = \"[\" then return true\n    if string[15] = \"]\" then return false\n    if string[15] = \"[\" then return true\n    if string[16] = \"]\" then return false\n    if string[16] = \"[\" then return true\n    if string[17] = \"]\" then return false\n    if string[17] = \"[\" then return true\n    if string[18] = \"]\" then return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7nw57eda.jl:20\nin expression starting at /tmp/tmp7nw57eda.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string = \"]\" then return false\n    if string[0] = \"]\" then return false\n    if string[len(string) - 1] = \"]\" then return false\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    return is_nested(string[1:len(string) - 1]) or is_nested(string[1:len(string) - 1] + \"]\")\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp39zuxh0t.jl:20\nin expression starting at /tmp/tmp39zuxh0t.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string == \"\" or string == \"[]\":\n        return False\n    else:\n        return is_nested(string[1:]) or is_nested(string[:-1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"string\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd7ay2412.jl:20\nin expression starting at /tmp/tmpd7ay2412.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string == \"\" or string == \"[]\":\n        return False\n    else:\n        stack = []\n        for i in range(len(string)):\n            if string[i] == \"[\":\n                stack.append(i)\n            else:\n                if len(stack) == 0:\n                    return False\n                else:\n                    stack.pop()\n        return True\n\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"string\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp64rw9_2n.jl:20\nin expression starting at /tmp/tmp64rw9_2n.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return string.find('[') != -1 and string.find(']') != -1 and string.find('[', string.find('[')) != -1\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpcqvfo7ed.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcqvfo7ed.jl:20\nin expression starting at /tmp/tmpcqvfo7ed.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return is_valid(string) and is_nested_rec(string, 0, len(string) - 1)\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmp_dpklnnr.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_dpklnnr.jl:20\nin expression starting at /tmp/tmp_dpklnnr.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    return is_nested(string[1:])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjgo3gppa.jl:20\nin expression starting at /tmp/tmpjgo3gppa.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    for i in range(1, len(string)):\n        if string[i] = \"]\" and string[i-1] = \"[\":\n            return true\n        if string[i] = \"[\" and string[i-1] = \"]\":\n            return true\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwdam86oh.jl:20\nin expression starting at /tmp/tmpwdam86oh.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    for i = 1 to len(string) - 1 do\n        if string[i] = \"]\" and string[i - 1] = \"[\" then return true\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptorgzqxt.jl:20\nin expression starting at /tmp/tmptorgzqxt.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    for i = 1 to len(string) - 1 do\n        if string[i] = \"]\" and string[i - 1] = \"[\" then return true\n        if string[i] = \"[\" and string[i - 1] = \"]\" then return false\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9qoft2ai.jl:20\nin expression starting at /tmp/tmp9qoft2ai.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string ==\"\" then return false\n    if string[1] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[1] = \"[\" then return true\n    if string[1] = \"]\" then return false\n    if string[2] = \"[\" then return true\n    if string[2] = \"]\" then return false\n    if string[3] = \"[\" then return true\n    if string[3] = \"]\" then return false\n    if string[4] = \"[\" then return true\n    if string[4] = \"]\" then return false\n    if string[5] = \"[\" then return true\n    if string[5] = \"]\" then return false\n    if string[6] = \"[\" then return true\n    if string[6] = \"]\" then return false\n    if string[7] = \"[\" then return true\n    if string[7] = \"]\" then return false\n    if string[8] = \"[\" then return true\n    if string[8] = \"]\" then return false\n    if string[9] = \"[\" then return true\n    if string[9] = \"]\" then return false\n    if string[10] = \"[\" then return true\n    if string[10] = \"]\" then return false\n    if string[11] = \"[\" then return true\n    if string[11] = \"]\" then return false\n    if string[12] = \"[\" then return true\n    if string[12] = \"]\" then return false\n    if string[13] = \"[\" then return true\n    if string[13] = \"]\" then return false\n    if string[14] = \"[\" then return true\n    if string[14] = \"]\" then return false\n    if string[15] = \"[\" then return true\n    if string[15] = \"]\" then return false\n    if string[16] = \"[\" then return true\n    if string[16] = \"]\" then return false\n    if string[17] = \"[\" then return true\n    if string[17] = \"]\" then return false\n    if string[18] = \"[\" then return true\n    if string[18] = \"]\"\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfohnzx8d.jl:20\nin expression starting at /tmp/tmpfohnzx8d.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    for i = 1 to len(string) - 1 do\n        if string[i] = \"]\" and string[i - 1] = \"[\" then return true\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptorgzqxt.jl:20\nin expression starting at /tmp/tmptorgzqxt.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    for i = 1 to len(string) - 1 do\n        if string[i] = \"]\" and string[i - 1] = \"[\" then return true\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptorgzqxt.jl:20\nin expression starting at /tmp/tmptorgzqxt.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return is_valid(string) and is_nested_helper(string, 0, len(string) - 1)\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpfpxqi2q7.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfpxqi2q7.jl:20\nin expression starting at /tmp/tmpfpxqi2q7.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"[\" and string[-1] = \"]\" then return true\n    return is_nested(string[1:len(string) - 1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiu5mdj6q.jl:20\nin expression starting at /tmp/tmpiu5mdj6q.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return True if is_valid(string) and is_nested_rec(string) else False\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmp1x1pbn7z.jl:19 expected \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1x1pbn7z.jl:20\nin expression starting at /tmp/tmp1x1pbn7z.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    for i = 1 to len(string) - 1 do\n        if string[i] = \"]\" and string[i - 1] = \"[\" then return true\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptorgzqxt.jl:20\nin expression starting at /tmp/tmptorgzqxt.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string = \"]\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[1] = \"]\" then return false\n    if string[1] = \"[\" then return true\n    if string[2] = \"]\" then return false\n    if string[2] = \"[\" then return true\n    if string[3] = \"]\" then return false\n    if string[3] = \"[\" then return true\n    if string[4] = \"]\" then return false\n    if string[4] = \"[\" then return true\n    if string[5] = \"]\" then return false\n    if string[5] = \"[\" then return true\n    if string[6] = \"]\" then return false\n    if string[6] = \"[\" then return true\n    if string[7] = \"]\" then return false\n    if string[7] = \"[\" then return true\n    if string[8] = \"]\" then return false\n    if string[8] = \"[\" then return true\n    if string[9] = \"]\" then return false\n    if string[9] = \"[\" then return true\n    if string[10] = \"]\" then return false\n    if string[10] = \"[\" then return true\n    if string[11] = \"]\" then return false\n    if string[11] = \"[\" then return true\n    if string[12] = \"]\" then return false\n    if string[12] = \"[\" then return true\n    if string[13] = \"]\" then return false\n    if string[13] = \"[\" then return true\n    if string[14] = \"]\" then return false\n    if string[14] = \"[\" then return true\n    if string[15] = \"]\" then return false\n    if string[15] = \"[\" then return true\n    if string[16] = \"]\" then return false\n    if string[16] = \"[\" then return true\n    if string[17] = \"]\" then return false\n    if string[17] = \"[\" then return true\n    if string[18] = \"]\" then return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7nw57eda.jl:20\nin expression starting at /tmp/tmp7nw57eda.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return is_valid(string) and is_nested_rec(string, 0)\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpzrmw3dr9.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzrmw3dr9.jl:20\nin expression starting at /tmp/tmpzrmw3dr9.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return True if is_nested_rec(string, 0, 0) else False\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpu60t1chl.jl:19 expected \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu60t1chl.jl:20\nin expression starting at /tmp/tmpu60t1chl.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    return is_nested(string[1:])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjgo3gppa.jl:20\nin expression starting at /tmp/tmpjgo3gppa.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string =~ /^\\[\\]$/\n        return true\n    else\n        return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg3n5hvis.jl:20\nin expression starting at /tmp/tmpg3n5hvis.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if len(string) == 0:\n        return False\n    elif len(string) == 1:\n        return True\n    else:\n        return is_nested(string[1:]) or is_nested(string[0:1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdyjarz3e.jl:21\nin expression starting at /tmp/tmpdyjarz3e.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    return is_nested(string[1:])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjgo3gppa.jl:20\nin expression starting at /tmp/tmpjgo3gppa.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return True if is_valid(string) and is_nested_rec(string, 0, len(string) - 1) else False\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpyuamcr66.jl:19 expected \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyuamcr66.jl:20\nin expression starting at /tmp/tmpyuamcr66.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return True\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsmst15pe.jl:19 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsmst15pe.jl:1\nin expression starting at /tmp/tmpsmst15pe.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string ==\"\":\n        return False\n    else:\n        return (string[0]==\"[\" and string[-1]==\"]\") or is_nested(string[1:])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprhtwm5ky.jl:21\nin expression starting at /tmp/tmprhtwm5ky.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"[\" and string[len(string)-1] = \"]\" then return true\n    return is_nested(string[1:len(string)-1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdxn0tp9h.jl:20\nin expression starting at /tmp/tmpdxn0tp9h.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    for i = 1 to len(string) - 1 do\n        if string[i] = \"]\" and string[i - 1] = \"[\" then return true\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptorgzqxt.jl:20\nin expression starting at /tmp/tmptorgzqxt.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string == \"\" or string == \" \":\n        return False\n    \n    stack = []\n    for i in range(len(string)):\n        if string[i] == \"[\":\n            stack.append(\"[\")\n        elif string[i] == \"]\":\n            if len(stack) == 0:\n                return False\n            elif stack[len(stack)-1] == \"[\":\n                stack.pop()\n            else:\n                return False\n    return True\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"string\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpasrvhg3_.jl:20\nin expression starting at /tmp/tmpasrvhg3_.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[len(string) - 1] = \"]\" then return false\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    if string[\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplcnfrjh6.jl:20\nin expression starting at /tmp/tmplcnfrjh6.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    for i in range(1, len(string)):\n        if string[i] = \"]\" and string[i-1] = \"[\":\n            return true\n        if string[i] = \"[\" and string[i-1] = \"]\":\n            return true\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwdam86oh.jl:20\nin expression starting at /tmp/tmpwdam86oh.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return True\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsmst15pe.jl:19 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsmst15pe.jl:1\nin expression starting at /tmp/tmpsmst15pe.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return True if string.find('[') != -1 and string.find(']') != -1 and string.find('[', string.find('[')) != -1 else False\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpcbup413j.jl:19 expected \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcbup413j.jl:20\nin expression starting at /tmp/tmpcbup413j.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    for i = 1 to len(string) - 1 do\n        if string[i] = \"]\" and string[i - 1] = \"[\" then return true\n    return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptorgzqxt.jl:20\nin expression starting at /tmp/tmptorgzqxt.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string = \"]\" then return false\n    if string = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyt__tl2l.jl:20\nin expression starting at /tmp/tmpyt__tl2l.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    return is_nested(string[1:])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjgo3gppa.jl:20\nin expression starting at /tmp/tmpjgo3gppa.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return True if is_valid_subsequence(string, 0, len(string) - 1) else False\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293230,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmp0raa3e1u.jl:19 expected \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0raa3e1u.jl:20\nin expression starting at /tmp/tmp0raa3e1u.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    return is_nested(string[1:])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjgo3gppa.jl:20\nin expression starting at /tmp/tmpjgo3gppa.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string == \"\" or string == \" \":\n        return False\n    elif string[0] == \"[\" and string[-1] == \"]\":\n        return True\n    else:\n        return is_nested(string[1:-1]) or is_nested(string[0:-2])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293230,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"string\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9_inci3c.jl:20\nin expression starting at /tmp/tmp9_inci3c.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return (string.count(\"[\") > string.count(\"]\")) and (string.count(\"[\") > string.count(\"]\"))\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293230,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmp0wmsqfjw.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0wmsqfjw.jl:20\nin expression starting at /tmp/tmp0wmsqfjw.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string == \"\" or string[0] != \"[\" or string[-1] != \"]\":\n        return False\n    stack = []\n    for i in range(len(string)):\n        if string[i] == \"[\":\n            stack.append(\"[\")\n        elif string[i] == \"]\":\n            if len(stack) == 0:\n                return False\n            if stack[len(stack) - 1] == \"[\":\n                stack.pop()\n            else:\n                return False\n    return True\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293230,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"string\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_2avpqhq.jl:20\nin expression starting at /tmp/tmp_2avpqhq.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string = \"]\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    return is_nested(string[1:]) or is_nested(string[1:])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuhijqmt5.jl:20\nin expression starting at /tmp/tmpuhijqmt5.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    return is_nested(string[1:])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjgo3gppa.jl:20\nin expression starting at /tmp/tmpjgo3gppa.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return True if string.find('[') != -1 and string.find(']') != -1 and string.find('[', string.find('[')) != -1 else False\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293224,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpcbup413j.jl:19 expected \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcbup413j.jl:20\nin expression starting at /tmp/tmpcbup413j.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\"\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293222,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl3gb55f8.jl:20\nin expression starting at /tmp/tmpl3gb55f8.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if len(string) == 0:\n        return False\n    else:\n        return is_nested(string[1:]) or is_nested(string[1:])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293230,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpze2jw784.jl:21\nin expression starting at /tmp/tmpze2jw784.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return True if is_valid(string) and is_nested(string[1:]) else False\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293230,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpld4x9s2h.jl:19 expected \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpld4x9s2h.jl:20\nin expression starting at /tmp/tmpld4x9s2h.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string ==\"\": return False\n    if string[0] ==\"[\": return is_nested(string[1:])\n    if string[-1] ==\"]\": return is_nested(string[:-1])\n    return False\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_8rrkx9x.jl:21\nin expression starting at /tmp/tmp_8rrkx9x.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if len(string) == 0:\n        return False\n    if string[0] == '[':\n        return True\n    return is_nested(string[1:])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293230,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0evjqwsj.jl:21\nin expression starting at /tmp/tmp0evjqwsj.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[1] = \"]\" then return false\n    if string[1] = \"[\" then return true\n    return is_nested(string[2:])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293230,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfp_3y1sg.jl:20\nin expression starting at /tmp/tmpfp_3y1sg.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return string.find(\"[\") != -1 and string.find(\"]\") != -1 and string.find(\"]\") != -1 and string.find(\"[\") != -1\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293230,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpj2ab1iiw.jl:19 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj2ab1iiw.jl:20\nin expression starting at /tmp/tmpj2ab1iiw.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return True if is_valid(string) and is_nested_rec(string) else False\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmp1x1pbn7z.jl:19 expected \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1x1pbn7z.jl:20\nin expression starting at /tmp/tmp1x1pbn7z.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string == \"\" or string == \" \":\n        return False\n    if string[0] == \"[\" and string[-1] == \"]\":\n        return True\n    if string[0] == \"]\":\n        return False\n    if string[0] == \"[\" and string[-1] == \"[\":\n        return True\n    if string[0] == \"[\" and string[-1] == \"]\":\n        return True\n    if string[0] == \"]\":\n        return False\n    if string[0] == \"[\" and string[-1] == \"[\":\n        return True\n    if string[0] == \"[\" and string[-1] == \"]\":\n        return True\n    if string[0] == \"]\":\n        return False\n    if string[0] == \"[\" and string[-1] == \"[\":\n        return True\n    if string[0] == \"[\" and string[-1] == \"]\":\n        return True\n    if string[0] == \"]\":\n        return False\n    if string[0] == \"[\" and string[-1] == \"[\":\n        return True\n    if string[0] == \"[\" and string[-1] == \"]\":\n        return True\n    if string[0] == \"]\":\n        return False\n    if string[0] == \"[\" and string[-1] == \"[\":\n        return True\n    if string[0] == \"[\" and string[-1] == \"]\":\n        return True\n    if string[0] == \"]\":\n        return False\n    if string[0] == \"[\" and string[-1] == \"[\":\n        return True\n    if string[0] == \"[\" and string[-1] == \"]\":\n        return True\n    if string[0] == \"]\":\n        return False\n    if string[0] == \"[\" and string[-1] == \"[\":\n        return True\n    if string[0] == \"[\" and string[-1] == \"]\":\n        return True\n    if string[0] == \"]\":\n        return False\n    if string[0] == \"[\" and string[-1] == \"[\":\n        return True\n\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293231,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"string\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5yxp2efv.jl:20\nin expression starting at /tmp/tmp5yxp2efv.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string =~ /^\\[\\]$/\n        return false\n    else\n        return true\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293223,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1dkbpm1o.jl:20\nin expression starting at /tmp/tmp1dkbpm1o.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string == \"\"\n        return False\n    else\n        return is_nested(string[1:]) or is_nested(string[1:])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293231,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnbky1s63.jl:23\nin expression starting at /tmp/tmpnbky1s63.jl:23\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    return is_nested(string[1:len(string) - 1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwrm3jwr4.jl:20\nin expression starting at /tmp/tmpwrm3jwr4.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string = \"]\" then return false\n    if string[0] = \"]\" then return false\n    if string[len(string) - 1] = \"]\" then return false\n    if string[0] = \"[\" and string[len(string) - 1] = \"]\" then return true\n    return is_nested(string[1:len(string) - 1])\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293231,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy8rfez8r.jl:20\nin expression starting at /tmp/tmpy8rfez8r.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return True\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsmst15pe.jl:19 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsmst15pe.jl:1\nin expression starting at /tmp/tmpsmst15pe.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string = \"\" then return false\n    if string = \"]\" then return true\n    if string[0] = \"]\" then return false\n    if string[0] = \"[\" then return true\n    if string[0] = \"]\" then return false\n    if string[1] = \"]\" then return false\n    if string[1] = \"[\" then return true\n    if string[2] = \"]\" then return false\n    if string[2] = \"[\" then return true\n    if string[3] = \"]\" then return false\n    if string[3] = \"[\" then return true\n    if string[4] = \"]\" then return false\n    if string[4] = \"[\" then return true\n    if string[5] = \"]\" then return false\n    if string[5] = \"[\" then return true\n    if string[6] = \"]\" then return false\n    if string[6] = \"[\" then return true\n    if string[7] = \"]\" then return false\n    if string[7] = \"[\" then return true\n    if string[8] = \"]\" then return false\n    if string[8] = \"[\" then return true\n    if string[9] = \"]\" then return false\n    if string[9] = \"[\" then return true\n    if string[10] = \"]\" then return false\n    if string[10] = \"[\" then return true\n    if string[11] = \"]\" then return false\n    if string[11] = \"[\" then return true\n    if string[12] = \"]\" then return false\n    if string[12] = \"[\" then return true\n    if string[13] = \"]\" then return false\n    if string[13] = \"[\" then return true\n    if string[14] = \"]\" then return false\n    if string[14] = \"[\" then return true\n    if string[15] = \"]\" then return false\n    if string[15] = \"[\" then return true\n    if string[16] = \"]\" then return false\n    if string[16] = \"[\" then return true\n    if string[17] = \"]\" then return false\n    if string[17] = \"[\" then return true\n    if string[18] = \"]\" then return false\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7nw57eda.jl:20\nin expression starting at /tmp/tmp7nw57eda.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return True\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsmst15pe.jl:19 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsmst15pe.jl:1\nin expression starting at /tmp/tmpsmst15pe.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}