name: HumanEval_111_histogram
language: jl
prompt: "\"\"\"Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n    of the letter with the most repetition and containing the corresponding\
  \ count.\n    If several letters have the same occurrence, return all of them.\n\
  \    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"a\" => 1, \"b\" =>\
  \ 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"a\" => 2, \"b\" =>\
  \ 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2, \"b\" => 2)\n    >>>\
  \ histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>> histogram(\"\")\n    Dict()\n\
  \n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}> \n"
tests: "using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
  a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") ==\
  \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\"\
  \ => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r\
  \ t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b\
  \ b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1,\
  \ \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
  a\") == Dict(\"a\" => 1))\nend\n"
completions: ["    return {\n        String.split(\" \")::String.count(String)\n \
    \       for String in test\n    }\n", "    return {\n        key: value + 1\n\
    \        for key, value in {\n            key: 0\n            for key in test.split()\n\
    \        }.items()\n    }", "    \"\"\"\n    \"\"\"\n    Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n\
    \    >>> histogram(\"a b b a\")\n    Dict(\"a\" => 2, \"b\" => 2)\n    >>> histogram(\"\
    a b c a b\")\n    Dict(\"a\" => 2, \"b\" => 2)\n    >>> histogram(\"b b b b a\"\
    )\n    Dict(\"b\" => 4)\n    >>> histogram(\"\")\n    Dict()", "    if len(test)\
    \ == 0:\n        return Dict()\n    else:\n        return Dict(test[0], 1) + histogram(test[1:])",
  "    let dict = {}\n    for c in test\n        if c not in dict\n            dict[c]\
    \ = 1\n        else\n            dict[c] += 1\n    return dict", "    if test\
    \ == \"\" then\n        return Dict()\n    else\n        return Dict(test[0],\
    \ 1)\n    end\nend\n\"\"\"", "    return {\n        key: value + 1\n        for\
    \ key, value in {\n            key: 0\n            for key in test.split()\n \
    \       }.items()\n        if key != ''\n    }\n", "    \"\"\"Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n\
    \    >>> histogram(\"a b b a\")\n    Dict(\"a\" => 2, \"b\" => 2)\n    >>> histogram(\"\
    a b c a b\")\n    Dict(\"a\" => 2, \"b\" => 2)\n    >>> histogram(\"b b b b a\"\
    )\n    Dict(\"b\" => 4)\n    >>> histogram(\"\")\n    Dict()\n    \"\"\"\n   \
    \ return {letter: count for letter, count in Counter(test).items() if len(letter)\
    \ == 1}", "    return {\n        test.split(\",\")::Int64,\n        test.split(\"\
    ,\")::Int64\n    }\n", "    let\n        histogram = Dict{},\n        count =\
    \ 0,\n        letter = \"\"\n    in\n        for letter in test\n            if\
    \ letter not in histogram\n                histogram[letter] = 1\n           \
    \     count += 1\n            else\n                histogram[letter] += 1\n \
    \       return histogram", "    return Dict(\n        filter(lambda x: x != \"\
    \", test.split(\" \"))\n        .map(lambda x: x.lower())\n        .reduce(lambda\
    \ x, y: x + y, 0)\n        .map(lambda x: (x, 1))\n        .reduce(lambda x, y:\
    \ x + y, {})\n    )\n", "    return {\n        test.split(',')[0] : test.split(',')[1].count(',')\n\
    \        for test in test.split(',')\n        if test.strip()\n    }", "    return\
    \ {\n        String.split(\" \")[0] : len(String.split(\" \"))\n        for String\
    \ in test\n    }\n", "    return {\n        test.split(\",\")[0] : test.split(\"\
    ,\")[1]\n        for test in test.split(\" \")\n    }\n", "    let letters = test.split(\"\
    \ \")\n    let histogram = Dict()\n    for letter in letters:\n        if histogram.contains(letter):\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    return histogram", "    return {\n        test.split(\" \")[0] : test.split(\"\
    \ \")[1]\n        for test in test.split(\" \")\n        if len(test) > 0\n  \
    \  }", "    return {\n        key: value + 1\n        for key, value in {\n  \
    \          key: 0\n            for key in test.split()\n        }.items()\n  \
    \  }\n", "    return Dict(\n        # Split the string by space\n        split(test,\
    \ \" \") -> \n            # Split each word by a single character\n          \
    \  split(test, \"\") -> \n                # Count the number of occurrences of\
    \ each character\n                map(\n                    # Count the number\
    \ of occurrences of each character\n                    count(\n             \
    \           # Count the number of occurrences of each character\n            \
    \            # in the word\n                        # Split the word by a single\
    \ character\n                        split(test, \"\") -> \n                 \
    \           # Count the number of occurrences of each character\n            \
    \                # in the word\n                            map(\n           \
    \                     # Count the number of occurrences of each character\n  \
    \                              # in the word\n                               \
    \ count(\n                                    # Count the number of occurrences\
    \ of each character\n                                    # in the word\n     \
    \                               # Split the word by a single character\n     \
    \                               split(test, \"\") -> \n                      \
    \                  # Count the number of occurrences of each character\n     \
    \                                   # in the word\n                          \
    \              map(\n                                            # Count the number\
    \ of occurrences of each character\n                                         \
    \   # in the word\n                                            count(\n      \
    \                                          # Count the number of occurrences of\
    \ each character\n                                                # in the word\n\
    \                                                # Split the word by a single\
    \ character\n                                                split(test, \"\"\
    ) -> \n                                                    # Count the number\
    \ of occurrences of each character\n                                         \
    \           # in the word\n                                                  \
    \  map(\n                                                        # Count the number\
    \ of occurrences of each character\n                                         \
    \               # in the word\n                                              \
    \          count(\n                                                          \
    \  # Count the number of occurrences of each character\n                     \
    \                                       # in the word\n                      \
    \                                      # Split the word by a single character\n\
    \                                                            split(test, \"\"\
    ) -> \n                                                                # Count\
    \ the number of occurrences of each character\n                              \
    \                                  # in the word\n                           \
    \                                     map(\n                                 \
    \                                   # Count the number of occurrences of each\
    \ character\n                                                                \
    \    # in the word\n                                                         \
    \           count(", "    \"\"\"Given a string representing a space separated\
    \ lowercase letters, return a dictionary\n    of the letter with the most repetition\
    \ and containing the corresponding count.\n    If several letters have the same\
    \ occurrence, return all of them.\n    \n    Example:\n    >>> histogram(\"a b\
    \ c\")\n    Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b\
    \ b a\")\n    Dict(\"a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n\
    \    Dict(\"a\" => 2, \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"\
    b\" => 4)\n    >>> histogram(\"\")\n    Dict()\n    \"\"\"\n    pass", "    return\
    \ {\n        test.split(\",\")[0] : test.split(\",\")[1].count(\",\")\n      \
    \  for test in test.split(\" \")\n    }\n", "    return Dict(\n        # Split\
    \ the string into a list of characters\n        split(test, \" \") -> List[String],\n\
    \        # Count the number of times each character appears in the list\n    \
    \    map(lambda x: x, count(test))\n    )", "    return {\n        key: value\
    \ + 1\n        for key, value in {\n            key: 0\n            for key in\
    \ test.split()\n        }.items()\n        if key != ''\n    }", "    if len(test)\
    \ == 0:\n        return Dict()\n    \n    # Count the number of each character\n\
    \    counts = Dict()\n    for char in test:\n        if char in counts:\n    \
    \        counts[char] += 1\n        else:\n            counts[char] = 1\n    \n\
    \    # Find the most repeated character\n    max_count = 0\n    max_char = \"\"\
    \n    for char in counts:\n        if counts[char] > max_count:\n            max_count\
    \ = counts[char]\n            max_char = char\n    \n    # Return the dictionary\n\
    \    return Dict(max_char, max_count)\n", "    let\n        counts = {},\n   \
    \     maxCount = 0,\n        maxLetter = \"\",\n        letter = \"\",\n     \
    \   letterCount = 0,\n        letterCounts = {},\n        letterCountsCount =\
    \ 0,\n        letterCountsCounts = {},\n        letterCountsCountsCount = 0,\n\
    \        letterCountsCountsCounts = {},\n        letterCountsCountsCountsCount\
    \ = 0,\n        letterCountsCountsCountsCounts = {},\n        letterCountsCountsCountsCountsCount\
    \ = 0,\n        letterCountsCountsCountsCountsCounts = {},\n        letterCountsCountsCountsCountsCountsCount\
    \ = 0,\n        letterCountsCountsCountsCountsCountsCounts = {},\n        letterCountsCountsCountsCountsCountsCountsCount\
    \ = 0,\n        letterCountsCountsCountsCountsCountsCountsCounts = {},\n     \
    \   letterCountsCountsCountsCountsCountsCountsCountsCount = 0,\n        letterCountsCountsCountsCountsCountsCountsCountsCounts\
    \ = {},\n        letterCountsCountsCountsCountsCountsCountsCountsCountsCount =\
    \ 0,\n        letterCountsCountsCountsCountsCountsCountsCountsCountsCounts = {},\n\
    \        letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0,\n\
    \        letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCounts =\
    \ {},\n        letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount\
    \ = 0,\n        letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCounts\
    \ = {},\n        letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount\
    \ = 0,\n        letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount\
    \ = 0,\n        letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount\
    \ = 0,\n        letterCounts", "    if test == \"\" then return Dict()\n    else\
    \ return Dict(test[1] => 1 + histogram(test[1:])), histogram(test[1:])", "   \
    \ if test == \"\" then return Dict()\n    return Dict(test[0] => 1, histogram(test[1::])\
    \ + 1)", "    \"\"\"\n    \"\"\"Given a string representing a space separated\
    \ lowercase letters, return a dictionary\n    of the letter with the most repetition\
    \ and containing the corresponding count.\n    If several letters have the same\
    \ occurrence, return all of them.\n    \n    Example:\n    >>> histogram(\"a b\
    \ c\")\n    Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b\
    \ b a\")\n    Dict(\"a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n\
    \    Dict(\"a\" => 2, \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"\
    b\" => 4)\n    >>> histogram(\"\")\n    Dict()", "    return Dict(\n        #\
    \ Split the string by space\n        split(test, \" \") ->\n            # Count\
    \ the number of occurences of each letter\n            map(\n                #\
    \ Count the number of occurences of each letter\n                count(\n    \
    \                # Get the first letter of the string\n                    head(\n\
    \                        # Split the string by the first occurence of the space\n\
    \                        split(\n                            # Get the second\
    \ letter of the string\n                            tail(\n                  \
    \              # Split the string by the first occurence of the space\n      \
    \                          split(\n                                    # Get the\
    \ first letter of the string\n                                    head(\n    \
    \                                    # Split the string by the first occurence\
    \ of the space\n                                        split(\n             \
    \                               # Get the second letter of the string\n      \
    \                                      tail(\n                               \
    \                 # Split the string by the first occurence of the space\n   \
    \                                             split(\n                       \
    \                             # Get the first letter of the string\n         \
    \                                           head(\n                          \
    \                              # Split the string by the first occurence of the\
    \ space\n                                                        split(\n    \
    \                                                        # Get the second letter\
    \ of the string\n                                                            tail(\n\
    \                                                                # Split the string\
    \ by the first occurence of the space\n                                      \
    \                          split(\n                                          \
    \                          # Get the first letter of the string\n            \
    \                                                        head(\n             \
    \                                                           # Split the string\
    \ by the first occurence of the space\n                                      \
    \                                  split(\n                                  \
    \                                          # Get the second letter of the string\n\
    \                                                                            tail(\n\
    \                                                                            \
    \    # Split the string by the first occurence of the space\n                \
    \                                                                split(\n    \
    \                                                                            \
    \    # Get the first letter of the string\n                                  \
    \                                                  head(\n                   \
    \                                                                     # Split\
    \ the string by the first occurence of the space\n                           \
    \                                                             split(\n       \
    \                                                                            \
    \           # Get the second letter of the string\n                          \
    \                                                                    tail(\n \
    \                                                                            \
    \                   # Split the string by the first occurence of the space\n \
    \                                                                            \
    \                   split(\n                                                 \
    \                                                   ", "    let\n        occurrences\
    \ = {},\n        max_occurrence = 0,\n        max_letter = \"\",\n        max_count\
    \ = 0,\n        count = 0;\n    for letter in test\n        if not occurrences.has(letter)\n\
    \            occurrences[letter] = 0;\n        occurrences[letter] += 1;\n   \
    \     if occurrences[letter] > max_occurrence\n            max_occurrence = occurrences[letter];\n\
    \        if occurrences[letter] == max_occurrence\n            if occurrences[letter]\
    \ > max_count\n                max_count = occurrences[letter];\n            \
    \    max_letter = letter;\n        count += 1;\n    return Dict(max_letter, max_count,\
    \ count);\n\"\"\"", "    return Dict(\n        # Split the string by spaces\n\
    \        split(test, \" \") -> List[String],\n        # Count the number of occurrences\
    \ of each letter\n        map(lambda x: x, count(test)) -> Int64\n    )", "  \
    \  if test == \"\" then\n        return Dict()\n    else\n        return Dict(test[0],\
    \ 1)", "    if test == \"\" then\n        return Dict()\n    else\n        return\
    \ Dict(test[0], 1)", "    return {\n        test.split(\" \")[0] : test.split(\"\
    \ \")[0].count(test.split(\" \")[0])\n        for test in test.split(\" \")\n\
    \    }", "    return {\n        String.split(\" \")[0] : len(String.split(\" \"\
    ))\n        for String in test\n    }\n", "    return {\n        test.split(\"\
    \ \")[0] : test.split(\" \")[0].count(test.split(\" \")[0])\n        for test\
    \ in test.split(\" \")\n    }\n", "    return {\n        key: value + 1\n    \
    \    for key, value in {\n            key: 0\n            for key in test.split()\n\
    \        }.items()\n        if key != ''\n    }", "    return {\n        test.split(\"\
    \ \")[0] : test.split(\" \")[0].count(test.split(\" \")[0])\n        for test\
    \ in test.split(\" \")\n    }", "    \"\"\"Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n    of the letter with the\
    \ most repetition and containing the corresponding count.\n    If several letters\
    \ have the same occurrence, return all of them.\n    \n    Example:\n    >>> histogram(\"\
    a b c\")\n    Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a\
    \ b b a\")\n    Dict(\"a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\"\
    )\n    Dict(\"a\" => 2, \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"\
    b\" => 4)\n    >>> histogram(\"\")\n    Dict()\n    \"\"\"\n    return Dict(test.split(\"\
    \ \"))", "    return {\n        test.split(\",\").map(lambda x: x.strip()).map(lambda\
    \ x: x.lower())::Dict{x, test.count(x)},\n        test.split(\",\").map(lambda\
    \ x: x.strip()).map(lambda x: x.lower())::Dict{x, test.count(x)}\n    }", "  \
    \  let\n        counts = {},\n        max_count = 0,\n        max_letter = None,\n\
    \        letter = None,\n        i = 0,\n        j = 0,\n        k = 0,\n    \
    \    l = 0,\n        m = 0,\n        n = 0,\n        o = 0,\n        p = 0,\n\
    \        q = 0,\n        r = 0,\n        s = 0,\n        t = 0,\n        u = 0,\n\
    \        v = 0,\n        w = 0,\n        x = 0,\n        y = 0,\n        z = 0,\n\
    \        letter_count = 0,\n        letter_count_max = 0,\n        letter_count_max_letter\
    \ = None,\n        letter_count_max_letter_count = 0,\n        letter_count_max_letter_count_count\
    \ = 0,\n        letter_count_max_letter_count_letter = None,\n        letter_count_max_letter_count_letter_count\
    \ = 0,\n        letter_count_max_letter_count_letter_count_count = 0,\n      \
    \  letter_count_max_letter_count_letter_count_letter = None,\n        letter_count_max_letter_count_letter_count_letter_count\
    \ = 0,\n        letter_count_max_letter_count_letter_count_letter_count_count\
    \ = 0,\n        letter_count_max_letter_count_letter_count_letter_count_letter\
    \ = None,\n        letter_count_max_letter_count_letter_count_letter_count_letter_count\
    \ = 0,\n        letter_count_max_letter_count_letter_count_letter_count_letter_count_count\
    \ = 0,\n        letter_count_max_letter_count_letter_count_letter_count_letter_count_letter\
    \ = None,\n        letter_count_max_letter_count_letter_count_letter_count_letter_count_letter_count\
    \ = 0,\n        letter_count_max_letter_count_letter_count_letter_count_letter_count_letter_count_count\
    \ = 0,\n        letter_count_max_letter_count_letter_count_letter_count_letter_count_letter",
  "    let\n        counts = {},\n        max_count = 0,\n        max_letter = \"\"\
    ,\n        max_count_letter = 0,\n        letter_count = 0,\n        letter =\
    \ \"\";\n    \n    for letter in test {\n        if (letter not in counts) {\n\
    \            counts[letter] = 0;\n        }\n        counts[letter] += 1;\n  \
    \      if (counts[letter] > max_count) {\n            max_count = counts[letter];\n\
    \            max_letter = letter;\n        }\n        if (counts[letter] > max_count_letter)\
    \ {\n            max_count_letter = counts[letter];\n        }\n    }\n    \n\
    \    return {max_letter, max_count}\n", "    return {\n        String.split()[0]\
    \ : len(String.split())\n    }\n", "    return {\n        key: value + 1\n   \
    \     for key, value in\n        reduce(lambda x, y: x + y,\n               map(lambda\
    \ x: x.split(), test.split()),\n               {}).items()\n        if len(key)\
    \ > 0\n    }\n", "    let\n        histogram = {},\n        letter: String,\n\
    \        count: Int64\n    in\n        for letter in test\n            if histogram[letter]\
    \ is undefined\n                histogram[letter] = 1\n            else\n    \
    \            histogram[letter] = histogram[letter] + 1\n    in\n        return\
    \ histogram", "    if len(test) == 0:\n        return Dict()\n    \n    # Count\
    \ the number of each character\n    counts = Dict()\n    for c in test:\n    \
    \    counts[c] = counts.get(c, 0) + 1\n    \n    # Find the character with the\
    \ most repetition\n    maxCount = max(counts.values())\n    maxCountChar = None\n\
    \    for c in counts:\n        if counts[c] == maxCount:\n            maxCountChar\
    \ = c\n    \n    # Return the dictionary\n    return Dict(maxCountChar, maxCount)\n",
  "    if test == \"\" then return Dict()\n    return Dict(test[0] => 1, histogram(test[1::])\
    \ + 1)", "    if test == \"\" then\n        return Dict()\n    else\n        return\
    \ Dict(test[0], 1)", "    \"\"\"\n    \"\"\"Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n    of the letter with the\
    \ most repetition and containing the corresponding count.\n    If several letters\
    \ have the same occurrence, return all of them.\n    \n    Example:\n    >>> histogram(\"\
    a b c\")\n    Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a\
    \ b b a\")\n    Dict(\"a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\"\
    )\n    Dict(\"a\" => 2, \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"\
    b\" => 4)\n    >>> histogram(\"\")\n    Dict()", "    if len(test) == 0:\n   \
    \     return Dict()\n    else:\n        return Dict(test[0], 1) + histogram(test[1:])",
  "    let\n        counts = {},\n        maxCount = 0,\n        maxLetter = \"\"\
    ,\n        letter,\n        i = 0,\n        j = 0,\n        k = 0,\n        l\
    \ = 0,\n        m = 0,\n        n = 0,\n        o = 0,\n        p = 0,\n     \
    \   q = 0,\n        r = 0,\n        s = 0,\n        t = 0,\n        u = 0,\n \
    \       v = 0,\n        w = 0,\n        x = 0,\n        y = 0,\n        z = 0,\n\
    \        letterCount = 0,\n        letterCounts = {},\n        letterCountsCount\
    \ = 0,\n        letterCountsCounts = {},\n        letterCountsCountsCount = 0,\n\
    \        letterCountsCountsCounts = {},\n        letterCountsCountsCountsCount\
    \ = 0,\n        letterCountsCountsCountsCounts = {},\n        letterCountsCountsCountsCountsCount\
    \ = 0,\n        letterCountsCountsCountsCountsCounts = {},\n        letterCountsCountsCountsCountsCountsCount\
    \ = 0,\n        letterCountsCountsCountsCountsCountsCounts = {},\n        letterCountsCountsCountsCountsCountsCountsCount\
    \ = 0,\n        letterCountsCountsCountsCountsCountsCountsCounts = {},\n     \
    \   letterCountsCountsCountsCountsCountsCountsCountsCount = 0,\n        letterCountsCountsCountsCountsCountsCountsCountsCounts\
    \ = {},\n        letterCountsCountsCountsCountsCountsCountsCountsCountsCount =\
    \ 0,\n        letterCountsCountsCountsCountsCountsCountsCountsCountsCounts = {},\n\
    \        letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0,\n\
    \        letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCounts =\
    \ {},\n        letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount\
    \ = 0,\n        letterCountsCountsCountsCountsCountsCountsCountsCountsCount",
  "    if len(test) == 0:\n        return Dict()\n    else:\n        return Dict(test[0],\
    \ 1) + histogram(test[1:])", "    return Dict(\n        for i in range(len(test)):\n\
    \            if test[i] in histogram:\n                histogram[test[i]] += 1\n\
    \            else:\n                histogram[test[i]] = 1\n    )", "    return\
    \ {\n        test.split(',')[0] : test.split(',')[1].count(',')\n    }", "   \
    \ return Dict(\n        # Split the string into a list of characters\n       \
    \ map(\n            # Convert each character to a lowercase string\n         \
    \   lambda c: c.lower(),\n            # Split the string into a list of characters\n\
    \            test.split()\n        )\n    )", "    if test == \"\" then return\
    \ Dict()\n    let result = Dict()\n    let letters = split(test, \" \")\n    for\
    \ letter in letters\n        if result[letter] == None then result[letter] = 1\n\
    \        else result[letter] += 1\n    return result", "    return {\n       \
    \ key: count for key, count in Counter(test).items()\n        if count > 1\n \
    \   }\n", "    return {\n        test.split(\" \")[0] : test.split(\" \").count(test.split(\"\
    \ \")[0])\n        for test in test.split(\" \")\n    }", "    return {\n    \
    \    test[i]: test.count(test[i]) for i in range(len(test))\n    }", "    let\
    \ count = 0\n    let max_count = 0\n    let max_letter = \"\"\n    let result\
    \ = Dict()\n    for letter in test\n        if count < max_count\n           \
    \ count = count + 1\n        else if count == max_count\n            if letter\
    \ > max_letter\n                max_letter = letter\n                max_count\
    \ = count\n        else\n            count = count + 1\n            result[letter]\
    \ = count\n    return result", "    return {\n        test.split(\" \")[0] : test.split(\"\
    \ \")[0].count(test.split(\" \")[0])\n        for test in test.split(\" \")\n\
    \    }", "    return {\n        test.split(\" \")[0] : test.split(\" \")[0].count(test.split(\"\
    \ \")[0])\n        for test in test.split(\" \")\n    }\n", "    return {\n  \
    \      key: value + 1\n        for key, value in {\n            key: 0\n     \
    \       for key in test.split()\n        }.items()\n        if key != \"\"\n \
    \   }\n", "    return Dict(\n        # Split the string by spaces\n        map(\n\
    \            # Convert each character to lowercase\n            lambda c: c.lower(),\n\
    \            # Split the string into a list\n            test.split(\" \")\n \
    \       )\n    )", "    \"\"\"Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    of the letter with the most repetition and\
    \ containing the corresponding count.\n    If several letters have the same occurrence,\
    \ return all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()", "    if len(test) == 0:\n        return Dict()\n\
    \    else:\n        counts = Dict()\n        for letter in test:\n           \
    \ counts[letter] = counts.get(letter, 0) + 1\n        return counts\n", "    return\
    \ {\n        test.split(\",\").map(lambda x: x.strip()).map(lambda x: x.lower())::Int64,\n\
    \        test.split(\",\").map(lambda x: x.strip()).map(lambda x: x.lower()).count()\n\
    \    }\n", "    \"\"\"\n    \"\"\"\n    Given a string representing a space separated\
    \ lowercase letters, return a dictionary\n    of the letter with the most repetition\
    \ and containing the corresponding count.\n    If several letters have the same\
    \ occurrence, return all of them.\n    \n    Example:\n    >>> histogram(\"a b\
    \ c\")\n    Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b\
    \ b a\")\n    Dict(\"a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n\
    \    Dict(\"a\" => 2, \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"\
    b\" => 4)\n    >>> histogram(\"\")\n    Dict()\n    \"\"\"\n    pass", "    return\
    \ Dict(\n        # Split the string into a list of characters\n        split(test,\
    \ \" \") -> List[String],\n        # Count the number of times each character\
    \ appears in the list\n        map(lambda x: x, split(test, \" \")) -> Map[String,\
    \ Int64],\n        # Get the character with the most occurrences\n        maxBy(lambda\
    \ x, y: y) -> String,\n        # Get the count of the character with the most\
    \ occurrences\n        maxBy(lambda x, y: x) -> Int64\n    )", "    let result\
    \ = Dict()\n    let letters = test.split(\" \")\n    for letter in letters:\n\
    \        if result.has(letter):\n            result[letter] += 1\n        else:\n\
    \            result[letter] = 1\n    return result", "    if test == \"\" then\n\
    \        return Dict()\n    else\n        return Dict(test[0], 1)\n", "    return\
    \ {\n        test[i]: test.count(test[i]) for i in range(len(test))\n    }", " \
    \   let\n        histo = Dict()\n        for c in test\n            if c in histo\n\
    \                histo[c] += 1\n            else\n                histo[c] = 1\n\
    \    return histo", "    let\n        counts = {},\n        maxCount = 0,\n  \
    \      maxLetter = \"\",\n        letter = \"\",\n        count = 0;\n    for\
    \ letter in test {\n        count = 0;\n        if counts.has(letter) {\n    \
    \        count = counts[letter];\n        }\n        counts[letter] = count +\
    \ 1;\n        if count > maxCount {\n            maxCount = count;\n         \
    \   maxLetter = letter;\n        }\n    }\n    return {maxLetter, maxCount};\n",
  "    return Dict(\n        map(lambda x: x,\n            filter(lambda x: x != \"\
    \",\n                   test.split(\" \")))\n    )\n", "    return {\n       \
    \ test.split(\",\")[0] : test.split(\",\")[1]\n        for test in test.split(\"\
    \ \")\n        if len(test) > 0\n    }", "    let\n        counts = {},\n    \
    \    max_count = 0,\n        max_letter = None,\n        letter = None,\n    \
    \    i = 0,\n        j = 0,\n        k = 0,\n        l = 0,\n        m = 0,\n\
    \        n = 0,\n        o = 0,\n        p = 0,\n        q = 0,\n        r = 0,\n\
    \        s = 0,\n        t = 0,\n        u = 0,\n        v = 0,\n        w = 0,\n\
    \        x = 0,\n        y = 0,\n        z = 0,\n        letter = None,\n    \
    \    count = 0,\n        max_count = 0,\n        max_letter = None,\n        i\
    \ = 0,\n        j = 0,\n        k = 0,\n        l = 0,\n        m = 0,\n     \
    \   n = 0,\n        o = 0,\n        p = 0,\n        q = 0,\n        r = 0,\n \
    \       s = 0,\n        t = 0,\n        u = 0,\n        v = 0,\n        w = 0,\n\
    \        x = 0,\n        y = 0,\n        z = 0,\n        letter = None,\n    \
    \    count = 0,\n        max_count = 0,\n        max_letter = None,\n        i\
    \ = 0,\n        j = 0,\n        k = 0,\n        l = 0,\n        m = 0,\n     \
    \   n = 0,\n        o = 0,\n        p = 0,\n        q = 0,\n        r = 0,\n \
    \       s = 0,\n        t = 0,\n        u = 0,\n        v = 0,\n        w = 0,\n\
    \        x = 0,\n        y = 0,\n        z = 0,\n        letter = None,\n    \
    \    count = 0,\n        max_count = 0,\n        max_letter = None,\n        i\
    \ = 0,\n        j = 0,\n        k = 0,\n        l = 0,\n        m = 0,\n     \
    \   n = 0,\n        o = 0,\n        p = 0,\n        q = 0,\n        r = 0,\n \
    \       s = 0,\n        t = 0,\n", "    return {\n        test.split(\" \")[0]\
    \ : test.split(\" \").count(test.split(\" \")[0])\n        for test in test.split(\"\
    \ \")\n    }\n", "    return {\n        test.split(\" \")[0] : test.split(\" \"\
    )[0].count(test.split(\" \")[0])\n        for test in test.split(\" \")\n    }",
  "    if test == \"\" then\n        return Dict()\n    else\n        return Dict(test[0],\
    \ 1)\n", "    \"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()", "    return {\n        String.split(\" \")::String.count(String)\n\
    \        for String in test\n    }\n", "    return {\n        test.split(\" \"\
    )[0] : test.split(\" \").count(test.split(\" \")[0])\n        for test in test.split(\"\
    \ \")\n    }", "    return {\n        test.split(\" \")[0] : test.split(\" \"\
    )[0].count(test.split(\" \")[0])\n        for test in test.split(\" \")\n    }",
  "    return {\n        test.split(',')[0] : test.split(',')[1].split(' ').length\n\
    \    }", "    return Dict(\n        # Split the string by space\n        split(test,\
    \ \" \") -> List[String],\n        # Count the number of occurences of each letter\n\
    \        map(lambda x: x, count(test)) -> Int64\n    )", "    return {\n     \
    \   String.split(\" \")[0] : len(String.split(\" \"))\n        for String in test\n\
    \    }", "    return {\n        test.split(\",\")::Int64,\n        test.split(\"\
    ,\")::Int64\n    }\n", "    let\n        occurrences = {},\n        max_occurrence\
    \ = 0,\n        max_letter = null,\n        max_count = 0,\n        count = 0,\n\
    \        letter = null,\n        i = 0,\n        j = 0,\n        k = 0,\n    \
    \    l = 0,\n        m = 0,\n        n = 0,\n        o = 0,\n        p = 0,\n\
    \        q = 0,\n        r = 0,\n        s = 0,\n        t = 0,\n        u = 0,\n\
    \        v = 0,\n        w = 0,\n        x = 0,\n        y = 0,\n        z = 0,\n\
    \        letter_count = 0,\n        letter_count_max = 0,\n        letter_count_max_letter\
    \ = null,\n        letter_count_max_count = 0,\n        letter_count_max_letter_count\
    \ = 0,\n        letter_count_max_letter_count_letter = null,\n        letter_count_max_letter_count_letter_count\
    \ = 0,\n        letter_count_max_letter_count_letter_count_letter = null,\n  \
    \      letter_count_max_letter_count_letter_count_letter_count = 0,\n        letter_count_max_letter_count_letter_count_letter_count_letter\
    \ = null,\n        letter_count_max_letter_count_letter_count_letter_count_letter_count\
    \ = 0,\n        letter_count_max_letter_count_letter_count_letter_count_letter_count_letter\
    \ = null,\n        letter_count_max_letter_count_letter_count_letter_count_letter_count_letter_count\
    \ = 0,\n        letter_count_max_letter_count_letter_count_letter_count_letter_count_letter_count_letter\
    \ = null,\n        letter_count_max_letter_count_letter_count_letter_count_letter_count_letter_count_letter_count\
    \ = 0,\n        letter_count_max_letter_count_letter_count_letter_count_letter_count_letter_count_letter_count\
    \ = 0,\n        letter_count_max_letter_count_letter_count_letter", "    let\n\
    \        d:Dict[String, Int64] = {},\n        letter:String,\n        count:Int64,\n\
    \        max:Int64 = 0,\n        max_letter:String = \"\",\n        i:Int64 =\
    \ 0,\n        j:Int64 = 0,\n        k:Int64 = 0,\n        l:Int64 = 0,\n     \
    \   m:Int64 = 0,\n        n:Int64 = 0,\n        o:Int64 = 0,\n        p:Int64\
    \ = 0,\n        q:Int64 = 0,\n        r:Int64 = 0,\n        s:Int64 = 0,\n   \
    \     t:Int64 = 0,\n        u:Int64 = 0,\n        v:Int64 = 0,\n        w:Int64\
    \ = 0,\n        x:Int64 = 0,\n        y:Int64 = 0,\n        z:Int64 = 0,\n   \
    \     z1:Int64 = 0,\n        z2:Int64 = 0,\n        z3:Int64 = 0,\n        z4:Int64\
    \ = 0,\n        z5:Int64 = 0,\n        z6:Int64 = 0,\n        z7:Int64 = 0,\n\
    \        z8:Int64 = 0,\n        z9:Int64 = 0,\n        z10:Int64 = 0,\n      \
    \  z11:Int64 = 0,\n        z12:Int64 = 0,\n        z13:Int64 = 0,\n        z14:Int64\
    \ = 0,\n        z15:Int64 = 0,\n        z16:Int64 = 0,\n        z17:Int64 = 0,\n\
    \        z18:Int64 = 0,\n        z19:Int64 = 0,\n        z20:Int64 = 0,\n    \
    \    z21:Int64 = 0,\n        z22:Int64 = 0,\n        z23:Int64 = 0,\n        z24:Int64\
    \ = 0,\n        z25:Int64 = 0,\n        z26:Int64 = 0,\n        z27:Int64 = 0,\n\
    \        z28:Int64 = 0,\n        z29:Int64 = 0,\n        z30:Int64 = 0,\n", " \
    \   let\n        counts = {},\n        max_count = 0,\n        max_letter = \"\
    \",\n        letter,\n        count;\n    for letter in test\n        count =\
    \ counts[letter] if counts[letter] > 0 else 0;\n        counts[letter] = count\
    \ + 1;\n        if count > max_count\n            max_count = count;\n       \
    \     max_letter = letter;\n    return max_count > 0 ? Dict(max_letter, max_count)\
    \ : Dict();", "    return {\n        key: value + 1\n        for key, value in\
    \ {\n            key: 0\n            for key in test.split()\n        }.items()\n\
    \        if key != \"\"\n    }\n", "    let result = {}\n    for c in test\n \
    \       if not result.has(c)\n            result[c] = 1\n        else\n      \
    \      result[c] += 1\n    return result", "    return {\n        key: test.count(key)\n\
    \        for key in test.split(' ')\n    }", "    return {\n        test.split(\"\
    \ \")[0] : test.split(\" \")[0].count(test.split(\" \")[0])\n        for test\
    \ in test.split(\" \")\n    }", "    return {\n        test.split(\",\")::Int64,\n\
    \        test.split(\",\")::Int64\n    }", "    return {\n        k: v + 1\n \
    \       for k, v in {\n            k: 0\n            for k in test.split()\n \
    \       }.items()\n        if k\n    }\n", "    return {\n        key: test.count(key)\n\
    \        for key in test.split(\" \")\n    }", "    return {\n        test.split(\"\
    \ \")[0] : test.split(\" \")[1]\n        for test in test.split(\" \")\n     \
    \   if len(test) > 0\n    }", "    return Dict(\n        reduce(\n           \
    \ (lambda a, b: a + b),\n            map(\n                lambda x: x,\n    \
    \            filter(\n                    lambda x: x != \"\",\n             \
    \       test.split(\" \")\n                )\n            ),\n            []\n\
    \        )\n    )\n", "    let letters = test.split(\" \")\n    let max = 0\n\
    \    let max_letter = None\n    let max_count = 0\n    let result = {}\n    for\
    \ letter in letters:\n        if not result.has(letter):\n            result[letter]\
    \ = 0\n        result[letter] += 1\n        if result[letter] > max_count:\n \
    \           max_count = result[letter]\n            max_letter = letter\n    if\
    \ max_count > max:\n        max = max_count\n    return Dict(max_letter, max)\n",
  "    return {\n        test.split(\" \")[0] : test.split(\" \")[0].count(test.split(\"\
    \ \")[0])\n        for test in test.split(\" \")\n    }\n", "    if len(test)\
    \ == 0:\n        return Dict()\n    counts = Dict()\n    for letter in test:\n\
    \        counts[letter] = counts.get(letter, 0) + 1\n    return counts\n", " \
    \   if len(test) == 0:\n        return Dict()\n    else:\n        return Dict(test[0],\
    \ 1) + histogram(test[1:])", "    return {\n        key: value + 1\n        for\
    \ key, value in {\n            key: 0\n            for key in test.split()\n \
    \       }.items()\n    }\n", "    return {\n        test.split(\",\")[0] : test.split(\"\
    ,\")[1]\n        for test in test.split(\" \")\n    }", "    if len(test) == 0:\n\
    \        return Dict()\n    \n    # Create a dictionary of the letters and their\
    \ counts\n    dictionary = Dict()\n    for char in test:\n        dictionary[char]\
    \ = dictionary.get(char, 0) + 1\n    \n    # Find the most repeated letter and\
    \ return it\n    most_repeated_letter = max(dictionary.items(), key=lambda x:\
    \ x[1])[0]\n    return dictionary[most_repeated_letter]", "    return {\n    \
    \    key: value + 1\n        for key, value in {\n            key: 0\n       \
    \     for key in test.split()\n        }.items()\n        if key != \"\"\n   \
    \ }\n", "    return {\n        test.split(\" \")[0] : test.split(\" \")[0].count(test.split(\"\
    \ \")[0])\n        for test in test.split(\" \")\n    }\n", "    return {\n  \
    \      test.split(\" \")[0] : test.split(\" \")[0].count(test.split(\" \")[0])\n\
    \        for test in test.split(\" \")\n    }\n", "    if test == \"\" then return\
    \ Dict()\n    return {test[0]: 1 + histogram(test[1::])}", "    if test == \"\"\
    \ then return Dict()\n    let result = Dict()\n    let count = 0\n    for c in\
    \ test {\n        if not result.contains(c) then {\n            result.add(c,\
    \ 1)\n            count = count + 1\n        }\n    }\n    if count == 1 then\
    \ {\n        result.add(result.keys()[0], count)\n    }\n    return result", " \
    \   \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n    \"\"\"\n    pass", "    \"\"\"Given a string\
    \ representing a space separated lowercase letters, return a dictionary\n    of\
    \ the letter with the most repetition and containing the corresponding count.\n\
    \    If several letters have the same occurrence, return all of them.\n    \n\
    \    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"a\" => 1, \"b\" => 1,\
    \ \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"a\" => 2, \"b\" => 2)\n\
    \    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2, \"b\" => 2)\n    >>> histogram(\"\
    b b b b a\")\n    Dict(\"b\" => 4)\n    >>> histogram(\"\")\n    Dict()", "  \
    \  if test == \"\" then\n        return Dict()\n    else\n        return Dict(test[0],\
    \ 1)", "    return {\n        test.split(\" \")[0] : test.split(\" \")[0].count(test.split(\"\
    \ \")[0])\n        for test in test.split(\" \")\n    }\n", "    return {\n  \
    \      test.split(\" \")[0] : test.split(\" \").count(test.split(\" \")[0])\n\
    \        for test in test.split(\" \")\n    }\n", "    \"\"\"Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n\
    \    >>> histogram(\"a b b a\")\n    Dict(\"a\" => 2, \"b\" => 2)\n    >>> histogram(\"\
    a b c a b\")\n    Dict(\"a\" => 2, \"b\" => 2)\n    >>> histogram(\"b b b b a\"\
    )\n    Dict(\"b\" => 4)\n    >>> histogram(\"\")\n    Dict()\n    \"\"\"\n   \
    \ pass", "    return Dict(\n        # Extract the letters from the string\n  \
    \      String.split(' ').map(lambda x: x[0])\n        # Count the occurrences\
    \ of each letter\n        .map(lambda x: (x, 1))\n        # Group the letters\
    \ by their count\n        .groupBy(lambda x: x[1])\n        # Count the number\
    \ of occurrences of each letter\n        .map(lambda x: (x[0], x[1].count()))\n\
    \        # Sort the letters by their count\n        .sortBy(lambda x: x[1])\n\
    \        # Return the most frequent letter\n        .map(lambda x: x[0])\n   \
    \ )", "    return {\n        test.split(',')[i] : test.split(',').length - i for\
    \ i in range(len(test.split(',')))\n    }", "    return Dict(\n        # Split\
    \ the string into a list of characters\n        split(test, \" \") -> List[String],\n\
    \        # Count the number of times each character appears in the list\n    \
    \    map(lambda x: x, count(test))\n    )", "    return Dict(\n        # Split\
    \ the string by space\n        map(\n            # Convert each character to lowercase\n\
    \            lambda c: c.lower(),\n            # Split the string by space\n \
    \           test.split(' ')\n        )\n    )", "    if test == \"\" then return\
    \ Dict()\n    else return Dict(test[0] => 1 + histogram(test[1::]))", "    return\
    \ {\n        key: test.count(key)\n        for key in test.split(\" \")\n    }\n",
  "    return {\n        test[i]: test.count(test[i]) for i in range(len(test))\n\
    \    }\n", "    return {\n        key: test.count(key)\n        for key in test.split('\
    \ ')\n    }", "    return Dict(\n        # Split the string into a list of characters\n\
    \        split(test, \" \") -> List[String],\n        # Count the number of occurences\
    \ of each character\n        map(lambda x: x, count(test)) -> Dict[String, Int64]\n\
    \    )", "    return Dict(\n        for c in test\n            if c not in histogram.Dict\n\
    \                histogram.Dict[c] = 1\n            else\n                histogram.Dict[c]\
    \ += 1\n    )", "    return {\n        test.split(',')[0] : test.split(',')[1].split('\
    \ ').length\n    }", "    let count = 0\n    let max = 0\n    let max_count =\
    \ 0\n    let result = {}\n    for c in test\n        if c == \" \"\n         \
    \   count = count + 1\n        else\n            if count > max_count\n      \
    \          max_count = count\n                max = c\n            else if count\
    \ == max_count\n                result[c] = result[c] + 1\n            else\n\
    \                result[c] = result[c] + 1\n    return result", "    let result\
    \ = Dict()\n    for c in test\n        if c in result\n            result[c] +=\
    \ 1\n        else\n            result[c] = 1\n    return result", "    return\
    \ {\n        test.split(\" \")[0] : test.split(\" \")[0].count(test.split(\" \"\
    )[0])\n        for test in test.split(\" \")\n    }\n", "    return {\n      \
    \  test.split(\" \")[0] : test.split(\" \")[0].count(test.split(\" \")[0])\n \
    \       for test in test.split(\" \")\n    }", "    if len(test) == 0:\n     \
    \   return Dict()\n    else:\n        return Dict(test[0], 1) + histogram(test[1:])\n",
  "    return {\n        test.split(\",\") |> {\n            |> test.split(\" \")\
    \ |> {\n                |> test.split(\"\") |> {\n                    |> test.count()\n\
    \                }\n            }\n        }\n    }\n", "    if test == \"\" then\n\
    \        return Dict()\n    else\n        return Dict(test[0], 1)", "    \"\"\"\
    Given a string representing a space separated lowercase letters, return a dictionary\n\
    \    of the letter with the most repetition and containing the corresponding count.\n\
    \    If several letters have the same occurrence, return all of them.\n    \n\
    \    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"a\" => 1, \"b\" => 1,\
    \ \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"a\" => 2, \"b\" => 2)\n\
    \    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2, \"b\" => 2)\n    >>> histogram(\"\
    b b b b a\")\n    Dict(\"b\" => 4)\n    >>> histogram(\"\")\n    Dict()", "  \
    \  return {\n        test.split(\",\")::Int64,\n        test.split(\",\")::Int64\n\
    \    }\n", "    return {\n        test.split(\",\")[0] : test.split(\",\").length\
    \ - 1\n        for test in test.split(\" \")\n    }", "    if test == \"\" then\n\
    \        return Dict()\n    else\n        return Dict(test[0], 1)", "    if len(test)\
    \ == 0:\n        return Dict()\n    \n    # Create a dictionary with the number\
    \ of occurrences of each character\n    counts = Dict()\n    for c in test:\n\
    \        if c in counts:\n            counts[c] += 1\n        else:\n        \
    \    counts[c] = 1\n    \n    # Find the character with the most occurrences\n\
    \    max_count = 0\n    max_char = \"\"\n    for c in counts:\n        if counts[c]\
    \ > max_count:\n            max_count = counts[c]\n            max_char = c\n\
    \    \n    # Return the dictionary with the most occurrences\n    return Dict(max_char,\
    \ max_count)\n", "    return {\n        test.split(\",\")[0] : test.split(\",\"\
    )[1]\n        for test in test.split(\" \")\n    }", "    return {\n        key:\
    \ value + 1\n        for key, value in {\n            key: 0\n            for\
    \ key in test.split()\n        }.items()\n        if key\n    }\n", "    if test\
    \ == \"\" then return Dict()\n    return {test[0]: 1 + histogram(test[1::])}",
  "    return Dict(\n        String.split(\" \").map(lambda x: x.lower()).map(lambda\
    \ x: (x, 1))\n        .reduce(lambda x, y: x.merge(y) if x[y[0]] == 0 else x)\n\
    \    )", "    let\n        occurrences = {}\n        for i in 1 to len(test)\n\
    \            if test[i] in occurrences\n                occurrences[test[i]] +=\
    \ 1\n            else\n                occurrences[test[i]] = 1\n        return\
    \ occurrences", "    return {\n        test.split(\",\") |> {\n            |>\
    \ test.map(lambda x: x.lower())\n            |> test.reduce(lambda x, y: x + y)\n\
    \            |> test.reduce(lambda x, y: x + 1)\n        }\n    }\n", "    if\
    \ test == \"\" then return Dict()\n    return {test[0]: 1 + histogram(test[1::])}\n",
  "    if len(test) == 0:\n        return Dict()\n    counts = Dict()\n    for letter\
    \ in test:\n        if letter not in counts:\n            counts[letter] = 1\n\
    \        else:\n            counts[letter] += 1\n    return counts\n", "    let\n\
    \        histogram = Dict()\n        \n        for i in test\n            if histogram.contains(i)\n\
    \                histogram[i] += 1\n            else\n                histogram[i]\
    \ = 1\n        \n        return histogram", "    let\n        counts = {},\n \
    \       maxCount = 0,\n        maxLetter = \"\",\n        letterCount = 0,\n \
    \       letter = \"\"\n    in\n        for letter in test\n            if letter\
    \ not in counts\n                counts[letter] = 0\n            counts[letter]\
    \ += 1\n            if counts[letter] > maxCount\n                maxCount = counts[letter]\n\
    \                maxLetter = letter\n            if counts[letter] == maxCount\n\
    \                letterCount += 1\n    in\n        return {maxLetter, maxCount}",
  "    return {\n        test.split(\" \")[0] : test.split(\" \")[0].count(test.split(\"\
    \ \")[0])\n        for test in test.split(\" \")\n    }\n", "    if test == \"\
    \" then\n        return Dict()\n    else\n        return Dict(test[0], 1)\n  \
    \  end\nend\n\"\"\"", "    return Dict(\n        # Split the string into a list\
    \ of characters\n        map(\n            # Convert each character to a lowercase\
    \ string\n            lambda c: c.lower(),\n            # Split the string into\
    \ a list of characters\n            test.split()\n        )\n    )", "    return\
    \ {\n        k: v + 1 for k, v in {\n            k: 0 for k in test\n        }.items()\
    \ if k != \"\"\n    }\n", "    return Dict(\n        # Split the string by space\n\
    \        split(test, ' ')\n        # Filter out empty strings\n        filter(notNull,\n\
    \            # Split each string by lowercase\n            split(\n          \
    \      # Map each string to its first character\n                map(first,\n\
    \                    # Count the number of occurrences of each character\n   \
    \                 count(\n                        # Map each character to its\
    \ count\n                        map(count,\n                            # Filter\
    \ out the empty strings\n                            filter(notNull,\n       \
    \                         # Join the string with its count\n                 \
    \               join(\n                                    # Map each character\
    \ to its count\n                                    map(count,\n             \
    \                           # Map each character to its first character\n    \
    \                                    map(first,\n                            \
    \                # Join the string with its count\n                          \
    \                  join(\n                                                # Map\
    \ each character to its count\n                                              \
    \  map(count,\n                                                    # Map each\
    \ character to its first character\n                                         \
    \           map(first,\n                                                     \
    \   # Join the string with its count\n                                       \
    \                 join(\n                                                    \
    \        # Map each character to its count\n                                 \
    \                           map(count,\n                                     \
    \                           # Map each character to its first character\n    \
    \                                                            map(first,\n    \
    \                                                                # Join the string\
    \ with its count\n                                                           \
    \         join(\n                                                            \
    \            # Map each character to its count\n                             \
    \                                           map(count,\n                     \
    \                                                       # Map each character to\
    \ its first character\n                                                      \
    \                      map(first,\n                                          \
    \                                      # Join the string with its count\n    \
    \                                                                            join(\n\
    \                                                                            \
    \        # Map each character to its count\n                                 \
    \                                                   map(count,\n             \
    \                                                                           #\
    \ Map each character to its first character\n                                \
    \                                                        map(first,\n        \
    \                                                                            \
    \        # Join the string with its count\n                                  \
    \                                                          join(\n           \
    \                                                                            \
    \         # Map each character to its count\n                                \
    \                                                                map(count,\n\
    \                                                                            \
    \                        # Map each character to its first character\n       \
    \                                                                            \
    \                 map(first,\n                                               \
    \                                                ", "    if test == \"\" then\n\
    \        return Dict()\n    else\n        return Dict(test[0], 1)", "    if test\
    \ == \"\" then return Dict()\n    return {test[0]: 1 + histogram(test[1::])}",
  "    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()", "    return {\n        test.split(\",\").map(lambda\
    \ x: x.strip())::String.toInt64\n    }\n", "    return Dict(\n        String.split(\"\
    \ \").map(lambda x: x.lower()).map(lambda x: x.count(x))\n        .max()\n   \
    \ )\n", "    if len(test) == 0:\n        return Dict()\n    else:\n        return\
    \ Dict(test[0], 1) + histogram(test[1:])\n", "    return {\n        key: value\
    \ + 1\n        for key, value in {\n            key: 0\n            for key in\
    \ test.split()\n        }.items()\n    }\n", "    return {\n        test.split(\"\
    \ \")[0] : test.split(\" \")[0].count(test.split(\" \")[0])\n        for test\
    \ in test.split(\" \")\n    }\n", "    return {\n        String.split(\" \")[0]\
    \ : len(String.split(\" \"))\n        for String in test\n    }\n", "    let\n\
    \        counts = {},\n        maxCount = 0,\n        maxLetter = \"\",\n    \
    \    maxCountLetter = 0,\n        letter,\n        count;\n    for letter in test\
    \ {\n        count = counts[letter];\n        counts[letter] = count + 1;\n  \
    \      if count > maxCount {\n            maxCount = count;\n            maxLetter\
    \ = letter;\n        }\n        if count == maxCount {\n            maxCountLetter\
    \ = maxCountLetter + 1;\n        }\n    }\n    if maxCountLetter == 0 {\n    \
    \    return Dict();\n    } else {\n        return Dict(maxLetter, maxCountLetter);\n\
    \    }\n}\n", "    return {\n        k: v + 1\n        for k, v in {\n       \
    \     k: 0\n            for k in test.split()\n        }.items()\n    }\n", " \
    \   if test == \"\" then\n        return Dict()\n    else\n        return Dict(test[0],\
    \ 1)\n    end\nend\n\"\"\"", "    return {\n        test.split(\" \")[0] : test.split(\"\
    \ \")[1]\n        for test in test.split(\" \")\n        if len(test) > 0\n  \
    \  }", "    if len(test) == 0:\n        return Dict()\n    else:\n        return\
    \ Dict(test[0], 1) + histogram(test[1:])", "    let count = 0\n    let max = 0\n\
    \    let result = {}\n    for c in test {\n        if c == ' ' {\n           \
    \ continue\n        }\n        count = count + 1\n        if count > max {\n \
    \           max = count\n            result = {c: count}\n        } else if count\
    \ == max {\n            result[c] = count\n        }\n    }\n    return result",
  "    return {\n        key: test.split().count(key)\n        for key in test.split()\n\
    \    }", "    return {\n        String.split(\" \")[0]: len(String.split(\" \"\
    ))\n        for String in test\n    }", "    if test == \"\" then\n        return\
    \ Dict()\n    else\n        return Dict(test[0], 1)\n    end", "    return {\n\
    \        key: value + 1\n        for key, value in {\n            key: 0\n   \
    \         for key in test.split()\n        }.items()\n    }\n", "    return Dict(\n\
    \        # Split the string by space\n        split(test, \" \") -> List[String],\n\
    \        # Count the number of occurences of each letter\n        map(lambda x:\
    \ x, count(test)) -> Int64\n    )", "    return Dict(\n        # Extract the letters\
    \ from the string\n        map(\n            # Split the string into a list of\
    \ characters\n            lambda x: x.split(\"\"),\n            # Filter out the\
    \ empty strings\n            filter(\n                # Remove the empty strings\n\
    \                lambda x: x != \"\",\n                # Convert the list to a\
    \ string\n                map(\n                    # Convert the character to\
    \ a string\n                    lambda x: x,\n                    # Join the list\
    \ of characters\n                    test\n                )\n            )\n\
    \        )\n    )", "    return {\n        String.split(\" \")::String.count(String)\n\
    \        |> maxBy(lambda (k, v): v)\n        |> map(lambda (k, v): (k, v))\n \
    \   }", "    return Dict(\n        filter(lambda x: len(x) > 0,\n            \
    \   map(lambda x: x.split(\" \"),\n                   filter(lambda x: len(x)\
    \ > 0,\n                          test.split(\" \"))))\n    )\n", "    if len(test)\
    \ == 0:\n        return Dict()\n    else:\n        return Dict(test[0], 1) + histogram(test[1:])",
  "    return Dict(\n        # Split the string into a list of characters\n      \
    \  map(\n            # Convert each character to a string\n            String,\n\
    \            # Split each string into a list of characters\n            map(\n\
    \                # Convert each character to a string\n                String,\n\
    \                # Convert each character to an integer\n                map(\n\
    \                    # Convert each character to an integer\n                \
    \    Int64,\n                    # Split each string into a list of characters\n\
    \                    map(\n                        # Convert each character to\
    \ an integer\n                        Int64,\n                        # Convert\
    \ each character to a string\n                        test\n                 \
    \   )\n                )\n            )\n        )\n    )\n", "    if test ==\
    \ \"\" then return Dict()\n    let max = 0\n    let max_letter = \"\"\n    let\
    \ max_count = 0\n    for letter in test.split(\" \") do\n        if histogram[letter]\
    \ > max then\n            max = histogram[letter]\n            max_letter = letter\n\
    \            max_count = 1\n        else if histogram[letter] == max then\n  \
    \          max_count = max_count + 1\n    return Dict(max_letter, max_count)",
  "    if len(test) == 0:\n        return Dict()\n    else:\n        counts = Dict()\n\
    \        for letter in test:\n            if letter in counts:\n             \
    \   counts[letter] += 1\n            else:\n                counts[letter] = 1\n\
    \        return counts\n", "    if test == \"\" then return Dict()\n    let result\
    \ = Dict()\n    for c in test.split(\" \")\n        if c not in result then result[c]\
    \ = 1\n        else result[c] += 1\n    return result", "    return {\n      \
    \  test[0] : test[1]\n        for test in [\n            (test, test.count(test))\n\
    \            for test in test.split()\n        ]\n        if test[1] > 0\n   \
    \ }\n", "    return Dict(\n        # Split the string into a list of characters\n\
    \        map(\n            # Convert each character to a string\n            lambda\
    \ c: c.toLowerCase(),\n            # Split the string into a list of characters\n\
    \            test.split()\n        )\n    )", "    if len(test) == 0:\n      \
    \  return Dict()\n    \n    # Count the number of occurrences of each character\n\
    \    counts = Dict()\n    for c in test:\n        counts[c] = counts.get(c, 0)\
    \ + 1\n    \n    # Find the character with the most occurrences\n    max_count\
    \ = max(counts.values())\n    \n    # Return the dictionary with the most occurrences\n\
    \    return Dict(\n        # Get the keys with the most occurrences\n        filter(lambda\
    \ k: counts[k] == max_count, counts.keys()),\n        # Get the values with the\
    \ most occurrences\n        filter(lambda v: counts[v] == max_count, counts.values())\n\
    \    )\n", "    return {\n        key: value + 1\n        for key, value in {\n\
    \            key: 0\n            for key in test.split()\n        }.items()\n\
    \    }\n", "    if len(test) == 0:\n        return Dict()\n    \n    counts =\
    \ Dict()\n    for letter in test:\n        if letter not in counts:\n        \
    \    counts[letter] = 1\n        else:\n            counts[letter] += 1\n    \n\
    \    maxCount = 0\n    maxLetter = \"\"\n    for letter in counts:\n        if\
    \ counts[letter] > maxCount:\n            maxCount = counts[letter]\n        \
    \    maxLetter = letter\n    \n    return Dict(maxLetter, maxCount)", "    return\
    \ {\n        test[0] : test[1]\n        for test in [\n            (char, count)\n\
    \            for char, count in zip(test.split(), map(int, test.split()))\n  \
    \          if count > 0\n        ]\n    }\n", "    return {\n        test.split(\"\
    \ \")[0] : test.split(\" \")[0].count(test.split(\" \")[0])\n        for test\
    \ in test.split(\" \")\n    }", "    return {\n        test.split(\" \")[0] :\
    \ test.split(\" \")[1]\n        for test in test.split(\" \")\n    }", "    return\
    \ {\n        key: value + 1\n        for key, value in {\n            key: 0\n\
    \            for key in test.split()\n        }.items()\n        if key != ''\n\
    \    }\n", "    return Dict(\n        map(lambda x: x,\n            filter(lambda\
    \ x: x != \"\",\n                   map(lambda x: x.lower(),\n               \
    \        filter(lambda x: x != \"\",\n                              test.split(\"\
    \ \")))\n                   )\n            )\n        )", "    if test == \"\"\
    \ then\n        return Dict()\n    else\n        return Dict(test[0], 1)", " \
    \   if test == \"\" then\n        return Dict()\n    else\n        return Dict(test[0]\
    \ => 1, histogram(test[1::]))", "    if len(test) == 0:\n        return Dict()\n\
    \    else:\n        counts = Dict()\n        for char in test:\n            if\
    \ char in counts:\n                counts[char] += 1\n            else:\n    \
    \            counts[char] = 1\n        return counts\n", "    return {\n     \
    \   test.split(\",\")[0] : test.split(\",\")[1].split(\" \").length\n    }\n",
  "    return {\n        String.split()[0] : len(String.split())\n    }", "    \"\"\
    \"Given a string representing a space separated lowercase letters, return a dictionary\n\
    \    of the letter with the most repetition and containing the corresponding count.\n\
    \    If several letters have the same occurrence, return all of them.\n    \n\
    \    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"a\" => 1, \"b\" => 1,\
    \ \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"a\" => 2, \"b\" => 2)\n\
    \    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2, \"b\" => 2)\n    >>> histogram(\"\
    b b b b a\")\n    Dict(\"b\" => 4)\n    >>> histogram(\"\")\n    Dict()", "  \
    \  return Dict(\n        # Create a dictionary of the form {letter: count}\n \
    \       map(\n            # Split the string by spaces\n            lambda letter:\
    \ (\n                # Convert the string to lowercase\n                letter.lower(),\n\
    \                # Count the number of times the letter occurs\n             \
    \   count(\n                    # Count the number of spaces in the string\n \
    \                   # (the number of letters is the length of the string)\n  \
    \                  len(\n                        # Split the string by spaces\n\
    \                        test.split(\" \")\n                    )\n          \
    \      )\n            ),\n            # Split the string by spaces\n         \
    \   test.split(\" \")\n        )\n    )"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
