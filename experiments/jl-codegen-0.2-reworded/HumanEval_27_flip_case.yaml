name: HumanEval_27_flip_case
language: jl
prompt: "\"\"\" For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n    >>> flip_case(\"Hello\")\n    \"hELLO\"\n    \"\"\"\nfunction\
  \ flip_case(string::String)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = flip_case;\n\t@test(candidate(\"\
  \") == \"\")\n\t@test(candidate(\"Hello!\") == \"hELLO!\")\n\t@test(candidate(\"\
  These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
  \ ENDS\")\nend\n"
completions: ["    return string.replace(/[a-z]/gi, function(c) { return c.toUpperCase();\
    \ })\n    .replace(/[A-Z]/gi, function(c) { return c.toLowerCase(); })", '    return
    string.map(lambda c: c.toUpper() if c.isLower() else c.toLower())', "    return\
    \ string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase(); })\n\
    \        .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase(); })",
  "    return string.replace(/[a-z]/gi, function(c) { return c.toUpperCase(); })\n\
    \        .replace(/[A-Z]/gi, function(c) { return c.toLowerCase(); });", "   \
    \ return string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase();\
    \ })\n    .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase();\
    \ })", '    return string.map(lambda c: c.toUpper() if c.isLower() else c.toLower())',
  "    return string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase();\
    \ })\n    .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase();\
    \ })", "    return string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase();\
    \ })\n    .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase();\
    \ })", "    return string.replace(/[a-z]/gi, function(c) { return c.toUpperCase();\
    \ })\n    .replace(/[A-Z]/gi, function(c) { return c.toLowerCase(); })", "   \
    \ return string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase();\
    \ })\n        .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase();\
    \ })", '    return string.map(lambda c: c.toUpper() if c.isLower() else c.toLower())',
  "    return string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase();\
    \ })\n    .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase();\
    \ })", '    return string.replace(/[a-z]/gi, function(letter) { return String.fromCharCode(letter.charCodeAt(0)
    - 32) })', '    return string.map(lambda c: c.toUpper() if c.isLower() else c.toLower())',
  '    return string.map(lambda c: c.toUpper() if c.isLower() else c.toLower())',
  "    return string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase();\
    \ })\n    .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase();\
    \ })", '    return string.map(lambda c: c.toUpper() if c.isLower() else c.toLower())',
  '    return string.map(lambda c: c.toUpper() if c.isLower() else c.toLower())',
  "    return string.replace(/[a-z]/gi, function(c) { return c.toUpperCase(); })\n\
    \    .replace(/[A-Z]/gi, function(c) { return c.toLowerCase(); })", '    return
    string.map(lambda c: c.toUpperCase() if c.isLowerCase() else c.toLowerCase())',
  "    return string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase();\
    \ })\n        .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase();\
    \ })", "    return string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase();\
    \ })\n    .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase();\
    \ })", "    return string.replace(/[a-z]/gi, function(c) { return c.toUpperCase();\
    \ })\n    .replace(/[A-Z]/gi, function(c) { return c.toLowerCase(); })", '    return
    string.map(lambda c: c.toUpper() if c.isLower() else c.toLower())', "    if string\
    \ == None:\n        return None\n    return string.replace(string.lower(), string.upper())",
  "    if string == None:\n        return None\n    return string.replace(string.lower(),\
    \ string.upper())", '    return string.replace(/[a-z]/gi, function(letter) { return
    String.fromCharCode(letter.charCodeAt(0) - 32) })', "    if string == None:\n\
    \        return None\n    return string.replace(string.lower(), string.upper())",
  "    return string.replace(/[a-z]/gi, function(c) { return c.toUpperCase(); })\n\
    \    .replace(/[A-Z]/gi, function(c) { return c.toLowerCase(); })", "    if string\
    \ == None:\n        return None\n    return string.replace(string.lower(), string.upper())",
  "    if string == None:\n        return None\n    return string.replace(string.lower(),\
    \ string.upper())", "    return string.replace(/[a-z]/gi, function(letter) { return\
    \ letter.toUpperCase(); })\n    .replace(/[A-Z]/gi, function(letter) { return\
    \ letter.toLowerCase(); })", "    return string.replace(/[a-z]/gi, function(c)\
    \ { return c.toUpperCase(); })\n    .replace(/[A-Z]/gi, function(c) { return c.toLowerCase();\
    \ })", "    return string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase();\
    \ })\n    .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase();\
    \ })", '    return string.map(lambda x: x.toUpperCase() if x.isLowerCase() else
    x.toLowerCase())', '    return string.map(lambda c: c.toUpper() if c.isLower()
    else c.toLower())', "    return string.replace(/[a-z]/gi, function(letter) { return\
    \ letter.toUpperCase(); })\n    .replace(/[A-Z]/gi, function(letter) { return\
    \ letter.toLowerCase(); })", "    return string.replace(/[a-z]/gi, function(c)\
    \ { return c.toUpperCase(); })\n        .replace(/[A-Z]/gi, function(c) { return\
    \ c.toLowerCase(); });", "    return string.replace(/[a-z]/gi, function(letter)\
    \ { return letter.toUpperCase(); })\n    .replace(/[A-Z]/gi, function(letter)\
    \ { return letter.toLowerCase(); })", "    if string is None:\n        return\
    \ None\n    return string.replace(string.lower(), string.upper())", '    return
    string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase(); })',
  '    return string.map(lambda x: x.toUpperCase() if x.toLowerCase() == x else x.toLowerCase())',
  "    return string.replace(/[a-z]/gi, function(c) { return c.toUpperCase(); })\n\
    \        .replace(/[A-Z]/gi, function(c) { return c.toLowerCase(); });", "   \
    \ return string.replace(/[a-z]/gi, function(c) { return c.toUpperCase(); })\n\
    \        .replace(/[A-Z]/gi, function(c) { return c.toLowerCase(); });", "   \
    \ return string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase();\
    \ })\n        .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase();\
    \ })", "    if string == None:\n        return None\n    return string.replace(string.lower(),\
    \ string.upper())", '    return string.map(lambda c: c.toUpper() if c.isLower()
    else c.toLower())', '    return string.replace(/[a-z]/gi, function(letter) { return
    letter.toUpperCase(); })', "    return string.replace(/[a-z]/gi, function(letter)\
    \ { return letter.toUpperCase(); })\n        .replace(/[A-Z]/gi, function(letter)\
    \ { return letter.toLowerCase(); });", "    return string.replace(/[a-z]/gi, function(c)\
    \ { return c.toUpperCase(); })\n    .replace(/[A-Z]/gi, function(c) { return c.toLowerCase();\
    \ })", "    if string == None:\n        return None\n    return string.replace(string.lower(),\
    \ string.upper())", "    return string.replace(/[a-z]/gi, function(letter) { return\
    \ letter.toUpperCase(); })\n    .replace(/[A-Z]/gi, function(letter) { return\
    \ letter.toLowerCase(); })", "    return string.replace(/[a-z]/gi, function(letter)\
    \ { return letter.toUpperCase(); })\n    .replace(/[A-Z]/gi, function(letter)\
    \ { return letter.toLowerCase(); })", '    return string.map(lambda c: c.toUpperCase()
    if c.isLowerCase() else c.toLowerCase())', "    return string.replace(/[a-z]/gi,\
    \ function(letter) { return letter.toUpperCase(); })\n    .replace(/[A-Z]/gi,\
    \ function(letter) { return letter.toLowerCase(); })", "    return string.replace(/[a-z]/gi,\
    \ function(c) { return c.toUpperCase(); })\n        .replace(/[A-Z]/gi, function(c)\
    \ { return c.toLowerCase(); })", "    if string == None:\n        return None\n\
    \    return string.replace(string.lower(), string.upper())", '    return string.replace(/[a-z]/gi,
    function(match) { return match.toUpperCase(); })', "    return string.replace(/[a-z]/gi,\
    \ function(c) { return c.toUpperCase(); })\n    .replace(/[A-Z]/gi, function(c)\
    \ { return c.toLowerCase(); })", "    return string.replace(/[a-z]/gi, function(c)\
    \ { return c.toUpperCase(); })\n        .replace(/[A-Z]/gi, function(c) { return\
    \ c.toLowerCase(); })", "    if string == None:\n        return None\n    return\
    \ string.replace(string.lower(), string.upper())", "    return string.replace(/[a-z]/gi,\
    \ function(c) { return c.toUpperCase(); })\n        .replace(/[A-Z]/gi, function(c)\
    \ { return c.toLowerCase(); });", '    return string.map(lambda c: c.toUpper()
    if c.isLower() else c.toLower())', "    if string is None:\n        return None\n\
    \    return string.replace(string.lower(), string.upper())", '    return string.map(lambda
    c: c.toUpper() if c.isLower() else c.toLower())', '    return string.replace(/[a-z]/gi,
    function(letter) { return String.fromCharCode(letter.charCodeAt(0) - 32) })',
  "    return string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase();\
    \ })\n    .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase();\
    \ })", '    return string.replace(/[a-z]/gi, function(letter) { return String.fromCharCode(letter.charCodeAt(0)
    - 32) })', "    if string == None:\n        return None\n    else:\n        return\
    \ string.replace(string.lower(), string.upper())", "    return string.replace(/[a-z]/gi,\
    \ function(c) { return c.toUpperCase(); })\n    .replace(/[A-Z]/gi, function(c)\
    \ { return c.toLowerCase(); })", "    return string.replace(/[a-z]/gi, function(letter)\
    \ { return letter.toUpperCase(); })\n    .replace(/[A-Z]/gi, function(letter)\
    \ { return letter.toLowerCase(); })", "    return string.replace(/[a-z]/gi, function(letter)\
    \ { return letter.toUpperCase(); })\n        .replace(/[A-Z]/gi, function(letter)\
    \ { return letter.toLowerCase(); });", "    return string.replace(/[a-z]/gi, function(letter)\
    \ { return letter.toUpperCase(); })\n        .replace(/[A-Z]/gi, function(letter)\
    \ { return letter.toLowerCase(); });", "    if string is None:\n        return\
    \ None\n    return string.replace(string.lower(), string.upper())", "    return\
    \ string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase(); })\n\
    \    .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase(); })",
  '    return string.replace(/[a-z]/gi, function(letter) { return String.fromCharCode(letter.charCodeAt(0)
    - 32) })', "    return string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase();\
    \ })\n        .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase();\
    \ });", '    return string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase();
    })', "    return string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase();\
    \ })\n    .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase();\
    \ })", "    return string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase();\
    \ })\n    .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase();\
    \ })", '    return string.map(lambda c: c.toUpper() if c.isLower() else c.toLower())',
  "    return string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase();\
    \ })\n    .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase();\
    \ })", "    if string == None:\n        return None\n    result = \"\"\n    for\
    \ c in string:\n        if c.isalpha():\n            if c.islower():\n       \
    \         result += c.upper()\n            else:\n                result += c.lower()\n\
    \        else:\n            result += c\n    return result", "    return string.replace(/[a-z]/gi,\
    \ function(letter) { return letter.toUpperCase(); })\n    .replace(/[A-Z]/gi,\
    \ function(letter) { return letter.toLowerCase(); })", "    if string is None:\n\
    \        return None\n    return string.replace(string.lower(), string.upper())",
  "    return string.replace(/[a-z]/gi, function(c) { return c.toUpperCase(); })\n\
    \    .replace(/[A-Z]/gi, function(c) { return c.toLowerCase(); })", "    if string\
    \ == None:\n        return None\n    return string.replace(string.lower(), string.upper())",
  "    if string == None:\n        return None\n    return string.replace(string.lower(),\
    \ string.upper())", '    return string.replace(/[a-z]/gi, function(letter) { return
    String.fromCharCode(letter.charCodeAt(0) - 32) })', "    if string == None:\n\
    \        return None\n    return string.replace(string.lower(), string.upper())",
  "    return string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase();\
    \ })\n        .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase();\
    \ })", "    if string == None:\n        return None\n    return string.replace(string.lower(),\
    \ string.upper())", '    return string.map(lambda c: c.toUpper() if c.isLower()
    else c.toLower())', "    if string == None:\n        return None\n    result =\
    \ \"\"\n    for c in string:\n        if c.isalpha():\n            result += c.upper()\n\
    \        else:\n            result += c.lower()\n    return result", "    return\
    \ string.replace(/[a-z]/gi, function(c) { return c.toUpperCase(); })\n    .replace(/[A-Z]/gi,\
    \ function(c) { return c.toLowerCase(); })", "    if string == None:\n       \
    \ return None\n    return string.replace(string.lower(), string.upper())", " \
    \   return string.replace(/[a-z]/gi, function(c) { return c.toUpperCase(); })\n\
    \    .replace(/[A-Z]/gi, function(c) { return c.toLowerCase(); })", '    return
    string.map(lambda c: c.toUpper() if c.isLower() else c.toLower())', '    return
    string.map(lambda c: c.toUpper() if c.isLower() else c.toLower())', "    return\
    \ string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase(); })\n\
    \    .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase(); })",
  "    return string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase();\
    \ })\n    .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase();\
    \ })", '    return string.map(lambda c: c.toUpper() if c.isLower() else c.toLower())',
  "    return string.replace(/[a-z]/gi, function(c) { return c.toUpperCase(); })\n\
    \    .replace(/[A-Z]/gi, function(c) { return c.toLowerCase(); })", "    if string\
    \ == None:\n        return None\n    return string.replace(string.lower(), string.upper())",
  '    return string.map(lambda c: c.toUpper() if c.isLower() else c.toLower())',
  "    return string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase();\
    \ })\n    .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase();\
    \ })", '    return string.replace(/[a-z]/gi, function(letter) { return String.fromCharCode(letter.charCodeAt(0)
    - 32) })', '    return string.replace(/[a-z]/gi, function(letter) { return String.fromCharCode(letter.charCodeAt(0)
    - 32) })', "    return string.replace(/[a-z]/gi, function(c) { return c.toUpperCase();\
    \ })\n    .replace(/[A-Z]/gi, function(c) { return c.toLowerCase(); })", "   \
    \ return string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase();\
    \ })\n        .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase();\
    \ })", "    return string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase();\
    \ })\n        .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase();\
    \ })", '    return string.map(lambda c: c.toUpper() if c.isLower() else c.toLower())',
  "    if string == None:\n        return None\n    return string.replace(string.lower(),\
    \ string.upper())", "    return string.replace(/[a-z]/gi, function(c) { return\
    \ c.toUpperCase(); })\n        .replace(/[A-Z]/gi, function(c) { return c.toLowerCase();\
    \ });", '    return string.map(lambda c: c.toUpper() if c.isLower() else c.toLower())',
  "    if string == None:\n        return None\n    return string.replace(string.lower(),\
    \ string.upper())", "    return string.replace(/[a-z]/gi, function(letter) { return\
    \ letter.toUpperCase(); })\n    .replace(/[A-Z]/gi, function(letter) { return\
    \ letter.toLowerCase(); })", '    return string.map(lambda x: x.toUpperCase()
    if x.toLowerCase() == x else x.toLowerCase())', "    if string == None:\n    \
    \    return None\n    return string.replace(string.lower(), string.upper())",
  "    return string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase();\
    \ })\n    .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase();\
    \ })", "    return string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase();\
    \ })\n    .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase();\
    \ })", "    return string.replace(/[a-z]/gi, function(c) { return c.toUpperCase();\
    \ })\n    .replace(/[A-Z]/gi, function(c) { return c.toLowerCase(); })", "   \
    \ return string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase();\
    \ })\n    .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase();\
    \ })", "    if string is None:\n        return None\n    return string.replace(string.lower(),\
    \ string.upper())", "    return string.replace(/[a-z]/gi, function(letter) { return\
    \ letter.toUpperCase(); })\n        .replace(/[A-Z]/gi, function(letter) { return\
    \ letter.toLowerCase(); })", "    return string.replace(/[a-z]/gi, function(c)\
    \ { return c.toUpperCase(); })\n    .replace(/[A-Z]/gi, function(c) { return c.toLowerCase();\
    \ })", '    return string.map(lambda c: c.toUpper() if c.isLower() else c.toLower())',
  '    return string.map(lambda c: c.toUpper() if c.isLower() else c.toLower())',
  "    if string == None:\n        return None\n    else:\n        return string.replace(string.lower(),\
    \ string.upper())", "    return string.replace(/[a-z]/gi, function(letter) { return\
    \ letter.toUpperCase(); })\n    .replace(/[A-Z]/gi, function(letter) { return\
    \ letter.toLowerCase(); })", "    if string == None:\n        return None\n  \
    \  return string.replace(string.lower(), string.upper())", '    return string.replace(/[a-z]/gi,
    function(letter) { return String.fromCharCode(letter.charCodeAt(0) - 32) })',
  "    return string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase();\
    \ })\n        .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase();\
    \ })", "    return string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase();\
    \ })\n        .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase();\
    \ });", "    return string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase();\
    \ })\n    .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase();\
    \ })", "    return string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase();\
    \ })\n    .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase();\
    \ })", "    return string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase();\
    \ })\n    .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase();\
    \ })", "    if string == None:\n        return None\n    return string.replace(string.lower(),\
    \ string.upper())", "    if string == None:\n        return None\n    else:\n\
    \        return string.replace(string.lower(), string.upper())", '    return string.map(lambda
    c: c.toUpper() if c.isLower() else c.toLower())', '    return string.replace(/[a-z]/gi,
    function(letter) { return letter.toUpperCase(); })', "    return string.replace(/[a-z]/gi,\
    \ function(c) { return c.toUpperCase(); })\n    .replace(/[A-Z]/gi, function(c)\
    \ { return c.toLowerCase(); })", '    return string.replace(/[a-z]/gi, function(letter)
    { return String.fromCharCode(letter.charCodeAt(0) - 32) })', "    return string.replace(/[a-z]/gi,\
    \ function(letter) { return letter.toUpperCase(); })\n        .replace(/[A-Z]/gi,\
    \ function(letter) { return letter.toLowerCase(); });", "    return string.replace(/[a-z]/gi,\
    \ function(letter) { return letter.toUpperCase(); })\n    .replace(/[A-Z]/gi,\
    \ function(letter) { return letter.toLowerCase(); })", "    return string.replace(/[a-z]/gi,\
    \ function(letter) { return letter.toUpperCase(); })\n    .replace(/[A-Z]/gi,\
    \ function(letter) { return letter.toLowerCase(); })", "    return string.replace(/[a-z]/gi,\
    \ function(c) { return c.toUpperCase(); })\n    .replace(/[A-Z]/gi, function(c)\
    \ { return c.toLowerCase(); })", '    return string.replace(/[a-z]/gi, function(letter)
    { return letter.toUpperCase(); })', "    return string.replace(/[a-z]/gi, function(letter)\
    \ { return letter.toUpperCase(); })\n        .replace(/[A-Z]/gi, function(letter)\
    \ { return letter.toLowerCase(); })", "    return string.replace(/[a-z]/gi, function(c)\
    \ { return c.toUpperCase(); })\n    .replace(/[A-Z]/gi, function(c) { return c.toLowerCase();\
    \ })", "    if string is None:\n        return None\n    return string.replace(string.lower(),\
    \ string.upper())", "    if string == None:\n        return None\n    return string.replace(string.lower(),\
    \ string.upper())", "    return string.replace(/[a-z]/gi, function(letter) { return\
    \ letter.toUpperCase(); })\n    .replace(/[A-Z]/gi, function(letter) { return\
    \ letter.toLowerCase(); })", "    return string.replace(/[a-z]/gi, function(letter)\
    \ { return letter.toUpperCase(); })\n    .replace(/[A-Z]/gi, function(letter)\
    \ { return letter.toLowerCase(); })", '    return string.replace(/[a-z]/gi, function(letter)
    { return String.fromCharCode(letter.charCodeAt(0) - 32) })', "    return string.replace(/[a-z]/gi,\
    \ function(letter) { return letter.toUpperCase(); })\n    .replace(/[A-Z]/gi,\
    \ function(letter) { return letter.toLowerCase(); })", "    if string == None:\n\
    \        return None\n    return string.replace(string.lower(), string.upper())",
  "    return string.replace(/[a-z]/gi, function(c) { return c.toUpperCase(); })\n\
    \    .replace(/[A-Z]/gi, function(c) { return c.toLowerCase(); })", "    if string\
    \ == None:\n        return None\n    return string.replace(string.lower(), string.upper())",
  '    return string.map(lambda c: c.toUpper() if c.isLower() else c.toLower())',
  "    if string == None:\n        return None\n    return string.replace(string.lower(),\
    \ string.upper())", "    return string.replace(/[a-z]/gi, function(letter) { return\
    \ letter.toUpperCase(); })\n    .replace(/[A-Z]/gi, function(letter) { return\
    \ letter.toLowerCase(); })", "    return string.replace(/[a-z]/gi, function(c)\
    \ { return c.toUpperCase(); })\n        .replace(/[A-Z]/gi, function(c) { return\
    \ c.toLowerCase(); });", "    return string.replace(/[a-z]/gi, function(c) { return\
    \ c.toUpperCase(); })\n    .replace(/[A-Z]/gi, function(c) { return c.toLowerCase();\
    \ })", "    return string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase();\
    \ })\n    .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase();\
    \ })", "    return string.replace(/[a-z]/gi, function(c) { return c.toUpperCase();\
    \ })\n        .replace(/[A-Z]/gi, function(c) { return c.toLowerCase(); });",
  '    return string.replace(/[a-z]/gi, function(letter) { return String.fromCharCode(letter.charCodeAt(0)
    - 32) })', "    return string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase();\
    \ })\n        .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase();\
    \ })", "    return string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase();\
    \ })\n    .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase();\
    \ })", '    return string.map(lambda x: x.toUpperCase() if x.isLowerCase() else
    x.toLowerCase())', "    return string.replace(/[a-z]/gi, function(letter) { return\
    \ letter.toUpperCase(); })\n    .replace(/[A-Z]/gi, function(letter) { return\
    \ letter.toLowerCase(); })", "    if string == None:\n        return None\n  \
    \  return string.replace(string.lower(), string.upper())", "    return string.replace(/[a-z]/gi,\
    \ function(letter) { return letter.toUpperCase(); })\n    .replace(/[A-Z]/gi,\
    \ function(letter) { return letter.toLowerCase(); })", "    return string.replace(/[a-z]/gi,\
    \ function(c) { return c.toUpperCase(); })\n        .replace(/[A-Z]/gi, function(c)\
    \ { return c.toLowerCase(); });", "    return string.replace(/[a-z]/gi, function(c)\
    \ { return c.toUpperCase(); })\n        .replace(/[A-Z]/gi, function(c) { return\
    \ c.toLowerCase(); });", "    if string == None:\n        return None\n    return\
    \ string.replace(string.lower(), string.upper())", "    return string.replace(/[a-z]/gi,\
    \ function(letter) { return letter.toUpperCase(); })\n    .replace(/[A-Z]/gi,\
    \ function(letter) { return letter.toLowerCase(); })", '    return string.replace(/[a-z]/gi,
    function(letter) { return letter.toUpperCase(); })', '    return string.map(lambda
    c: c.toUpper() if c.isLower() else c.toLower())', "    return string.replace(/[a-z]/gi,\
    \ function(letter) { return letter.toUpperCase(); })\n    .replace(/[A-Z]/gi,\
    \ function(letter) { return letter.toLowerCase(); })", '    return string.map(lambda
    c: c.toUpperCase() if c.isLowerCase() else c.toLowerCase())', "    return string.replace(/[a-z]/gi,\
    \ function(letter) { return letter.toUpperCase(); })\n    .replace(/[A-Z]/gi,\
    \ function(letter) { return letter.toLowerCase(); })", '    return string.replace(/[a-z]/gi,
    function(letter) { return letter.toUpperCase(); })', "    return string.replace(/[a-z]/gi,\
    \ function(letter) { return letter.toUpperCase(); })\n    .replace(/[A-Z]/gi,\
    \ function(letter) { return letter.toLowerCase(); })", "    return string.replace(/[a-z]/gi,\
    \ function(letter) { return letter.toUpperCase(); })\n        .replace(/[A-Z]/gi,\
    \ function(letter) { return letter.toLowerCase(); });", "    return string.replace(/[a-z]/gi,\
    \ function(c) { return c.toUpperCase(); })\n        .replace(/[A-Z]/gi, function(c)\
    \ { return c.toLowerCase(); })", "    return string.replace(/[a-z]/gi, function(c)\
    \ { return c.toUpperCase(); })\n        .replace(/[A-Z]/gi, function(c) { return\
    \ c.toLowerCase(); });", "    return string.replace(/[a-z]/gi, function(letter)\
    \ { return String.fromCharCode(letter.charCodeAt(0) - 32); })\n    .replace(/[A-Z]/gi,\
    \ function(letter) { return String.fromCharCode(letter.charCodeAt(0) + 32); })\n\
    \    \n# The following code is provided to you on an as-is basis.\n# The license\
    \ for this code is as follows:\n#\n# Copyright (c) 2011, Robert Kieffer\n# All\
    \ rights reserved.\n#\n# Redistribution and use in source and binary forms, with\
    \ or without modification,\n# are permitted provided that the following conditions\
    \ are met:\n#\n# Redistributions of source code must retain the above copyright\
    \ notice, this list\n# of conditions and the following disclaimer.\n#\n# Redistributions\
    \ in binary form must reproduce the above copyright notice, this\n# list of conditions\
    \ and the following disclaimer in the documentation and/or\n# other materials\
    \ provided with the distribution.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT\
    \ HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n# ANY EXPRESS OR IMPLIED WARRANTIES,\
    \ INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF MERCHANTABILITY\
    \ AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE\
    \ COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n# ANY DIRECT, INDIRECT, INCIDENTAL,\
    \ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n# (INCLUDING, BUT NOT LIMITED\
    \ TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n# LOSS OF USE, DATA, OR PROFITS;\
    \ OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n# ANY THEORY OF LIABILITY,\
    \ WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE)\
    \ ARISING IN ANY WAY OUT OF THE USE OF THIS\n# SOFTWARE, EVEN IF ADVISED OF THE\
    \ POSSIBILITY OF SUCH DAMAGE.", '    return string.map(lambda c: c.toUpperCase()
    if c.isLowerCase() else c.toLowerCase())', "    if string == None:\n        return\
    \ None\n    return string.replace(string.lower(), string.upper())", "    return\
    \ string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase(); })\n\
    \    .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase(); })",
  "    return string.replace(/[a-z]/gi, function(c) { return c.toUpperCase(); })\n\
    \    .replace(/[A-Z]/gi, function(c) { return c.toLowerCase(); })", "    return\
    \ string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase(); })\n\
    \        .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase(); });",
  "    return string.replace(/[a-z]/gi, function(c) { return c.toUpperCase(); })\n\
    \    .replace(/[A-Z]/gi, function(c) { return c.toLowerCase(); })", "    return\
    \ string.replace(/[a-z]/gi, function(letter) { return letter.toUpperCase(); })\n\
    \    .replace(/[A-Z]/gi, function(letter) { return letter.toLowerCase(); })",
  "    if string == None:\n        return None\n    return string.replace(string.lower(),\
    \ string.upper())", "    if string == None:\n        return None\n    return string.replace(string.lower(),\
    \ string.upper())", "    return string.replace(/[a-z]/gi, function(c) { return\
    \ c.toUpperCase(); })\n    .replace(/[A-Z]/gi, function(c) { return c.toLowerCase();\
    \ })", "    return string.replace(/[a-z]/gi, function(c) { return c.toUpperCase();\
    \ })\n    .replace(/[A-Z]/gi, function(c) { return c.toLowerCase(); })", "   \
    \ return string.replace(/[a-z]/gi, function(c) { return c.toUpperCase(); })\n\
    \    .replace(/[A-Z]/gi, function(c) { return c.toLowerCase(); })"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
