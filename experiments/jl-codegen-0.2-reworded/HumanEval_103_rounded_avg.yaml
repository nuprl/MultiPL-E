name: HumanEval_103_rounded_avg
language: jl
prompt: "\"\"\"You are given two positive integers n and m, and your task is to compute\
  \ the\n    average of the integers from n through m (including n and m). \n    Round\
  \ the answer to the nearest integer and convert that to binary.\n    If n is greater\
  \ than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n  \
  \  >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n\
  \    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
  \ m::Int64)::Union{String, Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
  \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
  \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t\
  @test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"\
  0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
  \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
  @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
  \ 5) == \"0b101\")\nend\n"
completions: ["    if n > m:\n        return -1\n    return \"0b\" + bin(n + m //\
    \ 2)[2:].zfill(m - n)", "    if n > m:\n        return -1\n    else:\n       \
    \ return \"0b\" + bin(n + (m - n) / 2)[2:].zfill(m - n + 1)", "    if n > m:\n\
    \        return -1\n    else:\n        return bin(int(n + m) / 2).rjust(int(m\
    \ - n + 1), \"0\")\n", "    if n > m:\n        return -1\n    else:\n        return\
    \ \"0b\" + bin(n + m // 2)[2:].zfill(m - n)\n", "    if n > m:\n        return\
    \ -1\n    else:\n        return \"0b\" + bin(n + m // 2)[2:].zfill(m - n)", " \
    \   if n > m:\n        return -1\n    else:\n        return String(int(n + m)\
    \ / 2)\n", "    if n > m:\n        return -1\n    else:\n        return \"0b\"\
    \ + bin(n + m // 2)[2:].zfill(m - n)", "    if n > m:\n        return -1\n   \
    \ else:\n        return \"0b\" + bin(n + m // 2)[2:].zfill(m - n)", "    if n\
    \ > m:\n        return -1\n    return \"0b\" + bin(n + m // 2)[2:].zfill(m - n)\n",
  "    if n > m:\n        return -1\n    else:\n        return \"0b\" + bin(n + m\
    \ // 2)[2:].zfill(m - n)\n", "    if n > m:\n        return -1\n    else:\n  \
    \      return \"0b\" + bin(n + m / 2)[2:].zfill(m - n)\n", "    if n > m:\n  \
    \      return -1\n    else:\n        return \"0b\" + bin(n + m / 2)[2:].zfill(m\
    \ - n + 1)", "    if n > m:\n        return -1\n    else:\n        return \"0b\"\
    \ + bin(n + (m - n) / 2)[2:].zfill(m - n + 1)", "    if n > m:\n        return\
    \ -1\n    else:\n        return \"0b\" + bin(n + m // 2)[2:].zfill(m - n)\n",
  "    if n > m:\n        return -1\n    else:\n        return \"0b\" + bin(n + m\
    \ // 2)[2:].zfill(m - n)\n", "    if n > m:\n        return -1\n    return \"\
    0b\" + bin(n + (m - n) / 2)[2:].zfill(m - n + 1)", "    if n > m:\n        return\
    \ -1\n    else:\n        return \"0b\" + bin(n + m // 2)[2:].zfill(m - n)", " \
    \   if n > m:\n        return -1\n    else:\n        return \"0b\" + bin(n + (m\
    \ - n) / 2).replace(\"0b\", \"\")", "    if n > m:\n        return -1\n    else:\n\
    \        return \"0b\" + bin(n + (m - n) / 2)[2:].zfill(m - n + 1)\n", "    if\
    \ n > m:\n        return -1\n    elif n == m:\n        return \"0b\" + bin(n)[2:]\n\
    \    else:\n        return \"0b\" + bin(n)[2:] + \"0b\" + bin(m)[2:]\n", "   \
    \ if n > m:\n        return -1\n    else:\n        return \"0b\" + bin(n + m //\
    \ 2)[2:].zfill(m - n)\n", "    if n > m:\n        return -1\n    else:\n     \
    \   return \"0b\" + bin(n + m // 2)[2:].zfill(m - n)\n", "    if n > m:\n    \
    \    return -1\n    else:\n        return (n + m) / 2.0\n", "    if n > m:\n \
    \       return -1\n    else:\n        return \"0b\" + bin(n + m // 2)[2:].zfill(m\
    \ - n)\n", "    if n > m:\n        return -1\n    return \"0b\" + bin(n + (m -\
    \ n) / 2)[2:].zfill(m - n + 1)\n", "    if n > m:\n        return -1\n    else:\n\
    \        return String(Int64(n).to_string() + Int64(m).to_string()).to_string()\n",
  "    if n > m:\n        return -1\n    else:\n        return \"0b\" + bin(int(n\
    \ + (m - n) / 2))[2:]", "    if n > m:\n        return -1\n    return \"0b\" +\
    \ bin(n + m // 2)[2:].zfill(m - n)", "    if n > m:\n        return -1\n    return\
    \ \"0b\" + bin(n + (m - n) / 2)[2:].zfill(m - n)\n", "    if n > m:\n        return\
    \ -1\n    return \"0b\" + bin(n + (m - n) / 2)[2:].zfill(m - n + 1)", "    if\
    \ n > m:\n        return -1\n    else:\n        return \"0b\" + bin(n + m - 1)[2:].zfill(m\
    \ - n)\n", "    if n > m:\n        return -1\n    else:\n        return \"0b\"\
    \ + bin(n + (m - n) / 2)[2:].zfill(m - n + 1)", "    if n > m:\n        return\
    \ -1\n    else:\n        return \"0b\" + bin(int(n + (m - n) / 2))[2:]\n", " \
    \   if n > m:\n        return -1\n    else:\n        return String.fromCharCode(\n\
    \            (n + m) / 2 + 48\n        )\n", "    if n > m:\n        return -1\n\
    \    else:\n        return \"0b\" + bin(n + (m - n) / 2).replace(\"0b\", \"\")",
  "    if n > m:\n        return -1\n    else:\n        return int(bin(n + m - 1)[2:])\n",
  "    if n > m:\n        return -1\n    else:\n        return \"0b\" + bin(n + m\
    \ // 2)[2:].zfill(m - n)", "    if n > m:\n        return -1\n    else:\n    \
    \    return \"0b\" + bin(n + (m - n) / 2)[2:].zfill(m - n + 1)", "    if n > m:\n\
    \        return -1\n    else:\n        return \"0b\" + bin(n + m // 2)[2:].zfill(m\
    \ - n)", "    if n > m:\n        return -1\n    elif n == m:\n        return \"\
    0b\" + bin(n)[2:]\n    else:\n        return \"0b\" + bin(n)[2:] + \"0b\" + bin(m)[2:]",
  "    if n > m:\n        return -1\n    return \"0b\" + bin(n + m // 2)[2:].zfill(m\
    \ - n)", "    if n > m:\n        return -1\n    else:\n        return \"0b\" +\
    \ bin(n + m // 2)[2:].zfill(m - n)\n", "    if n > m:\n        return -1\n   \
    \ elif n == m:\n        return \"0b\" + bin(n)[2:]\n    else:\n        return\
    \ \"0b\" + bin(n)[2:] + \"0b\" + bin(m)[2:]", "    if n > m:\n        return -1\n\
    \    \n    sum = 0\n    for i in range(n, m + 1):\n        sum += i\n    \n  \
    \  return format(sum / (m - n + 1), 'b')\n", "    if n > m:\n        return -1\n\
    \    else:\n        return \"0b\" + bin(n + (m - n) / 2)[2:].zfill(m - n)", " \
    \   if n > m:\n        return -1\n    else:\n        return String(Int64(n).to_string()\
    \ + Int64(m).to_string()).to_string()", "    if n > m:\n        return -1\n  \
    \  else:\n        return \"0b\" + bin(n + (m - n) / 2)[2:].zfill(m - n + 1)\n",
  "    if n > m:\n        return -1\n    else:\n        return bin(n + m // 2).replace(\"\
    0b\", \"\")", "    if n > m:\n        return -1\n    else:\n        return \"\
    0b\" + bin(n + m // 2)[2:].zfill(m - n)", "    if n > m:\n        return -1\n\
    \    else:\n        return \"0b\" + bin(n + (m - n) / 2)[2:].zfill(m - n)\n",
  "    if n > m:\n        return -1\n    else:\n        return \"0b\" + bin(n + m\
    \ // 2)[2:].zfill(m - n)\n", "    if n > m:\n        return -1\n    elif n ==\
    \ m:\n        return \"0b\" + bin(n)[2:]\n    else:\n        return \"0b\" + bin(n)[2:]\
    \ + \"0b\" + bin(m)[2:]\n", "    if n > m:\n        return -1\n    \n    sum =\
    \ 0\n    for i in range(n, m + 1):\n        sum += i\n    \n    return to_bin(sum\
    \ / (m - n + 1))", "    if n > m:\n        return -1\n    else:\n        return\
    \ int(bin(n + m - 1)[2:])", "    if n > m:\n        return -1\n    else:\n   \
    \     return \"0b\" + bin(n + (m - n) / 2)[2:].zfill(m - n + 1)", "    if n >\
    \ m:\n        return -1\n    else:\n        return \"0b\" + bin(n + m // 2)[2:].zfill(m\
    \ - n)\n", "    if n > m:\n        return -1\n    else:\n        return \"0b\"\
    \ + bin(n + m // 2)[2:].zfill(m - n)\n", "    if n > m:\n        return -1\n \
    \   else:\n        return bin(n + (m - n) / 2).replace(\"0b\", \"\")", "    if\
    \ n > m:\n        return -1\n    else:\n        return \"0b\" + bin(n + (m - n)\
    \ / 2)[2:].zfill(m - n)", "    if n > m:\n        return -1\n    else:\n     \
    \   return \"0b\" + bin(n + m // 2)[2:].zfill(m - n)", "    if n > m:\n      \
    \  return -1\n    \n    sum = 0\n    for i in range(n, m + 1):\n        sum +=\
    \ i\n    \n    return str(sum // (m - n + 1))\n", "    if n > m:\n        return\
    \ -1\n    else:\n        return \"0b\" + bin(n + m // 2)[2:].zfill(m - n)\n",
  "    if n > m:\n        return -1\n    return \"0b\" + bin(n + (m - n) / 2)[2:]",
  "    if n > m:\n        return -1\n    else:\n        return \"0b\" + bin(n + m\
    \ // 2)[2:].zfill(m - n)\n", "    if n > m:\n        return -1\n    else:\n  \
    \      return \"0b\" + bin(n + m // 2)[2:].zfill(m - n)\n", "    if n > m:\n \
    \       return -1\n    else:\n        return \"0b\" + bin(n + (m - n) / 2)[2:]",
  "    if n > m:\n        return -1\n    else:\n        return \"0b\" + bin(n + (m\
    \ - n) / 2)[2:].zfill(m - n + 1)", "    if n > m:\n        return -1\n    else:\n\
    \        return \"0b\" + bin(n + m // 2)[2:].zfill(m - n)\n", "    if n > m:\n\
    \        return -1\n    else:\n        return String.fromCharCode(\n         \
    \   (n + m) / 2 + 48\n        )", "    if n > m:\n        return -1\n    else:\n\
    \        return \"0b\" + bin(n + (m - n) / 2)[2:]\n", "    if n > m:\n       \
    \ return -1\n    \n    sum = 0\n    for i in range(n, m + 1):\n        sum +=\
    \ i\n    \n    return String(sum // (m - n + 1))\n", "    if n > m:\n        return\
    \ -1\n    else:\n        return \"0b\" + bin(n + m // 2)[2:].zfill(m - n)\n",
  "    if n > m:\n        return -1\n    return \"0b\" + bin(n + (m - n) / 2).replace(\"\
    0b\", \"\")", "    if n > m:\n        return -1\n    else:\n        return \"\
    0b\" + bin(n + (m - n) / 2)[2:].zfill(m - n + 1)", "    if n > m:\n        return\
    \ -1\n    else:\n        return \"0b\" + bin(n + m // 2)[2:].zfill(m - n)\n",
  "    if n > m:\n        return -1\n    else:\n        return \"0b\" + bin(n + (m\
    \ - n) / 2)[2:]", "    if n > m:\n        return -1\n    else:\n        return\
    \ \"0b\" + bin(n + m // 2)[2:].zfill(m - n)\n", "    if n > m:\n        return\
    \ -1\n    else:\n        return \"0b\" + bin(n + m // 2)[2:].zfill(m - n)", " \
    \   if n > m:\n        return -1\n    else:\n        return int(bin(n + m)[2:])\n",
  "    if n > m:\n        return -1\n    \n    sum = 0\n    for i in range(n, m +\
    \ 1):\n        sum += i\n    \n    return sum // (m - n + 1)", "    if n > m:\n\
    \        return -1\n    elif n == m:\n        return \"0b\" + str(n)\n    else:\n\
    \        return \"0b\" + str(n) + \"0b\" + str(m)", "    if n > m:\n        return\
    \ -1\n    else:\n        return \"0b\" + bin(n + (m - n) / 2)[2:].zfill(m - n\
    \ + 1)", "    if n > m:\n        return -1\n    return \"0b\" + bin(n + (m - n)\
    \ / 2)[2:]\n", "    if n > m:\n        return -1\n    else:\n        return \"\
    0b\" + bin(n + m // 2)[2:].zfill(m - n)\n", "    if n > m:\n        return -1\n\
    \    else:\n        return \"0b\" + bin(n + (m - n) / 2).replace(\"0b\", \"\")",
  "    if n > m:\n        return -1\n    else:\n        return \"0b\" + bin(n + m\
    \ // 2)[2:].zfill(m - n)", "    if n > m:\n        return -1\n    else:\n    \
    \    return \"0b\" + bin(n + m // 2)[2:].zfill(m - n)", "    if n > m:\n     \
    \   return -1\n    else:\n        return \"0b\" + bin(n + (m - n) / 2)[2:].zfill(m\
    \ - n + 1)", "    if n > m:\n        return -1\n    else:\n        return \"0b\"\
    \ + bin(n + m // 2)[2:].zfill(m - n + 1)", "    if n > m:\n        return -1\n\
    \    else:\n        return bin(n + (m - n) / 2)\n", "    if n > m:\n        return\
    \ -1\n    else:\n        return \"0b\" + bin(n + m // 2)[2:].zfill(m - n)", " \
    \   if n > m:\n        return -1\n    else:\n        return int(bin(n + m // 2)[2:])\n",
  "    if n > m:\n        return -1\n    else:\n        return \"0b\" + bin(int(n\
    \ + m) / 2)[2:].zfill(int(math.log(m - n + 1, 2)))", "    if n > m:\n        return\
    \ -1\n    else:\n        return \"0b\" + bin(n + (m - n) / 2)[2:].zfill(m - n\
    \ + 1)\n", "    if n > m:\n        return -1\n    else:\n        return \"0b\"\
    \ + bin(n + m // 2)[2:].zfill(m - n)\n", "    if n > m:\n        return -1\n \
    \   else:\n        return \"0b\" + bin(n + (m - n) / 2).replace(\"0b\", \"\")",
  "    if n > m:\n        return -1\n    else:\n        return \"0b\" + bin(n + m\
    \ // 2)[2:].zfill(m - n)\n", "    if n > m:\n        return -1\n    else:\n  \
    \      return int(bin(n + m - 1)[2:])", "    if n > m:\n        return -1\n  \
    \  return \"0b\" + bin(n + (m - n) / 2).replace(\"0b\", \"\")", "    if n > m:\n\
    \        return -1\n    else:\n        return \"0b\" + bin(n + m // 2)[2:].zfill(m\
    \ - n)", "    if n > m:\n        return -1\n    return \"0b\" + bin(n + m - 1)[2:].zfill(m\
    \ - n)", "    if n > m:\n        return -1\n    elif n == m:\n        return \"\
    0b\" + bin(n)[2:]\n    else:\n        return \"0b\" + bin(n)[2:] + \"0b\" + bin(m)[2:]",
  "    if n > m:\n        return -1\n    else:\n        return String.fromCharCode(\n\
    \            (n + m) / 2 + 48\n        )", "    if n > m:\n        return -1\n\
    \    else:\n        return \"0b\" + bin(n + m // 2)[2:].zfill(m - n)", "    if\
    \ n > m:\n        return -1\n    else:\n        return \"0b\" + bin(n + m // 2)[2:].zfill(m\
    \ - n)", "    if n > m:\n        return -1\n    else:\n        return int(bin(n\
    \ + m - 1)[2:])", "    if n > m:\n        return -1\n    else:\n        return\
    \ int(bin(n + m - 1)[2:])", "    if n > m:\n        return -1\n    else:\n   \
    \     return int(bin(n + m - 1)[2:])", "    if n > m:\n        return -1\n   \
    \ return \"0b\" + bin(n + (m - n) / 2)[2:].zfill(m - n)", "    if n > m:\n   \
    \     return -1\n    else:\n        return \"0b\" + bin(n + (m - n) / 2)[2:].zfill(m\
    \ - n + 1)", "    if n > m:\n        return -1\n    elif n == m:\n        return\
    \ \"0b\" + bin(n)[2:]\n    else:\n        return \"0b\" + bin(n)[2:] + \"0b\"\
    \ + bin(m)[2:]", "    if n > m:\n        return -1\n    else:\n        return\
    \ \"0b\" + bin(n + m - 1)[2:].zfill(m - n)\n", "    if n > m:\n        return\
    \ -1\n    \n    sum = 0\n    for i in range(n, m + 1):\n        sum += i\n   \
    \ \n    return bin(sum // (m - n + 1))[2:]", "    if n > m:\n        return -1\n\
    \    else:\n        return bin(n + m // 2)\n", "    if n > m:\n        return\
    \ -1\n    else:\n        return \"0b\" + bin(n + m // 2)[2:].zfill(m - n)", " \
    \   if n > m:\n        return -1\n    else:\n        return \"0b\" + bin(n + m\
    \ // 2)[2:].zfill(m - n)", "    if n > m:\n        return -1\n    else:\n    \
    \    return int(bin(n + m - 1)[2:])", "    if n > m:\n        return -1\n    else:\n\
    \        return \"0b\" + bin(n + m // 2)[2:].zfill(m - n)\n", "    if n > m:\n\
    \        return -1\n    elif n == m:\n        return \"0b\" + bin(n)[2:]\n   \
    \ else:\n        return \"0b\" + bin(n)[2:] + \"0b\" + bin(m)[2:]", "    if n\
    \ > m:\n        return -1\n    else:\n        return \"0b\" + bin(n + m // 2)[2:].zfill(m\
    \ - n)", "    if n > m:\n        return -1\n    elif n == m:\n        return \"\
    0b\" + bin(n)[2:]\n    else:\n        return \"0b\" + bin(n)[2:] + \"0b\" + bin(m)[2:]\n",
  "    if n > m:\n        return -1\n    else:\n        return \"0b\" + bin(n + m\
    \ // 2)[2:].zfill(m - n)\n", "    if n > m:\n        return -1\n    else:\n  \
    \      return \"0b\" + bin(n + m - 1)[2:].zfill(m - n)\n", "    if n > m:\n  \
    \      return -1\n    elif n == m:\n        return \"0b\" + bin(n)[2:]\n    else:\n\
    \        return \"0b\" + bin(n)[2:] + \"0b\" + bin(m)[2:]", "    if n > m:\n \
    \       return -1\n    elif n == m:\n        return \"0b\" + bin(n)[2:]\n    else:\n\
    \        return \"0b\" + bin(n)[2:] + \"0b\" + bin(m)[2:]\n", "    if n > m:\n\
    \        return -1\n    else:\n        return \"0b\" + bin(n + m // 2)[2:].zfill(m\
    \ - n)\n", "    if n > m:\n        return -1\n    else:\n        return (n + m)\
    \ / 2\n", "    if n > m:\n        return -1\n    else:\n        return \"0b\"\
    \ + bin(n + m - 1)[2:].zfill(m - n)\n", "    if n > m:\n        return -1\n  \
    \  else:\n        return int(bin(n + m - 1)[2:])", "    if n > m:\n        return\
    \ -1\n    elif n == m:\n        return \"0b\" + bin(n)[2:]\n    else:\n      \
    \  return \"0b\" + bin(n)[2:] + \"0b\" + bin(m)[2:]", "    if n > m:\n       \
    \ return -1\n    return \"0b\" + bin(n + (m - n) / 2)[2:].zfill(m - n + 1)", " \
    \   if n > m:\n        return -1\n    return \"0b\" + bin(n + (m - n) / 2)[2:].zfill(m\
    \ - n + 1)", "    if n > m:\n        return -1\n    else:\n        return \"0b\"\
    \ + bin(int(n + m) / 2)[2:].zfill(int(math.log(m - n + 1, 2)))\n", "    if n >\
    \ m:\n        return -1\n    else:\n        return \"0b\" + bin(n + (m - n) /\
    \ 2).replace(\"0b\", \"\")\n", "    if n > m:\n        return -1\n    else:\n\
    \        return \"0b\" + bin(n + m // 2)[2:].zfill(m - n)\n", "    if n > m:\n\
    \        return -1\n    else:\n        return bin(int(n + m) / 2)\n", "    if\
    \ n > m:\n        return -1\n    return \"0b\" + bin(int(n + m) / 2)[2:]\n", " \
    \   if n > m:\n        return -1\n    else:\n        return \"0b\" + bin(n + (m\
    \ - n) / 2)[2:].zfill(m - n + 1)", "    if n > m:\n        return -1\n    else:\n\
    \        return \"0b\" + bin(n + m // 2)[2:].zfill(m - n)\n", "    if n > m:\n\
    \        return -1\n    else:\n        return \"0b\" + bin(n + m // 2)[2:].zfill(m\
    \ - n)", "    if n > m:\n        return -1\n    else:\n        return \"0b\" +\
    \ bin(n + m // 2)[2:].zfill(m - n)", "    if n > m:\n        return -1\n    elif\
    \ n == m:\n        return \"0b\" + bin(n)[2:]\n    else:\n        return \"0b\"\
    \ + bin(n)[2:] + \"0b\" + bin(m)[2:]", "    if n > m:\n        return -1\n   \
    \ else:\n        return \"0b\" + bin(n + m // 2)[2:].zfill(m - n)\n", "    if\
    \ n > m:\n        return -1\n    else:\n        return \"0b\" + bin(n + m // 2)[2:].zfill(m\
    \ - n)\n", "    if n > m:\n        return -1\n    else:\n        return \"0b\"\
    \ + bin(n + m // 2)[2:].zfill(m - n)\n", "    if n > m:\n        return -1\n \
    \   else:\n        return \"0b\" + bin(n + m // 2)[2:].zfill(m - n)", "    if\
    \ n > m:\n        return -1\n    else:\n        return \"0b\" + bin(n + m // 2)[2:].zfill(m\
    \ - n)\n", "    if n > m:\n        return -1\n    elif n == m:\n        return\
    \ \"0b\" + bin(n)[2:]\n    else:\n        return \"0b\" + bin(n)[2:] + \"0b\"\
    \ + bin(m)[2:]", "    if n > m:\n        return -1\n    else:\n        return\
    \ \"0b\" + bin(n + m // 2)[2:].zfill(m - n)", "    if n > m:\n        return -1\n\
    \    else:\n        return \"0b\" + bin(n + m // 2)[2:].zfill(m - n)", "    if\
    \ n > m:\n        return -1\n    return \"0b\" + bin(n + (m - n) / 2)[2:].zfill(m\
    \ - n + 1)\n", "    if n > m:\n        return -1\n    return \"0b\" + bin(n +\
    \ (m - n) / 2)[2:].zfill(m - n + 1)\n", "    if n > m:\n        return -1\n  \
    \  else:\n        return \"0b\" + bin(n + (m - n) / 2)[2:].zfill(m - n)", "  \
    \  if n > m:\n        return -1\n    else:\n        return \"0b\" + bin(n + (m\
    \ - n) / 2)[2:]", "    if n > m:\n        return -1\n    elif n == m:\n      \
    \  return \"0b\" + bin(n)[2:]\n    else:\n        return \"0b\" + bin(n)[2:] +\
    \ \"0b\" + bin(m)[2:]\n", "    if n > m:\n        return -1\n    else:\n     \
    \   return \"0b\" + bin(n + m // 2)[2:].zfill(m - n)", "    if n > m:\n      \
    \  return -1\n    return \"0b\" + bin(n + m // 2)[2:].zfill(m - n)", "    if n\
    \ > m:\n        return -1\n    else:\n        return String.fromCharCode(\n  \
    \          (n + m) / 2 + 48\n        )\n", "    if n > m:\n        return -1\n\
    \    else:\n        return bin(int(n + m) / 2)\n", "    if n > m:\n        return\
    \ -1\n    else:\n        return \"0b\" + bin(n + (m - n) / 2).replace(\"0b\",\
    \ \"\")", "    if n > m:\n        return -1\n    else:\n        return \"0b\"\
    \ + bin(n + m // 2)[2:].zfill(m - n)\n", "    if n > m:\n        return -1\n \
    \   elif n == m:\n        return \"0b\" + bin(n)[2:]\n    else:\n        return\
    \ \"0b\" + bin(n)[2:] + \"0b\" + bin(m)[2:]", "    if n > m:\n        return -1\n\
    \    else:\n        return bin(int(n + (m - n) / 2))[2:]\n", "    if n > m:\n\
    \        return -1\n    else:\n        return \"0b\" + bin(n + m // 2)[2:].zfill(m\
    \ - n)", "    if n > m:\n        return -1\n    else:\n        return \"0b\" +\
    \ bin(n + m // 2)[2:].zfill(m - n)", "    if n > m:\n        return -1\n    else:\n\
    \        return \"0b\" + bin(n + m // 2)[2:].zfill(m - n)\n", "    if n > m:\n\
    \        return -1\n    else:\n        return bin(n + (m - n) / 2).rstrip('L')\n",
  "    if n > m:\n        return -1\n    else:\n        return bin(int(n + m) / 2)\n",
  "    if n > m:\n        return -1\n    else:\n        return bin(n + m // 2)\n",
  "    if n > m:\n        return -1\n    elif n == m:\n        return \"0b\" + bin(n)[2:]\n\
    \    else:\n        return \"0b\" + bin(n)[2:] + \"0b\" + bin(m)[2:]\n", "   \
    \ if n > m:\n        return -1\n    else:\n        return \"0b\" + bin(n + (m\
    \ - n) / 2)[2:].zfill(m - n + 1)\n", "    if n > m:\n        return -1\n    else:\n\
    \        return int(bin(n + m - 1)[2:])", "    if n > m:\n        return -1\n\
    \    return \"0b\" + bin(n + m // 2)[2:].zfill(m - n + 1)", "    if n > m:\n \
    \       return -1\n    else:\n        return String(Int64(n) + Int64(m) + Int64(n)\
    \ + Int64(m) + Int64(n) + Int64(m) + Int64(n) + Int64(m) + Int64(n) + Int64(m)\
    \ + Int64(n) + Int64(m) + Int64(n) + Int64(m) + Int64(n) + Int64(m) + Int64(n)\
    \ + Int64(m) + Int64(n) + Int64(m) + Int64(n) + Int64(m) + Int64(n) + Int64(m)\
    \ + Int64(n) + Int64(m) + Int64(n) + Int64(m) + Int64(n) + Int64(m) + Int64(n)\
    \ + Int64(m) + Int64(n) + Int64(m) + Int64(n) + Int64(m) + Int64(n) + Int64(m)\
    \ + Int64(n) + Int64(m) + Int64(n) + Int64(m) + Int64(n) + Int64(m) + Int64(n)\
    \ + Int64(m) + Int64(n) + Int64(m) + Int64(n) + Int64(m) + Int64(n) + Int64(m)\
    \ + Int64(n) + Int64(m) + Int64(n) + Int64(m) + Int64(n) + Int64(m) + Int64(n)\
    \ + Int64(m) + Int64(n) + Int64(m) + Int64(n) + Int64(m) + Int64(n) + Int64(m)\
    \ + Int64(n) + Int64(m) + Int64(n) + Int64(m) + Int64(n) + Int64(m) + Int64(n)\
    \ + Int64(m) + Int64(n) + Int64(m) + Int64(n) + Int64(m) + Int64(n) + Int64(m)\
    \ + Int64(n) + Int64(m) +", "    if n > m:\n        return -1\n    return \"0b\"\
    \ + bin(n + m // 2)[2:].zfill(m - n)\n", "    if n > m:\n        return -1\n \
    \   else:\n        return bin(n + m // 2).replace(\"0b\", \"\")", "    if n >\
    \ m:\n        return -1\n    if n == m:\n        return to_bin(n)\n    return\
    \ to_bin(n + (m - n) / 2)", "    if n > m:\n        return -1\n    else:\n   \
    \     return bin(n + m // 2)\n", "    if n > m:\n        return -1\n    return\
    \ \"0b\" + bin(n + (m - n) / 2)[2:]\n", "    if n > m:\n        return -1\n  \
    \  else:\n        return \"0b\" + bin(n + m // 2)[2:].zfill(m - n)", "    if n\
    \ > m:\n        return -1\n    else:\n        return \"0b\" + bin(n + (m - n)\
    \ / 2).replace(\"0b\", \"\")", "    if n > m:\n        return -1\n    else:\n\
    \        return \"0b\" + bin(n + m // 2)[2:].zfill(m - n)", "    if n > m:\n \
    \       return -1\n    else:\n        return \"0b\" + bin(n + (m - n) / 2).replace(\"\
    0b\", \"\")", "    if n > m:\n        return -1\n    else:\n        return bin(n\
    \ + m // 2)[2:].zfill(m - n)", "    if n > m:\n        return -1\n    else:\n\
    \        return bin(n + m // 2)\n", "    if n > m:\n        return -1\n    elif\
    \ n == m:\n        return \"0b\" + bin(n)[2:]\n    else:\n        return \"0b\"\
    \ + bin(n)[2:] + \"0b\" + bin(m)[2:]", "    if n > m:\n        return -1\n   \
    \ else:\n        return \"0b\" + bin(n + m // 2)[2:].zfill(m - n)", "    if n\
    \ > m:\n        return -1\n    elif n == m:\n        return \"0b\" + bin(n)[2:]\n\
    \    else:\n        return \"0b\" + bin(n)[2:] + \"0b\" + bin(m)[2:]", "    if\
    \ n > m:\n        return -1\n    elif n == m:\n        return \"0b\" + bin(n)[2:]\n\
    \    else:\n        return \"0b\" + bin(n)[2:] + \"0b\" + bin(m)[2:]", "    if\
    \ n > m:\n        return -1\n    elif n == m:\n        return \"0b\" + bin(n)[2:]\n\
    \    else:\n        return \"0b\" + bin(n)[2:] + \"0b\" + bin(m)[2:]", "    if\
    \ n > m:\n        return -1\n    return \"0b\" + bin(n + m - 1)[2:].zfill(m -\
    \ n)\n", "    if n > m:\n        return -1\n    else:\n        return \"0b\" +\
    \ bin(int(n + m) / 2)[2:].zfill(int(math.log(m - n + 1, 2)))\n", "    if n > m:\n\
    \        return -1\n    \n    sum = 0\n    for i in range(n, m + 1):\n       \
    \ sum += i\n    \n    return String(sum // (m - n + 1))\n", "    if n > m:\n \
    \       return -1\n    else:\n        return \"0b\" + bin(n + (m - n) / 2).replace(\"\
    0b\", \"\")", "    if n > m:\n        return -1\n    return \"0b\" + bin(n + (m\
    \ - n) / 2)[2:].zfill(m - n + 1)", "    if n > m:\n        return -1\n    return\
    \ \"0b\" + bin(n + (m - n) / 2)[2:].zfill(m - n + 1)\n", "    if n > m:\n    \
    \    return -1\n    \n    # compute the sum\n    sum = 0\n    for i in range(n,\
    \ m + 1):\n        sum += i\n    \n    # compute the average\n    average = sum\
    \ / (m - n + 1)\n    \n    # round the average to the nearest integer\n    return\
    \ str(int(average))", "    if n > m:\n        return -1\n    return \"0b\" + bin(n\
    \ + m // 2)[2:].zfill(m - n)\n", "    if n > m:\n        return -1\n    else:\n\
    \        return bin(int(n + m) / 2)\n", "    if n > m:\n        return -1\n  \
    \  else:\n        return \"0b\" + bin(n + m // 2)[2:].zfill(m - n)"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
