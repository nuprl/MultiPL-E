{
  "name": "HumanEval_22_filter_integers",
  "language": "jl",
  "prompt": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n",
  "tests": "using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "results": [
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if isinstance(x, int)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292848,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyhc2f1_m.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyhc2f1_m.jl:1\nin expression starting at /tmp/tmpyhc2f1_m.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if isinstance(x, int)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292848,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyhc2f1_m.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyhc2f1_m.jl:1\nin expression starting at /tmp/tmpyhc2f1_m.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if isinstance(x, int)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292848,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyhc2f1_m.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyhc2f1_m.jl:1\nin expression starting at /tmp/tmpyhc2f1_m.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [v for v in values if is_integer(v)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmgzwnzcg.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmgzwnzcg.jl:1\nin expression starting at /tmp/tmpmgzwnzcg.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if isinstance(x, int)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292848,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyhc2f1_m.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyhc2f1_m.jl:1\nin expression starting at /tmp/tmpyhc2f1_m.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if isinstance(x, Int64)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp4xqi3hz.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp4xqi3hz.jl:1\nin expression starting at /tmp/tmpp4xqi3hz.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [v for v in values if isinstance(v, int)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo9v7w5xy.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo9v7w5xy.jl:1\nin expression starting at /tmp/tmpo9v7w5xy.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    if len(values) == 0:\n        return values\n    return [value for value in values if is_integer(value)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptxrd_15l.jl:9\nin expression starting at /tmp/tmptxrd_15l.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if is_integer(x)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi19i7zgq.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi19i7zgq.jl:1\nin expression starting at /tmp/tmpi19i7zgq.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if isinstance(x, int)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292848,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyhc2f1_m.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyhc2f1_m.jl:1\nin expression starting at /tmp/tmpyhc2f1_m.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if isinstance(x, int)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292848,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyhc2f1_m.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyhc2f1_m.jl:1\nin expression starting at /tmp/tmpyhc2f1_m.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if is_integer(x)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi19i7zgq.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi19i7zgq.jl:1\nin expression starting at /tmp/tmpi19i7zgq.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [value if isinstance(value, int) else None for value in values]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292848,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmp3mh_6fsd.jl:8 expected \"end\", got \"for\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3mh_6fsd.jl:8\nin expression starting at /tmp/tmp3mh_6fsd.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if is_integer(x)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi19i7zgq.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi19i7zgq.jl:1\nin expression starting at /tmp/tmpi19i7zgq.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if is_integer(x)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi19i7zgq.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi19i7zgq.jl:1\nin expression starting at /tmp/tmpi19i7zgq.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if isinstance(x, int)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292848,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyhc2f1_m.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyhc2f1_m.jl:1\nin expression starting at /tmp/tmpyhc2f1_m.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [v for v in values if isinstance(v, int)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo9v7w5xy.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo9v7w5xy.jl:1\nin expression starting at /tmp/tmpo9v7w5xy.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if is_integer(x)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi19i7zgq.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi19i7zgq.jl:1\nin expression starting at /tmp/tmpi19i7zgq.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [v for v in values if is_integer(v)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmgzwnzcg.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmgzwnzcg.jl:1\nin expression starting at /tmp/tmpmgzwnzcg.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if isinstance(x, int)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292848,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyhc2f1_m.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyhc2f1_m.jl:1\nin expression starting at /tmp/tmpyhc2f1_m.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if isinstance(x, int)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292848,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyhc2f1_m.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyhc2f1_m.jl:1\nin expression starting at /tmp/tmpyhc2f1_m.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\n\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppppmj175.jl:8\nin expression starting at /tmp/tmppppmj175.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [value for value in values if is_integer(value)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292848,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7oyejr2y.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7oyejr2y.jl:1\nin expression starting at /tmp/tmp7oyejr2y.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if is_integer(x)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi19i7zgq.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi19i7zgq.jl:1\nin expression starting at /tmp/tmpi19i7zgq.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if is_integer(x)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi19i7zgq.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi19i7zgq.jl:1\nin expression starting at /tmp/tmpi19i7zgq.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if isinstance(x, int)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292848,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyhc2f1_m.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyhc2f1_m.jl:1\nin expression starting at /tmp/tmpyhc2f1_m.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if is_integer(x)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi19i7zgq.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi19i7zgq.jl:1\nin expression starting at /tmp/tmpi19i7zgq.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if is_integer(x)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi19i7zgq.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi19i7zgq.jl:1\nin expression starting at /tmp/tmpi19i7zgq.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    if all(isinstance(x, int) for x in values):\n        return values\n    else:\n        return [x for x in values if isinstance(x, int)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292848,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp22i4j0al.jl:9\nin expression starting at /tmp/tmp22i4j0al.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if isinstance(x, Int64)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp4xqi3hz.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp4xqi3hz.jl:1\nin expression starting at /tmp/tmpp4xqi3hz.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    if len(values) == 0:\n        return values\n    else:\n        return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpexj6fw9s.jl:9\nin expression starting at /tmp/tmpexj6fw9s.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if isinstance(x, int)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292848,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyhc2f1_m.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyhc2f1_m.jl:1\nin expression starting at /tmp/tmpyhc2f1_m.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\n\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppppmj175.jl:8\nin expression starting at /tmp/tmppppmj175.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if isinstance(x, int)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292848,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyhc2f1_m.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyhc2f1_m.jl:1\nin expression starting at /tmp/tmpyhc2f1_m.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if is_integer(x)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi19i7zgq.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi19i7zgq.jl:1\nin expression starting at /tmp/tmpi19i7zgq.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if is_integer(x)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi19i7zgq.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi19i7zgq.jl:1\nin expression starting at /tmp/tmpi19i7zgq.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if is_integer(x)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi19i7zgq.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi19i7zgq.jl:1\nin expression starting at /tmp/tmpi19i7zgq.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if isinstance(x, int)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292848,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyhc2f1_m.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyhc2f1_m.jl:1\nin expression starting at /tmp/tmpyhc2f1_m.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if isinstance(x, int)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292848,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyhc2f1_m.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyhc2f1_m.jl:1\nin expression starting at /tmp/tmpyhc2f1_m.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if isinstance(x, int)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292848,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyhc2f1_m.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyhc2f1_m.jl:1\nin expression starting at /tmp/tmpyhc2f1_m.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if is_integer(x)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi19i7zgq.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi19i7zgq.jl:1\nin expression starting at /tmp/tmpi19i7zgq.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if is_integer(x)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi19i7zgq.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi19i7zgq.jl:1\nin expression starting at /tmp/tmpi19i7zgq.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if isinstance(x, int)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292848,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyhc2f1_m.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyhc2f1_m.jl:1\nin expression starting at /tmp/tmpyhc2f1_m.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if isinstance(x, int)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292848,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyhc2f1_m.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyhc2f1_m.jl:1\nin expression starting at /tmp/tmpyhc2f1_m.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if is_integer(x)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi19i7zgq.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi19i7zgq.jl:1\nin expression starting at /tmp/tmpi19i7zgq.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if isinstance(x, int)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292848,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyhc2f1_m.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyhc2f1_m.jl:1\nin expression starting at /tmp/tmpyhc2f1_m.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [v for v in values if is_integer(v)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmgzwnzcg.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmgzwnzcg.jl:1\nin expression starting at /tmp/tmpmgzwnzcg.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if is_integer(x)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi19i7zgq.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi19i7zgq.jl:1\nin expression starting at /tmp/tmpi19i7zgq.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if isinstance(x, int)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292848,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyhc2f1_m.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyhc2f1_m.jl:1\nin expression starting at /tmp/tmpyhc2f1_m.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    if values == []\n        return []\n    else:\n        return [x for x in values if isinstance(x, int)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_n2rnbx.jl:11\nin expression starting at /tmp/tmpk_n2rnbx.jl:11\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if is_integer(x)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi19i7zgq.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi19i7zgq.jl:1\nin expression starting at /tmp/tmpi19i7zgq.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return [x for x in values if is_integer(x)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi19i7zgq.jl:7 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi19i7zgq.jl:1\nin expression starting at /tmp/tmpi19i7zgq.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    if len(values) == 0:\n        return values\n    return [x for x in values if isinstance(x, int)]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjo2llkzd.jl:9\nin expression starting at /tmp/tmpjo2llkzd.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n    return filter(lambda x: isinstance(x, int), values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2t_ap_ib.jl:8\nin expression starting at /tmp/tmp2t_ap_ib.jl:8\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}