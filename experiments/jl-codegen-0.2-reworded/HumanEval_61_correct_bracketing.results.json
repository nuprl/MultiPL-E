{
  "name": "HumanEval_61_correct_bracketing",
  "language": "jl",
  "prompt": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n",
  "tests": "using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "results": [
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz689m8ir.jl:17\nin expression starting at /tmp/tmpz689m8ir.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz689m8ir.jl:17\nin expression starting at /tmp/tmpz689m8ir.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        if brackets[0] == \"(\":\n            return correct_bracketing(brackets[1:]) and correct_bracketing(brackets[:-1])\n        else:\n            return correct_bracketing(brackets[1:])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8ulfskhc.jl:17\nin expression starting at /tmp/tmp8ulfskhc.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\" or brackets == \"()()\":\n        return true\n    else:\n        return false\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp605ek2xf.jl:14\nin expression starting at /tmp/tmp605ek2xf.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvwhh4e_j.jl:17\nin expression starting at /tmp/tmpvwhh4e_j.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5hscfray.jl:14\nin expression starting at /tmp/tmp5hscfray.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvwhh4e_j.jl:17\nin expression starting at /tmp/tmpvwhh4e_j.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvwhh4e_j.jl:17\nin expression starting at /tmp/tmpvwhh4e_j.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvwhh4e_j.jl:17\nin expression starting at /tmp/tmpvwhh4e_j.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz689m8ir.jl:17\nin expression starting at /tmp/tmpz689m8ir.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return True\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp01rpt8hu.jl:14\nin expression starting at /tmp/tmp01rpt8hu.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvwhh4e_j.jl:17\nin expression starting at /tmp/tmpvwhh4e_j.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvwhh4e_j.jl:17\nin expression starting at /tmp/tmpvwhh4e_j.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\" or brackets == \"()()\" or brackets == \"()()()\":\n        return true\n    else:\n        return false\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9wcex1tx.jl:14\nin expression starting at /tmp/tmp9wcex1tx.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5hscfray.jl:14\nin expression starting at /tmp/tmp5hscfray.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\" or brackets == \"()()\" or brackets == \"()()()\":\n        return true\n    else:\n        return false\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9wcex1tx.jl:14\nin expression starting at /tmp/tmp9wcex1tx.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets.substring(1, brackets.length() - 1) == brackets.substring(0, 1) + brackets.substring(2, brackets.length() - 2)\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpujh6djg3.jl:14\nin expression starting at /tmp/tmpujh6djg3.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        if brackets[0] == \"(\":\n            return correct_bracketing(brackets[1:]) and correct_bracketing(brackets[1:])\n        else:\n            return correct_bracketing(brackets[1:])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkaw1n0yy.jl:17\nin expression starting at /tmp/tmpkaw1n0yy.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz689m8ir.jl:17\nin expression starting at /tmp/tmpz689m8ir.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\" or brackets == \"()()\" or brackets == \"()()()\":\n        return true\n    else:\n        return false\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9wcex1tx.jl:14\nin expression starting at /tmp/tmp9wcex1tx.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[len(brackets)-1] == \")\" and correct_bracketing(brackets[1:len(brackets)-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmppc0qtehk.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppc0qtehk.jl:17\nin expression starting at /tmp/tmppc0qtehk.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\" or brackets == \"()()\":\n        return true\n    else:\n        return false\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp605ek2xf.jl:14\nin expression starting at /tmp/tmp605ek2xf.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\" or brackets == \"()()\":\n        return true\n    else:\n        return false\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp605ek2xf.jl:14\nin expression starting at /tmp/tmp605ek2xf.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        if brackets[0] == \"(\":\n            return correct_bracketing(brackets[1:]) and correct_bracketing(brackets[:-1])\n        else:\n            return correct_bracketing(brackets[1:])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8ulfskhc.jl:17\nin expression starting at /tmp/tmp8ulfskhc.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return True\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp01rpt8hu.jl:14\nin expression starting at /tmp/tmp01rpt8hu.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets.index(\"(\") == brackets.rindex(\"(\") and \\\n               brackets.index(\")\") == brackets.rindex(\")\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl1tyx2xe.jl:14\nin expression starting at /tmp/tmpl1tyx2xe.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz689m8ir.jl:17\nin expression starting at /tmp/tmpz689m8ir.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvwhh4e_j.jl:17\nin expression starting at /tmp/tmpvwhh4e_j.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5hscfray.jl:14\nin expression starting at /tmp/tmp5hscfray.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6f847qop.jl:14\nin expression starting at /tmp/tmp6f847qop.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvwhh4e_j.jl:17\nin expression starting at /tmp/tmpvwhh4e_j.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvwhh4e_j.jl:17\nin expression starting at /tmp/tmpvwhh4e_j.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[len(brackets)-1] == \")\" and correct_bracketing(brackets[1:len(brackets)-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyjhz8uks.jl:17\nin expression starting at /tmp/tmpyjhz8uks.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz689m8ir.jl:17\nin expression starting at /tmp/tmpz689m8ir.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvwhh4e_j.jl:17\nin expression starting at /tmp/tmpvwhh4e_j.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\" or brackets == \"()()\":\n        return true\n    else:\n        return false\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp605ek2xf.jl:14\nin expression starting at /tmp/tmp605ek2xf.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[len(brackets)-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpub1b30yy.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpub1b30yy.jl:17\nin expression starting at /tmp/tmpub1b30yy.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvwhh4e_j.jl:17\nin expression starting at /tmp/tmpvwhh4e_j.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\" or brackets == \"()()\":\n        return true\n    else:\n        return false\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp605ek2xf.jl:14\nin expression starting at /tmp/tmp605ek2xf.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\" or brackets == \"()()\":\n        return true\n    else:\n        return false\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp605ek2xf.jl:14\nin expression starting at /tmp/tmp605ek2xf.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvwhh4e_j.jl:17\nin expression starting at /tmp/tmpvwhh4e_j.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz689m8ir.jl:17\nin expression starting at /tmp/tmpz689m8ir.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\" or brackets == \"()()\" or brackets == \"()()()\":\n        return true\n    else:\n        return false\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9wcex1tx.jl:14\nin expression starting at /tmp/tmp9wcex1tx.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\" or brackets == \"()()\":\n        return true\n    else:\n        return false\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp605ek2xf.jl:14\nin expression starting at /tmp/tmp605ek2xf.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5hscfray.jl:14\nin expression starting at /tmp/tmp5hscfray.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvwhh4e_j.jl:17\nin expression starting at /tmp/tmpvwhh4e_j.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvwhh4e_j.jl:17\nin expression starting at /tmp/tmpvwhh4e_j.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\" or brackets == \"()()\":\n        return true\n    else:\n        return false\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp605ek2xf.jl:14\nin expression starting at /tmp/tmp605ek2xf.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[len(brackets)-1] == \")\" and correct_bracketing(brackets[1:len(brackets)-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmppc0qtehk.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppc0qtehk.jl:17\nin expression starting at /tmp/tmppc0qtehk.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\" or brackets == \"()()\":\n        return true\n    else:\n        return false\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp605ek2xf.jl:14\nin expression starting at /tmp/tmp605ek2xf.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets.count(\"(\") == brackets.count(\")\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc5bpakng.jl:14\nin expression starting at /tmp/tmpc5bpakng.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5hscfray.jl:14\nin expression starting at /tmp/tmp5hscfray.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5hscfray.jl:14\nin expression starting at /tmp/tmp5hscfray.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[len(brackets)-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_3fawkz6.jl:17\nin expression starting at /tmp/tmp_3fawkz6.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvwhh4e_j.jl:17\nin expression starting at /tmp/tmpvwhh4e_j.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\" or brackets == \"()()\":\n        return true\n    else:\n        return false\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp605ek2xf.jl:14\nin expression starting at /tmp/tmp605ek2xf.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvwhh4e_j.jl:17\nin expression starting at /tmp/tmpvwhh4e_j.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvwhh4e_j.jl:17\nin expression starting at /tmp/tmpvwhh4e_j.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvwhh4e_j.jl:17\nin expression starting at /tmp/tmpvwhh4e_j.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return True\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppxx75h_x.jl:14\nin expression starting at /tmp/tmppxx75h_x.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return True\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and all(brackets[i] == \"(\" and brackets[i+1] == \")\" for i in range(len(brackets) - 1))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwtxmn5c2.jl:14\nin expression starting at /tmp/tmpwtxmn5c2.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz689m8ir.jl:17\nin expression starting at /tmp/tmpz689m8ir.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\" or brackets == \"()()\":\n        return true\n    else:\n        return false\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp605ek2xf.jl:14\nin expression starting at /tmp/tmp605ek2xf.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\" or brackets == \"()()\" or brackets == \"()()()\":\n        return true\n    else:\n        return false\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9wcex1tx.jl:14\nin expression starting at /tmp/tmp9wcex1tx.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\" or brackets == \"()()\":\n        return true\n    else:\n        return false\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp605ek2xf.jl:14\nin expression starting at /tmp/tmp605ek2xf.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\" or brackets == \"()()\":\n        return true\n    else:\n        return false\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp605ek2xf.jl:14\nin expression starting at /tmp/tmp605ek2xf.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvwhh4e_j.jl:17\nin expression starting at /tmp/tmpvwhh4e_j.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        if brackets[0] == \"(\" and brackets[len(brackets) - 1] == \")\":\n            return correct_bracketing(brackets[1:len(brackets) - 1])\n        else:\n            return false\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxidv_1c3.jl:17\nin expression starting at /tmp/tmpxidv_1c3.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        if brackets[0] == \"(\":\n            return correct_bracketing(brackets[1:]) and correct_bracketing(brackets[1:])\n        else:\n            return correct_bracketing(brackets[1:])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkaw1n0yy.jl:17\nin expression starting at /tmp/tmpkaw1n0yy.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvwhh4e_j.jl:17\nin expression starting at /tmp/tmpvwhh4e_j.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[len(brackets) - 1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphl84itkd.jl:17\nin expression starting at /tmp/tmphl84itkd.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz689m8ir.jl:17\nin expression starting at /tmp/tmpz689m8ir.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5hscfray.jl:14\nin expression starting at /tmp/tmp5hscfray.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz689m8ir.jl:17\nin expression starting at /tmp/tmpz689m8ir.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\" or brackets == \"()()\":\n        return true\n    else:\n        return false\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp605ek2xf.jl:14\nin expression starting at /tmp/tmp605ek2xf.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\" or brackets == \"()()\":\n        return true\n    else:\n        return false\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp605ek2xf.jl:14\nin expression starting at /tmp/tmp605ek2xf.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        if brackets[0] == \"(\" and brackets[len(brackets)-1] == \")\":\n            return correct_bracketing(brackets[1:len(brackets)-1])\n        else:\n            return false\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmz6v78b_.jl:17\nin expression starting at /tmp/tmpmz6v78b_.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6f847qop.jl:14\nin expression starting at /tmp/tmp6f847qop.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz689m8ir.jl:17\nin expression starting at /tmp/tmpz689m8ir.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6f847qop.jl:14\nin expression starting at /tmp/tmp6f847qop.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6f847qop.jl:14\nin expression starting at /tmp/tmp6f847qop.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\" or brackets == \"()()\":\n        return true\n    else:\n        return false\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp605ek2xf.jl:14\nin expression starting at /tmp/tmp605ek2xf.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvwhh4e_j.jl:17\nin expression starting at /tmp/tmpvwhh4e_j.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets.index(\"(\") == brackets.rindex(\"(\") and \\\n               brackets.index(\")\") == brackets.rindex(\")\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl1tyx2xe.jl:14\nin expression starting at /tmp/tmpl1tyx2xe.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvwhh4e_j.jl:17\nin expression starting at /tmp/tmpvwhh4e_j.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvwhh4e_j.jl:17\nin expression starting at /tmp/tmpvwhh4e_j.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\" or brackets == \"()()\":\n        return true\n    else:\n        return false\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp605ek2xf.jl:14\nin expression starting at /tmp/tmp605ek2xf.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[len(brackets)-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpub1b30yy.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpub1b30yy.jl:17\nin expression starting at /tmp/tmpub1b30yy.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz689m8ir.jl:17\nin expression starting at /tmp/tmpz689m8ir.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return True\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp01rpt8hu.jl:14\nin expression starting at /tmp/tmp01rpt8hu.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\" or brackets == \"()()\" or brackets == \"()()()\":\n        return true\n    else:\n        return false\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9wcex1tx.jl:14\nin expression starting at /tmp/tmp9wcex1tx.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvwhh4e_j.jl:17\nin expression starting at /tmp/tmpvwhh4e_j.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6f847qop.jl:14\nin expression starting at /tmp/tmp6f847qop.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\" or brackets == \"()()\":\n        return true\n    else:\n        return false\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp605ek2xf.jl:14\nin expression starting at /tmp/tmp605ek2xf.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm9yccdz.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm9yccdz.jl:17\nin expression starting at /tmp/tmpfm9yccdz.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokrq43nh.jl:14\nin expression starting at /tmp/tmpokrq43nh.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets.substring(1, brackets.length - 1) == brackets.substring(0, brackets.length - 2)\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292463,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2gxcloay.jl:14\nin expression starting at /tmp/tmp2gxcloay.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5hscfray.jl:14\nin expression starting at /tmp/tmp5hscfray.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvwhh4e_j.jl:17\nin expression starting at /tmp/tmpvwhh4e_j.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\" or brackets == \"()()\":\n        return true\n    else:\n        return false\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp605ek2xf.jl:14\nin expression starting at /tmp/tmp605ek2xf.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \"()\":\n        return true\n    else:\n        return brackets[0] == \"(\" and brackets[-1] == \")\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5hscfray.jl:14\nin expression starting at /tmp/tmp5hscfray.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}